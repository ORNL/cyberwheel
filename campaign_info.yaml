apt_crew: Ke3chang
campaign:
- stage: initial-access
  technique: Exploit Public-Facing Application
  data_components:
  - Network Traffic Content
  - Application Log Content
  description: "Adversaries may attempt to exploit a weakness in an Internet-facing\
    \ host or system to initially access a network. The weakness in the system can\
    \ be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications\
    \ are often websites/web servers, but can also include databases (like SQL), standard\
    \ services (like SMB or SSH), network device administration and management protocols\
    \ (like SNMP and Smart Install), and any other system with Internet accessible\
    \ open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation:\
    \ US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog\
    \ Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being\
    \ exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211).\
    \ \n\nIf an application is hosted on cloud-based infrastructure and/or is containerized,\
    \ then exploiting it may lead to compromise of the underlying instance or container.\
    \ This can allow an adversary a path to access the cloud or container APIs, exploit\
    \ container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611),\
    \ or take advantage of weak identity and access management policies.\n\nAdversaries\
    \ may also exploit edge network infrastructure and related appliances, specifically\
    \ targeting devices that do not support robust host-based defenses.(Citation:\
    \ Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites\
    \ and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based\
    \ vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)"
  kill_chain_phases:
  - initial-access
  data_source_platforms: []
- stage: initial-access
  technique: External Remote Services
  data_components:
  - Logon Session Metadata
  - Application Log Content
  - Network Traffic Content
  - Network Traffic Flow
  - Network Connection Creation
  description: "Adversaries may leverage external-facing remote services to initially\
    \ access and/or persist within a network. Remote services such as VPNs, Citrix,\
    \ and other access mechanisms allow users to connect to internal enterprise network\
    \ resources from external locations. There are often remote service gateways that\
    \ manage connections and credential authentication for these services. Services\
    \ such as [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006)\
    \ and [VNC](https://attack.mitre.org/techniques/T1021/005) can also be used externally.(Citation:\
    \ MacOS VNC software for Remote Desktop)\n\nAccess to [Valid Accounts](https://attack.mitre.org/techniques/T1078)\
    \ to use the service is often a requirement, which could be obtained through credential\
    \ pharming or by obtaining the credentials from users after compromising the enterprise\
    \ network.(Citation: Volexity Virtual Private Keylogging) Access to remote services\
    \ may be used as a redundant or persistent access mechanism during an operation.\n\
    \nAccess may also be gained through an exposed service that doesn\u2019t require\
    \ authentication. In containerized environments, this may include an exposed Docker\
    \ API, Kubernetes API server, kubelet, or web application such as the Kubernetes\
    \ dashboard.(Citation: Trend Micro Exposed Docker Server)(Citation: Unit 42 Hildegard\
    \ Malware)"
  kill_chain_phases:
  - persistence
  - initial-access
  data_source_platforms: []
- stage: execution
  technique: Windows Command Shell
  data_components:
  - Command Execution
  - Process Creation
  description: 'Adversaries may abuse the Windows command shell for execution. The
    Windows command shell ([cmd](https://attack.mitre.org/software/S0106)) is the
    primary command prompt on Windows systems. The Windows command prompt can be used
    to control almost any aspect of a system, with various permission levels required
    for different subsets of commands. The command prompt can be invoked remotely
    via [Remote Services](https://attack.mitre.org/techniques/T1021) such as [SSH](https://attack.mitre.org/techniques/T1021/004).(Citation:
    SSH in Windows)


    Batch files (ex: .bat or .cmd) also provide the shell with a list of sequential
    commands to run, as well as normal scripting operations such as conditionals and
    loops. Common uses of batch files include long or repetitive tasks, or the need
    to run the same set of commands on multiple systems.


    Adversaries may leverage [cmd](https://attack.mitre.org/software/S0106) to execute
    various commands and payloads. Common uses include [cmd](https://attack.mitre.org/software/S0106)
    to execute a single command, or abusing [cmd](https://attack.mitre.org/software/S0106)
    interactively with input and output forwarded over a command and control channel.'
  kill_chain_phases:
  - execution
  data_source_platforms: []
- stage: execution
  technique: Service Execution
  data_components:
  - Process Creation
  - Service Creation
  - Command Execution
  - Windows Registry Key Modification
  description: 'Adversaries may abuse the Windows service control manager to execute
    malicious commands or payloads. The Windows service control manager (<code>services.exe</code>)
    is an interface to manage and manipulate services.(Citation: Microsoft Service
    Control Manager) The service control manager is accessible to users via GUI components
    as well as system utilities such as <code>sc.exe</code> and [Net](https://attack.mitre.org/software/S0039).


    [PsExec](https://attack.mitre.org/software/S0029) can also be used to execute
    commands or payloads via a temporary Windows service created through the service
    control manager API.(Citation: Russinovich Sysinternals) Tools such as [PsExec](https://attack.mitre.org/software/S0029)
    and <code>sc.exe</code> can accept remote servers as arguments and may be used
    to conduct remote execution.


    Adversaries may leverage these mechanisms to execute malicious content. This can
    be done by either executing a new or modified service. This technique is the execution
    used in conjunction with [Windows Service](https://attack.mitre.org/techniques/T1543/003)
    during service persistence or privilege escalation.'
  kill_chain_phases:
  - execution
  data_source_platforms: []
- stage: persistence
  technique: Cloud Accounts
  data_components:
  - Logon Session Metadata
  - Logon Session Creation
  - User Account Authentication
  description: 'Adversaries may obtain and abuse credentials of a cloud account as
    a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense
    Evasion. Cloud accounts are those created and configured by an organization for
    use by users, remote support, services, or for administration of resources within
    a cloud service provider or SaaS application. In some cases, cloud accounts may
    be federated with traditional identity management systems, such as Windows Active
    Directory.(Citation: AWS Identity Federation)(Citation: Google Federating GC)(Citation:
    Microsoft Deploying AD Federation)


    Compromised credentials for cloud accounts can be used to harvest sensitive data
    from online storage accounts and databases. Access to cloud accounts can also
    be abused to gain Initial Access to a network by abusing a [Trusted Relationship](https://attack.mitre.org/techniques/T1199).
    Similar to [Domain Accounts](https://attack.mitre.org/techniques/T1078/002), compromise
    of federated cloud accounts may allow adversaries to more easily move laterally
    within an environment.


    Once a cloud account is compromised, an adversary may perform [Account Manipulation](https://attack.mitre.org/techniques/T1098)
    - for example, by adding [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003)
    - to maintain persistence and potentially escalate their privileges.'
  kill_chain_phases:
  - defense-evasion
  - persistence
  - privilege-escalation
  - initial-access
  data_source_platforms: []
- stage: persistence
  technique: Registry Run Keys / Startup Folder
  data_components:
  - Windows Registry Key Creation
  - Windows Registry Key Modification
  - Command Execution
  - Process Creation
  - File Modification
  description: 'Adversaries may achieve persistence by adding a program to a startup
    folder or referencing it with a Registry run key. Adding an entry to the "run
    keys" in the Registry or startup folder will cause the program referenced to be
    executed when a user logs in.(Citation: Microsoft Run Key) These programs will
    be executed under the context of the user and will have the account''s associated
    permissions level.


    Placing a program within a startup folder will also cause that program to execute
    when a user logs in. There is a startup folder location for individual user accounts
    as well as a system-wide startup folder that will be checked regardless of which
    user account logs in. The startup folder path for the current user is <code>C:\Users\\[Username]\AppData\Roaming\Microsoft\Windows\Start
    Menu\Programs\Startup</code>. The startup folder path for all users is <code>C:\ProgramData\Microsoft\Windows\Start
    Menu\Programs\StartUp</code>.


    The following run keys are created by default on Windows systems:


    * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</code>

    * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce</code>

    * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run</code>

    * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnce</code>


    Run keys may exist under multiple hives.(Citation: Microsoft Wow6432Node 2018)(Citation:
    Malwarebytes Wow6432Node 2016) The <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnceEx</code>
    is also available but is not created by default on Windows Vista and newer. Registry
    run key entries can reference programs directly or list them as a dependency.(Citation:
    Microsoft Run Key) For example, it is possible to load a DLL at logon using a
    "Depend" key with RunOnceEx: <code>reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx\0001\Depend
    /v 1 /d "C:\temp\evil[.]dll"</code> (Citation: Oddvar Moe RunOnceEx Mar 2018)


    The following Registry keys can be used to set startup folder items for persistence:


    * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\User
    Shell Folders</code>

    * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell
    Folders</code>

    * <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell
    Folders</code>

    * <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User
    Shell Folders</code>


    The following Registry keys can control automatic startup of services during boot:


    * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce</code>

    * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce</code>

    * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServices</code>

    * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServices</code>


    Using policy settings to specify startup programs creates corresponding values
    in either of two Registry keys:


    * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run</code>

    * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run</code>


    The Winlogon key controls actions that occur when a user logs on to a computer
    running Windows 7. Most of these actions are under the control of the operating
    system, but you can also add custom actions here. The <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows
    NT\CurrentVersion\Winlogon\Userinit</code> and <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows
    NT\CurrentVersion\Winlogon\Shell</code> subkeys can automatically launch programs.


    Programs listed in the load value of the registry key <code>HKEY_CURRENT_USER\Software\Microsoft\Windows
    NT\CurrentVersion\Windows</code> run when any user logs on.


    By default, the multistring <code>BootExecute</code> value of the registry key
    <code>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager</code>
    is set to <code>autocheck autochk *</code>. This value causes Windows, at startup,
    to check the file-system integrity of the hard disks if the system has been shut
    down abnormally. Adversaries can add other programs or processes to this registry
    value which will automatically launch at boot.


    Adversaries can use these configuration locations to execute malware, such as
    remote access tools, to maintain persistence through system reboots. Adversaries
    may also use [Masquerading](https://attack.mitre.org/techniques/T1036) to make
    the Registry entries look as if they are associated with legitimate programs.'
  kill_chain_phases:
  - persistence
  - privilege-escalation
  data_source_platforms: []
- stage: privilege-escalation
  technique: Windows Service
  data_components:
  - Process Creation
  - Service Modification
  - Windows Registry Key Creation
  - Driver Load
  - Windows Registry Key Modification
  - Service Creation
  - Command Execution
  - OS API Execution
  description: "Adversaries may create or modify Windows services to repeatedly execute\
    \ malicious payloads as part of persistence. When Windows boots up, it starts\
    \ programs or applications called services that perform background system functions.(Citation:\
    \ TechNet Services) Windows service configuration information, including the file\
    \ path to the service's executable or recovery programs/commands, is stored in\
    \ the Windows Registry.\n\nAdversaries may install a new service or modify an\
    \ existing service to execute at startup in order to persist on a system. Service\
    \ configurations can be set or modified using system utilities (such as sc.exe),\
    \ by directly modifying the Registry, or by interacting directly with the Windows\
    \ API. \n\nAdversaries may also use services to install and execute malicious\
    \ drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the\
    \ payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106)\
    \ functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()`\
    \ and `ZwSetValueKey()`), by creating the required service Registry values (i.e.\
    \ [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line\
    \ utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation:\
    \ Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries\
    \ may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s\
    \ to hide the presence of malicious activity on a system. Adversaries may also\
    \ load a signed yet vulnerable driver onto a compromised machine (known as \"\
    Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege\
    \ Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole\
    \ June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with\
    \ administrator privileges but are executed under SYSTEM privileges, so an adversary\
    \ may also use a service to escalate privileges. Adversaries may also directly\
    \ start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\
    \ To make detection analysis more challenging, malicious services may also incorporate\
    \ [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004)\
    \ (ex: using a service and/or payload name related to a legitimate OS or benign\
    \ software component)."
  kill_chain_phases:
  - persistence
  - privilege-escalation
  data_source_platforms: []
- stage: privilege-escalation
  technique: Registry Run Keys / Startup Folder
  data_components:
  - Windows Registry Key Creation
  - Windows Registry Key Modification
  - Command Execution
  - Process Creation
  - File Modification
  description: 'Adversaries may achieve persistence by adding a program to a startup
    folder or referencing it with a Registry run key. Adding an entry to the "run
    keys" in the Registry or startup folder will cause the program referenced to be
    executed when a user logs in.(Citation: Microsoft Run Key) These programs will
    be executed under the context of the user and will have the account''s associated
    permissions level.


    Placing a program within a startup folder will also cause that program to execute
    when a user logs in. There is a startup folder location for individual user accounts
    as well as a system-wide startup folder that will be checked regardless of which
    user account logs in. The startup folder path for the current user is <code>C:\Users\\[Username]\AppData\Roaming\Microsoft\Windows\Start
    Menu\Programs\Startup</code>. The startup folder path for all users is <code>C:\ProgramData\Microsoft\Windows\Start
    Menu\Programs\StartUp</code>.


    The following run keys are created by default on Windows systems:


    * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</code>

    * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce</code>

    * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run</code>

    * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnce</code>


    Run keys may exist under multiple hives.(Citation: Microsoft Wow6432Node 2018)(Citation:
    Malwarebytes Wow6432Node 2016) The <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnceEx</code>
    is also available but is not created by default on Windows Vista and newer. Registry
    run key entries can reference programs directly or list them as a dependency.(Citation:
    Microsoft Run Key) For example, it is possible to load a DLL at logon using a
    "Depend" key with RunOnceEx: <code>reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx\0001\Depend
    /v 1 /d "C:\temp\evil[.]dll"</code> (Citation: Oddvar Moe RunOnceEx Mar 2018)


    The following Registry keys can be used to set startup folder items for persistence:


    * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\User
    Shell Folders</code>

    * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell
    Folders</code>

    * <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell
    Folders</code>

    * <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User
    Shell Folders</code>


    The following Registry keys can control automatic startup of services during boot:


    * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce</code>

    * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce</code>

    * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServices</code>

    * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServices</code>


    Using policy settings to specify startup programs creates corresponding values
    in either of two Registry keys:


    * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run</code>

    * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run</code>


    The Winlogon key controls actions that occur when a user logs on to a computer
    running Windows 7. Most of these actions are under the control of the operating
    system, but you can also add custom actions here. The <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows
    NT\CurrentVersion\Winlogon\Userinit</code> and <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows
    NT\CurrentVersion\Winlogon\Shell</code> subkeys can automatically launch programs.


    Programs listed in the load value of the registry key <code>HKEY_CURRENT_USER\Software\Microsoft\Windows
    NT\CurrentVersion\Windows</code> run when any user logs on.


    By default, the multistring <code>BootExecute</code> value of the registry key
    <code>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager</code>
    is set to <code>autocheck autochk *</code>. This value causes Windows, at startup,
    to check the file-system integrity of the hard disks if the system has been shut
    down abnormally. Adversaries can add other programs or processes to this registry
    value which will automatically launch at boot.


    Adversaries can use these configuration locations to execute malware, such as
    remote access tools, to maintain persistence through system reboots. Adversaries
    may also use [Masquerading](https://attack.mitre.org/techniques/T1036) to make
    the Registry entries look as if they are associated with legitimate programs.'
  kill_chain_phases:
  - persistence
  - privilege-escalation
  data_source_platforms: []
- stage: defense-evasion
  technique: Valid Accounts
  data_components:
  - Logon Session Creation
  - User Account Authentication
  - Logon Session Metadata
  description: 'Adversaries may obtain and abuse credentials of existing accounts
    as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense
    Evasion. Compromised credentials may be used to bypass access controls placed
    on various resources on systems within the network and may even be used for persistent
    access to remote systems and externally available services, such as VPNs, Outlook
    Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW)
    Compromised credentials may also grant an adversary increased privilege to specific
    systems or access to restricted areas of the network. Adversaries may choose not
    to use malware or tools in conjunction with the legitimate access those credentials
    provide to make it harder to detect their presence.


    In some cases, adversaries may abuse inactive accounts: for example, those belonging
    to individuals who are no longer part of an organization. Using these accounts
    may allow the adversary to evade detection, as the original account user will
    not be present to identify any anomalous activity taking place on their account.(Citation:
    CISA MFA PrintNightmare)


    The overlap of permissions for local, domain, and cloud accounts across a network
    of systems is of concern because the adversary may be able to pivot across accounts
    and systems to reach a high level of access (i.e., domain or enterprise administrator)
    to bypass access controls set within the enterprise.(Citation: TechNet Credential
    Theft)'
  kill_chain_phases:
  - defense-evasion
  - persistence
  - privilege-escalation
  - initial-access
  data_source_platforms: []
- stage: defense-evasion
  technique: Right-to-Left Override
  data_components:
  - File Metadata
  description: 'Adversaries may abuse the right-to-left override (RTLO or RLO) character
    (U+202E) to disguise a string and/or file name to make it appear benign. RTLO
    is a non-printing Unicode character that causes the text that follows it to be
    displayed in reverse. For example, a Windows screensaver executable named <code>March
    25 \u202Excod.scr</code> will display as <code>March 25 rcs.docx</code>. A JavaScript
    file named <code>photo_high_re\u202Egnp.js</code> will be displayed as <code>photo_high_resj.png</code>.(Citation:
    Infosecinstitute RTLO Technique)


    Adversaries may abuse the RTLO character as a means of tricking a user into executing
    what they think is a benign file type. A common use of this technique is with
    [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001)/[Malicious
    File](https://attack.mitre.org/techniques/T1204/002) since it can trick both end
    users and defenders if they are not aware of how their tools display and render
    the RTLO character. Use of the RTLO character has been seen in many targeted intrusion
    attempts and criminal activity.(Citation: Trend Micro PLEAD RTLO)(Citation: Kaspersky
    RTLO Cyber Crime) RTLO can be used in the Windows Registry as well, where regedit.exe
    displays the reversed characters but the command line tool reg.exe does not by
    default.'
  kill_chain_phases:
  - defense-evasion
  data_source_platforms: []
- stage: credential-access
  technique: Keylogging
  data_components:
  - OS API Execution
  - Windows Registry Key Modification
  - Driver Load
  description: 'Adversaries may log user keystrokes to intercept credentials as the
    user types them. Keylogging is likely to be used to acquire credentials for new
    access opportunities when [OS Credential Dumping](https://attack.mitre.org/techniques/T1003)
    efforts are not effective, and may require an adversary to intercept keystrokes
    on a system for a substantial period of time before credentials can be successfully
    captured.


    Keylogging is the most prevalent type of input capture, with many different ways
    of intercepting keystrokes.(Citation: Adventures of a Keystroke) Some methods
    include:


    * Hooking API callbacks used for processing keystrokes. Unlike [Credential API
    Hooking](https://attack.mitre.org/techniques/T1056/004), this focuses solely on
    API functions intended for processing keystroke data.

    * Reading raw keystroke data from the hardware buffer.

    * Windows Registry modifications.

    * Custom drivers.

    * [Modify System Image](https://attack.mitre.org/techniques/T1601) may provide
    adversaries with hooks into the operating system of network devices to read raw
    keystrokes for login sessions.(Citation: Cisco Blog Legacy Device Attacks) '
  kill_chain_phases:
  - collection
  - credential-access
  data_source_platforms: []
- stage: credential-access
  technique: Security Account Manager
  data_components:
  - File Access
  - Command Execution
  - Windows Registry Key Access
  description: "Adversaries may attempt to extract credential material from the Security\
    \ Account Manager (SAM) database either through in-memory techniques or through\
    \ the Windows Registry where the SAM database is stored. The SAM is a database\
    \ file that contains local accounts for the host, typically those found with the\
    \ <code>net user</code> command. Enumerating the SAM database requires SYSTEM\
    \ level access.\n\nA number of tools can be used to retrieve the SAM file through\
    \ in-memory techniques:\n\n* pwdumpx.exe\n* [gsecdump](https://attack.mitre.org/software/S0008)\n\
    * [Mimikatz](https://attack.mitre.org/software/S0002)\n* secretsdump.py\n\nAlternatively,\
    \ the SAM can be extracted from the Registry with Reg:\n\n* <code>reg save HKLM\\\
    sam sam</code>\n* <code>reg save HKLM\\system system</code>\n\nCreddump7 can then\
    \ be used to process the SAM database locally to retrieve hashes.(Citation: GitHub\
    \ Creddump7)\n\nNotes: \n\n* RID 500 account is the local, built-in administrator.\n\
    * RID 501 is the guest account.\n* User accounts start with a RID of 1,000+.\n"
  kill_chain_phases:
  - credential-access
  data_source_platforms: []
- stage: discovery
  technique: File and Directory Discovery
  data_components:
  - OS API Execution
  - Process Creation
  - Command Execution
  description: 'Adversaries may enumerate files and directories or may search in specific
    locations of a host or network share for certain information within a file system.
    Adversaries may use the information from [File and Directory Discovery](https://attack.mitre.org/techniques/T1083)
    during automated discovery to shape follow-on behaviors, including whether or
    not the adversary fully infects the target and/or attempts specific actions.


    Many command shell utilities can be used to obtain this information. Examples
    include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>,
    and <code>locate</code>.(Citation: Windows Commands JPCERT) Custom tools may also
    be used to gather file and directory information and interact with the [Native
    API](https://attack.mitre.org/techniques/T1106). Adversaries may also leverage
    a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network
    devices to gather file and directory information (e.g. <code>dir</code>, <code>show
    flash</code>, and/or <code>nvram</code>).(Citation: US-CERT-TA18-106A)'
  kill_chain_phases:
  - discovery
  data_source_platforms: []
- stage: discovery
  technique: System Service Discovery
  data_components:
  - OS API Execution
  - Command Execution
  - Process Creation
  description: 'Adversaries may try to gather information about registered local system
    services. Adversaries may obtain information about services using tools as well
    as OS utility commands such as <code>sc query</code>, <code>tasklist /svc</code>,
    <code>systemctl --type=service</code>, and <code>net start</code>.


    Adversaries may use the information from [System Service Discovery](https://attack.mitre.org/techniques/T1007)
    during automated discovery to shape follow-on behaviors, including whether or
    not the adversary fully infects the target and/or attempts specific actions.'
  kill_chain_phases:
  - discovery
  data_source_platforms: []
- stage: collection
  technique: Archive Collected Data
  data_components:
  - Command Execution
  - File Creation
  - Process Creation
  - Script Execution
  description: 'An adversary may compress and/or encrypt data that is collected prior
    to exfiltration. Compressing the data can help to obfuscate the collected data
    and minimize the amount of data sent over the network. Encryption can be used
    to hide information that is being exfiltrated from detection or make exfiltration
    less conspicuous upon inspection by a defender.


    Both compression and encryption are done prior to exfiltration, and can be performed
    using a utility, 3rd party library, or custom method.'
  kill_chain_phases:
  - collection
  data_source_platforms: []
- stage: collection
  technique: Data from Local System
  data_components:
  - Process Creation
  - Command Execution
  - File Access
  - Script Execution
  - OS API Execution
  description: 'Adversaries may search local system sources, such as file systems
    and configuration files or local databases, to find files of interest and sensitive
    data prior to Exfiltration.


    Adversaries may do this using a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059),
    such as [cmd](https://attack.mitre.org/software/S0106) as well as a [Network Device
    CLI](https://attack.mitre.org/techniques/T1059/008), which have functionality
    to interact with the file system to gather information.(Citation: show_run_config_cmd_cisco)
    Adversaries may also use [Automated Collection](https://attack.mitre.org/techniques/T1119)
    on the local system.

    '
  kill_chain_phases:
  - collection
  data_source_platforms: []
- stage: exfiltration
  technique: Exfiltration Over C2 Channel
  data_components:
  - Network Traffic Content
  - Network Traffic Flow
  - File Access
  - Network Connection Creation
  - Command Execution
  description: Adversaries may steal data by exfiltrating it over an existing command
    and control channel. Stolen data is encoded into the normal communications channel
    using the same protocol as command and control communications.
  kill_chain_phases:
  - exfiltration
  data_source_platforms: []
- stage: exfiltration
  technique: Automated Exfiltration
  data_components:
  - Network Connection Creation
  - Network Traffic Flow
  - Network Traffic Content
  - Command Execution
  - File Access
  - Script Execution
  description: "Adversaries may exfiltrate data, such as sensitive documents, through\
    \ the use of automated processing after being gathered during Collection. \n\n\
    When automated exfiltration is used, other exfiltration techniques likely apply\
    \ as well to transfer the information out of the network, such as [Exfiltration\
    \ Over C2 Channel](https://attack.mitre.org/techniques/T1041) and [Exfiltration\
    \ Over Alternative Protocol](https://attack.mitre.org/techniques/T1048)."
  kill_chain_phases:
  - exfiltration
  data_source_platforms: []
